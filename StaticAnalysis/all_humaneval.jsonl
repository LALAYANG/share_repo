
{"humaneval_id": "HumanEval_13__1", "python_file": "HumanEval_13__1/main.py", "input_file": "HumanEval_13__1/input.txt", "prime_paths_nodes": [["4", "3", "5"], ["1", "8", "3", "4"], ["1", "8", "3", "5"]], "prime_paths_statements": [["a, b = b, a % b\\l", "while b:\\l", "return a\\l"], ["from typing import *\\ldef greatest_common_divisor(a: int, b: int) ->int:...\\lgreatest_common_divisor(144, 60)\\l", "greatest_common_divisor", "while b:\\l", "a, b = b, a % b\\l"], ["from typing import *\\ldef greatest_common_divisor(a: int, b: int) ->int:...\\lgreatest_common_divisor(144, 60)\\l", "greatest_common_divisor", "while b:\\l", "return a\\l"]], "prime_paths_linenumbers": [[6, 5, 7], [1, 9, 5, 6], [1, 9, 5, 7]], "covered_statements_linenumbers": [1, 4, 5, 6, 7, 9], "missing_statements_linenumbers": [], "covered_prime_paths_linenumbers": [[6, 5, 7], [1, 9, 5, 6], [1, 9, 5, 7]], "missing_prime_paths_linenumbers": [], "num_total_prime_paths": 3, "num_covered_paths": 3, "prime_path_coverage": 1.0, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_13__1_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_13__1_CFG.dot"}
{"humaneval_id": "HumanEval_7__0", "python_file": "HumanEval_7__0/main.py", "input_file": "HumanEval_7__0/input.txt", "prime_paths_nodes": [["1", "6", "3"]], "prime_paths_statements": [["from typing import *\\ldef filter_by_substring(strings: List[str], substring: str) ->List[str]:...\\lfilter_by_substring(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\\l", "filter_by_substring", "return [x for x in strings if substring in x]\\l"]], "prime_paths_linenumbers": [[1, 7, 5]], "covered_statements_linenumbers": [1, 4, 5, 7], "missing_statements_linenumbers": [], "covered_prime_paths_linenumbers": [[1, 7, 5]], "missing_prime_paths_linenumbers": [], "num_total_prime_paths": 1, "num_covered_paths": 1, "prime_path_coverage": 1.0, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_7__0_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_7__0_CFG.dot"}
{"humaneval_id": "HumanEval_36__0", "python_file": "HumanEval_36__0/main.py", "input_file": "HumanEval_36__0/input.txt", "prime_paths_nodes": [["6", "4", "7", "14", "15"], ["6", "8", "4", "7", "14", "15"], ["6", "4", "7", "14", "16"], ["6", "8", "4", "7", "14", "16"], ["8", "4", "6"], ["15", "14", "16"], ["1", "19", "3", "4", "6", "8"], ["1", "19", "3", "4", "7", "14", "15"], ["1", "19", "3", "4", "7", "14", "16"]], "prime_paths_statements": [["if i % 11 == 0 or i % 13 == 0:\\l", "for i in range(n):\\l", "s = ''.join(list(map(str, ns)))\\lans = 0\\l", "for c in s:\\l", "ans += c == '7'\\l"], ["if i % 11 == 0 or i % 13 == 0:\\l", "ns.append(i)\\l", "for i in range(n):\\l", "s = ''.join(list(map(str, ns)))\\lans = 0\\l", "for c in s:\\l", "ans += c == '7'\\l"], ["if i % 11 == 0 or i % 13 == 0:\\l", "for i in range(n):\\l", "s = ''.join(list(map(str, ns)))\\lans = 0\\l", "for c in s:\\l", "return ans\\l"], ["if i % 11 == 0 or i % 13 == 0:\\l", "ns.append(i)\\l", "for i in range(n):\\l", "s = ''.join(list(map(str, ns)))\\lans = 0\\l", "for c in s:\\l", "return ans\\l"], ["ns.append(i)\\l", "for i in range(n):\\l", "if i % 11 == 0 or i % 13 == 0:\\l"], ["ans += c == '7'\\l", "for c in s:\\l", "return ans\\l"], ["from typing import *\\ldef fizz_buzz(n: int):...\\lfizz_buzz(100000)\\l", "fizz_buzz", "ns = []\\l", "for i in range(n):\\l", "if i % 11 == 0 or i % 13 == 0:\\l", "ns.append(i)\\l"], ["from typing import *\\ldef fizz_buzz(n: int):...\\lfizz_buzz(100000)\\l", "fizz_buzz", "ns = []\\l", "for i in range(n):\\l", "s = ''.join(list(map(str, ns)))\\lans = 0\\l", "for c in s:\\l", "ans += c == '7'\\l"], ["from typing import *\\ldef fizz_buzz(n: int):...\\lfizz_buzz(100000)\\l", "fizz_buzz", "ns = []\\l", "for i in range(n):\\l", "s = ''.join(list(map(str, ns)))\\lans = 0\\l", "for c in s:\\l", "return ans\\l"]], "prime_paths_linenumbers": [[7, 6, 9, 10, 11, 12], [7, 8, 6, 9, 10, 11, 12], [7, 6, 9, 10, 11, 13], [7, 8, 6, 9, 10, 11, 13], [8, 6, 7], [12, 11, 13], [1, 15, 5, 6, 7, 8], [1, 15, 5, 6, 9, 10, 11, 12], [1, 15, 5, 6, 9, 10, 11, 13]], "covered_statements_linenumbers": [1, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15], "missing_statements_linenumbers": [], "covered_prime_paths_linenumbers": [[7, 6, 9, 10, 11, 12], [7, 8, 6, 9, 10, 11, 12], [7, 6, 9, 10, 11, 13], [7, 8, 6, 9, 10, 11, 13], [8, 6, 7], [12, 11, 13], [1, 15, 5, 6, 7, 8], [1, 15, 5, 6, 9, 10, 11, 12], [1, 15, 5, 6, 9, 10, 11, 13]], "missing_prime_paths_linenumbers": [], "num_total_prime_paths": 9, "num_covered_paths": 9, "prime_path_coverage": 1.0, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_36__0_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_36__0_CFG.dot"}
{"humaneval_id": "HumanEval_31__0", "python_file": "HumanEval_31__0/main.py", "input_file": "HumanEval_31__0/input.txt", "prime_paths_nodes": [["8", "5", "9"], ["1", "15", "3", "4"], ["1", "15", "3", "5", "9"], ["1", "15", "3", "5", "8", "10"]], "prime_paths_statements": [["if n % k == 0:\\l", "for k in range(2, n - 1):\\l", "return True\\l"], ["from typing import *\\ldef is_prime(n):...\\lis_prime(5 * 17)\\l", "is_prime", "if n < 2:\\l", "return False\\l"], ["from typing import *\\ldef is_prime(n):...\\lis_prime(5 * 17)\\l", "is_prime", "if n < 2:\\l", "for k in range(2, n - 1):\\l", "return True\\l"], ["from typing import *\\ldef is_prime(n):...\\lis_prime(5 * 17)\\l", "is_prime", "if n < 2:\\l", "for k in range(2, n - 1):\\l", "if n % k == 0:\\l", "return False\\l"]], "prime_paths_linenumbers": [[8, 7, 10], [1, 12, 5, 6], [1, 12, 5, 7, 10], [1, 12, 5, 7, 8, 9]], "covered_statements_linenumbers": [1, 4, 5, 7, 8, 9, 12], "missing_statements_linenumbers": [6, 10], "covered_prime_paths_linenumbers": [[1, 12, 5, 7, 8, 9]], "missing_prime_paths_linenumbers": [[8, 7, 10], [1, 12, 5, 6], [1, 12, 5, 7, 10]], "num_total_prime_paths": 4, "num_covered_paths": 1, "prime_path_coverage": 0.25, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_31__0_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_31__0_CFG.dot"}
{"humaneval_id": "HumanEval_102__1", "python_file": "HumanEval_102__1/main.py", "input_file": "HumanEval_102__1/input.txt", "prime_paths_nodes": [["1", "15", "3", "4"], ["1", "15", "3", "5", "7"], ["1", "15", "3", "5", "8", "10"], ["1", "15", "3", "5", "8", "11"]], "prime_paths_statements": [["from typing import *\\ldef choose_num(x, y):...\\lchoose_num(33, 12354)\\l", "choose_num", "if x > y:\\l", "return -1\\l"], ["from typing import *\\ldef choose_num(x, y):...\\lchoose_num(33, 12354)\\l", "choose_num", "if x > y:\\l", "if y % 2 == 0:\\l", "return y\\l"], ["from typing import *\\ldef choose_num(x, y):...\\lchoose_num(33, 12354)\\l", "choose_num", "if x > y:\\l", "if y % 2 == 0:\\l", "if x == y:\\l", "return -1\\l"], ["from typing import *\\ldef choose_num(x, y):...\\lchoose_num(33, 12354)\\l", "choose_num", "if x > y:\\l", "if y % 2 == 0:\\l", "if x == y:\\l", "return y - 1\\l"]], "prime_paths_linenumbers": [[1, 13, 5, 6], [1, 13, 5, 7, 8], [1, 13, 5, 7, 9, 10], [1, 13, 5, 7, 9, 11]], "covered_statements_linenumbers": [1, 4, 5, 7, 8, 13], "missing_statements_linenumbers": [6, 9, 10, 11], "covered_prime_paths_linenumbers": [[1, 13, 5, 7, 8]], "missing_prime_paths_linenumbers": [[1, 13, 5, 6], [1, 13, 5, 7, 9, 10], [1, 13, 5, 7, 9, 11]], "num_total_prime_paths": 4, "num_covered_paths": 1, "prime_path_coverage": 0.25, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_102__1_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_102__1_CFG.dot"}
{"humaneval_id": "HumanEval_155__0", "python_file": "HumanEval_155__0/main.py", "input_file": "HumanEval_155__0/input.txt", "prime_paths_nodes": [["7", "10", "4", "8"], ["7", "12", "4", "8"], ["10", "4", "7", "12"], ["12", "4", "7", "10"], ["1", "15", "3", "4", "8"], ["1", "15", "3", "4", "7", "10"], ["1", "15", "3", "4", "7", "12"]], "prime_paths_statements": [["if int(i) % 2 == 0:\\l", "even_count += 1\\l", "for i in str(abs(num)):\\l", "return even_count, odd_count\\l"], ["if int(i) % 2 == 0:\\l", "odd_count += 1\\l", "for i in str(abs(num)):\\l", "return even_count, odd_count\\l"], ["even_count += 1\\l", "for i in str(abs(num)):\\l", "if int(i) % 2 == 0:\\l", "odd_count += 1\\l"], ["odd_count += 1\\l", "for i in str(abs(num)):\\l", "if int(i) % 2 == 0:\\l", "even_count += 1\\l"], ["from typing import *\\ldef even_odd_count(num):...\\leven_odd_count(-345821)\\l", "even_odd_count", "even_count = 0\\lodd_count = 0\\l", "for i in str(abs(num)):\\l", "return even_count, odd_count\\l"], ["from typing import *\\ldef even_odd_count(num):...\\leven_odd_count(-345821)\\l", "even_odd_count", "even_count = 0\\lodd_count = 0\\l", "for i in str(abs(num)):\\l", "if int(i) % 2 == 0:\\l", "even_count += 1\\l"], ["from typing import *\\ldef even_odd_count(num):...\\leven_odd_count(-345821)\\l", "even_odd_count", "even_count = 0\\lodd_count = 0\\l", "for i in str(abs(num)):\\l", "if int(i) % 2 == 0:\\l", "odd_count += 1\\l"]], "prime_paths_linenumbers": [[8, 9, 7, 12], [8, 11, 7, 12], [9, 7, 8, 11], [11, 7, 8, 9], [1, 14, 5, 6, 7, 12], [1, 14, 5, 6, 7, 8, 9], [1, 14, 5, 6, 7, 8, 11]], "covered_statements_linenumbers": [1, 4, 5, 6, 7, 8, 9, 11, 12, 14], "missing_statements_linenumbers": [], "covered_prime_paths_linenumbers": [[8, 9, 7, 12], [8, 11, 7, 12], [9, 7, 8, 11], [11, 7, 8, 9], [1, 14, 5, 6, 7, 12], [1, 14, 5, 6, 7, 8, 9], [1, 14, 5, 6, 7, 8, 11]], "missing_prime_paths_linenumbers": [], "num_total_prime_paths": 7, "num_covered_paths": 7, "prime_path_coverage": 1.0, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_155__0_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_155__0_CFG.dot"}
{"humaneval_id": "HumanEval_59__1", "python_file": "HumanEval_59__1/main.py", "input_file": "HumanEval_59__1/input.txt", "prime_paths_nodes": [["5", "6"], ["5", "7", "11"], ["5", "7", "10", "12"], ["10", "7", "11"], ["19", "17", "20"], ["19", "21", "17", "20"], ["21", "17", "19"], ["1", "26", "3", "17", "20"], ["1", "26", "3", "17", "19", "21"]], "prime_paths_statements": [["if k < 2:\\l", "return False\\l"], ["if k < 2:\\l", "for i in range(2, k - 1):\\l", "return True\\l"], ["if k < 2:\\l", "for i in range(2, k - 1):\\l", "if k % i == 0:\\l", "return False\\l"], ["if k % i == 0:\\l", "for i in range(2, k - 1):\\l", "return True\\l"], ["if n % j == 0 and is_prime(j):\\l", "for j in range(2, n + 1):\\l", "return largest\\l"], ["if n % j == 0 and is_prime(j):\\l", "largest = max(largest, j)\\l", "for j in range(2, n + 1):\\l", "return largest\\l"], ["largest = max(largest, j)\\l", "for j in range(2, n + 1):\\l", "if n % j == 0 and is_prime(j):\\l"], ["from typing import *\\ldef largest_prime_factor(n: int):...\\llargest_prime_factor(63)\\l", "largest_prime_factor", "def is_prime(k):...\\llargest = 1\\l", "for j in range(2, n + 1):\\l", "return largest\\l"], ["from typing import *\\ldef largest_prime_factor(n: int):...\\llargest_prime_factor(63)\\l", "largest_prime_factor", "def is_prime(k):...\\llargest = 1\\l", "for j in range(2, n + 1):\\l", "if n % j == 0 and is_prime(j):\\l", "largest = max(largest, j)\\l"]], "prime_paths_linenumbers": [[6, 7], [6, 8, 11], [6, 8, 9, 10], [9, 8, 11], [14, 13, 16], [14, 15, 13, 16], [15, 13, 14], [1, 18, 5, 12, 13, 16], [1, 18, 5, 12, 13, 14, 15]], "covered_statements_linenumbers": [1, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18], "missing_statements_linenumbers": [7], "covered_prime_paths_linenumbers": [[6, 8, 11], [6, 8, 9, 10], [9, 8, 11], [14, 13, 16], [14, 15, 13, 16], [15, 13, 14], [1, 18, 5, 12, 13, 16], [1, 18, 5, 12, 13, 14, 15]], "missing_prime_paths_linenumbers": [[6, 7]], "num_total_prime_paths": 9, "num_covered_paths": 8, "prime_path_coverage": 0.89, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_59__1_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_59__1_CFG.dot"}
{"humaneval_id": "HumanEval_87", "python_file": "HumanEval_87/main.py", "input_file": "HumanEval_87/input.txt", "prime_paths_nodes": [["1", "11", "3", "8"]], "prime_paths_statements": [["from typing import *\\ldef get_row(lst, x):...\\lget_row([], 1)\\l", "get_row", "coords = [(i, j) for i in range(len(lst)) for j in range(len(lst[i])) if \\l    lst[i][j] == x]\\l", "return sorted(sorted(coords, key=lambda x: x[1], reverse=True), key=lambda\\l    x: x[0])\\l"]], "prime_paths_linenumbers": [[1, 6, 3, 4]], "covered_statements_linenumbers": [1, 2, 3, 4, 6], "missing_statements_linenumbers": [], "covered_prime_paths_linenumbers": [[1, 6, 3, 4]], "missing_prime_paths_linenumbers": [], "num_total_prime_paths": 1, "num_covered_paths": 1, "prime_path_coverage": 1.0, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_87_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_87_CFG.dot"}
{"humaneval_id": "HumanEval_99__0", "python_file": "HumanEval_99__0/main.py", "input_file": "HumanEval_99__0/input.txt", "prime_paths_nodes": [["8", "6", "7", "11", "12", "21", "13"], ["8", "6", "7", "11", "12", "23", "13"], ["8", "6", "7", "11", "14", "16", "13"], ["8", "6", "7", "11", "14", "18", "13"], ["1", "28", "3", "4", "6", "8"], ["1", "28", "3", "4", "6", "7", "11", "12", "21", "13"], ["1", "28", "3", "4", "6", "7", "11", "12", "23", "13"], ["1", "28", "3", "4", "6", "7", "11", "14", "16", "13"], ["1", "28", "3", "4", "6", "7", "11", "14", "18", "13"], ["1", "28", "3", "4", "7", "11", "12", "21", "13"], ["1", "28", "3", "4", "7", "11", "12", "23", "13"], ["1", "28", "3", "4", "7", "11", "14", "16", "13"], ["1", "28", "3", "4", "7", "11", "14", "18", "13"]], "prime_paths_statements": [["value = value[:-1]\\l", "while value[-1] == '0':\\l", "num = float(value)\\l", "if value[-2:] == '.5':\\l", "if num > 0:\\l", "res = ceil(num)\\l", "return res\\l"], ["value = value[:-1]\\l", "while value[-1] == '0':\\l", "num = float(value)\\l", "if value[-2:] == '.5':\\l", "if num > 0:\\l", "res = floor(num)\\l", "return res\\l"], ["value = value[:-1]\\l", "while value[-1] == '0':\\l", "num = float(value)\\l", "if value[-2:] == '.5':\\l", "if len(value) > 0:\\l", "res = int(round(num))\\l", "return res\\l"], ["value = value[:-1]\\l", "while value[-1] == '0':\\l", "num = float(value)\\l", "if value[-2:] == '.5':\\l", "if len(value) > 0:\\l", "res = 0\\l", "return res\\l"], ["from typing import *\\ldef closest_integer(value):...\\lclosest_integer('14.5')\\l", "closest_integer", "from math import floor, ceil\\l", "if value.count('.') == 1:\\l", "while value[-1] == '0':\\l", "value = value[:-1]\\l"], ["from typing import *\\ldef closest_integer(value):...\\lclosest_integer('14.5')\\l", "closest_integer", "from math import floor, ceil\\l", "if value.count('.') == 1:\\l", "while value[-1] == '0':\\l", "num = float(value)\\l", "if value[-2:] == '.5':\\l", "if num > 0:\\l", "res = ceil(num)\\l", "return res\\l"], ["from typing import *\\ldef closest_integer(value):...\\lclosest_integer('14.5')\\l", "closest_integer", "from math import floor, ceil\\l", "if value.count('.') == 1:\\l", "while value[-1] == '0':\\l", "num = float(value)\\l", "if value[-2:] == '.5':\\l", "if num > 0:\\l", "res = floor(num)\\l", "return res\\l"], ["from typing import *\\ldef closest_integer(value):...\\lclosest_integer('14.5')\\l", "closest_integer", "from math import floor, ceil\\l", "if value.count('.') == 1:\\l", "while value[-1] == '0':\\l", "num = float(value)\\l", "if value[-2:] == '.5':\\l", "if len(value) > 0:\\l", "res = int(round(num))\\l", "return res\\l"], ["from typing import *\\ldef closest_integer(value):...\\lclosest_integer('14.5')\\l", "closest_integer", "from math import floor, ceil\\l", "if value.count('.') == 1:\\l", "while value[-1] == '0':\\l", "num = float(value)\\l", "if value[-2:] == '.5':\\l", "if len(value) > 0:\\l", "res = 0\\l", "return res\\l"], ["from typing import *\\ldef closest_integer(value):...\\lclosest_integer('14.5')\\l", "closest_integer", "from math import floor, ceil\\l", "if value.count('.') == 1:\\l", "num = float(value)\\l", "if value[-2:] == '.5':\\l", "if num > 0:\\l", "res = ceil(num)\\l", "return res\\l"], ["from typing import *\\ldef closest_integer(value):...\\lclosest_integer('14.5')\\l", "closest_integer", "from math import floor, ceil\\l", "if value.count('.') == 1:\\l", "num = float(value)\\l", "if value[-2:] == '.5':\\l", "if num > 0:\\l", "res = floor(num)\\l", "return res\\l"], ["from typing import *\\ldef closest_integer(value):...\\lclosest_integer('14.5')\\l", "closest_integer", "from math import floor, ceil\\l", "if value.count('.') == 1:\\l", "num = float(value)\\l", "if value[-2:] == '.5':\\l", "if len(value) > 0:\\l", "res = int(round(num))\\l", "return res\\l"], ["from typing import *\\ldef closest_integer(value):...\\lclosest_integer('14.5')\\l", "closest_integer", "from math import floor, ceil\\l", "if value.count('.') == 1:\\l", "num = float(value)\\l", "if value[-2:] == '.5':\\l", "if len(value) > 0:\\l", "res = 0\\l", "return res\\l"]], "prime_paths_linenumbers": [[10, 9, 12, 13, 14, 15, 23], [10, 9, 12, 13, 14, 17, 23], [10, 9, 12, 13, 18, 19, 23], [10, 9, 12, 13, 18, 21, 23], [1, 25, 5, 7, 9, 10], [1, 25, 5, 7, 9, 12, 13, 14, 15, 23], [1, 25, 5, 7, 9, 12, 13, 14, 17, 23], [1, 25, 5, 7, 9, 12, 13, 18, 19, 23], [1, 25, 5, 7, 9, 12, 13, 18, 21, 23], [1, 25, 5, 7, 12, 13, 14, 15, 23], [1, 25, 5, 7, 12, 13, 14, 17, 23], [1, 25, 5, 7, 12, 13, 18, 19, 23], [1, 25, 5, 7, 12, 13, 18, 21, 23]], "covered_statements_linenumbers": [1, 4, 5, 7, 9, 12, 13, 14, 15, 23, 25], "missing_statements_linenumbers": [10, 17, 18, 19, 21], "covered_prime_paths_linenumbers": [[1, 25, 5, 7, 9, 12, 13, 14, 15, 23], [1, 25, 5, 7, 12, 13, 14, 15, 23]], "missing_prime_paths_linenumbers": [[10, 9, 12, 13, 14, 15, 23], [10, 9, 12, 13, 14, 17, 23], [10, 9, 12, 13, 18, 19, 23], [10, 9, 12, 13, 18, 21, 23], [1, 25, 5, 7, 9, 10], [1, 25, 5, 7, 9, 12, 13, 14, 17, 23], [1, 25, 5, 7, 9, 12, 13, 18, 19, 23], [1, 25, 5, 7, 9, 12, 13, 18, 21, 23], [1, 25, 5, 7, 12, 13, 14, 17, 23], [1, 25, 5, 7, 12, 13, 18, 19, 23], [1, 25, 5, 7, 12, 13, 18, 21, 23]], "num_total_prime_paths": 13, "num_covered_paths": 2, "prime_path_coverage": 0.15, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_99__0_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_99__0_CFG.dot"}
{"humaneval_id": "HumanEval_101", "python_file": "HumanEval_101/main.py", "input_file": "HumanEval_101/input.txt", "prime_paths_nodes": [["8", "10", "7", "9", "16"], ["8", "12", "7", "9", "16"], ["10", "7", "8", "12"], ["12", "7", "8", "10"], ["1", "19", "3", "4"], ["1", "19", "3", "5", "7", "8", "10"], ["1", "19", "3", "5", "7", "8", "12"], ["1", "19", "3", "5", "7", "9", "16"]], "prime_paths_statements": [["if letter == ',':\\l", "s_list.append(' ')\\l", "for letter in s:\\l", "s_list = ''.join(s_list)\\l", "return s_list.split()\\l"], ["if letter == ',':\\l", "s_list.append(letter)\\l", "for letter in s:\\l", "s_list = ''.join(s_list)\\l", "return s_list.split()\\l"], ["s_list.append(' ')\\l", "for letter in s:\\l", "if letter == ',':\\l", "s_list.append(letter)\\l"], ["s_list.append(letter)\\l", "for letter in s:\\l", "if letter == ',':\\l", "s_list.append(' ')\\l"], ["from typing import *\\ldef words_string(s):...\\lwords_string('Hi, my name is John')\\l", "words_string", "if not s:\\l", "return []\\l"], ["from typing import *\\ldef words_string(s):...\\lwords_string('Hi, my name is John')\\l", "words_string", "if not s:\\l", "s_list = []\\l", "for letter in s:\\l", "if letter == ',':\\l", "s_list.append(' ')\\l"], ["from typing import *\\ldef words_string(s):...\\lwords_string('Hi, my name is John')\\l", "words_string", "if not s:\\l", "s_list = []\\l", "for letter in s:\\l", "if letter == ',':\\l", "s_list.append(letter)\\l"], ["from typing import *\\ldef words_string(s):...\\lwords_string('Hi, my name is John')\\l", "words_string", "if not s:\\l", "s_list = []\\l", "for letter in s:\\l", "s_list = ''.join(s_list)\\l", "return s_list.split()\\l"]], "prime_paths_linenumbers": [[9, 10, 8, 14, 15], [9, 12, 8, 14, 15], [10, 8, 9, 12], [12, 8, 9, 10], [1, 17, 3, 4], [1, 17, 3, 6, 8, 9, 10], [1, 17, 3, 6, 8, 9, 12], [1, 17, 3, 6, 8, 14, 15]], "covered_statements_linenumbers": [1, 2, 3, 6, 8, 9, 10, 12, 14, 15, 17], "missing_statements_linenumbers": [4], "covered_prime_paths_linenumbers": [[9, 10, 8, 14, 15], [9, 12, 8, 14, 15], [10, 8, 9, 12], [12, 8, 9, 10], [1, 17, 3, 6, 8, 9, 10], [1, 17, 3, 6, 8, 9, 12], [1, 17, 3, 6, 8, 14, 15]], "missing_prime_paths_linenumbers": [[1, 17, 3, 4]], "num_total_prime_paths": 8, "num_covered_paths": 7, "prime_path_coverage": 0.88, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_101_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_101_CFG.dot"}
{"humaneval_id": "HumanEval_118__1", "python_file": "HumanEval_118__1/main.py", "input_file": "HumanEval_118__1/input.txt", "prime_paths_nodes": [["11", "8", "12"], ["11", "13", "8", "12"], ["13", "8", "11"], ["1", "20", "3", "5"], ["1", "20", "3", "6", "8", "12"], ["1", "20", "3", "6", "8", "11", "13", "15"]], "prime_paths_statements": [["if word[i] in vowels:\\l", "for i in range(len(word) - 2, 0, -1):\\l", "return ''\\l"], ["if word[i] in vowels:\\l", "if word[i + 1] not in vowels and word[i - 1] not in vowels:\\l", "for i in range(len(word) - 2, 0, -1):\\l", "return ''\\l"], ["if word[i + 1] not in vowels and word[i - 1] not in vowels:\\l", "for i in range(len(word) - 2, 0, -1):\\l", "if word[i] in vowels:\\l"], ["from typing import *\\ldef get_closest_vowel(word):...\\lget_closest_vowel('ba')\\l", "get_closest_vowel", "if len(word) < 3:\\l", "return ''\\l"], ["from typing import *\\ldef get_closest_vowel(word):...\\lget_closest_vowel('ba')\\l", "get_closest_vowel", "if len(word) < 3:\\l", "vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'O', 'U', 'I'}\\l", "for i in range(len(word) - 2, 0, -1):\\l", "return ''\\l"], ["from typing import *\\ldef get_closest_vowel(word):...\\lget_closest_vowel('ba')\\l", "get_closest_vowel", "if len(word) < 3:\\l", "vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'O', 'U', 'I'}\\l", "for i in range(len(word) - 2, 0, -1):\\l", "if word[i] in vowels:\\l", "if word[i + 1] not in vowels and word[i - 1] not in vowels:\\l", "return word[i]\\l"]], "prime_paths_linenumbers": [[10, 9, 13], [10, 11, 9, 13], [11, 9, 10], [1, 15, 5, 6], [1, 15, 5, 8, 9, 13], [1, 15, 5, 8, 9, 10, 11, 12]], "covered_statements_linenumbers": [1, 4, 5, 6, 15], "missing_statements_linenumbers": [8, 9, 10, 11, 12, 13], "covered_prime_paths_linenumbers": [[1, 15, 5, 6]], "missing_prime_paths_linenumbers": [[10, 9, 13], [10, 11, 9, 13], [11, 9, 10], [1, 15, 5, 8, 9, 13], [1, 15, 5, 8, 9, 10, 11, 12]], "num_total_prime_paths": 6, "num_covered_paths": 1, "prime_path_coverage": 0.17, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_118__1_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_118__1_CFG.dot"}
{"humaneval_id": "HumanEval_89__0", "python_file": "HumanEval_89__0/main.py", "input_file": "HumanEval_89__0/input.txt", "prime_paths_nodes": [["5", "7", "4", "6"], ["5", "9", "4", "6"], ["7", "4", "5", "9"], ["9", "4", "5", "7"], ["1", "13", "3", "4", "6"], ["1", "13", "3", "4", "5", "7"], ["1", "13", "3", "4", "5", "9"]], "prime_paths_statements": [["if c in d:\\l", "out += d[(d.index(c) + 2 * 2) % 26]\\l", "for c in s:\\l", "return out\\l"], ["if c in d:\\l", "out += c\\l", "for c in s:\\l", "return out\\l"], ["out += d[(d.index(c) + 2 * 2) % 26]\\l", "for c in s:\\l", "if c in d:\\l", "out += c\\l"], ["out += c\\l", "for c in s:\\l", "if c in d:\\l", "out += d[(d.index(c) + 2 * 2) % 26]\\l"], ["from typing import *\\ldef encrypt(s):...\\lencrypt('et')\\l", "encrypt", "d = 'abcdefghijklmnopqrst...'\\lout = ''\\l", "for c in s:\\l", "return out\\l"], ["from typing import *\\ldef encrypt(s):...\\lencrypt('et')\\l", "encrypt", "d = 'abcdefghijklmnopqrst...'\\lout = ''\\l", "for c in s:\\l", "if c in d:\\l", "out += d[(d.index(c) + 2 * 2) % 26]\\l"], ["from typing import *\\ldef encrypt(s):...\\lencrypt('et')\\l", "encrypt", "d = 'abcdefghijklmnopqrst...'\\lout = ''\\l", "for c in s:\\l", "if c in d:\\l", "out += c\\l"]], "prime_paths_linenumbers": [[8, 9, 7, 12], [8, 11, 7, 12], [9, 7, 8, 11], [11, 7, 8, 9], [1, 14, 5, 6, 7, 12], [1, 14, 5, 6, 7, 8, 9], [1, 14, 5, 6, 7, 8, 11]], "covered_statements_linenumbers": [1, 4, 5, 6, 7, 8, 9, 12, 14], "missing_statements_linenumbers": [11], "covered_prime_paths_linenumbers": [[8, 9, 7, 12], [1, 14, 5, 6, 7, 12], [1, 14, 5, 6, 7, 8, 9]], "missing_prime_paths_linenumbers": [[8, 11, 7, 12], [9, 7, 8, 11], [11, 7, 8, 9], [1, 14, 5, 6, 7, 8, 11]], "num_total_prime_paths": 7, "num_covered_paths": 3, "prime_path_coverage": 0.43, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_89__0_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_89__0_CFG.dot"}
{"humaneval_id": "HumanEval_138", "python_file": "HumanEval_138/main.py", "input_file": "HumanEval_138/input.txt", "prime_paths_nodes": [["1", "6", "3"]], "prime_paths_statements": [["from typing import *\\ldef is_equal_to_sum_even(n):...\\lis_equal_to_sum_even(4)\\l", "is_equal_to_sum_even", "return n % 2 == 0 and n >= 8\\l"]], "prime_paths_linenumbers": [[1, 5, 3]], "covered_statements_linenumbers": [1, 2, 3, 5], "missing_statements_linenumbers": [], "covered_prime_paths_linenumbers": [[1, 5, 3]], "missing_prime_paths_linenumbers": [], "num_total_prime_paths": 1, "num_covered_paths": 1, "prime_path_coverage": 1.0, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_138_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_138_CFG.dot"}
{"humaneval_id": "HumanEval_96", "python_file": "HumanEval_96/main.py", "input_file": "HumanEval_96/input.txt", "prime_paths_nodes": [["6", "8", "10", "12", "11", "4", "7"], ["6", "8", "10", "12", "11", "15", "4", "7"], ["6", "8", "11", "4", "7"], ["6", "8", "11", "15", "4", "7"], ["8", "10", "12", "11", "4", "6"], ["8", "10", "12", "11", "15", "4", "6"], ["10", "8", "11", "4", "6"], ["10", "8", "11", "15", "4", "6"], ["10", "8", "11", "4", "7"], ["10", "8", "11", "15", "4", "7"], ["10", "12", "11", "4", "6", "8"], ["10", "12", "11", "15", "4", "6", "8"], ["11", "4", "6", "8", "10", "12"], ["11", "15", "4", "6", "8", "10", "12"], ["12", "11", "4", "6", "8", "10"], ["12", "11", "15", "4", "6", "8", "10"], ["15", "4", "6", "8", "10", "12", "11"], ["15", "4", "6", "8", "11"], ["1", "20", "3", "4", "7"], ["1", "20", "3", "4", "6", "8", "10", "12", "11", "15"], ["1", "20", "3", "4", "6", "8", "11", "15"]], "prime_paths_statements": [["is_prime = True\\l", "for j in range(2, i):\\l", "if i % j == 0:\\l", "is_prime = False\\lbreak\\l", "if is_prime:\\l", "for i in range(2, n):\\l", "return primes\\l"], ["is_prime = True\\l", "for j in range(2, i):\\l", "if i % j == 0:\\l", "is_prime = False\\lbreak\\l", "if is_prime:\\l", "primes.append(i)\\l", "for i in range(2, n):\\l", "return primes\\l"], ["is_prime = True\\l", "for j in range(2, i):\\l", "if is_prime:\\l", "for i in range(2, n):\\l", "return primes\\l"], ["is_prime = True\\l", "for j in range(2, i):\\l", "if is_prime:\\l", "primes.append(i)\\l", "for i in range(2, n):\\l", "return primes\\l"], ["for j in range(2, i):\\l", "if i % j == 0:\\l", "is_prime = False\\lbreak\\l", "if is_prime:\\l", "for i in range(2, n):\\l", "is_prime = True\\l"], ["for j in range(2, i):\\l", "if i % j == 0:\\l", "is_prime = False\\lbreak\\l", "if is_prime:\\l", "primes.append(i)\\l", "for i in range(2, n):\\l", "is_prime = True\\l"], ["if i % j == 0:\\l", "for j in range(2, i):\\l", "if is_prime:\\l", "for i in range(2, n):\\l", "is_prime = True\\l"], ["if i % j == 0:\\l", "for j in range(2, i):\\l", "if is_prime:\\l", "primes.append(i)\\l", "for i in range(2, n):\\l", "is_prime = True\\l"], ["if i % j == 0:\\l", "for j in range(2, i):\\l", "if is_prime:\\l", "for i in range(2, n):\\l", "return primes\\l"], ["if i % j == 0:\\l", "for j in range(2, i):\\l", "if is_prime:\\l", "primes.append(i)\\l", "for i in range(2, n):\\l", "return primes\\l"], ["if i % j == 0:\\l", "is_prime = False\\lbreak\\l", "if is_prime:\\l", "for i in range(2, n):\\l", "is_prime = True\\l", "for j in range(2, i):\\l"], ["if i % j == 0:\\l", "is_prime = False\\lbreak\\l", "if is_prime:\\l", "primes.append(i)\\l", "for i in range(2, n):\\l", "is_prime = True\\l", "for j in range(2, i):\\l"], ["if is_prime:\\l", "for i in range(2, n):\\l", "is_prime = True\\l", "for j in range(2, i):\\l", "if i % j == 0:\\l", "is_prime = False\\lbreak\\l"], ["if is_prime:\\l", "primes.append(i)\\l", "for i in range(2, n):\\l", "is_prime = True\\l", "for j in range(2, i):\\l", "if i % j == 0:\\l", "is_prime = False\\lbreak\\l"], ["is_prime = False\\lbreak\\l", "if is_prime:\\l", "for i in range(2, n):\\l", "is_prime = True\\l", "for j in range(2, i):\\l", "if i % j == 0:\\l"], ["is_prime = False\\lbreak\\l", "if is_prime:\\l", "primes.append(i)\\l", "for i in range(2, n):\\l", "is_prime = True\\l", "for j in range(2, i):\\l", "if i % j == 0:\\l"], ["primes.append(i)\\l", "for i in range(2, n):\\l", "is_prime = True\\l", "for j in range(2, i):\\l", "if i % j == 0:\\l", "is_prime = False\\lbreak\\l", "if is_prime:\\l"], ["primes.append(i)\\l", "for i in range(2, n):\\l", "is_prime = True\\l", "for j in range(2, i):\\l", "if is_prime:\\l"], ["from typing import *\\ldef count_up_to(n):...\\lcount_up_to(5)\\l", "count_up_to", "primes = []\\l", "for i in range(2, n):\\l", "return primes\\l"], ["from typing import *\\ldef count_up_to(n):...\\lcount_up_to(5)\\l", "count_up_to", "primes = []\\l", "for i in range(2, n):\\l", "is_prime = True\\l", "for j in range(2, i):\\l", "if i % j == 0:\\l", "is_prime = False\\lbreak\\l", "if is_prime:\\l", "primes.append(i)\\l"], ["from typing import *\\ldef count_up_to(n):...\\lcount_up_to(5)\\l", "count_up_to", "primes = []\\l", "for i in range(2, n):\\l", "is_prime = True\\l", "for j in range(2, i):\\l", "if is_prime:\\l", "primes.append(i)\\l"]], "prime_paths_linenumbers": [[5, 6, 7, 8, 9, 10, 4, 12], [5, 6, 7, 8, 9, 10, 11, 4, 12], [5, 6, 10, 4, 12], [5, 6, 10, 11, 4, 12], [6, 7, 8, 9, 10, 4, 5], [6, 7, 8, 9, 10, 11, 4, 5], [7, 6, 10, 4, 5], [7, 6, 10, 11, 4, 5], [7, 6, 10, 4, 12], [7, 6, 10, 11, 4, 12], [7, 8, 9, 10, 4, 5, 6], [7, 8, 9, 10, 11, 4, 5, 6], [10, 4, 5, 6, 7, 8, 9], [10, 11, 4, 5, 6, 7, 8, 9], [8, 9, 10, 4, 5, 6, 7], [8, 9, 10, 11, 4, 5, 6, 7], [11, 4, 5, 6, 7, 8, 9, 10], [11, 4, 5, 6, 10], [1, 15, 3, 4, 12], [1, 15, 3, 4, 5, 6, 7, 8, 9, 10, 11], [1, 15, 3, 4, 5, 6, 10, 11]], "covered_statements_linenumbers": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 15], "missing_statements_linenumbers": [], "covered_prime_paths_linenumbers": [[5, 6, 7, 8, 9, 10, 4, 12], [5, 6, 7, 8, 9, 10, 11, 4, 12], [5, 6, 10, 4, 12], [5, 6, 10, 11, 4, 12], [6, 7, 8, 9, 10, 4, 5], [6, 7, 8, 9, 10, 11, 4, 5], [7, 6, 10, 4, 5], [7, 6, 10, 11, 4, 5], [7, 6, 10, 4, 12], [7, 6, 10, 11, 4, 12], [7, 8, 9, 10, 4, 5, 6], [7, 8, 9, 10, 11, 4, 5, 6], [10, 4, 5, 6, 7, 8, 9], [10, 11, 4, 5, 6, 7, 8, 9], [8, 9, 10, 4, 5, 6, 7], [8, 9, 10, 11, 4, 5, 6, 7], [11, 4, 5, 6, 7, 8, 9, 10], [11, 4, 5, 6, 10], [1, 15, 3, 4, 12], [1, 15, 3, 4, 5, 6, 7, 8, 9, 10, 11], [1, 15, 3, 4, 5, 6, 10, 11]], "missing_prime_paths_linenumbers": [], "num_total_prime_paths": 21, "num_covered_paths": 21, "prime_path_coverage": 1.0, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_96_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_96_CFG.dot"}
{"humaneval_id": "HumanEval_70__1", "python_file": "HumanEval_70__1/main.py", "input_file": "HumanEval_70__1/input.txt", "prime_paths_nodes": [["5", "4", "6"], ["1", "13", "3", "4", "5"], ["1", "13", "3", "4", "6"]], "prime_paths_statements": [["res.append(min(lst) if switch else max(lst))\\llst.remove(res[-1])\\lswitch = not switch\\l", "while lst:\\l", "return res\\l"], ["from typing import *\\ldef strange_sort_list(lst):...\\lstrange_sort_list([111111])\\l", "strange_sort_list", "res, switch = [], True\\l", "while lst:\\l", "res.append(min(lst) if switch else max(lst))\\llst.remove(res[-1])\\lswitch = not switch\\l"], ["from typing import *\\ldef strange_sort_list(lst):...\\lstrange_sort_list([111111])\\l", "strange_sort_list", "res, switch = [], True\\l", "while lst:\\l", "return res\\l"]], "prime_paths_linenumbers": [[7, 8, 9, 6, 10], [1, 12, 5, 6, 7, 8, 9], [1, 12, 5, 6, 10]], "covered_statements_linenumbers": [1, 4, 5, 6, 7, 8, 9, 10, 12], "missing_statements_linenumbers": [], "covered_prime_paths_linenumbers": [[7, 8, 9, 6, 10], [1, 12, 5, 6, 7, 8, 9], [1, 12, 5, 6, 10]], "missing_prime_paths_linenumbers": [], "num_total_prime_paths": 3, "num_covered_paths": 3, "prime_path_coverage": 1.0, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_70__1_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_70__1_CFG.dot"}
{"humaneval_id": "HumanEval_139", "python_file": "HumanEval_139/main.py", "input_file": "HumanEval_139/input.txt", "prime_paths_nodes": [["6", "4", "7"], ["1", "10", "3", "4", "6"], ["1", "10", "3", "4", "7"]], "prime_paths_statements": [["fact_i *= i\\lspecial_fact *= fact_i\\l", "for i in range(1, n + 1):\\l", "return special_fact\\l"], ["from typing import *\\ldef special_factorial(n):...\\lspecial_factorial(4)\\l", "special_factorial", "fact_i = 1\\lspecial_fact = 1\\l", "for i in range(1, n + 1):\\l", "fact_i *= i\\lspecial_fact *= fact_i\\l"], ["from typing import *\\ldef special_factorial(n):...\\lspecial_factorial(4)\\l", "special_factorial", "fact_i = 1\\lspecial_fact = 1\\l", "for i in range(1, n + 1):\\l", "return special_fact\\l"]], "prime_paths_linenumbers": [[6, 7, 5, 8], [1, 10, 3, 4, 5, 6, 7], [1, 10, 3, 4, 5, 8]], "covered_statements_linenumbers": [1, 2, 3, 4, 5, 6, 7, 8, 10], "missing_statements_linenumbers": [], "covered_prime_paths_linenumbers": [[6, 7, 5, 8], [1, 10, 3, 4, 5, 6, 7], [1, 10, 3, 4, 5, 8]], "missing_prime_paths_linenumbers": [], "num_total_prime_paths": 3, "num_covered_paths": 3, "prime_path_coverage": 1.0, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_139_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_139_CFG.dot"}
{"humaneval_id": "HumanEval_124__0", "python_file": "HumanEval_124__0/main.py", "input_file": "HumanEval_124__0/input.txt", "prime_paths_nodes": [["1", "28", "3"]], "prime_paths_statements": [["from typing import *\\ldef valid_date(date):...\\lvalid_date('01-01-2007')\\l", "valid_date", ""]], "prime_paths_linenumbers": [[1, 22]], "covered_statements_linenumbers": [1, 4, 5, 6, 7, 8, 9, 11, 13, 15, 20, 22], "missing_statements_linenumbers": [10, 12, 14, 16, 17, 18], "covered_prime_paths_linenumbers": [[1, 22]], "missing_prime_paths_linenumbers": [], "num_total_prime_paths": 1, "num_covered_paths": 1, "prime_path_coverage": 1.0, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_124__0_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_124__0_CFG.dot"}
{"humaneval_id": "HumanEval_118__0", "python_file": "HumanEval_118__0/main.py", "input_file": "HumanEval_118__0/input.txt", "prime_paths_nodes": [["11", "8", "12"], ["11", "13", "8", "12"], ["13", "8", "11"], ["1", "20", "3", "5"], ["1", "20", "3", "6", "8", "12"], ["1", "20", "3", "6", "8", "11", "13", "15"]], "prime_paths_statements": [["if word[i] in vowels:\\l", "for i in range(len(word) - 2, 0, -1):\\l", "return ''\\l"], ["if word[i] in vowels:\\l", "if word[i + 1] not in vowels and word[i - 1] not in vowels:\\l", "for i in range(len(word) - 2, 0, -1):\\l", "return ''\\l"], ["if word[i + 1] not in vowels and word[i - 1] not in vowels:\\l", "for i in range(len(word) - 2, 0, -1):\\l", "if word[i] in vowels:\\l"], ["from typing import *\\ldef get_closest_vowel(word):...\\lget_closest_vowel('full')\\l", "get_closest_vowel", "if len(word) < 3:\\l", "return ''\\l"], ["from typing import *\\ldef get_closest_vowel(word):...\\lget_closest_vowel('full')\\l", "get_closest_vowel", "if len(word) < 3:\\l", "vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'O', 'U', 'I'}\\l", "for i in range(len(word) - 2, 0, -1):\\l", "return ''\\l"], ["from typing import *\\ldef get_closest_vowel(word):...\\lget_closest_vowel('full')\\l", "get_closest_vowel", "if len(word) < 3:\\l", "vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'O', 'U', 'I'}\\l", "for i in range(len(word) - 2, 0, -1):\\l", "if word[i] in vowels:\\l", "if word[i + 1] not in vowels and word[i - 1] not in vowels:\\l", "return word[i]\\l"]], "prime_paths_linenumbers": [[10, 9, 13], [10, 11, 9, 13], [11, 9, 10], [1, 15, 5, 6], [1, 15, 5, 8, 9, 13], [1, 15, 5, 8, 9, 10, 11, 12]], "covered_statements_linenumbers": [1, 4, 5, 8, 9, 10, 11, 12, 15], "missing_statements_linenumbers": [6, 13], "covered_prime_paths_linenumbers": [[11, 9, 10], [1, 15, 5, 8, 9, 10, 11, 12]], "missing_prime_paths_linenumbers": [[10, 9, 13], [10, 11, 9, 13], [1, 15, 5, 6], [1, 15, 5, 8, 9, 13]], "num_total_prime_paths": 6, "num_covered_paths": 2, "prime_path_coverage": 0.33, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_118__0_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_118__0_CFG.dot"}
{"humaneval_id": "HumanEval_33", "python_file": "HumanEval_33/main.py", "input_file": "HumanEval_33/input.txt", "prime_paths_nodes": [["1", "9", "3", "6"]], "prime_paths_statements": [["from typing import *\\ldef sort_third(l: list):...\\lsort_third([1, 2, 3])\\l", "sort_third", "l = list(l)\\ll[::3] = sorted(l[::3])\\l", "return l\\l"]], "prime_paths_linenumbers": [[1, 7, 3, 4, 5]], "covered_statements_linenumbers": [1, 2, 3, 4, 5, 7], "missing_statements_linenumbers": [], "covered_prime_paths_linenumbers": [[1, 7, 3, 4, 5]], "missing_prime_paths_linenumbers": [], "num_total_prime_paths": 1, "num_covered_paths": 1, "prime_path_coverage": 1.0, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_33_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_33_CFG.dot"}
{"humaneval_id": "HumanEval_30__0", "python_file": "HumanEval_30__0/main.py", "input_file": "HumanEval_30__0/input.txt", "prime_paths_nodes": [["1", "6", "3"]], "prime_paths_statements": [["from typing import *\\ldef get_positive(l: list):...\\lget_positive([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])\\l", "get_positive", "return [e for e in l if e > 0]\\l"]], "prime_paths_linenumbers": [[1, 7, 5]], "covered_statements_linenumbers": [1, 4, 5, 7], "missing_statements_linenumbers": [], "covered_prime_paths_linenumbers": [[1, 7, 5]], "missing_prime_paths_linenumbers": [], "num_total_prime_paths": 1, "num_covered_paths": 1, "prime_path_coverage": 1.0, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_30__0_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_30__0_CFG.dot"}
{"humaneval_id": "HumanEval_79__1", "python_file": "HumanEval_79__1/main.py", "input_file": "HumanEval_79__1/input.txt", "prime_paths_nodes": [["1", "6", "3"]], "prime_paths_statements": [["from typing import *\\ldef decimal_to_binary(decimal):...\\ldecimal_to_binary(103)\\l", "decimal_to_binary", "return 'db' + bin(decimal)[2:] ...'db'\\l"]], "prime_paths_linenumbers": [[1, 7, 5]], "covered_statements_linenumbers": [1, 4, 5, 7], "missing_statements_linenumbers": [], "covered_prime_paths_linenumbers": [[1, 7, 5]], "missing_prime_paths_linenumbers": [], "num_total_prime_paths": 1, "num_covered_paths": 1, "prime_path_coverage": 1.0, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_79__1_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_79__1_CFG.dot"}
{"humaneval_id": "HumanEval_114__1", "python_file": "HumanEval_114__1/main.py", "input_file": "HumanEval_114__1/input.txt", "prime_paths_nodes": [["5", "7", "8", "9", "4", "6", "11", "12", "14"], ["5", "7", "8", "9", "4", "6", "12", "14"], ["5", "7", "9", "4", "6", "11", "12", "14"], ["5", "7", "9", "4", "6", "12", "14"], ["7", "8", "9", "4", "5"], ["7", "9", "4", "5"], ["8", "9", "4", "5", "7"], ["9", "4", "5", "7", "8"], ["1", "17", "3", "4", "5", "7", "8", "9"], ["1", "17", "3", "4", "5", "7", "9"], ["1", "17", "3", "4", "6", "11", "12", "14"], ["1", "17", "3", "4", "6", "12", "14"]], "prime_paths_statements": [["s += -num\\l", "if s < 0:\\l", "s = 0\\l", "max_sum = max(s, max_sum)\\l", "for num in nums:\\l", "if max_sum == 0:\\l", "max_sum = max(-i for i in nums)\\l", "min_sum = -max_sum\\l", "return min_sum\\l"], ["s += -num\\l", "if s < 0:\\l", "s = 0\\l", "max_sum = max(s, max_sum)\\l", "for num in nums:\\l", "if max_sum == 0:\\l", "min_sum = -max_sum\\l", "return min_sum\\l"], ["s += -num\\l", "if s < 0:\\l", "max_sum = max(s, max_sum)\\l", "for num in nums:\\l", "if max_sum == 0:\\l", "max_sum = max(-i for i in nums)\\l", "min_sum = -max_sum\\l", "return min_sum\\l"], ["s += -num\\l", "if s < 0:\\l", "max_sum = max(s, max_sum)\\l", "for num in nums:\\l", "if max_sum == 0:\\l", "min_sum = -max_sum\\l", "return min_sum\\l"], ["if s < 0:\\l", "s = 0\\l", "max_sum = max(s, max_sum)\\l", "for num in nums:\\l", "s += -num\\l"], ["if s < 0:\\l", "max_sum = max(s, max_sum)\\l", "for num in nums:\\l", "s += -num\\l"], ["s = 0\\l", "max_sum = max(s, max_sum)\\l", "for num in nums:\\l", "s += -num\\l", "if s < 0:\\l"], ["max_sum = max(s, max_sum)\\l", "for num in nums:\\l", "s += -num\\l", "if s < 0:\\l", "s = 0\\l"], ["from typing import *\\ldef minSubArraySum(nums):...\\lminSubArraySum([0, 10, 20, 1000000])\\l", "minSubArraySum", "max_sum = 0\\ls = 0\\l", "for num in nums:\\l", "s += -num\\l", "if s < 0:\\l", "s = 0\\l", "max_sum = max(s, max_sum)\\l"], ["from typing import *\\ldef minSubArraySum(nums):...\\lminSubArraySum([0, 10, 20, 1000000])\\l", "minSubArraySum", "max_sum = 0\\ls = 0\\l", "for num in nums:\\l", "s += -num\\l", "if s < 0:\\l", "max_sum = max(s, max_sum)\\l"], ["from typing import *\\ldef minSubArraySum(nums):...\\lminSubArraySum([0, 10, 20, 1000000])\\l", "minSubArraySum", "max_sum = 0\\ls = 0\\l", "for num in nums:\\l", "if max_sum == 0:\\l", "max_sum = max(-i for i in nums)\\l", "min_sum = -max_sum\\l", "return min_sum\\l"], ["from typing import *\\ldef minSubArraySum(nums):...\\lminSubArraySum([0, 10, 20, 1000000])\\l", "minSubArraySum", "max_sum = 0\\ls = 0\\l", "for num in nums:\\l", "if max_sum == 0:\\l", "min_sum = -max_sum\\l", "return min_sum\\l"]], "prime_paths_linenumbers": [[8, 9, 10, 11, 7, 12, 13, 14, 15], [8, 9, 10, 11, 7, 12, 14, 15], [8, 9, 11, 7, 12, 13, 14, 15], [8, 9, 11, 7, 12, 14, 15], [9, 10, 11, 7, 8], [9, 11, 7, 8], [10, 11, 7, 8, 9], [11, 7, 8, 9, 10], [1, 17, 5, 6, 7, 8, 9, 10, 11], [1, 17, 5, 6, 7, 8, 9, 11], [1, 17, 5, 6, 7, 12, 13, 14, 15], [1, 17, 5, 6, 7, 12, 14, 15]], "covered_statements_linenumbers": [1, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17], "missing_statements_linenumbers": [], "covered_prime_paths_linenumbers": [[8, 9, 10, 11, 7, 12, 13, 14, 15], [8, 9, 10, 11, 7, 12, 14, 15], [8, 9, 11, 7, 12, 13, 14, 15], [8, 9, 11, 7, 12, 14, 15], [9, 10, 11, 7, 8], [9, 11, 7, 8], [10, 11, 7, 8, 9], [11, 7, 8, 9, 10], [1, 17, 5, 6, 7, 8, 9, 10, 11], [1, 17, 5, 6, 7, 8, 9, 11], [1, 17, 5, 6, 7, 12, 13, 14, 15], [1, 17, 5, 6, 7, 12, 14, 15]], "missing_prime_paths_linenumbers": [], "num_total_prime_paths": 12, "num_covered_paths": 12, "prime_path_coverage": 1.0, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_114__1_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_114__1_CFG.dot"}
{"humaneval_id": "HumanEval_21__0", "python_file": "HumanEval_21__0/main.py", "input_file": "HumanEval_21__0/input.txt", "prime_paths_nodes": [["1", "9", "3", "6"]], "prime_paths_statements": [["from typing import *\\ldef rescale_to_unit(numbers: List[float]) ->List[float]:...\\lrescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\\l", "rescale_to_unit", "min_number = min(numbers)\\lmax_number = max(numbers)\\l", "return [((x - min_number) / (max_number - min_number)) for x in numbers]\\l"]], "prime_paths_linenumbers": [[1, 9, 5, 6, 7]], "covered_statements_linenumbers": [1, 4, 5, 6, 7, 9], "missing_statements_linenumbers": [], "covered_prime_paths_linenumbers": [[1, 9, 5, 6, 7]], "missing_prime_paths_linenumbers": [], "num_total_prime_paths": 1, "num_covered_paths": 1, "prime_path_coverage": 1.0, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_21__0_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_21__0_CFG.dot"}
{"humaneval_id": "HumanEval_107__1", "python_file": "HumanEval_107__1/main.py", "input_file": "HumanEval_107__1/input.txt", "prime_paths_nodes": [["10", "12", "8", "11"], ["10", "14", "8", "11"], ["10", "14", "15", "8", "11"], ["12", "8", "10", "14", "15"], ["14", "8", "10", "12"], ["14", "15", "8", "10", "12"], ["15", "8", "10", "14"], ["1", "19", "3", "8", "11"], ["1", "19", "3", "8", "10", "12"], ["1", "19", "3", "8", "10", "14", "15"]], "prime_paths_statements": [["if i % 2 == 1 and is_palindrome(i):\\l", "odd_palindrome_count += 1\\l", "for i in range(1, n + 1):\\l", "return even_palindrome_count, odd_palindrome_count\\l"], ["if i % 2 == 1 and is_palindrome(i):\\l", "if i % 2 == 0 and is_palindrome(i):\\l", "for i in range(1, n + 1):\\l", "return even_palindrome_count, odd_palindrome_count\\l"], ["if i % 2 == 1 and is_palindrome(i):\\l", "if i % 2 == 0 and is_palindrome(i):\\l", "even_palindrome_count += 1\\l", "for i in range(1, n + 1):\\l", "return even_palindrome_count, odd_palindrome_count\\l"], ["odd_palindrome_count += 1\\l", "for i in range(1, n + 1):\\l", "if i % 2 == 1 and is_palindrome(i):\\l", "if i % 2 == 0 and is_palindrome(i):\\l", "even_palindrome_count += 1\\l"], ["if i % 2 == 0 and is_palindrome(i):\\l", "for i in range(1, n + 1):\\l", "if i % 2 == 1 and is_palindrome(i):\\l", "odd_palindrome_count += 1\\l"], ["if i % 2 == 0 and is_palindrome(i):\\l", "even_palindrome_count += 1\\l", "for i in range(1, n + 1):\\l", "if i % 2 == 1 and is_palindrome(i):\\l", "odd_palindrome_count += 1\\l"], ["even_palindrome_count += 1\\l", "for i in range(1, n + 1):\\l", "if i % 2 == 1 and is_palindrome(i):\\l", "if i % 2 == 0 and is_palindrome(i):\\l"], ["from typing import *\\ldef even_odd_palindrome(n):...\\leven_odd_palindrome(1)\\l", "even_odd_palindrome", "def is_palindrome(n):...\\leven_palindrome_count = 0\\lodd_palindrome_count = 0\\l", "for i in range(1, n + 1):\\l", "return even_palindrome_count, odd_palindrome_count\\l"], ["from typing import *\\ldef even_odd_palindrome(n):...\\leven_odd_palindrome(1)\\l", "even_odd_palindrome", "def is_palindrome(n):...\\leven_palindrome_count = 0\\lodd_palindrome_count = 0\\l", "for i in range(1, n + 1):\\l", "if i % 2 == 1 and is_palindrome(i):\\l", "odd_palindrome_count += 1\\l"], ["from typing import *\\ldef even_odd_palindrome(n):...\\leven_odd_palindrome(1)\\l", "even_odd_palindrome", "def is_palindrome(n):...\\leven_palindrome_count = 0\\lodd_palindrome_count = 0\\l", "for i in range(1, n + 1):\\l", "if i % 2 == 1 and is_palindrome(i):\\l", "if i % 2 == 0 and is_palindrome(i):\\l", "even_palindrome_count += 1\\l"]], "prime_paths_linenumbers": [[12, 13, 11, 16], [12, 14, 11, 16], [12, 14, 15, 11, 16], [13, 11, 12, 14, 15], [14, 11, 12, 13], [14, 15, 11, 12, 13], [15, 11, 12, 14], [1, 18, 5, 8, 9, 11, 16], [1, 18, 5, 8, 9, 11, 12, 13], [1, 18, 5, 8, 9, 11, 12, 14, 15]], "covered_statements_linenumbers": [1, 4, 5, 6, 8, 9, 11, 12, 13, 16, 18], "missing_statements_linenumbers": [14, 15], "covered_prime_paths_linenumbers": [[12, 13, 11, 16], [1, 18, 5, 8, 9, 11, 16], [1, 18, 5, 8, 9, 11, 12, 13]], "missing_prime_paths_linenumbers": [[12, 14, 11, 16], [12, 14, 15, 11, 16], [13, 11, 12, 14, 15], [14, 11, 12, 13], [14, 15, 11, 12, 13], [15, 11, 12, 14], [1, 18, 5, 8, 9, 11, 12, 14, 15]], "num_total_prime_paths": 10, "num_covered_paths": 3, "prime_path_coverage": 0.3, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_107__1_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_107__1_CFG.dot"}
{"humaneval_id": "HumanEval_105__1", "python_file": "HumanEval_105__1/main.py", "input_file": "HumanEval_105__1/input.txt", "prime_paths_nodes": [["8", "5", "7"], ["10", "5", "7"], ["10", "5", "8"], ["1", "14", "3", "5", "7"], ["1", "14", "3", "5", "8"]], "prime_paths_statements": [["new_arr.append(dic[var])\\l", "for var in sorted_arr:\\l", "return new_arr\\l"], ["", "for var in sorted_arr:\\l", "return new_arr\\l"], ["", "for var in sorted_arr:\\l", "new_arr.append(dic[var])\\l"], ["from typing import *\\ldef by_length(arr):...\\lby_length([])\\l", "by_length", "dic = {(1): 'One', (2): 'Two', (3): 'Three', (4): 'Four', (5): 'Five', (6):\\l    'Six', (7): 'Seven', (8): 'Eight', (9): 'Nine'}\\lsorted_arr = sorted(arr, reverse=True)\\lnew_arr = []\\l", "for var in sorted_arr:\\l", "return new_arr\\l"], ["from typing import *\\ldef by_length(arr):...\\lby_length([])\\l", "by_length", "dic = {(1): 'One', (2): 'Two', (3): 'Three', (4): 'Four', (5): 'Five', (6):\\l    'Six', (7): 'Seven', (8): 'Eight', (9): 'Nine'}\\lsorted_arr = sorted(arr, reverse=True)\\lnew_arr = []\\l", "for var in sorted_arr:\\l", "new_arr.append(dic[var])\\l"]], "prime_paths_linenumbers": [[19, 20, 18, 23], [18, 23], [18, 19, 20], [1, 25, 5, 16, 17, 18, 23], [1, 25, 5, 16, 17, 18, 19, 20]], "covered_statements_linenumbers": [1, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 18, 23, 25], "missing_statements_linenumbers": [19, 20, 21, 22], "covered_prime_paths_linenumbers": [[18, 23], [1, 25, 5, 16, 17, 18, 23]], "missing_prime_paths_linenumbers": [[19, 20, 18, 23], [18, 19, 20], [1, 25, 5, 16, 17, 18, 19, 20]], "num_total_prime_paths": 5, "num_covered_paths": 2, "prime_path_coverage": 0.4, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_105__1_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_105__1_CFG.dot"}
{"humaneval_id": "HumanEval_73__1", "python_file": "HumanEval_73__1/main.py", "input_file": "HumanEval_73__1/input.txt", "prime_paths_nodes": [["7", "4", "8"], ["7", "10", "4", "8"], ["10", "4", "7"], ["1", "14", "3", "4", "8"], ["1", "14", "3", "4", "7", "10"]], "prime_paths_statements": [["if arr[i] != arr[len(arr) - i - 1]:\\l", "for i in range(len(arr) // 2):\\l", "return ans\\l"], ["if arr[i] != arr[len(arr) - i - 1]:\\l", "ans += 1\\l", "for i in range(len(arr) // 2):\\l", "return ans\\l"], ["ans += 1\\l", "for i in range(len(arr) // 2):\\l", "if arr[i] != arr[len(arr) - i - 1]:\\l"], ["from typing import *\\ldef smallest_change(arr):...\\lsmallest_change([1, 2, 3, 4, 3, 2, 2])\\l", "smallest_change", "ans = 0\\l", "for i in range(len(arr) // 2):\\l", "return ans\\l"], ["from typing import *\\ldef smallest_change(arr):...\\lsmallest_change([1, 2, 3, 4, 3, 2, 2])\\l", "smallest_change", "ans = 0\\l", "for i in range(len(arr) // 2):\\l", "if arr[i] != arr[len(arr) - i - 1]:\\l", "ans += 1\\l"]], "prime_paths_linenumbers": [[7, 6, 9], [7, 8, 6, 9], [8, 6, 7], [1, 11, 5, 6, 9], [1, 11, 5, 6, 7, 8]], "covered_statements_linenumbers": [1, 4, 5, 6, 7, 8, 9, 11], "missing_statements_linenumbers": [], "covered_prime_paths_linenumbers": [[7, 6, 9], [7, 8, 6, 9], [8, 6, 7], [1, 11, 5, 6, 9], [1, 11, 5, 6, 7, 8]], "missing_prime_paths_linenumbers": [], "num_total_prime_paths": 5, "num_covered_paths": 5, "prime_path_coverage": 1.0, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_73__1_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_73__1_CFG.dot"}
{"humaneval_id": "HumanEval_92", "python_file": "HumanEval_92/main.py", "input_file": "HumanEval_92/input.txt", "prime_paths_nodes": [["1", "12", "3", "5"], ["1", "12", "3", "4", "6"], ["1", "12", "3", "4", "7"]], "prime_paths_statements": [["from typing import *\\ldef any_int(x, y, z):...\\lany_int(2, 3, 1)\\l", "any_int", "if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\\l", "return False\\l"], ["from typing import *\\ldef any_int(x, y, z):...\\lany_int(2, 3, 1)\\l", "any_int", "if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\\l", "if x + y == z or x + z == y or y + z == x:\\l", "return True\\l"], ["from typing import *\\ldef any_int(x, y, z):...\\lany_int(2, 3, 1)\\l", "any_int", "if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\\l", "if x + y == z or x + z == y or y + z == x:\\l", "return False\\l"]], "prime_paths_linenumbers": [[1, 10, 4, 8], [1, 10, 4, 5, 6], [1, 10, 4, 5, 7]], "covered_statements_linenumbers": [1, 2, 4, 5, 6, 10], "missing_statements_linenumbers": [7, 8], "covered_prime_paths_linenumbers": [[1, 10, 4, 5, 6]], "missing_prime_paths_linenumbers": [[1, 10, 4, 8], [1, 10, 4, 5, 7]], "num_total_prime_paths": 3, "num_covered_paths": 1, "prime_path_coverage": 0.33, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_92_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_92_CFG.dot"}
{"humaneval_id": "HumanEval_155", "python_file": "HumanEval_155/main.py", "input_file": "HumanEval_155/input.txt", "prime_paths_nodes": [["7", "10", "4", "8"], ["7", "12", "4", "8"], ["10", "4", "7", "12"], ["12", "4", "7", "10"], ["1", "15", "3", "4", "8"], ["1", "15", "3", "4", "7", "10"], ["1", "15", "3", "4", "7", "12"]], "prime_paths_statements": [["if int(i) % 2 == 0:\\l", "even_count += 1\\l", "for i in str(abs(num)):\\l", "return even_count, odd_count\\l"], ["if int(i) % 2 == 0:\\l", "odd_count += 1\\l", "for i in str(abs(num)):\\l", "return even_count, odd_count\\l"], ["even_count += 1\\l", "for i in str(abs(num)):\\l", "if int(i) % 2 == 0:\\l", "odd_count += 1\\l"], ["odd_count += 1\\l", "for i in str(abs(num)):\\l", "if int(i) % 2 == 0:\\l", "even_count += 1\\l"], ["from typing import *\\ldef even_odd_count(num):...\\leven_odd_count(7)\\l", "even_odd_count", "even_count = 0\\lodd_count = 0\\l", "for i in str(abs(num)):\\l", "return even_count, odd_count\\l"], ["from typing import *\\ldef even_odd_count(num):...\\leven_odd_count(7)\\l", "even_odd_count", "even_count = 0\\lodd_count = 0\\l", "for i in str(abs(num)):\\l", "if int(i) % 2 == 0:\\l", "even_count += 1\\l"], ["from typing import *\\ldef even_odd_count(num):...\\leven_odd_count(7)\\l", "even_odd_count", "even_count = 0\\lodd_count = 0\\l", "for i in str(abs(num)):\\l", "if int(i) % 2 == 0:\\l", "odd_count += 1\\l"]], "prime_paths_linenumbers": [[6, 7, 5, 10], [6, 9, 5, 10], [7, 5, 6, 9], [9, 5, 6, 7], [1, 12, 3, 4, 5, 10], [1, 12, 3, 4, 5, 6, 7], [1, 12, 3, 4, 5, 6, 9]], "covered_statements_linenumbers": [1, 2, 3, 4, 5, 6, 9, 10, 12], "missing_statements_linenumbers": [7], "covered_prime_paths_linenumbers": [[6, 9, 5, 10], [1, 12, 3, 4, 5, 10], [1, 12, 3, 4, 5, 6, 9]], "missing_prime_paths_linenumbers": [[6, 7, 5, 10], [7, 5, 6, 9], [9, 5, 6, 7], [1, 12, 3, 4, 5, 6, 7]], "num_total_prime_paths": 7, "num_covered_paths": 3, "prime_path_coverage": 0.43, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_155_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_155_CFG.dot"}
{"humaneval_id": "HumanEval_1", "python_file": "HumanEval_1/main.py", "input_file": "HumanEval_1/input.txt", "prime_paths_nodes": [["5", "7", "4", "6"], ["5", "9", "4", "6"], ["5", "9", "10", "13", "4", "6"], ["5", "9", "10", "13", "14", "4", "6"], ["7", "4", "5", "9", "10", "13", "14"], ["9", "4", "5", "7"], ["9", "10", "13", "4", "5", "7"], ["9", "10", "13", "14", "4", "5", "7"], ["10", "13", "4", "5", "9"], ["10", "13", "14", "4", "5", "9"], ["13", "4", "5", "9", "10"], ["13", "14", "4", "5", "9", "10"], ["14", "4", "5", "9", "10", "13"], ["1", "22", "3", "4", "6"], ["1", "22", "3", "4", "5", "7"], ["1", "22", "3", "4", "5", "9", "10", "13", "14"]], "prime_paths_statements": [["if c == '(':\\l", "current_depth += 1\\lcurrent_string.append(c)\\l", "for c in paren_string:\\l", "return result\\l"], ["if c == '(':\\l", "if c == ')':\\l", "for c in paren_string:\\l", "return result\\l"], ["if c == '(':\\l", "if c == ')':\\l", "current_depth -= 1\\lcurrent_string.append(c)\\l", "if current_depth == 0:\\l", "for c in paren_string:\\l", "return result\\l"], ["if c == '(':\\l", "if c == ')':\\l", "current_depth -= 1\\lcurrent_string.append(c)\\l", "if current_depth == 0:\\l", "result.append(''.join(current_string))\\lcurrent_string.clear()\\l", "for c in paren_string:\\l", "return result\\l"], ["current_depth += 1\\lcurrent_string.append(c)\\l", "for c in paren_string:\\l", "if c == '(':\\l", "if c == ')':\\l", "current_depth -= 1\\lcurrent_string.append(c)\\l", "if current_depth == 0:\\l", "result.append(''.join(current_string))\\lcurrent_string.clear()\\l"], ["if c == ')':\\l", "for c in paren_string:\\l", "if c == '(':\\l", "current_depth += 1\\lcurrent_string.append(c)\\l"], ["if c == ')':\\l", "current_depth -= 1\\lcurrent_string.append(c)\\l", "if current_depth == 0:\\l", "for c in paren_string:\\l", "if c == '(':\\l", "current_depth += 1\\lcurrent_string.append(c)\\l"], ["if c == ')':\\l", "current_depth -= 1\\lcurrent_string.append(c)\\l", "if current_depth == 0:\\l", "result.append(''.join(current_string))\\lcurrent_string.clear()\\l", "for c in paren_string:\\l", "if c == '(':\\l", "current_depth += 1\\lcurrent_string.append(c)\\l"], ["current_depth -= 1\\lcurrent_string.append(c)\\l", "if current_depth == 0:\\l", "for c in paren_string:\\l", "if c == '(':\\l", "if c == ')':\\l"], ["current_depth -= 1\\lcurrent_string.append(c)\\l", "if current_depth == 0:\\l", "result.append(''.join(current_string))\\lcurrent_string.clear()\\l", "for c in paren_string:\\l", "if c == '(':\\l", "if c == ')':\\l"], ["if current_depth == 0:\\l", "for c in paren_string:\\l", "if c == '(':\\l", "if c == ')':\\l", "current_depth -= 1\\lcurrent_string.append(c)\\l"], ["if current_depth == 0:\\l", "result.append(''.join(current_string))\\lcurrent_string.clear()\\l", "for c in paren_string:\\l", "if c == '(':\\l", "if c == ')':\\l", "current_depth -= 1\\lcurrent_string.append(c)\\l"], ["result.append(''.join(current_string))\\lcurrent_string.clear()\\l", "for c in paren_string:\\l", "if c == '(':\\l", "if c == ')':\\l", "current_depth -= 1\\lcurrent_string.append(c)\\l", "if current_depth == 0:\\l"], ["from typing import *\\lfrom typing import *\\ldef separate_paren_groups(paren_string: str) ->List[str]:...\\lseparate_paren_groups('(()()) ((())) () (((...')\\l", "separate_paren_groups", "result = []\\lcurrent_string = []\\lcurrent_depth = 0\\l", "for c in paren_string:\\l", "return result\\l"], ["from typing import *\\lfrom typing import *\\ldef separate_paren_groups(paren_string: str) ->List[str]:...\\lseparate_paren_groups('(()()) ((())) () (((...')\\l", "separate_paren_groups", "result = []\\lcurrent_string = []\\lcurrent_depth = 0\\l", "for c in paren_string:\\l", "if c == '(':\\l", "current_depth += 1\\lcurrent_string.append(c)\\l"], ["from typing import *\\lfrom typing import *\\ldef separate_paren_groups(paren_string: str) ->List[str]:...\\lseparate_paren_groups('(()()) ((())) () (((...')\\l", "separate_paren_groups", "result = []\\lcurrent_string = []\\lcurrent_depth = 0\\l", "for c in paren_string:\\l", "if c == '(':\\l", "if c == ')':\\l", "current_depth -= 1\\lcurrent_string.append(c)\\l", "if current_depth == 0:\\l", "result.append(''.join(current_string))\\lcurrent_string.clear()\\l"]], "prime_paths_linenumbers": [[9, 10, 11, 8, 20], [9, 12, 8, 20], [9, 12, 13, 14, 16, 8, 20], [9, 12, 13, 14, 16, 17, 18, 8, 20], [10, 11, 8, 9, 12, 13, 14, 16, 17, 18], [12, 8, 9, 10, 11], [12, 13, 14, 16, 8, 9, 10, 11], [12, 13, 14, 16, 17, 18, 8, 9, 10, 11], [13, 14, 16, 8, 9, 12], [13, 14, 16, 17, 18, 8, 9, 12], [16, 8, 9, 12, 13, 14], [16, 17, 18, 8, 9, 12, 13, 14], [17, 18, 8, 9, 12, 13, 14, 16], [1, 22, 4, 5, 6, 8, 20], [1, 22, 4, 5, 6, 8, 9, 10, 11], [1, 22, 4, 5, 6, 8, 9, 12, 13, 14, 16, 17, 18]], "covered_statements_linenumbers": [1, 2, 3, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 16, 17, 18, 20, 22], "missing_statements_linenumbers": [], "covered_prime_paths_linenumbers": [[9, 10, 11, 8, 20], [9, 12, 8, 20], [9, 12, 13, 14, 16, 8, 20], [9, 12, 13, 14, 16, 17, 18, 8, 20], [10, 11, 8, 9, 12, 13, 14, 16, 17, 18], [12, 8, 9, 10, 11], [12, 13, 14, 16, 8, 9, 10, 11], [12, 13, 14, 16, 17, 18, 8, 9, 10, 11], [13, 14, 16, 8, 9, 12], [13, 14, 16, 17, 18, 8, 9, 12], [16, 8, 9, 12, 13, 14], [16, 17, 18, 8, 9, 12, 13, 14], [17, 18, 8, 9, 12, 13, 14, 16], [1, 22, 4, 5, 6, 8, 20], [1, 22, 4, 5, 6, 8, 9, 10, 11], [1, 22, 4, 5, 6, 8, 9, 12, 13, 14, 16, 17, 18]], "missing_prime_paths_linenumbers": [], "num_total_prime_paths": 16, "num_covered_paths": 16, "prime_path_coverage": 1.0, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_1_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_1_CFG.dot"}
{"humaneval_id": "HumanEval_91", "python_file": "HumanEval_91/main.py", "input_file": "HumanEval_91/input.txt", "prime_paths_nodes": [["1", "8", "3", "5"]], "prime_paths_statements": [["from typing import *\\ldef is_bored(S):...\\lis_bored('Hello world')\\l", "is_bored", "import re\\lsentences = re.split('[.?!]\\\\s*', S)\\l", "return sum(sentence[0:2] == 'I ' for sentence in sentences)\\l"]], "prime_paths_linenumbers": [[1, 7, 3, 4, 5]], "covered_statements_linenumbers": [1, 2, 3, 4, 5, 7], "missing_statements_linenumbers": [], "covered_prime_paths_linenumbers": [[1, 7, 3, 4, 5]], "missing_prime_paths_linenumbers": [], "num_total_prime_paths": 1, "num_covered_paths": 1, "prime_path_coverage": 1.0, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_91_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_91_CFG.dot"}
{"humaneval_id": "HumanEval_20__1", "python_file": "HumanEval_20__1/main.py", "input_file": "HumanEval_20__1/input.txt", "prime_paths_nodes": [["9", "6", "4", "7"], ["9", "11", "13", "6", "4", "7"], ["9", "11", "15", "17", "6", "4", "7"], ["9", "11", "15", "17", "18", "6", "4", "7"], ["11", "13", "6", "9"], ["11", "15", "17", "6", "9"], ["11", "15", "17", "18", "6", "9"], ["13", "6", "9", "11", "15", "17", "18"], ["15", "17", "6", "9", "11", "13"], ["15", "17", "18", "6", "9", "11", "13"], ["17", "6", "9", "11", "15"], ["17", "18", "6", "9", "11", "15"], ["18", "6", "9", "11", "15", "17"], ["1", "27", "3", "4", "7"], ["1", "27", "3", "4", "6", "9", "11", "13"], ["1", "27", "3", "4", "6", "9", "11", "15", "17", "18"]], "prime_paths_statements": [["if idx != idx2:\\l", "for idx2, elem2 in enumerate(numbers):\\l", "for idx, elem in enumerate(numbers):\\l", "return closest_pair\\l"], ["if idx != idx2:\\l", "if distance is None:\\l", "distance = abs(elem - elem2)\\lclosest_pair = tuple(sorted([elem, elem2]))\\l", "for idx2, elem2 in enumerate(numbers):\\l", "for idx, elem in enumerate(numbers):\\l", "return closest_pair\\l"], ["if idx != idx2:\\l", "if distance is None:\\l", "new_distance = abs(elem - elem2)\\l", "if new_distance < distance:\\l", "for idx2, elem2 in enumerate(numbers):\\l", "for idx, elem in enumerate(numbers):\\l", "return closest_pair\\l"], ["if idx != idx2:\\l", "if distance is None:\\l", "new_distance = abs(elem - elem2)\\l", "if new_distance < distance:\\l", "distance = new_distance\\lclosest_pair = tuple(sorted([elem, elem2]))\\l", "for idx2, elem2 in enumerate(numbers):\\l", "for idx, elem in enumerate(numbers):\\l", "return closest_pair\\l"], ["if distance is None:\\l", "distance = abs(elem - elem2)\\lclosest_pair = tuple(sorted([elem, elem2]))\\l", "for idx2, elem2 in enumerate(numbers):\\l", "if idx != idx2:\\l"], ["if distance is None:\\l", "new_distance = abs(elem - elem2)\\l", "if new_distance < distance:\\l", "for idx2, elem2 in enumerate(numbers):\\l", "if idx != idx2:\\l"], ["if distance is None:\\l", "new_distance = abs(elem - elem2)\\l", "if new_distance < distance:\\l", "distance = new_distance\\lclosest_pair = tuple(sorted([elem, elem2]))\\l", "for idx2, elem2 in enumerate(numbers):\\l", "if idx != idx2:\\l"], ["distance = abs(elem - elem2)\\lclosest_pair = tuple(sorted([elem, elem2]))\\l", "for idx2, elem2 in enumerate(numbers):\\l", "if idx != idx2:\\l", "if distance is None:\\l", "new_distance = abs(elem - elem2)\\l", "if new_distance < distance:\\l", "distance = new_distance\\lclosest_pair = tuple(sorted([elem, elem2]))\\l"], ["new_distance = abs(elem - elem2)\\l", "if new_distance < distance:\\l", "for idx2, elem2 in enumerate(numbers):\\l", "if idx != idx2:\\l", "if distance is None:\\l", "distance = abs(elem - elem2)\\lclosest_pair = tuple(sorted([elem, elem2]))\\l"], ["new_distance = abs(elem - elem2)\\l", "if new_distance < distance:\\l", "distance = new_distance\\lclosest_pair = tuple(sorted([elem, elem2]))\\l", "for idx2, elem2 in enumerate(numbers):\\l", "if idx != idx2:\\l", "if distance is None:\\l", "distance = abs(elem - elem2)\\lclosest_pair = tuple(sorted([elem, elem2]))\\l"], ["if new_distance < distance:\\l", "for idx2, elem2 in enumerate(numbers):\\l", "if idx != idx2:\\l", "if distance is None:\\l", "new_distance = abs(elem - elem2)\\l"], ["if new_distance < distance:\\l", "distance = new_distance\\lclosest_pair = tuple(sorted([elem, elem2]))\\l", "for idx2, elem2 in enumerate(numbers):\\l", "if idx != idx2:\\l", "if distance is None:\\l", "new_distance = abs(elem - elem2)\\l"], ["distance = new_distance\\lclosest_pair = tuple(sorted([elem, elem2]))\\l", "for idx2, elem2 in enumerate(numbers):\\l", "if idx != idx2:\\l", "if distance is None:\\l", "new_distance = abs(elem - elem2)\\l", "if new_distance < distance:\\l"], ["from typing import *\\ldef find_closest_elements(numbers: List[float]) ->Tuple[float, float]:...\\lfind_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\\l", "find_closest_elements", "closest_pair = None\\ldistance = None\\l", "for idx, elem in enumerate(numbers):\\l", "return closest_pair\\l"], ["from typing import *\\ldef find_closest_elements(numbers: List[float]) ->Tuple[float, float]:...\\lfind_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\\l", "find_closest_elements", "closest_pair = None\\ldistance = None\\l", "for idx, elem in enumerate(numbers):\\l", "for idx2, elem2 in enumerate(numbers):\\l", "if idx != idx2:\\l", "if distance is None:\\l", "distance = abs(elem - elem2)\\lclosest_pair = tuple(sorted([elem, elem2]))\\l"], ["from typing import *\\ldef find_closest_elements(numbers: List[float]) ->Tuple[float, float]:...\\lfind_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\\l", "find_closest_elements", "closest_pair = None\\ldistance = None\\l", "for idx, elem in enumerate(numbers):\\l", "for idx2, elem2 in enumerate(numbers):\\l", "if idx != idx2:\\l", "if distance is None:\\l", "new_distance = abs(elem - elem2)\\l", "if new_distance < distance:\\l", "distance = new_distance\\lclosest_pair = tuple(sorted([elem, elem2]))\\l"]], "prime_paths_linenumbers": [[10, 9, 8, 20], [10, 11, 12, 13, 9, 8, 20], [10, 11, 15, 16, 9, 8, 20], [10, 11, 15, 16, 17, 18, 9, 8, 20], [11, 12, 13, 9, 10], [11, 15, 16, 9, 10], [11, 15, 16, 17, 18, 9, 10], [12, 13, 9, 10, 11, 15, 16, 17, 18], [15, 16, 9, 10, 11, 12, 13], [15, 16, 17, 18, 9, 10, 11, 12, 13], [16, 9, 10, 11, 15], [16, 17, 18, 9, 10, 11, 15], [17, 18, 9, 10, 11, 15, 16], [1, 22, 5, 6, 8, 20], [1, 22, 5, 6, 8, 9, 10, 11, 12, 13], [1, 22, 5, 6, 8, 9, 10, 11, 15, 16, 17, 18]], "covered_statements_linenumbers": [1, 4, 5, 6, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 20, 22], "missing_statements_linenumbers": [], "covered_prime_paths_linenumbers": [[10, 9, 8, 20], [10, 11, 12, 13, 9, 8, 20], [10, 11, 15, 16, 9, 8, 20], [10, 11, 15, 16, 17, 18, 9, 8, 20], [11, 12, 13, 9, 10], [11, 15, 16, 9, 10], [11, 15, 16, 17, 18, 9, 10], [12, 13, 9, 10, 11, 15, 16, 17, 18], [15, 16, 9, 10, 11, 12, 13], [15, 16, 17, 18, 9, 10, 11, 12, 13], [16, 9, 10, 11, 15], [16, 17, 18, 9, 10, 11, 15], [17, 18, 9, 10, 11, 15, 16], [1, 22, 5, 6, 8, 20], [1, 22, 5, 6, 8, 9, 10, 11, 12, 13], [1, 22, 5, 6, 8, 9, 10, 11, 15, 16, 17, 18]], "missing_prime_paths_linenumbers": [], "num_total_prime_paths": 16, "num_covered_paths": 16, "prime_path_coverage": 1.0, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_20__1_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_20__1_CFG.dot"}
{"humaneval_id": "HumanEval_104", "python_file": "HumanEval_104/main.py", "input_file": "HumanEval_104/input.txt", "prime_paths_nodes": [["5", "4", "6"], ["5", "10", "4", "6"], ["10", "4", "5"], ["1", "15", "3", "4", "6"], ["1", "15", "3", "4", "5", "10"]], "prime_paths_statements": [["if all(int(c) % 2 == 1 for c in str(i)):\\l", "for i in x:\\l", "return sorted(odd_digit_elements)\\l"], ["if all(int(c) % 2 == 1 for c in str(i)):\\l", "odd_digit_elements.append(i)\\l", "for i in x:\\l", "return sorted(odd_digit_elements)\\l"], ["odd_digit_elements.append(i)\\l", "for i in x:\\l", "if all(int(c) % 2 == 1 for c in str(i)):\\l"], ["from typing import *\\ldef unique_digits(x):...\\lunique_digits([15, 33, 1422, 1])\\l", "unique_digits", "odd_digit_elements = []\\l", "for i in x:\\l", "return sorted(odd_digit_elements)\\l"], ["from typing import *\\ldef unique_digits(x):...\\lunique_digits([15, 33, 1422, 1])\\l", "unique_digits", "odd_digit_elements = []\\l", "for i in x:\\l", "if all(int(c) % 2 == 1 for c in str(i)):\\l", "odd_digit_elements.append(i)\\l"]], "prime_paths_linenumbers": [[5, 4, 7], [5, 6, 4, 7], [6, 4, 5], [1, 9, 3, 4, 7], [1, 9, 3, 4, 5, 6]], "covered_statements_linenumbers": [1, 2, 3, 4, 5, 6, 7, 9], "missing_statements_linenumbers": [], "covered_prime_paths_linenumbers": [[5, 4, 7], [5, 6, 4, 7], [6, 4, 5], [1, 9, 3, 4, 7], [1, 9, 3, 4, 5, 6]], "missing_prime_paths_linenumbers": [], "num_total_prime_paths": 5, "num_covered_paths": 5, "prime_path_coverage": 1.0, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_104_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_104_CFG.dot"}
{"humaneval_id": "HumanEval_100__0", "python_file": "HumanEval_100__0/main.py", "input_file": "HumanEval_100__0/input.txt", "prime_paths_nodes": [["1", "6", "3"]], "prime_paths_statements": [["from typing import *\\ldef make_a_pile(n):...\\lmake_a_pile(4)\\l", "make_a_pile", "return [(n + 2 * i) for i in range(n)]\\l"]], "prime_paths_linenumbers": [[1, 7, 5]], "covered_statements_linenumbers": [1, 4, 5, 7], "missing_statements_linenumbers": [], "covered_prime_paths_linenumbers": [[1, 7, 5]], "missing_prime_paths_linenumbers": [], "num_total_prime_paths": 1, "num_covered_paths": 1, "prime_path_coverage": 1.0, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_100__0_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_100__0_CFG.dot"}
{"humaneval_id": "HumanEval_131__1", "python_file": "HumanEval_131__1/main.py", "input_file": "HumanEval_131__1/input.txt", "prime_paths_nodes": [["6", "9", "4", "7", "12"], ["6", "9", "10", "4", "7", "12"], ["6", "9", "4", "7", "14"], ["6", "9", "10", "4", "7", "14"], ["9", "4", "6"], ["9", "10", "4", "6"], ["10", "4", "6", "9"], ["1", "18", "3", "4", "6", "9", "10"], ["1", "18", "3", "4", "7", "12"], ["1", "18", "3", "4", "7", "14"]], "prime_paths_statements": [["int_digit = int(digit)\\l", "if int_digit % 2 == 1:\\l", "for digit in str(n):\\l", "if odd_count == 0:\\l", "return 0\\l"], ["int_digit = int(digit)\\l", "if int_digit % 2 == 1:\\l", "product = product * int_digit\\lodd_count += 1\\l", "for digit in str(n):\\l", "if odd_count == 0:\\l", "return 0\\l"], ["int_digit = int(digit)\\l", "if int_digit % 2 == 1:\\l", "for digit in str(n):\\l", "if odd_count == 0:\\l", "return product\\l"], ["int_digit = int(digit)\\l", "if int_digit % 2 == 1:\\l", "product = product * int_digit\\lodd_count += 1\\l", "for digit in str(n):\\l", "if odd_count == 0:\\l", "return product\\l"], ["if int_digit % 2 == 1:\\l", "for digit in str(n):\\l", "int_digit = int(digit)\\l"], ["if int_digit % 2 == 1:\\l", "product = product * int_digit\\lodd_count += 1\\l", "for digit in str(n):\\l", "int_digit = int(digit)\\l"], ["product = product * int_digit\\lodd_count += 1\\l", "for digit in str(n):\\l", "int_digit = int(digit)\\l", "if int_digit % 2 == 1:\\l"], ["from typing import *\\ldef digits(n):...\\ldigits(5576543)\\l", "digits", "product = 1\\lodd_count = 0\\l", "for digit in str(n):\\l", "int_digit = int(digit)\\l", "if int_digit % 2 == 1:\\l", "product = product * int_digit\\lodd_count += 1\\l"], ["from typing import *\\ldef digits(n):...\\ldigits(5576543)\\l", "digits", "product = 1\\lodd_count = 0\\l", "for digit in str(n):\\l", "if odd_count == 0:\\l", "return 0\\l"], ["from typing import *\\ldef digits(n):...\\ldigits(5576543)\\l", "digits", "product = 1\\lodd_count = 0\\l", "for digit in str(n):\\l", "if odd_count == 0:\\l", "return product\\l"]], "prime_paths_linenumbers": [[8, 9, 7, 12, 13], [8, 9, 10, 11, 7, 12, 13], [8, 9, 7, 12, 15], [8, 9, 10, 11, 7, 12, 15], [9, 7, 8], [9, 10, 11, 7, 8], [10, 11, 7, 8, 9], [1, 17, 5, 6, 7, 8, 9, 10, 11], [1, 17, 5, 6, 7, 12, 13], [1, 17, 5, 6, 7, 12, 15]], "covered_statements_linenumbers": [1, 4, 5, 6, 7, 8, 9, 10, 11, 12, 15, 17], "missing_statements_linenumbers": [13], "covered_prime_paths_linenumbers": [[8, 9, 7, 12, 15], [8, 9, 10, 11, 7, 12, 15], [9, 7, 8], [9, 10, 11, 7, 8], [10, 11, 7, 8, 9], [1, 17, 5, 6, 7, 8, 9, 10, 11], [1, 17, 5, 6, 7, 12, 15]], "missing_prime_paths_linenumbers": [[8, 9, 7, 12, 13], [8, 9, 10, 11, 7, 12, 13], [1, 17, 5, 6, 7, 12, 13]], "num_total_prime_paths": 10, "num_covered_paths": 7, "prime_path_coverage": 0.7, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_131__1_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_131__1_CFG.dot"}
{"humaneval_id": "HumanEval_127", "python_file": "HumanEval_127/main.py", "input_file": "HumanEval_127/input.txt", "prime_paths_nodes": [["5", "6"], ["5", "7", "9"], ["5", "7", "10", "14"], ["5", "7", "10", "13", "15"], ["13", "10", "14"], ["1", "28", "3", "22", "23"], ["1", "28", "3", "22", "24"]], "prime_paths_statements": [["if num == 1 or num == 0:\\l", "return False\\l"], ["if num == 1 or num == 0:\\l", "if num == 2:\\l", "return True\\l"], ["if num == 1 or num == 0:\\l", "if num == 2:\\l", "for i in range(2, num):\\l", "return True\\l"], ["if num == 1 or num == 0:\\l", "if num == 2:\\l", "for i in range(2, num):\\l", "if num % i == 0:\\l", "return False\\l"], ["if num % i == 0:\\l", "for i in range(2, num):\\l", "return True\\l"], ["from typing import *\\ldef intersection(interval1, interval2):...\\lintersection((1, 2), (2, 3))\\l", "intersection", "def is_prime(num):...\\ll = max(interval1[0], interval2[0])\\lr = min(interval1[1], interval2[1])\\llength = r - l\\l", "if length > 0 and is_prime(length):\\l", "return 'YES'\\l"], ["from typing import *\\ldef intersection(interval1, interval2):...\\lintersection((1, 2), (2, 3))\\l", "intersection", "def is_prime(num):...\\ll = max(interval1[0], interval2[0])\\lr = min(interval1[1], interval2[1])\\llength = r - l\\l", "if length > 0 and is_prime(length):\\l", "return 'NO'\\l"]], "prime_paths_linenumbers": [[4, 5], [4, 6, 7], [4, 6, 8, 11], [4, 6, 8, 9, 10], [9, 8, 11], [1, 20, 3, 13, 14, 15, 16, 17], [1, 20, 3, 13, 14, 15, 16, 18]], "covered_statements_linenumbers": [1, 2, 3, 13, 14, 15, 16, 18, 20], "missing_statements_linenumbers": [4, 5, 6, 7, 8, 9, 10, 11, 17], "covered_prime_paths_linenumbers": [[1, 20, 3, 13, 14, 15, 16, 18]], "missing_prime_paths_linenumbers": [[4, 5], [4, 6, 7], [4, 6, 8, 11], [4, 6, 8, 9, 10], [9, 8, 11], [1, 20, 3, 13, 14, 15, 16, 17]], "num_total_prime_paths": 7, "num_covered_paths": 1, "prime_path_coverage": 0.14, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_127_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_127_CFG.dot"}
{"humaneval_id": "HumanEval_90", "python_file": "HumanEval_90/main.py", "input_file": "HumanEval_90/input.txt", "prime_paths_nodes": [["1", "9", "3", "6"]], "prime_paths_statements": [["from typing import *\\ldef next_smallest(lst):...\\lnext_smallest([1, 2, 3, 4, 5])\\l", "next_smallest", "lst = sorted(set(lst))\\l", "return None if len(lst) < 2 else lst[1]\\l"]], "prime_paths_linenumbers": [[1, 6, 3, 4]], "covered_statements_linenumbers": [1, 2, 3, 4, 6], "missing_statements_linenumbers": [], "covered_prime_paths_linenumbers": [[1, 6, 3, 4]], "missing_prime_paths_linenumbers": [], "num_total_prime_paths": 1, "num_covered_paths": 1, "prime_path_coverage": 1.0, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_90_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_90_CFG.dot"}
{"humaneval_id": "HumanEval_27__1", "python_file": "HumanEval_27__1/main.py", "input_file": "HumanEval_27__1/input.txt", "prime_paths_nodes": [["1", "6", "3"]], "prime_paths_statements": [["from typing import *\\ldef flip_case(string: str) ->str:...\\lflip_case('These violent deligh...')\\l", "flip_case", "return string.swapcase()\\l"]], "prime_paths_linenumbers": [[1, 7, 5]], "covered_statements_linenumbers": [1, 4, 5, 7], "missing_statements_linenumbers": [], "covered_prime_paths_linenumbers": [[1, 7, 5]], "missing_prime_paths_linenumbers": [], "num_total_prime_paths": 1, "num_covered_paths": 1, "prime_path_coverage": 1.0, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_27__1_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_27__1_CFG.dot"}
{"humaneval_id": "HumanEval_25__0", "python_file": "HumanEval_25__0/main.py", "input_file": "HumanEval_25__0/input.txt", "prime_paths_nodes": [["5", "7", "4", "6", "11", "12"], ["5", "7", "4", "6", "12"], ["5", "9", "4", "6", "11", "12"], ["5", "9", "4", "6", "12"], ["7", "4", "5", "9"], ["9", "4", "5", "7"], ["1", "16", "3", "4", "5", "7"], ["1", "16", "3", "4", "5", "9"], ["1", "16", "3", "4", "6", "11", "12"], ["1", "16", "3", "4", "6", "12"]], "prime_paths_statements": [["if n % i == 0:\\l", "fact.append(i)\\ln //= i\\l", "while i <= int(math.sqrt(n) + 1):\\l", "if n > 1:\\l", "fact.append(n)\\l", "return fact\\l"], ["if n % i == 0:\\l", "fact.append(i)\\ln //= i\\l", "while i <= int(math.sqrt(n) + 1):\\l", "if n > 1:\\l", "return fact\\l"], ["if n % i == 0:\\l", "i += 1\\l", "while i <= int(math.sqrt(n) + 1):\\l", "if n > 1:\\l", "fact.append(n)\\l", "return fact\\l"], ["if n % i == 0:\\l", "i += 1\\l", "while i <= int(math.sqrt(n) + 1):\\l", "if n > 1:\\l", "return fact\\l"], ["fact.append(i)\\ln //= i\\l", "while i <= int(math.sqrt(n) + 1):\\l", "if n % i == 0:\\l", "i += 1\\l"], ["i += 1\\l", "while i <= int(math.sqrt(n) + 1):\\l", "if n % i == 0:\\l", "fact.append(i)\\ln //= i\\l"], ["from typing import *\\ldef factorize(n: int) ->List[int]:...\\lfactorize(3 * 2 * 3)\\l", "factorize", "import math\\lfact = []\\li = 2\\l", "while i <= int(math.sqrt(n) + 1):\\l", "if n % i == 0:\\l", "fact.append(i)\\ln //= i\\l"], ["from typing import *\\ldef factorize(n: int) ->List[int]:...\\lfactorize(3 * 2 * 3)\\l", "factorize", "import math\\lfact = []\\li = 2\\l", "while i <= int(math.sqrt(n) + 1):\\l", "if n % i == 0:\\l", "i += 1\\l"], ["from typing import *\\ldef factorize(n: int) ->List[int]:...\\lfactorize(3 * 2 * 3)\\l", "factorize", "import math\\lfact = []\\li = 2\\l", "while i <= int(math.sqrt(n) + 1):\\l", "if n > 1:\\l", "fact.append(n)\\l", "return fact\\l"], ["from typing import *\\ldef factorize(n: int) ->List[int]:...\\lfactorize(3 * 2 * 3)\\l", "factorize", "import math\\lfact = []\\li = 2\\l", "while i <= int(math.sqrt(n) + 1):\\l", "if n > 1:\\l", "return fact\\l"]], "prime_paths_linenumbers": [[9, 10, 11, 8, 15, 16, 17], [9, 10, 11, 8, 15, 17], [9, 13, 8, 15, 16, 17], [9, 13, 8, 15, 17], [10, 11, 8, 9, 13], [13, 8, 9, 10, 11], [1, 19, 5, 6, 7, 8, 9, 10, 11], [1, 19, 5, 6, 7, 8, 9, 13], [1, 19, 5, 6, 7, 8, 15, 16, 17], [1, 19, 5, 6, 7, 8, 15, 17]], "covered_statements_linenumbers": [1, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 16, 17, 19], "missing_statements_linenumbers": [], "covered_prime_paths_linenumbers": [[9, 10, 11, 8, 15, 16, 17], [9, 10, 11, 8, 15, 17], [9, 13, 8, 15, 16, 17], [9, 13, 8, 15, 17], [10, 11, 8, 9, 13], [13, 8, 9, 10, 11], [1, 19, 5, 6, 7, 8, 9, 10, 11], [1, 19, 5, 6, 7, 8, 9, 13], [1, 19, 5, 6, 7, 8, 15, 16, 17], [1, 19, 5, 6, 7, 8, 15, 17]], "missing_prime_paths_linenumbers": [], "num_total_prime_paths": 10, "num_covered_paths": 10, "prime_path_coverage": 1.0, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_25__0_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_25__0_CFG.dot"}
{"humaneval_id": "HumanEval_96__0", "python_file": "HumanEval_96__0/main.py", "input_file": "HumanEval_96__0/input.txt", "prime_paths_nodes": [["6", "8", "10", "12", "11", "4", "7"], ["6", "8", "10", "12", "11", "15", "4", "7"], ["6", "8", "11", "4", "7"], ["6", "8", "11", "15", "4", "7"], ["8", "10", "12", "11", "4", "6"], ["8", "10", "12", "11", "15", "4", "6"], ["10", "8", "11", "4", "6"], ["10", "8", "11", "15", "4", "6"], ["10", "8", "11", "4", "7"], ["10", "8", "11", "15", "4", "7"], ["10", "12", "11", "4", "6", "8"], ["10", "12", "11", "15", "4", "6", "8"], ["11", "4", "6", "8", "10", "12"], ["11", "15", "4", "6", "8", "10", "12"], ["12", "11", "4", "6", "8", "10"], ["12", "11", "15", "4", "6", "8", "10"], ["15", "4", "6", "8", "10", "12", "11"], ["15", "4", "6", "8", "11"], ["1", "20", "3", "4", "7"], ["1", "20", "3", "4", "6", "8", "10", "12", "11", "15"], ["1", "20", "3", "4", "6", "8", "11", "15"]], "prime_paths_statements": [["is_prime = True\\l", "for j in range(2, i):\\l", "if i % j == 0:\\l", "is_prime = False\\lbreak\\l", "if is_prime:\\l", "for i in range(2, n):\\l", "return primes\\l"], ["is_prime = True\\l", "for j in range(2, i):\\l", "if i % j == 0:\\l", "is_prime = False\\lbreak\\l", "if is_prime:\\l", "primes.append(i)\\l", "for i in range(2, n):\\l", "return primes\\l"], ["is_prime = True\\l", "for j in range(2, i):\\l", "if is_prime:\\l", "for i in range(2, n):\\l", "return primes\\l"], ["is_prime = True\\l", "for j in range(2, i):\\l", "if is_prime:\\l", "primes.append(i)\\l", "for i in range(2, n):\\l", "return primes\\l"], ["for j in range(2, i):\\l", "if i % j == 0:\\l", "is_prime = False\\lbreak\\l", "if is_prime:\\l", "for i in range(2, n):\\l", "is_prime = True\\l"], ["for j in range(2, i):\\l", "if i % j == 0:\\l", "is_prime = False\\lbreak\\l", "if is_prime:\\l", "primes.append(i)\\l", "for i in range(2, n):\\l", "is_prime = True\\l"], ["if i % j == 0:\\l", "for j in range(2, i):\\l", "if is_prime:\\l", "for i in range(2, n):\\l", "is_prime = True\\l"], ["if i % j == 0:\\l", "for j in range(2, i):\\l", "if is_prime:\\l", "primes.append(i)\\l", "for i in range(2, n):\\l", "is_prime = True\\l"], ["if i % j == 0:\\l", "for j in range(2, i):\\l", "if is_prime:\\l", "for i in range(2, n):\\l", "return primes\\l"], ["if i % j == 0:\\l", "for j in range(2, i):\\l", "if is_prime:\\l", "primes.append(i)\\l", "for i in range(2, n):\\l", "return primes\\l"], ["if i % j == 0:\\l", "is_prime = False\\lbreak\\l", "if is_prime:\\l", "for i in range(2, n):\\l", "is_prime = True\\l", "for j in range(2, i):\\l"], ["if i % j == 0:\\l", "is_prime = False\\lbreak\\l", "if is_prime:\\l", "primes.append(i)\\l", "for i in range(2, n):\\l", "is_prime = True\\l", "for j in range(2, i):\\l"], ["if is_prime:\\l", "for i in range(2, n):\\l", "is_prime = True\\l", "for j in range(2, i):\\l", "if i % j == 0:\\l", "is_prime = False\\lbreak\\l"], ["if is_prime:\\l", "primes.append(i)\\l", "for i in range(2, n):\\l", "is_prime = True\\l", "for j in range(2, i):\\l", "if i % j == 0:\\l", "is_prime = False\\lbreak\\l"], ["is_prime = False\\lbreak\\l", "if is_prime:\\l", "for i in range(2, n):\\l", "is_prime = True\\l", "for j in range(2, i):\\l", "if i % j == 0:\\l"], ["is_prime = False\\lbreak\\l", "if is_prime:\\l", "primes.append(i)\\l", "for i in range(2, n):\\l", "is_prime = True\\l", "for j in range(2, i):\\l", "if i % j == 0:\\l"], ["primes.append(i)\\l", "for i in range(2, n):\\l", "is_prime = True\\l", "for j in range(2, i):\\l", "if i % j == 0:\\l", "is_prime = False\\lbreak\\l", "if is_prime:\\l"], ["primes.append(i)\\l", "for i in range(2, n):\\l", "is_prime = True\\l", "for j in range(2, i):\\l", "if is_prime:\\l"], ["from typing import *\\ldef count_up_to(n):...\\lcount_up_to(18)\\l", "count_up_to", "primes = []\\l", "for i in range(2, n):\\l", "return primes\\l"], ["from typing import *\\ldef count_up_to(n):...\\lcount_up_to(18)\\l", "count_up_to", "primes = []\\l", "for i in range(2, n):\\l", "is_prime = True\\l", "for j in range(2, i):\\l", "if i % j == 0:\\l", "is_prime = False\\lbreak\\l", "if is_prime:\\l", "primes.append(i)\\l"], ["from typing import *\\ldef count_up_to(n):...\\lcount_up_to(18)\\l", "count_up_to", "primes = []\\l", "for i in range(2, n):\\l", "is_prime = True\\l", "for j in range(2, i):\\l", "if is_prime:\\l", "primes.append(i)\\l"]], "prime_paths_linenumbers": [[7, 8, 9, 10, 11, 12, 6, 14], [7, 8, 9, 10, 11, 12, 13, 6, 14], [7, 8, 12, 6, 14], [7, 8, 12, 13, 6, 14], [8, 9, 10, 11, 12, 6, 7], [8, 9, 10, 11, 12, 13, 6, 7], [9, 8, 12, 6, 7], [9, 8, 12, 13, 6, 7], [9, 8, 12, 6, 14], [9, 8, 12, 13, 6, 14], [9, 10, 11, 12, 6, 7, 8], [9, 10, 11, 12, 13, 6, 7, 8], [12, 6, 7, 8, 9, 10, 11], [12, 13, 6, 7, 8, 9, 10, 11], [10, 11, 12, 6, 7, 8, 9], [10, 11, 12, 13, 6, 7, 8, 9], [13, 6, 7, 8, 9, 10, 11, 12], [13, 6, 7, 8, 12], [1, 16, 5, 6, 14], [1, 16, 5, 6, 7, 8, 9, 10, 11, 12, 13], [1, 16, 5, 6, 7, 8, 12, 13]], "covered_statements_linenumbers": [1, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16], "missing_statements_linenumbers": [], "covered_prime_paths_linenumbers": [[7, 8, 9, 10, 11, 12, 6, 14], [7, 8, 9, 10, 11, 12, 13, 6, 14], [7, 8, 12, 6, 14], [7, 8, 12, 13, 6, 14], [8, 9, 10, 11, 12, 6, 7], [8, 9, 10, 11, 12, 13, 6, 7], [9, 8, 12, 6, 7], [9, 8, 12, 13, 6, 7], [9, 8, 12, 6, 14], [9, 8, 12, 13, 6, 14], [9, 10, 11, 12, 6, 7, 8], [9, 10, 11, 12, 13, 6, 7, 8], [12, 6, 7, 8, 9, 10, 11], [12, 13, 6, 7, 8, 9, 10, 11], [10, 11, 12, 6, 7, 8, 9], [10, 11, 12, 13, 6, 7, 8, 9], [13, 6, 7, 8, 9, 10, 11, 12], [13, 6, 7, 8, 12], [1, 16, 5, 6, 14], [1, 16, 5, 6, 7, 8, 9, 10, 11, 12, 13], [1, 16, 5, 6, 7, 8, 12, 13]], "missing_prime_paths_linenumbers": [], "num_total_prime_paths": 21, "num_covered_paths": 21, "prime_path_coverage": 1.0, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_96__0_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_96__0_CFG.dot"}
{"humaneval_id": "HumanEval_5__1", "python_file": "HumanEval_5__1/main.py", "input_file": "HumanEval_5__1/input.txt", "prime_paths_nodes": [["8", "7", "9", "13"], ["1", "16", "3", "4"], ["1", "16", "3", "5", "7", "8"], ["1", "16", "3", "5", "7", "9", "13"]], "prime_paths_statements": [["result.append(n)\\lresult.append(delimeter)\\l", "for n in numbers[:-1]:\\l", "result.append(numbers[-1])\\l", "return result\\l"], ["from typing import *\\ldef intersperse(numbers: List[int], delimeter: int) ->List[int]:...\\lintersperse([2, 2, 2], 2)\\l", "intersperse", "if not numbers:\\l", "return []\\l"], ["from typing import *\\ldef intersperse(numbers: List[int], delimeter: int) ->List[int]:...\\lintersperse([2, 2, 2], 2)\\l", "intersperse", "if not numbers:\\l", "result = []\\l", "for n in numbers[:-1]:\\l", "result.append(n)\\lresult.append(delimeter)\\l"], ["from typing import *\\ldef intersperse(numbers: List[int], delimeter: int) ->List[int]:...\\lintersperse([2, 2, 2], 2)\\l", "intersperse", "if not numbers:\\l", "result = []\\l", "for n in numbers[:-1]:\\l", "result.append(numbers[-1])\\l", "return result\\l"]], "prime_paths_linenumbers": [[11, 12, 10, 14, 16], [1, 18, 5, 6], [1, 18, 5, 8, 10, 11, 12], [1, 18, 5, 8, 10, 14, 16]], "covered_statements_linenumbers": [1, 4, 5, 8, 10, 11, 12, 14, 16, 18], "missing_statements_linenumbers": [6], "covered_prime_paths_linenumbers": [[11, 12, 10, 14, 16], [1, 18, 5, 8, 10, 11, 12], [1, 18, 5, 8, 10, 14, 16]], "missing_prime_paths_linenumbers": [[1, 18, 5, 6]], "num_total_prime_paths": 4, "num_covered_paths": 3, "prime_path_coverage": 0.75, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_5__1_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_5__1_CFG.dot"}
{"humaneval_id": "HumanEval_105__0", "python_file": "HumanEval_105__0/main.py", "input_file": "HumanEval_105__0/input.txt", "prime_paths_nodes": [["8", "5", "7"], ["10", "5", "7"], ["10", "5", "8"], ["1", "14", "3", "5", "7"], ["1", "14", "3", "5", "8"]], "prime_paths_statements": [["new_arr.append(dic[var])\\l", "for var in sorted_arr:\\l", "return new_arr\\l"], ["", "for var in sorted_arr:\\l", "return new_arr\\l"], ["", "for var in sorted_arr:\\l", "new_arr.append(dic[var])\\l"], ["from typing import *\\ldef by_length(arr):...\\lby_length([1, -1, 3, 2])\\l", "by_length", "dic = {(1): 'One', (2): 'Two', (3): 'Three', (4): 'Four', (5): 'Five', (6):\\l    'Six', (7): 'Seven', (8): 'Eight', (9): 'Nine'}\\lsorted_arr = sorted(arr, reverse=True)\\lnew_arr = []\\l", "for var in sorted_arr:\\l", "return new_arr\\l"], ["from typing import *\\ldef by_length(arr):...\\lby_length([1, -1, 3, 2])\\l", "by_length", "dic = {(1): 'One', (2): 'Two', (3): 'Three', (4): 'Four', (5): 'Five', (6):\\l    'Six', (7): 'Seven', (8): 'Eight', (9): 'Nine'}\\lsorted_arr = sorted(arr, reverse=True)\\lnew_arr = []\\l", "for var in sorted_arr:\\l", "new_arr.append(dic[var])\\l"]], "prime_paths_linenumbers": [[19, 20, 18, 23], [18, 23], [18, 19, 20], [1, 25, 5, 16, 17, 18, 23], [1, 25, 5, 16, 17, 18, 19, 20]], "covered_statements_linenumbers": [1, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 25], "missing_statements_linenumbers": [], "covered_prime_paths_linenumbers": [[19, 20, 18, 23], [18, 23], [18, 19, 20], [1, 25, 5, 16, 17, 18, 23], [1, 25, 5, 16, 17, 18, 19, 20]], "missing_prime_paths_linenumbers": [], "num_total_prime_paths": 5, "num_covered_paths": 5, "prime_path_coverage": 1.0, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_105__0_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_105__0_CFG.dot"}
{"humaneval_id": "HumanEval_102__0", "python_file": "HumanEval_102__0/main.py", "input_file": "HumanEval_102__0/input.txt", "prime_paths_nodes": [["1", "15", "3", "4"], ["1", "15", "3", "5", "7"], ["1", "15", "3", "5", "8", "10"], ["1", "15", "3", "5", "8", "11"]], "prime_paths_statements": [["from typing import *\\ldef choose_num(x, y):...\\lchoose_num(13, 12)\\l", "choose_num", "if x > y:\\l", "return -1\\l"], ["from typing import *\\ldef choose_num(x, y):...\\lchoose_num(13, 12)\\l", "choose_num", "if x > y:\\l", "if y % 2 == 0:\\l", "return y\\l"], ["from typing import *\\ldef choose_num(x, y):...\\lchoose_num(13, 12)\\l", "choose_num", "if x > y:\\l", "if y % 2 == 0:\\l", "if x == y:\\l", "return -1\\l"], ["from typing import *\\ldef choose_num(x, y):...\\lchoose_num(13, 12)\\l", "choose_num", "if x > y:\\l", "if y % 2 == 0:\\l", "if x == y:\\l", "return y - 1\\l"]], "prime_paths_linenumbers": [[1, 13, 5, 6], [1, 13, 5, 7, 8], [1, 13, 5, 7, 9, 10], [1, 13, 5, 7, 9, 11]], "covered_statements_linenumbers": [1, 4, 5, 6, 13], "missing_statements_linenumbers": [7, 8, 9, 10, 11], "covered_prime_paths_linenumbers": [[1, 13, 5, 6]], "missing_prime_paths_linenumbers": [[1, 13, 5, 7, 8], [1, 13, 5, 7, 9, 10], [1, 13, 5, 7, 9, 11]], "num_total_prime_paths": 4, "num_covered_paths": 1, "prime_path_coverage": 0.25, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_102__0_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_102__0_CFG.dot"}
{"humaneval_id": "HumanEval_128__0", "python_file": "HumanEval_128__0/main.py", "input_file": "HumanEval_128__0/input.txt", "prime_paths_nodes": [["1", "13", "3", "4"], ["1", "13", "3", "5", "10"]], "prime_paths_statements": [["from typing import *\\ldef prod_signs(arr):...\\lprod_signs([-1, 1, 1, 1])\\l", "prod_signs", "if not arr:\\l", "return None\\l"], ["from typing import *\\ldef prod_signs(arr):...\\lprod_signs([-1, 1, 1, 1])\\l", "prod_signs", "if not arr:\\l", "prod = 0 if 0 in arr else (-1) ** len(list(filter(lambda x: x < 0, arr)))\\l", "return prod * sum([abs(i) for i in arr])\\l"]], "prime_paths_linenumbers": [[1, 10, 5, 6], [1, 10, 5, 7, 8]], "covered_statements_linenumbers": [1, 4, 5, 7, 8, 10], "missing_statements_linenumbers": [6], "covered_prime_paths_linenumbers": [[1, 10, 5, 7, 8]], "missing_prime_paths_linenumbers": [[1, 10, 5, 6]], "num_total_prime_paths": 2, "num_covered_paths": 1, "prime_path_coverage": 0.5, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_128__0_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_128__0_CFG.dot"}
{"humaneval_id": "HumanEval_151__1", "python_file": "HumanEval_151__1/main.py", "input_file": "HumanEval_151__1/input.txt", "prime_paths_nodes": [["1", "6", "3"]], "prime_paths_statements": [["from typing import *\\ldef double_the_difference(lst):...\\ldouble_the_difference([])\\l", "double_the_difference", "return sum([(i ** 2) for i in lst if i > 0 and i % 2 != 0 and '.' not in\\l    str(i)])\\l"]], "prime_paths_linenumbers": [[1, 8, 5]], "covered_statements_linenumbers": [1, 4, 5, 6, 8], "missing_statements_linenumbers": [], "covered_prime_paths_linenumbers": [[1, 8, 5]], "missing_prime_paths_linenumbers": [], "num_total_prime_paths": 1, "num_covered_paths": 1, "prime_path_coverage": 1.0, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_151__1_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_151__1_CFG.dot"}
{"humaneval_id": "HumanEval_53__1", "python_file": "HumanEval_53__1/main.py", "input_file": "HumanEval_53__1/input.txt", "prime_paths_nodes": [["1", "6", "3"]], "prime_paths_statements": [["from typing import *\\ldef add(x: int, y: int):...\\ladd(6, 8)\\l", "add", "return x + y\\l"]], "prime_paths_linenumbers": [[1, 7, 5]], "covered_statements_linenumbers": [1, 4, 5, 7], "missing_statements_linenumbers": [], "covered_prime_paths_linenumbers": [[1, 7, 5]], "missing_prime_paths_linenumbers": [], "num_total_prime_paths": 1, "num_covered_paths": 1, "prime_path_coverage": 1.0, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_53__1_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_53__1_CFG.dot"}
{"humaneval_id": "HumanEval_113__1", "python_file": "HumanEval_113__1/main.py", "input_file": "HumanEval_113__1/input.txt", "prime_paths_nodes": [["5", "4", "6"], ["1", "16", "3", "4", "5"], ["1", "16", "3", "4", "6"]], "prime_paths_statements": [["n = sum(int(d) % 2 == 1 for d in arr)\\lres.append('the number of odd el...' + str(n) + 'n the str' + str(n) +\\l    'ng ' + str(n) + ' of the ' + str(n) + 'nput.')\\l", "for arr in lst:\\l", "return res\\l"], ["from typing import *\\ldef odd_count(lst):...\\lodd_count(['271', '137', '314'])\\l", "odd_count", "res = []\\l", "for arr in lst:\\l", "n = sum(int(d) % 2 == 1 for d in arr)\\lres.append('the number of odd el...' + str(n) + 'n the str' + str(n) +\\l    'ng ' + str(n) + ' of the ' + str(n) + 'nput.')\\l"], ["from typing import *\\ldef odd_count(lst):...\\lodd_count(['271', '137', '314'])\\l", "odd_count", "res = []\\l", "for arr in lst:\\l", "return res\\l"]], "prime_paths_linenumbers": [[7, 8, 6, 18], [1, 20, 5, 6, 7, 8], [1, 20, 5, 6, 18]], "covered_statements_linenumbers": [1, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 20], "missing_statements_linenumbers": [], "covered_prime_paths_linenumbers": [[7, 8, 6, 18], [1, 20, 5, 6, 7, 8], [1, 20, 5, 6, 18]], "missing_prime_paths_linenumbers": [], "num_total_prime_paths": 3, "num_covered_paths": 3, "prime_path_coverage": 1.0, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_113__1_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_113__1_CFG.dot"}
{"humaneval_id": "HumanEval_7", "python_file": "HumanEval_7/main.py", "input_file": "HumanEval_7/input.txt", "prime_paths_nodes": [["1", "6", "3"]], "prime_paths_statements": [["from typing import *\\ldef filter_by_substring(strings: List[str], substring: str) ->List[str]:...\\lfilter_by_substring([], 'john')\\l", "filter_by_substring", "return [x for x in strings if substring in x]\\l"]], "prime_paths_linenumbers": [[1, 5, 3]], "covered_statements_linenumbers": [1, 2, 3, 5], "missing_statements_linenumbers": [], "covered_prime_paths_linenumbers": [[1, 5, 3]], "missing_prime_paths_linenumbers": [], "num_total_prime_paths": 1, "num_covered_paths": 1, "prime_path_coverage": 1.0, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_7_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_7_CFG.dot"}
{"humaneval_id": "HumanEval_136", "python_file": "HumanEval_136/main.py", "input_file": "HumanEval_136/input.txt", "prime_paths_nodes": [["1", "11", "3", "8"]], "prime_paths_statements": [["from typing import *\\ldef largest_smallest_integers(lst):...\\llargest_smallest_integers([2, 4, 1, 3, 5, 7])\\l", "largest_smallest_integers", "smallest = list(filter(lambda x: x < 0, lst))\\llargest = list(filter(lambda x: x > 0, lst))\\l", "return max(smallest) if smallest else None, min(largest) if largest else None\\l"]], "prime_paths_linenumbers": [[1, 7, 3, 4, 5]], "covered_statements_linenumbers": [1, 2, 3, 4, 5, 7], "missing_statements_linenumbers": [], "covered_prime_paths_linenumbers": [[1, 7, 3, 4, 5]], "missing_prime_paths_linenumbers": [], "num_total_prime_paths": 1, "num_covered_paths": 1, "prime_path_coverage": 1.0, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_136_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_136_CFG.dot"}
{"humaneval_id": "HumanEval_99", "python_file": "HumanEval_99/main.py", "input_file": "HumanEval_99/input.txt", "prime_paths_nodes": [["8", "6", "7", "11", "12", "21", "13"], ["8", "6", "7", "11", "12", "23", "13"], ["8", "6", "7", "11", "14", "16", "13"], ["8", "6", "7", "11", "14", "18", "13"], ["1", "28", "3", "4", "6", "8"], ["1", "28", "3", "4", "6", "7", "11", "12", "21", "13"], ["1", "28", "3", "4", "6", "7", "11", "12", "23", "13"], ["1", "28", "3", "4", "6", "7", "11", "14", "16", "13"], ["1", "28", "3", "4", "6", "7", "11", "14", "18", "13"], ["1", "28", "3", "4", "7", "11", "12", "21", "13"], ["1", "28", "3", "4", "7", "11", "12", "23", "13"], ["1", "28", "3", "4", "7", "11", "14", "16", "13"], ["1", "28", "3", "4", "7", "11", "14", "18", "13"]], "prime_paths_statements": [["value = value[:-1]\\l", "while value[-1] == '0':\\l", "num = float(value)\\l", "if value[-2:] == '.5':\\l", "if num > 0:\\l", "res = ceil(num)\\l", "return res\\l"], ["value = value[:-1]\\l", "while value[-1] == '0':\\l", "num = float(value)\\l", "if value[-2:] == '.5':\\l", "if num > 0:\\l", "res = floor(num)\\l", "return res\\l"], ["value = value[:-1]\\l", "while value[-1] == '0':\\l", "num = float(value)\\l", "if value[-2:] == '.5':\\l", "if len(value) > 0:\\l", "res = int(round(num))\\l", "return res\\l"], ["value = value[:-1]\\l", "while value[-1] == '0':\\l", "num = float(value)\\l", "if value[-2:] == '.5':\\l", "if len(value) > 0:\\l", "res = 0\\l", "return res\\l"], ["from typing import *\\ldef closest_integer(value):...\\lclosest_integer('10')\\l", "closest_integer", "from math import floor, ceil\\l", "if value.count('.') == 1:\\l", "while value[-1] == '0':\\l", "value = value[:-1]\\l"], ["from typing import *\\ldef closest_integer(value):...\\lclosest_integer('10')\\l", "closest_integer", "from math import floor, ceil\\l", "if value.count('.') == 1:\\l", "while value[-1] == '0':\\l", "num = float(value)\\l", "if value[-2:] == '.5':\\l", "if num > 0:\\l", "res = ceil(num)\\l", "return res\\l"], ["from typing import *\\ldef closest_integer(value):...\\lclosest_integer('10')\\l", "closest_integer", "from math import floor, ceil\\l", "if value.count('.') == 1:\\l", "while value[-1] == '0':\\l", "num = float(value)\\l", "if value[-2:] == '.5':\\l", "if num > 0:\\l", "res = floor(num)\\l", "return res\\l"], ["from typing import *\\ldef closest_integer(value):...\\lclosest_integer('10')\\l", "closest_integer", "from math import floor, ceil\\l", "if value.count('.') == 1:\\l", "while value[-1] == '0':\\l", "num = float(value)\\l", "if value[-2:] == '.5':\\l", "if len(value) > 0:\\l", "res = int(round(num))\\l", "return res\\l"], ["from typing import *\\ldef closest_integer(value):...\\lclosest_integer('10')\\l", "closest_integer", "from math import floor, ceil\\l", "if value.count('.') == 1:\\l", "while value[-1] == '0':\\l", "num = float(value)\\l", "if value[-2:] == '.5':\\l", "if len(value) > 0:\\l", "res = 0\\l", "return res\\l"], ["from typing import *\\ldef closest_integer(value):...\\lclosest_integer('10')\\l", "closest_integer", "from math import floor, ceil\\l", "if value.count('.') == 1:\\l", "num = float(value)\\l", "if value[-2:] == '.5':\\l", "if num > 0:\\l", "res = ceil(num)\\l", "return res\\l"], ["from typing import *\\ldef closest_integer(value):...\\lclosest_integer('10')\\l", "closest_integer", "from math import floor, ceil\\l", "if value.count('.') == 1:\\l", "num = float(value)\\l", "if value[-2:] == '.5':\\l", "if num > 0:\\l", "res = floor(num)\\l", "return res\\l"], ["from typing import *\\ldef closest_integer(value):...\\lclosest_integer('10')\\l", "closest_integer", "from math import floor, ceil\\l", "if value.count('.') == 1:\\l", "num = float(value)\\l", "if value[-2:] == '.5':\\l", "if len(value) > 0:\\l", "res = int(round(num))\\l", "return res\\l"], ["from typing import *\\ldef closest_integer(value):...\\lclosest_integer('10')\\l", "closest_integer", "from math import floor, ceil\\l", "if value.count('.') == 1:\\l", "num = float(value)\\l", "if value[-2:] == '.5':\\l", "if len(value) > 0:\\l", "res = 0\\l", "return res\\l"]], "prime_paths_linenumbers": [[8, 7, 10, 11, 12, 13, 21], [8, 7, 10, 11, 12, 15, 21], [8, 7, 10, 11, 16, 17, 21], [8, 7, 10, 11, 16, 19, 21], [1, 24, 3, 5, 7, 8], [1, 24, 3, 5, 7, 10, 11, 12, 13, 21], [1, 24, 3, 5, 7, 10, 11, 12, 15, 21], [1, 24, 3, 5, 7, 10, 11, 16, 17, 21], [1, 24, 3, 5, 7, 10, 11, 16, 19, 21], [1, 24, 3, 5, 10, 11, 12, 13, 21], [1, 24, 3, 5, 10, 11, 12, 15, 21], [1, 24, 3, 5, 10, 11, 16, 17, 21], [1, 24, 3, 5, 10, 11, 16, 19, 21]], "covered_statements_linenumbers": [1, 2, 3, 5, 10, 11, 16, 17, 21, 24], "missing_statements_linenumbers": [7, 8, 12, 13, 15, 19], "covered_prime_paths_linenumbers": [[1, 24, 3, 5, 10, 11, 16, 17, 21]], "missing_prime_paths_linenumbers": [[8, 7, 10, 11, 12, 13, 21], [8, 7, 10, 11, 12, 15, 21], [8, 7, 10, 11, 16, 17, 21], [8, 7, 10, 11, 16, 19, 21], [1, 24, 3, 5, 7, 8], [1, 24, 3, 5, 7, 10, 11, 12, 13, 21], [1, 24, 3, 5, 7, 10, 11, 12, 15, 21], [1, 24, 3, 5, 7, 10, 11, 16, 17, 21], [1, 24, 3, 5, 7, 10, 11, 16, 19, 21], [1, 24, 3, 5, 10, 11, 12, 13, 21], [1, 24, 3, 5, 10, 11, 12, 15, 21], [1, 24, 3, 5, 10, 11, 16, 19, 21]], "num_total_prime_paths": 13, "num_covered_paths": 1, "prime_path_coverage": 0.08, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_99_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_99_CFG.dot"}
{"humaneval_id": "HumanEval_12__0", "python_file": "HumanEval_12__0/main.py", "input_file": "HumanEval_12__0/input.txt", "prime_paths_nodes": [["10", "9"], ["1", "17", "3", "4"], ["1", "17", "3", "5", "9", "10", "13"]], "prime_paths_statements": [["if len(s) == maxlen:\\l", "for s in strings:\\l"], ["from typing import *\\ldef longest(strings: List[str]) ->Optional[str]:...\\llongest(['x', 'y', 'z'])\\l", "longest", "if not strings:\\l", "return None\\l"], ["from typing import *\\ldef longest(strings: List[str]) ->Optional[str]:...\\llongest(['x', 'y', 'z'])\\l", "longest", "if not strings:\\l", "maxlen = max(len(x) for x in strings)\\l", "for s in strings:\\l", "if len(s) == maxlen:\\l", "return s\\l"]], "prime_paths_linenumbers": [[10, 9], [1, 13, 5, 6], [1, 13, 5, 8, 9, 10, 11]], "covered_statements_linenumbers": [1, 4, 5, 8, 9, 10, 11, 13], "missing_statements_linenumbers": [6], "covered_prime_paths_linenumbers": [[10, 9], [1, 13, 5, 8, 9, 10, 11]], "missing_prime_paths_linenumbers": [[1, 13, 5, 6]], "num_total_prime_paths": 3, "num_covered_paths": 2, "prime_path_coverage": 0.67, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_12__0_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_12__0_CFG.dot"}
{"humaneval_id": "HumanEval_69__0", "python_file": "HumanEval_69__0/main.py", "input_file": "HumanEval_69__0/input.txt", "prime_paths_nodes": [["6", "5", "7", "8", "12"], ["6", "5", "7", "8", "11", "13"], ["11", "8", "12"], ["11", "13", "8", "12"], ["13", "8", "11"], ["1", "17", "3", "5", "6"], ["1", "17", "3", "5", "7", "8", "12"], ["1", "17", "3", "5", "7", "8", "11", "13"]], "prime_paths_statements": [["frq[i] += 1\\l", "for i in lst:\\l", "ans = -1\\l", "for i in range(1, len(frq)):\\l", "return ans\\l"], ["frq[i] += 1\\l", "for i in lst:\\l", "ans = -1\\l", "for i in range(1, len(frq)):\\l", "if frq[i] >= i:\\l", "ans = i\\l"], ["if frq[i] >= i:\\l", "for i in range(1, len(frq)):\\l", "return ans\\l"], ["if frq[i] >= i:\\l", "ans = i\\l", "for i in range(1, len(frq)):\\l", "return ans\\l"], ["ans = i\\l", "for i in range(1, len(frq)):\\l", "if frq[i] >= i:\\l"], ["from typing import *\\ldef search(lst):...\\lsearch([2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1])\\l", "search", "frq = [0] * (max(lst) + 1)\\l", "for i in lst:\\l", "frq[i] += 1\\l"], ["from typing import *\\ldef search(lst):...\\lsearch([2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1])\\l", "search", "frq = [0] * (max(lst) + 1)\\l", "for i in lst:\\l", "ans = -1\\l", "for i in range(1, len(frq)):\\l", "return ans\\l"], ["from typing import *\\ldef search(lst):...\\lsearch([2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1])\\l", "search", "frq = [0] * (max(lst) + 1)\\l", "for i in lst:\\l", "ans = -1\\l", "for i in range(1, len(frq)):\\l", "if frq[i] >= i:\\l", "ans = i\\l"]], "prime_paths_linenumbers": [[7, 6, 9, 10, 14], [7, 6, 9, 10, 11, 12], [11, 10, 14], [11, 12, 10, 14], [12, 10, 11], [1, 16, 5, 6, 7], [1, 16, 5, 6, 9, 10, 14], [1, 16, 5, 6, 9, 10, 11, 12]], "covered_statements_linenumbers": [1, 4, 5, 6, 7, 9, 10, 11, 12, 14, 16], "missing_statements_linenumbers": [], "covered_prime_paths_linenumbers": [[7, 6, 9, 10, 14], [7, 6, 9, 10, 11, 12], [11, 10, 14], [11, 12, 10, 14], [12, 10, 11], [1, 16, 5, 6, 7], [1, 16, 5, 6, 9, 10, 14], [1, 16, 5, 6, 9, 10, 11, 12]], "missing_prime_paths_linenumbers": [], "num_total_prime_paths": 8, "num_covered_paths": 8, "prime_path_coverage": 1.0, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_69__0_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_69__0_CFG.dot"}
{"humaneval_id": "HumanEval_70__0", "python_file": "HumanEval_70__0/main.py", "input_file": "HumanEval_70__0/input.txt", "prime_paths_nodes": [["5", "4", "6"], ["1", "13", "3", "4", "5"], ["1", "13", "3", "4", "6"]], "prime_paths_statements": [["res.append(min(lst) if switch else max(lst))\\llst.remove(res[-1])\\lswitch = not switch\\l", "while lst:\\l", "return res\\l"], ["from typing import *\\ldef strange_sort_list(lst):...\\lstrange_sort_list([])\\l", "strange_sort_list", "res, switch = [], True\\l", "while lst:\\l", "res.append(min(lst) if switch else max(lst))\\llst.remove(res[-1])\\lswitch = not switch\\l"], ["from typing import *\\ldef strange_sort_list(lst):...\\lstrange_sort_list([])\\l", "strange_sort_list", "res, switch = [], True\\l", "while lst:\\l", "return res\\l"]], "prime_paths_linenumbers": [[7, 8, 9, 6, 10], [1, 12, 5, 6, 7, 8, 9], [1, 12, 5, 6, 10]], "covered_statements_linenumbers": [1, 4, 5, 6, 10, 12], "missing_statements_linenumbers": [7, 8, 9], "covered_prime_paths_linenumbers": [[1, 12, 5, 6, 10]], "missing_prime_paths_linenumbers": [[7, 8, 9, 6, 10], [1, 12, 5, 6, 7, 8, 9]], "num_total_prime_paths": 3, "num_covered_paths": 1, "prime_path_coverage": 0.33, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_70__0_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_70__0_CFG.dot"}
{"humaneval_id": "HumanEval_11__1", "python_file": "HumanEval_11__1/main.py", "input_file": "HumanEval_11__1/input.txt", "prime_paths_nodes": [["5", "6"], ["5", "8"], ["1", "15", "3", "12"]], "prime_paths_statements": [["if i == j:\\l", "return '0'\\l"], ["if i == j:\\l", "return '1'\\l"], ["from typing import *\\ldef string_xor(a: str, b: str) ->str:...\\lstring_xor('0101', '0000')\\l", "string_xor", "def xor(i, j):...\\l", "return ''.join(xor(x, y) for x, y in zip(a, b))\\l"]], "prime_paths_linenumbers": [[6, 7], [6, 9], [1, 13, 5, 11]], "covered_statements_linenumbers": [1, 4, 5, 6, 7, 9, 11, 13], "missing_statements_linenumbers": [], "covered_prime_paths_linenumbers": [[6, 7], [6, 9], [1, 13, 5, 11]], "missing_prime_paths_linenumbers": [], "num_total_prime_paths": 3, "num_covered_paths": 3, "prime_path_coverage": 1.0, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_11__1_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_11__1_CFG.dot"}
{"humaneval_id": "HumanEval_9__1", "python_file": "HumanEval_9__1/main.py", "input_file": "HumanEval_9__1/input.txt", "prime_paths_nodes": [["5", "7", "8", "4", "6"], ["5", "9", "8", "4", "6"], ["7", "8", "4", "5", "9"], ["9", "8", "4", "5", "7"], ["1", "14", "3", "4", "6"], ["1", "14", "3", "4", "5", "7", "8"], ["1", "14", "3", "4", "5", "9", "8"]], "prime_paths_statements": [["if running_max is None:\\l", "running_max = n\\l", "result.append(running_max)\\l", "for n in numbers:\\l", "return result\\l"], ["if running_max is None:\\l", "running_max = max(running_max, n)\\l", "result.append(running_max)\\l", "for n in numbers:\\l", "return result\\l"], ["running_max = n\\l", "result.append(running_max)\\l", "for n in numbers:\\l", "if running_max is None:\\l", "running_max = max(running_max, n)\\l"], ["running_max = max(running_max, n)\\l", "result.append(running_max)\\l", "for n in numbers:\\l", "if running_max is None:\\l", "running_max = n\\l"], ["from typing import *\\ldef rolling_max(numbers: List[int]) ->List[int]:...\\lrolling_max([1, 2, 3, 4])\\l", "rolling_max", "running_max = None\\lresult = []\\l", "for n in numbers:\\l", "return result\\l"], ["from typing import *\\ldef rolling_max(numbers: List[int]) ->List[int]:...\\lrolling_max([1, 2, 3, 4])\\l", "rolling_max", "running_max = None\\lresult = []\\l", "for n in numbers:\\l", "if running_max is None:\\l", "running_max = n\\l", "result.append(running_max)\\l"], ["from typing import *\\ldef rolling_max(numbers: List[int]) ->List[int]:...\\lrolling_max([1, 2, 3, 4])\\l", "rolling_max", "running_max = None\\lresult = []\\l", "for n in numbers:\\l", "if running_max is None:\\l", "running_max = max(running_max, n)\\l", "result.append(running_max)\\l"]], "prime_paths_linenumbers": [[9, 10, 14, 8, 16], [9, 12, 14, 8, 16], [10, 14, 8, 9, 12], [12, 14, 8, 9, 10], [1, 18, 5, 6, 8, 16], [1, 18, 5, 6, 8, 9, 10, 14], [1, 18, 5, 6, 8, 9, 12, 14]], "covered_statements_linenumbers": [1, 4, 5, 6, 8, 9, 10, 12, 14, 16, 18], "missing_statements_linenumbers": [], "covered_prime_paths_linenumbers": [[9, 10, 14, 8, 16], [9, 12, 14, 8, 16], [10, 14, 8, 9, 12], [12, 14, 8, 9, 10], [1, 18, 5, 6, 8, 16], [1, 18, 5, 6, 8, 9, 10, 14], [1, 18, 5, 6, 8, 9, 12, 14]], "missing_prime_paths_linenumbers": [], "num_total_prime_paths": 7, "num_covered_paths": 7, "prime_path_coverage": 1.0, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_9__1_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_9__1_CFG.dot"}
{"humaneval_id": "HumanEval_158__0", "python_file": "HumanEval_158__0/main.py", "input_file": "HumanEval_158__0/input.txt", "prime_paths_nodes": [["1", "6", "3"]], "prime_paths_statements": [["from typing import *\\ldef find_max(words):...\\lfind_max(['play', 'this', 'game', 'of', 'footbott'])\\l", "find_max", "return sorted(words, key=lambda x: (-len(set(x)), x))[0]\\l"]], "prime_paths_linenumbers": [[1, 7, 5]], "covered_statements_linenumbers": [1, 4, 5, 7], "missing_statements_linenumbers": [], "covered_prime_paths_linenumbers": [[1, 7, 5]], "missing_prime_paths_linenumbers": [], "num_total_prime_paths": 1, "num_covered_paths": 1, "prime_path_coverage": 1.0, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_158__0_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_158__0_CFG.dot"}
{"humaneval_id": "HumanEval_81", "python_file": "HumanEval_81/main.py", "input_file": "HumanEval_81/input.txt", "prime_paths_nodes": [["5", "7", "4", "6"], ["5", "9", "10", "4", "6"], ["5", "9", "12", "13", "4", "6"], ["5", "9", "12", "15", "16", "4", "6"], ["5", "9", "12", "15", "18", "19", "4", "6"], ["5", "9", "12", "15", "18", "21", "22", "4", "6"], ["5", "9", "12", "15", "18", "21", "24", "25", "4", "6"], ["5", "9", "12", "15", "18", "21", "24", "27", "28", "4", "6"], ["5", "9", "12", "15", "18", "21", "24", "27", "30", "31", "4", "6"], ["5", "9", "12", "15", "18", "21", "24", "27", "30", "33", "34", "4", "6"], ["5", "9", "12", "15", "18", "21", "24", "27", "30", "33", "36", "37", "4", "6"], ["5", "9", "12", "15", "18", "21", "24", "27", "30", "33", "36", "39", "40", "4", "6"], ["5", "9", "12", "15", "18", "21", "24", "27", "30", "33", "36", "39", "42", "4", "6"], ["7", "4", "5", "9", "10"], ["7", "4", "5", "9", "12", "13"], ["7", "4", "5", "9", "12", "15", "16"], ["7", "4", "5", "9", "12", "15", "18", "19"], ["7", "4", "5", "9", "12", "15", "18", "21", "22"], ["7", "4", "5", "9", "12", "15", "18", "21", "24", "25"], ["7", "4", "5", "9", "12", "15", "18", "21", "24", "27", "28"], ["7", "4", "5", "9", "12", "15", "18", "21", "24", "27", "30", "31"], ["7", "4", "5", "9", "12", "15", "18", "21", "24", "27", "30", "33", "34"], ["7", "4", "5", "9", "12", "15", "18", "21", "24", "27", "30", "33", "36", "37"], ["7", "4", "5", "9", "12", "15", "18", "21", "24", "27", "30", "33", "36", "39", "40"], ["7", "4", "5", "9", "12", "15", "18", "21", "24", "27", "30", "33", "36", "39", "42"], ["9", "10", "4", "5", "7"], ["9", "12", "13", "4", "5", "7"], ["9", "12", "15", "16", "4", "5", "7"], ["9", "12", "15", "18", "19", "4", "5", "7"], ["9", "12", "15", "18", "21", "22", "4", "5", "7"], ["9", "12", "15", "18", "21", "24", "25", "4", "5", "7"], ["9", "12", "15", "18", "21", "24", "27", "28", "4", "5", "7"], ["9", "12", "15", "18", "21", "24", "27", "30", "31", "4", "5", "7"], ["9", "12", "15", "18", "21", "24", "27", "30", "33", "34", "4", "5", "7"], ["9", "12", "15", "18", "21", "24", "27", "30", "33", "36", "37", "4", "5", "7"], ["9", "12", "15", "18", "21", "24", "27", "30", "33", "36", "39", "40", "4", "5", "7"], ["9", "12", "15", "18", "21", "24", "27", "30", "33", "36", "39", "42", "4", "5", "7"], ["10", "4", "5", "9", "12", "13"], ["10", "4", "5", "9", "12", "15", "16"], ["10", "4", "5", "9", "12", "15", "18", "19"], ["10", "4", "5", "9", "12", "15", "18", "21", "22"], ["10", "4", "5", "9", "12", "15", "18", "21", "24", "25"], ["10", "4", "5", "9", "12", "15", "18", "21", "24", "27", "28"], ["10", "4", "5", "9", "12", "15", "18", "21", "24", "27", "30", "31"], ["10", "4", "5", "9", "12", "15", "18", "21", "24", "27", "30", "33", "34"], ["10", "4", "5", "9", "12", "15", "18", "21", "24", "27", "30", "33", "36", "37"], ["10", "4", "5", "9", "12", "15", "18", "21", "24", "27", "30", "33", "36", "39", "40"], ["10", "4", "5", "9", "12", "15", "18", "21", "24", "27", "30", "33", "36", "39", "42"], ["12", "13", "4", "5", "9", "10"], ["12", "15", "16", "4", "5", "9", "10"], ["12", "15", "18", "19", "4", "5", "9", "10"], ["12", "15", "18", "21", "22", "4", "5", "9", "10"], ["12", "15", "18", "21", "24", "25", "4", "5", "9", "10"], ["12", "15", "18", "21", "24", "27", "28", "4", "5", "9", "10"], ["12", "15", "18", "21", "24", "27", "30", "31", "4", "5", "9", "10"], ["12", "15", "18", "21", "24", "27", "30", "33", "34", "4", "5", "9", "10"], ["12", "15", "18", "21", "24", "27", "30", "33", "36", "37", "4", "5", "9", "10"], ["12", "15", "18", "21", "24", "27", "30", "33", "36", "39", "40", "4", "5", "9", "10"], ["12", "15", "18", "21", "24", "27", "30", "33", "36", "39", "42", "4", "5", "9", "10"], ["13", "4", "5", "9", "12", "15", "16"], ["13", "4", "5", "9", "12", "15", "18", "19"], ["13", "4", "5", "9", "12", "15", "18", "21", "22"], ["13", "4", "5", "9", "12", "15", "18", "21", "24", "25"], ["13", "4", "5", "9", "12", "15", "18", "21", "24", "27", "28"], ["13", "4", "5", "9", "12", "15", "18", "21", "24", "27", "30", "31"], ["13", "4", "5", "9", "12", "15", "18", "21", "24", "27", "30", "33", "34"], ["13", "4", "5", "9", "12", "15", "18", "21", "24", "27", "30", "33", "36", "37"], ["13", "4", "5", "9", "12", "15", "18", "21", "24", "27", "30", "33", "36", "39", "40"], ["13", "4", "5", "9", "12", "15", "18", "21", "24", "27", "30", "33", "36", "39", "42"], ["15", "16", "4", "5", "9", "12", "13"], ["15", "18", "19", "4", "5", "9", "12", "13"], ["15", "18", "21", "22", "4", "5", "9", "12", "13"], ["15", "18", "21", "24", "25", "4", "5", "9", "12", "13"], ["15", "18", "21", "24", "27", "28", "4", "5", "9", "12", "13"], ["15", "18", "21", "24", "27", "30", "31", "4", "5", "9", "12", "13"], ["15", "18", "21", "24", "27", "30", "33", "34", "4", "5", "9", "12", "13"], ["15", "18", "21", "24", "27", "30", "33", "36", "37", "4", "5", "9", "12", "13"], ["15", "18", "21", "24", "27", "30", "33", "36", "39", "40", "4", "5", "9", "12", "13"], ["15", "18", "21", "24", "27", "30", "33", "36", "39", "42", "4", "5", "9", "12", "13"], ["16", "4", "5", "9", "12", "15", "18", "19"], ["16", "4", "5", "9", "12", "15", "18", "21", "22"], ["16", "4", "5", "9", "12", "15", "18", "21", "24", "25"], ["16", "4", "5", "9", "12", "15", "18", "21", "24", "27", "28"], ["16", "4", "5", "9", "12", "15", "18", "21", "24", "27", "30", "31"], ["16", "4", "5", "9", "12", "15", "18", "21", "24", "27", "30", "33", "34"], ["16", "4", "5", "9", "12", "15", "18", "21", "24", "27", "30", "33", "36", "37"], ["16", "4", "5", "9", "12", "15", "18", "21", "24", "27", "30", "33", "36", "39", "40"], ["16", "4", "5", "9", "12", "15", "18", "21", "24", "27", "30", "33", "36", "39", "42"], ["18", "19", "4", "5", "9", "12", "15", "16"], ["18", "21", "22", "4", "5", "9", "12", "15", "16"], ["18", "21", "24", "25", "4", "5", "9", "12", "15", "16"], ["18", "21", "24", "27", "28", "4", "5", "9", "12", "15", "16"], ["18", "21", "24", "27", "30", "31", "4", "5", "9", "12", "15", "16"], ["18", "21", "24", "27", "30", "33", "34", "4", "5", "9", "12", "15", "16"], ["18", "21", "24", "27", "30", "33", "36", "37", "4", "5", "9", "12", "15", "16"], ["18", "21", "24", "27", "30", "33", "36", "39", "40", "4", "5", "9", "12", "15", "16"], ["18", "21", "24", "27", "30", "33", "36", "39", "42", "4", "5", "9", "12", "15", "16"], ["19", "4", "5", "9", "12", "15", "18", "21", "22"], ["19", "4", "5", "9", "12", "15", "18", "21", "24", "25"], ["19", "4", "5", "9", "12", "15", "18", "21", "24", "27", "28"], ["19", "4", "5", "9", "12", "15", "18", "21", "24", "27", "30", "31"], ["19", "4", "5", "9", "12", "15", "18", "21", "24", "27", "30", "33", "34"], ["19", "4", "5", "9", "12", "15", "18", "21", "24", "27", "30", "33", "36", "37"], ["19", "4", "5", "9", "12", "15", "18", "21", "24", "27", "30", "33", "36", "39", "40"], ["19", "4", "5", "9", "12", "15", "18", "21", "24", "27", "30", "33", "36", "39", "42"], ["21", "22", "4", "5", "9", "12", "15", "18", "19"], ["21", "24", "25", "4", "5", "9", "12", "15", "18", "19"], ["21", "24", "27", "28", "4", "5", "9", "12", "15", "18", "19"], ["21", "24", "27", "30", "31", "4", "5", "9", "12", "15", "18", "19"], ["21", "24", "27", "30", "33", "34", "4", "5", "9", "12", "15", "18", "19"], ["21", "24", "27", "30", "33", "36", "37", "4", "5", "9", "12", "15", "18", "19"], ["21", "24", "27", "30", "33", "36", "39", "40", "4", "5", "9", "12", "15", "18", "19"], ["21", "24", "27", "30", "33", "36", "39", "42", "4", "5", "9", "12", "15", "18", "19"], ["22", "4", "5", "9", "12", "15", "18", "21", "24", "25"], ["22", "4", "5", "9", "12", "15", "18", "21", "24", "27", "28"], ["22", "4", "5", "9", "12", "15", "18", "21", "24", "27", "30", "31"], ["22", "4", "5", "9", "12", "15", "18", "21", "24", "27", "30", "33", "34"], ["22", "4", "5", "9", "12", "15", "18", "21", "24", "27", "30", "33", "36", "37"], ["22", "4", "5", "9", "12", "15", "18", "21", "24", "27", "30", "33", "36", "39", "40"], ["22", "4", "5", "9", "12", "15", "18", "21", "24", "27", "30", "33", "36", "39", "42"], ["24", "25", "4", "5", "9", "12", "15", "18", "21", "22"], ["24", "27", "28", "4", "5", "9", "12", "15", "18", "21", "22"], ["24", "27", "30", "31", "4", "5", "9", "12", "15", "18", "21", "22"], ["24", "27", "30", "33", "34", "4", "5", "9", "12", "15", "18", "21", "22"], ["24", "27", "30", "33", "36", "37", "4", "5", "9", "12", "15", "18", "21", "22"], ["24", "27", "30", "33", "36", "39", "40", "4", "5", "9", "12", "15", "18", "21", "22"], ["24", "27", "30", "33", "36", "39", "42", "4", "5", "9", "12", "15", "18", "21", "22"], ["25", "4", "5", "9", "12", "15", "18", "21", "24", "27", "28"], ["25", "4", "5", "9", "12", "15", "18", "21", "24", "27", "30", "31"], ["25", "4", "5", "9", "12", "15", "18", "21", "24", "27", "30", "33", "34"], ["25", "4", "5", "9", "12", "15", "18", "21", "24", "27", "30", "33", "36", "37"], ["25", "4", "5", "9", "12", "15", "18", "21", "24", "27", "30", "33", "36", "39", "40"], ["25", "4", "5", "9", "12", "15", "18", "21", "24", "27", "30", "33", "36", "39", "42"], ["27", "28", "4", "5", "9", "12", "15", "18", "21", "24", "25"], ["27", "30", "31", "4", "5", "9", "12", "15", "18", "21", "24", "25"], ["27", "30", "33", "34", "4", "5", "9", "12", "15", "18", "21", "24", "25"], ["27", "30", "33", "36", "37", "4", "5", "9", "12", "15", "18", "21", "24", "25"], ["27", "30", "33", "36", "39", "40", "4", "5", "9", "12", "15", "18", "21", "24", "25"], ["27", "30", "33", "36", "39", "42", "4", "5", "9", "12", "15", "18", "21", "24", "25"], ["28", "4", "5", "9", "12", "15", "18", "21", "24", "27", "30", "31"], ["28", "4", "5", "9", "12", "15", "18", "21", "24", "27", "30", "33", "34"], ["28", "4", "5", "9", "12", "15", "18", "21", "24", "27", "30", "33", "36", "37"], ["28", "4", "5", "9", "12", "15", "18", "21", "24", "27", "30", "33", "36", "39", "40"], ["28", "4", "5", "9", "12", "15", "18", "21", "24", "27", "30", "33", "36", "39", "42"], ["30", "31", "4", "5", "9", "12", "15", "18", "21", "24", "27", "28"], ["30", "33", "34", "4", "5", "9", "12", "15", "18", "21", "24", "27", "28"], ["30", "33", "36", "37", "4", "5", "9", "12", "15", "18", "21", "24", "27", "28"], ["30", "33", "36", "39", "40", "4", "5", "9", "12", "15", "18", "21", "24", "27", "28"], ["30", "33", "36", "39", "42", "4", "5", "9", "12", "15", "18", "21", "24", "27", "28"], ["31", "4", "5", "9", "12", "15", "18", "21", "24", "27", "30", "33", "34"], ["31", "4", "5", "9", "12", "15", "18", "21", "24", "27", "30", "33", "36", "37"], ["31", "4", "5", "9", "12", "15", "18", "21", "24", "27", "30", "33", "36", "39", "40"], ["31", "4", "5", "9", "12", "15", "18", "21", "24", "27", "30", "33", "36", "39", "42"], ["33", "34", "4", "5", "9", "12", "15", "18", "21", "24", "27", "30", "31"], ["33", "36", "37", "4", "5", "9", "12", "15", "18", "21", "24", "27", "30", "31"], ["33", "36", "39", "40", "4", "5", "9", "12", "15", "18", "21", "24", "27", "30", "31"], ["33", "36", "39", "42", "4", "5", "9", "12", "15", "18", "21", "24", "27", "30", "31"], ["34", "4", "5", "9", "12", "15", "18", "21", "24", "27", "30", "33", "36", "37"], ["34", "4", "5", "9", "12", "15", "18", "21", "24", "27", "30", "33", "36", "39", "40"], ["34", "4", "5", "9", "12", "15", "18", "21", "24", "27", "30", "33", "36", "39", "42"], ["36", "37", "4", "5", "9", "12", "15", "18", "21", "24", "27", "30", "33", "34"], ["36", "39", "40", "4", "5", "9", "12", "15", "18", "21", "24", "27", "30", "33", "34"], ["36", "39", "42", "4", "5", "9", "12", "15", "18", "21", "24", "27", "30", "33", "34"], ["37", "4", "5", "9", "12", "15", "18", "21", "24", "27", "30", "33", "36", "39", "40"], ["37", "4", "5", "9", "12", "15", "18", "21", "24", "27", "30", "33", "36", "39", "42"], ["39", "40", "4", "5", "9", "12", "15", "18", "21", "24", "27", "30", "33", "36", "37"], ["39", "42", "4", "5", "9", "12", "15", "18", "21", "24", "27", "30", "33", "36", "37"], ["40", "4", "5", "9", "12", "15", "18", "21", "24", "27", "30", "33", "36", "39", "42"], ["42", "4", "5", "9", "12", "15", "18", "21", "24", "27", "30", "33", "36", "39", "40"], ["1", "58", "3", "4", "6"], ["1", "58", "3", "4", "5", "7"], ["1", "58", "3", "4", "5", "9", "10"], ["1", "58", "3", "4", "5", "9", "12", "13"], ["1", "58", "3", "4", "5", "9", "12", "15", "16"], ["1", "58", "3", "4", "5", "9", "12", "15", "18", "19"], ["1", "58", "3", "4", "5", "9", "12", "15", "18", "21", "22"], ["1", "58", "3", "4", "5", "9", "12", "15", "18", "21", "24", "25"], ["1", "58", "3", "4", "5", "9", "12", "15", "18", "21", "24", "27", "28"], ["1", "58", "3", "4", "5", "9", "12", "15", "18", "21", "24", "27", "30", "31"], ["1", "58", "3", "4", "5", "9", "12", "15", "18", "21", "24", "27", "30", "33", "34"], ["1", "58", "3", "4", "5", "9", "12", "15", "18", "21", "24", "27", "30", "33", "36", "37"], ["1", "58", "3", "4", "5", "9", "12", "15", "18", "21", "24", "27", "30", "33", "36", "39", "40"], ["1", "58", "3", "4", "5", "9", "12", "15", "18", "21", "24", "27", "30", "33", "36", "39", "42"]], "prime_paths_statements": [["if gpa == 4.0:\\l", "letter_grade.append('A+')\\l", "for gpa in grades:\\l", "return letter_grade\\l"], ["if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "letter_grade.append('A')\\l", "for gpa in grades:\\l", "return letter_grade\\l"], ["if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "letter_grade.append('A-')\\l", "for gpa in grades:\\l", "return letter_grade\\l"], ["if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "letter_grade.append('B+')\\l", "for gpa in grades:\\l", "return letter_grade\\l"], ["if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "letter_grade.append('B')\\l", "for gpa in grades:\\l", "return letter_grade\\l"], ["if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "letter_grade.append('B-')\\l", "for gpa in grades:\\l", "return letter_grade\\l"], ["if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "letter_grade.append('C+')\\l", "for gpa in grades:\\l", "return letter_grade\\l"], ["if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "letter_grade.append('C')\\l", "for gpa in grades:\\l", "return letter_grade\\l"], ["if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "if gpa > 1.3:\\l", "letter_grade.append('C-')\\l", "for gpa in grades:\\l", "return letter_grade\\l"], ["if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "if gpa > 1.3:\\l", "if gpa > 1.0:\\l", "letter_grade.append('D+')\\l", "for gpa in grades:\\l", "return letter_grade\\l"], ["if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "if gpa > 1.3:\\l", "if gpa > 1.0:\\l", "if gpa > 0.7:\\l", "letter_grade.append('D')\\l", "for gpa in grades:\\l", "return letter_grade\\l"], ["if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "if gpa > 1.3:\\l", "if gpa > 1.0:\\l", "if gpa > 0.7:\\l", "if gpa > 0.0:\\l", "letter_grade.append('D-')\\l", "for gpa in grades:\\l", "return letter_grade\\l"], ["if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "if gpa > 1.3:\\l", "if gpa > 1.0:\\l", "if gpa > 0.7:\\l", "if gpa > 0.0:\\l", "letter_grade.append('E')\\l", "for gpa in grades:\\l", "return letter_grade\\l"], ["letter_grade.append('A+')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "letter_grade.append('A')\\l"], ["letter_grade.append('A+')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "letter_grade.append('A-')\\l"], ["letter_grade.append('A+')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "letter_grade.append('B+')\\l"], ["letter_grade.append('A+')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "letter_grade.append('B')\\l"], ["letter_grade.append('A+')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "letter_grade.append('B-')\\l"], ["letter_grade.append('A+')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "letter_grade.append('C+')\\l"], ["letter_grade.append('A+')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "letter_grade.append('C')\\l"], ["letter_grade.append('A+')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "if gpa > 1.3:\\l", "letter_grade.append('C-')\\l"], ["letter_grade.append('A+')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "if gpa > 1.3:\\l", "if gpa > 1.0:\\l", "letter_grade.append('D+')\\l"], ["letter_grade.append('A+')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "if gpa > 1.3:\\l", "if gpa > 1.0:\\l", "if gpa > 0.7:\\l", "letter_grade.append('D')\\l"], ["letter_grade.append('A+')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "if gpa > 1.3:\\l", "if gpa > 1.0:\\l", "if gpa > 0.7:\\l", "if gpa > 0.0:\\l", "letter_grade.append('D-')\\l"], ["letter_grade.append('A+')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "if gpa > 1.3:\\l", "if gpa > 1.0:\\l", "if gpa > 0.7:\\l", "if gpa > 0.0:\\l", "letter_grade.append('E')\\l"], ["if gpa > 3.7:\\l", "letter_grade.append('A')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "letter_grade.append('A+')\\l"], ["if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "letter_grade.append('A-')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "letter_grade.append('A+')\\l"], ["if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "letter_grade.append('B+')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "letter_grade.append('A+')\\l"], ["if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "letter_grade.append('B')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "letter_grade.append('A+')\\l"], ["if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "letter_grade.append('B-')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "letter_grade.append('A+')\\l"], ["if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "letter_grade.append('C+')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "letter_grade.append('A+')\\l"], ["if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "letter_grade.append('C')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "letter_grade.append('A+')\\l"], ["if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "if gpa > 1.3:\\l", "letter_grade.append('C-')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "letter_grade.append('A+')\\l"], ["if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "if gpa > 1.3:\\l", "if gpa > 1.0:\\l", "letter_grade.append('D+')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "letter_grade.append('A+')\\l"], ["if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "if gpa > 1.3:\\l", "if gpa > 1.0:\\l", "if gpa > 0.7:\\l", "letter_grade.append('D')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "letter_grade.append('A+')\\l"], ["if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "if gpa > 1.3:\\l", "if gpa > 1.0:\\l", "if gpa > 0.7:\\l", "if gpa > 0.0:\\l", "letter_grade.append('D-')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "letter_grade.append('A+')\\l"], ["if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "if gpa > 1.3:\\l", "if gpa > 1.0:\\l", "if gpa > 0.7:\\l", "if gpa > 0.0:\\l", "letter_grade.append('E')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "letter_grade.append('A+')\\l"], ["letter_grade.append('A')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "letter_grade.append('A-')\\l"], ["letter_grade.append('A')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "letter_grade.append('B+')\\l"], ["letter_grade.append('A')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "letter_grade.append('B')\\l"], ["letter_grade.append('A')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "letter_grade.append('B-')\\l"], ["letter_grade.append('A')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "letter_grade.append('C+')\\l"], ["letter_grade.append('A')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "letter_grade.append('C')\\l"], ["letter_grade.append('A')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "if gpa > 1.3:\\l", "letter_grade.append('C-')\\l"], ["letter_grade.append('A')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "if gpa > 1.3:\\l", "if gpa > 1.0:\\l", "letter_grade.append('D+')\\l"], ["letter_grade.append('A')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "if gpa > 1.3:\\l", "if gpa > 1.0:\\l", "if gpa > 0.7:\\l", "letter_grade.append('D')\\l"], ["letter_grade.append('A')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "if gpa > 1.3:\\l", "if gpa > 1.0:\\l", "if gpa > 0.7:\\l", "if gpa > 0.0:\\l", "letter_grade.append('D-')\\l"], ["letter_grade.append('A')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "if gpa > 1.3:\\l", "if gpa > 1.0:\\l", "if gpa > 0.7:\\l", "if gpa > 0.0:\\l", "letter_grade.append('E')\\l"], ["if gpa > 3.3:\\l", "letter_grade.append('A-')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "letter_grade.append('A')\\l"], ["if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "letter_grade.append('B+')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "letter_grade.append('A')\\l"], ["if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "letter_grade.append('B')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "letter_grade.append('A')\\l"], ["if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "letter_grade.append('B-')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "letter_grade.append('A')\\l"], ["if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "letter_grade.append('C+')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "letter_grade.append('A')\\l"], ["if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "letter_grade.append('C')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "letter_grade.append('A')\\l"], ["if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "if gpa > 1.3:\\l", "letter_grade.append('C-')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "letter_grade.append('A')\\l"], ["if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "if gpa > 1.3:\\l", "if gpa > 1.0:\\l", "letter_grade.append('D+')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "letter_grade.append('A')\\l"], ["if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "if gpa > 1.3:\\l", "if gpa > 1.0:\\l", "if gpa > 0.7:\\l", "letter_grade.append('D')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "letter_grade.append('A')\\l"], ["if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "if gpa > 1.3:\\l", "if gpa > 1.0:\\l", "if gpa > 0.7:\\l", "if gpa > 0.0:\\l", "letter_grade.append('D-')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "letter_grade.append('A')\\l"], ["if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "if gpa > 1.3:\\l", "if gpa > 1.0:\\l", "if gpa > 0.7:\\l", "if gpa > 0.0:\\l", "letter_grade.append('E')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "letter_grade.append('A')\\l"], ["letter_grade.append('A-')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "letter_grade.append('B+')\\l"], ["letter_grade.append('A-')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "letter_grade.append('B')\\l"], ["letter_grade.append('A-')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "letter_grade.append('B-')\\l"], ["letter_grade.append('A-')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "letter_grade.append('C+')\\l"], ["letter_grade.append('A-')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "letter_grade.append('C')\\l"], ["letter_grade.append('A-')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "if gpa > 1.3:\\l", "letter_grade.append('C-')\\l"], ["letter_grade.append('A-')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "if gpa > 1.3:\\l", "if gpa > 1.0:\\l", "letter_grade.append('D+')\\l"], ["letter_grade.append('A-')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "if gpa > 1.3:\\l", "if gpa > 1.0:\\l", "if gpa > 0.7:\\l", "letter_grade.append('D')\\l"], ["letter_grade.append('A-')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "if gpa > 1.3:\\l", "if gpa > 1.0:\\l", "if gpa > 0.7:\\l", "if gpa > 0.0:\\l", "letter_grade.append('D-')\\l"], ["letter_grade.append('A-')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "if gpa > 1.3:\\l", "if gpa > 1.0:\\l", "if gpa > 0.7:\\l", "if gpa > 0.0:\\l", "letter_grade.append('E')\\l"], ["if gpa > 3.0:\\l", "letter_grade.append('B+')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "letter_grade.append('A-')\\l"], ["if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "letter_grade.append('B')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "letter_grade.append('A-')\\l"], ["if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "letter_grade.append('B-')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "letter_grade.append('A-')\\l"], ["if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "letter_grade.append('C+')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "letter_grade.append('A-')\\l"], ["if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "letter_grade.append('C')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "letter_grade.append('A-')\\l"], ["if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "if gpa > 1.3:\\l", "letter_grade.append('C-')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "letter_grade.append('A-')\\l"], ["if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "if gpa > 1.3:\\l", "if gpa > 1.0:\\l", "letter_grade.append('D+')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "letter_grade.append('A-')\\l"], ["if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "if gpa > 1.3:\\l", "if gpa > 1.0:\\l", "if gpa > 0.7:\\l", "letter_grade.append('D')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "letter_grade.append('A-')\\l"], ["if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "if gpa > 1.3:\\l", "if gpa > 1.0:\\l", "if gpa > 0.7:\\l", "if gpa > 0.0:\\l", "letter_grade.append('D-')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "letter_grade.append('A-')\\l"], ["if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "if gpa > 1.3:\\l", "if gpa > 1.0:\\l", "if gpa > 0.7:\\l", "if gpa > 0.0:\\l", "letter_grade.append('E')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "letter_grade.append('A-')\\l"], ["letter_grade.append('B+')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "letter_grade.append('B')\\l"], ["letter_grade.append('B+')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "letter_grade.append('B-')\\l"], ["letter_grade.append('B+')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "letter_grade.append('C+')\\l"], ["letter_grade.append('B+')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "letter_grade.append('C')\\l"], ["letter_grade.append('B+')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "if gpa > 1.3:\\l", "letter_grade.append('C-')\\l"], ["letter_grade.append('B+')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "if gpa > 1.3:\\l", "if gpa > 1.0:\\l", "letter_grade.append('D+')\\l"], ["letter_grade.append('B+')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "if gpa > 1.3:\\l", "if gpa > 1.0:\\l", "if gpa > 0.7:\\l", "letter_grade.append('D')\\l"], ["letter_grade.append('B+')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "if gpa > 1.3:\\l", "if gpa > 1.0:\\l", "if gpa > 0.7:\\l", "if gpa > 0.0:\\l", "letter_grade.append('D-')\\l"], ["letter_grade.append('B+')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "if gpa > 1.3:\\l", "if gpa > 1.0:\\l", "if gpa > 0.7:\\l", "if gpa > 0.0:\\l", "letter_grade.append('E')\\l"], ["if gpa > 2.7:\\l", "letter_grade.append('B')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "letter_grade.append('B+')\\l"], ["if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "letter_grade.append('B-')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "letter_grade.append('B+')\\l"], ["if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "letter_grade.append('C+')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "letter_grade.append('B+')\\l"], ["if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "letter_grade.append('C')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "letter_grade.append('B+')\\l"], ["if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "if gpa > 1.3:\\l", "letter_grade.append('C-')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "letter_grade.append('B+')\\l"], ["if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "if gpa > 1.3:\\l", "if gpa > 1.0:\\l", "letter_grade.append('D+')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "letter_grade.append('B+')\\l"], ["if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "if gpa > 1.3:\\l", "if gpa > 1.0:\\l", "if gpa > 0.7:\\l", "letter_grade.append('D')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "letter_grade.append('B+')\\l"], ["if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "if gpa > 1.3:\\l", "if gpa > 1.0:\\l", "if gpa > 0.7:\\l", "if gpa > 0.0:\\l", "letter_grade.append('D-')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "letter_grade.append('B+')\\l"], ["if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "if gpa > 1.3:\\l", "if gpa > 1.0:\\l", "if gpa > 0.7:\\l", "if gpa > 0.0:\\l", "letter_grade.append('E')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "letter_grade.append('B+')\\l"], ["letter_grade.append('B')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "letter_grade.append('B-')\\l"], ["letter_grade.append('B')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "letter_grade.append('C+')\\l"], ["letter_grade.append('B')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "letter_grade.append('C')\\l"], ["letter_grade.append('B')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "if gpa > 1.3:\\l", "letter_grade.append('C-')\\l"], ["letter_grade.append('B')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "if gpa > 1.3:\\l", "if gpa > 1.0:\\l", "letter_grade.append('D+')\\l"], ["letter_grade.append('B')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "if gpa > 1.3:\\l", "if gpa > 1.0:\\l", "if gpa > 0.7:\\l", "letter_grade.append('D')\\l"], ["letter_grade.append('B')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "if gpa > 1.3:\\l", "if gpa > 1.0:\\l", "if gpa > 0.7:\\l", "if gpa > 0.0:\\l", "letter_grade.append('D-')\\l"], ["letter_grade.append('B')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "if gpa > 1.3:\\l", "if gpa > 1.0:\\l", "if gpa > 0.7:\\l", "if gpa > 0.0:\\l", "letter_grade.append('E')\\l"], ["if gpa > 2.3:\\l", "letter_grade.append('B-')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "letter_grade.append('B')\\l"], ["if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "letter_grade.append('C+')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "letter_grade.append('B')\\l"], ["if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "letter_grade.append('C')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "letter_grade.append('B')\\l"], ["if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "if gpa > 1.3:\\l", "letter_grade.append('C-')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "letter_grade.append('B')\\l"], ["if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "if gpa > 1.3:\\l", "if gpa > 1.0:\\l", "letter_grade.append('D+')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "letter_grade.append('B')\\l"], ["if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "if gpa > 1.3:\\l", "if gpa > 1.0:\\l", "if gpa > 0.7:\\l", "letter_grade.append('D')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "letter_grade.append('B')\\l"], ["if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "if gpa > 1.3:\\l", "if gpa > 1.0:\\l", "if gpa > 0.7:\\l", "if gpa > 0.0:\\l", "letter_grade.append('D-')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "letter_grade.append('B')\\l"], ["if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "if gpa > 1.3:\\l", "if gpa > 1.0:\\l", "if gpa > 0.7:\\l", "if gpa > 0.0:\\l", "letter_grade.append('E')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "letter_grade.append('B')\\l"], ["letter_grade.append('B-')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "letter_grade.append('C+')\\l"], ["letter_grade.append('B-')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "letter_grade.append('C')\\l"], ["letter_grade.append('B-')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "if gpa > 1.3:\\l", "letter_grade.append('C-')\\l"], ["letter_grade.append('B-')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "if gpa > 1.3:\\l", "if gpa > 1.0:\\l", "letter_grade.append('D+')\\l"], ["letter_grade.append('B-')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "if gpa > 1.3:\\l", "if gpa > 1.0:\\l", "if gpa > 0.7:\\l", "letter_grade.append('D')\\l"], ["letter_grade.append('B-')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "if gpa > 1.3:\\l", "if gpa > 1.0:\\l", "if gpa > 0.7:\\l", "if gpa > 0.0:\\l", "letter_grade.append('D-')\\l"], ["letter_grade.append('B-')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "if gpa > 1.3:\\l", "if gpa > 1.0:\\l", "if gpa > 0.7:\\l", "if gpa > 0.0:\\l", "letter_grade.append('E')\\l"], ["if gpa > 2.0:\\l", "letter_grade.append('C+')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "letter_grade.append('B-')\\l"], ["if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "letter_grade.append('C')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "letter_grade.append('B-')\\l"], ["if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "if gpa > 1.3:\\l", "letter_grade.append('C-')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "letter_grade.append('B-')\\l"], ["if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "if gpa > 1.3:\\l", "if gpa > 1.0:\\l", "letter_grade.append('D+')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "letter_grade.append('B-')\\l"], ["if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "if gpa > 1.3:\\l", "if gpa > 1.0:\\l", "if gpa > 0.7:\\l", "letter_grade.append('D')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "letter_grade.append('B-')\\l"], ["if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "if gpa > 1.3:\\l", "if gpa > 1.0:\\l", "if gpa > 0.7:\\l", "if gpa > 0.0:\\l", "letter_grade.append('D-')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "letter_grade.append('B-')\\l"], ["if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "if gpa > 1.3:\\l", "if gpa > 1.0:\\l", "if gpa > 0.7:\\l", "if gpa > 0.0:\\l", "letter_grade.append('E')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "letter_grade.append('B-')\\l"], ["letter_grade.append('C+')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "letter_grade.append('C')\\l"], ["letter_grade.append('C+')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "if gpa > 1.3:\\l", "letter_grade.append('C-')\\l"], ["letter_grade.append('C+')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "if gpa > 1.3:\\l", "if gpa > 1.0:\\l", "letter_grade.append('D+')\\l"], ["letter_grade.append('C+')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "if gpa > 1.3:\\l", "if gpa > 1.0:\\l", "if gpa > 0.7:\\l", "letter_grade.append('D')\\l"], ["letter_grade.append('C+')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "if gpa > 1.3:\\l", "if gpa > 1.0:\\l", "if gpa > 0.7:\\l", "if gpa > 0.0:\\l", "letter_grade.append('D-')\\l"], ["letter_grade.append('C+')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "if gpa > 1.3:\\l", "if gpa > 1.0:\\l", "if gpa > 0.7:\\l", "if gpa > 0.0:\\l", "letter_grade.append('E')\\l"], ["if gpa > 1.7:\\l", "letter_grade.append('C')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "letter_grade.append('C+')\\l"], ["if gpa > 1.7:\\l", "if gpa > 1.3:\\l", "letter_grade.append('C-')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "letter_grade.append('C+')\\l"], ["if gpa > 1.7:\\l", "if gpa > 1.3:\\l", "if gpa > 1.0:\\l", "letter_grade.append('D+')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "letter_grade.append('C+')\\l"], ["if gpa > 1.7:\\l", "if gpa > 1.3:\\l", "if gpa > 1.0:\\l", "if gpa > 0.7:\\l", "letter_grade.append('D')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "letter_grade.append('C+')\\l"], ["if gpa > 1.7:\\l", "if gpa > 1.3:\\l", "if gpa > 1.0:\\l", "if gpa > 0.7:\\l", "if gpa > 0.0:\\l", "letter_grade.append('D-')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "letter_grade.append('C+')\\l"], ["if gpa > 1.7:\\l", "if gpa > 1.3:\\l", "if gpa > 1.0:\\l", "if gpa > 0.7:\\l", "if gpa > 0.0:\\l", "letter_grade.append('E')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "letter_grade.append('C+')\\l"], ["letter_grade.append('C')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "if gpa > 1.3:\\l", "letter_grade.append('C-')\\l"], ["letter_grade.append('C')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "if gpa > 1.3:\\l", "if gpa > 1.0:\\l", "letter_grade.append('D+')\\l"], ["letter_grade.append('C')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "if gpa > 1.3:\\l", "if gpa > 1.0:\\l", "if gpa > 0.7:\\l", "letter_grade.append('D')\\l"], ["letter_grade.append('C')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "if gpa > 1.3:\\l", "if gpa > 1.0:\\l", "if gpa > 0.7:\\l", "if gpa > 0.0:\\l", "letter_grade.append('D-')\\l"], ["letter_grade.append('C')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "if gpa > 1.3:\\l", "if gpa > 1.0:\\l", "if gpa > 0.7:\\l", "if gpa > 0.0:\\l", "letter_grade.append('E')\\l"], ["if gpa > 1.3:\\l", "letter_grade.append('C-')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "letter_grade.append('C')\\l"], ["if gpa > 1.3:\\l", "if gpa > 1.0:\\l", "letter_grade.append('D+')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "letter_grade.append('C')\\l"], ["if gpa > 1.3:\\l", "if gpa > 1.0:\\l", "if gpa > 0.7:\\l", "letter_grade.append('D')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "letter_grade.append('C')\\l"], ["if gpa > 1.3:\\l", "if gpa > 1.0:\\l", "if gpa > 0.7:\\l", "if gpa > 0.0:\\l", "letter_grade.append('D-')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "letter_grade.append('C')\\l"], ["if gpa > 1.3:\\l", "if gpa > 1.0:\\l", "if gpa > 0.7:\\l", "if gpa > 0.0:\\l", "letter_grade.append('E')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "letter_grade.append('C')\\l"], ["letter_grade.append('C-')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "if gpa > 1.3:\\l", "if gpa > 1.0:\\l", "letter_grade.append('D+')\\l"], ["letter_grade.append('C-')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "if gpa > 1.3:\\l", "if gpa > 1.0:\\l", "if gpa > 0.7:\\l", "letter_grade.append('D')\\l"], ["letter_grade.append('C-')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "if gpa > 1.3:\\l", "if gpa > 1.0:\\l", "if gpa > 0.7:\\l", "if gpa > 0.0:\\l", "letter_grade.append('D-')\\l"], ["letter_grade.append('C-')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "if gpa > 1.3:\\l", "if gpa > 1.0:\\l", "if gpa > 0.7:\\l", "if gpa > 0.0:\\l", "letter_grade.append('E')\\l"], ["if gpa > 1.0:\\l", "letter_grade.append('D+')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "if gpa > 1.3:\\l", "letter_grade.append('C-')\\l"], ["if gpa > 1.0:\\l", "if gpa > 0.7:\\l", "letter_grade.append('D')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "if gpa > 1.3:\\l", "letter_grade.append('C-')\\l"], ["if gpa > 1.0:\\l", "if gpa > 0.7:\\l", "if gpa > 0.0:\\l", "letter_grade.append('D-')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "if gpa > 1.3:\\l", "letter_grade.append('C-')\\l"], ["if gpa > 1.0:\\l", "if gpa > 0.7:\\l", "if gpa > 0.0:\\l", "letter_grade.append('E')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "if gpa > 1.3:\\l", "letter_grade.append('C-')\\l"], ["letter_grade.append('D+')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "if gpa > 1.3:\\l", "if gpa > 1.0:\\l", "if gpa > 0.7:\\l", "letter_grade.append('D')\\l"], ["letter_grade.append('D+')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "if gpa > 1.3:\\l", "if gpa > 1.0:\\l", "if gpa > 0.7:\\l", "if gpa > 0.0:\\l", "letter_grade.append('D-')\\l"], ["letter_grade.append('D+')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "if gpa > 1.3:\\l", "if gpa > 1.0:\\l", "if gpa > 0.7:\\l", "if gpa > 0.0:\\l", "letter_grade.append('E')\\l"], ["if gpa > 0.7:\\l", "letter_grade.append('D')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "if gpa > 1.3:\\l", "if gpa > 1.0:\\l", "letter_grade.append('D+')\\l"], ["if gpa > 0.7:\\l", "if gpa > 0.0:\\l", "letter_grade.append('D-')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "if gpa > 1.3:\\l", "if gpa > 1.0:\\l", "letter_grade.append('D+')\\l"], ["if gpa > 0.7:\\l", "if gpa > 0.0:\\l", "letter_grade.append('E')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "if gpa > 1.3:\\l", "if gpa > 1.0:\\l", "letter_grade.append('D+')\\l"], ["letter_grade.append('D')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "if gpa > 1.3:\\l", "if gpa > 1.0:\\l", "if gpa > 0.7:\\l", "if gpa > 0.0:\\l", "letter_grade.append('D-')\\l"], ["letter_grade.append('D')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "if gpa > 1.3:\\l", "if gpa > 1.0:\\l", "if gpa > 0.7:\\l", "if gpa > 0.0:\\l", "letter_grade.append('E')\\l"], ["if gpa > 0.0:\\l", "letter_grade.append('D-')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "if gpa > 1.3:\\l", "if gpa > 1.0:\\l", "if gpa > 0.7:\\l", "letter_grade.append('D')\\l"], ["if gpa > 0.0:\\l", "letter_grade.append('E')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "if gpa > 1.3:\\l", "if gpa > 1.0:\\l", "if gpa > 0.7:\\l", "letter_grade.append('D')\\l"], ["letter_grade.append('D-')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "if gpa > 1.3:\\l", "if gpa > 1.0:\\l", "if gpa > 0.7:\\l", "if gpa > 0.0:\\l", "letter_grade.append('E')\\l"], ["letter_grade.append('E')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "if gpa > 1.3:\\l", "if gpa > 1.0:\\l", "if gpa > 0.7:\\l", "if gpa > 0.0:\\l", "letter_grade.append('D-')\\l"], ["from typing import *\\ldef numerical_letter_grade(grades):...\\lnumerical_letter_grade([4.0, 3, 1.7, 2, 3.5])\\l", "numerical_letter_grade", "letter_grade = []\\l", "for gpa in grades:\\l", "return letter_grade\\l"], ["from typing import *\\ldef numerical_letter_grade(grades):...\\lnumerical_letter_grade([4.0, 3, 1.7, 2, 3.5])\\l", "numerical_letter_grade", "letter_grade = []\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "letter_grade.append('A+')\\l"], ["from typing import *\\ldef numerical_letter_grade(grades):...\\lnumerical_letter_grade([4.0, 3, 1.7, 2, 3.5])\\l", "numerical_letter_grade", "letter_grade = []\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "letter_grade.append('A')\\l"], ["from typing import *\\ldef numerical_letter_grade(grades):...\\lnumerical_letter_grade([4.0, 3, 1.7, 2, 3.5])\\l", "numerical_letter_grade", "letter_grade = []\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "letter_grade.append('A-')\\l"], ["from typing import *\\ldef numerical_letter_grade(grades):...\\lnumerical_letter_grade([4.0, 3, 1.7, 2, 3.5])\\l", "numerical_letter_grade", "letter_grade = []\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "letter_grade.append('B+')\\l"], ["from typing import *\\ldef numerical_letter_grade(grades):...\\lnumerical_letter_grade([4.0, 3, 1.7, 2, 3.5])\\l", "numerical_letter_grade", "letter_grade = []\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "letter_grade.append('B')\\l"], ["from typing import *\\ldef numerical_letter_grade(grades):...\\lnumerical_letter_grade([4.0, 3, 1.7, 2, 3.5])\\l", "numerical_letter_grade", "letter_grade = []\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "letter_grade.append('B-')\\l"], ["from typing import *\\ldef numerical_letter_grade(grades):...\\lnumerical_letter_grade([4.0, 3, 1.7, 2, 3.5])\\l", "numerical_letter_grade", "letter_grade = []\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "letter_grade.append('C+')\\l"], ["from typing import *\\ldef numerical_letter_grade(grades):...\\lnumerical_letter_grade([4.0, 3, 1.7, 2, 3.5])\\l", "numerical_letter_grade", "letter_grade = []\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "letter_grade.append('C')\\l"], ["from typing import *\\ldef numerical_letter_grade(grades):...\\lnumerical_letter_grade([4.0, 3, 1.7, 2, 3.5])\\l", "numerical_letter_grade", "letter_grade = []\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "if gpa > 1.3:\\l", "letter_grade.append('C-')\\l"], ["from typing import *\\ldef numerical_letter_grade(grades):...\\lnumerical_letter_grade([4.0, 3, 1.7, 2, 3.5])\\l", "numerical_letter_grade", "letter_grade = []\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "if gpa > 1.3:\\l", "if gpa > 1.0:\\l", "letter_grade.append('D+')\\l"], ["from typing import *\\ldef numerical_letter_grade(grades):...\\lnumerical_letter_grade([4.0, 3, 1.7, 2, 3.5])\\l", "numerical_letter_grade", "letter_grade = []\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "if gpa > 1.3:\\l", "if gpa > 1.0:\\l", "if gpa > 0.7:\\l", "letter_grade.append('D')\\l"], ["from typing import *\\ldef numerical_letter_grade(grades):...\\lnumerical_letter_grade([4.0, 3, 1.7, 2, 3.5])\\l", "numerical_letter_grade", "letter_grade = []\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "if gpa > 1.3:\\l", "if gpa > 1.0:\\l", "if gpa > 0.7:\\l", "if gpa > 0.0:\\l", "letter_grade.append('D-')\\l"], ["from typing import *\\ldef numerical_letter_grade(grades):...\\lnumerical_letter_grade([4.0, 3, 1.7, 2, 3.5])\\l", "numerical_letter_grade", "letter_grade = []\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "if gpa > 1.3:\\l", "if gpa > 1.0:\\l", "if gpa > 0.7:\\l", "if gpa > 0.0:\\l", "letter_grade.append('E')\\l"]], "prime_paths_linenumbers": [[7, 8, 6, 33], [7, 9, 10, 6, 33], [7, 9, 11, 12, 6, 33], [7, 9, 11, 13, 14, 6, 33], [7, 9, 11, 13, 15, 16, 6, 33], [7, 9, 11, 13, 15, 17, 18, 6, 33], [7, 9, 11, 13, 15, 17, 19, 20, 6, 33], [7, 9, 11, 13, 15, 17, 19, 21, 22, 6, 33], [7, 9, 11, 13, 15, 17, 19, 21, 23, 24, 6, 33], [7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 26, 6, 33], [7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 28, 6, 33], [7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 30, 6, 33], [7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 32, 6, 33], [8, 6, 7, 9, 10], [8, 6, 7, 9, 11, 12], [8, 6, 7, 9, 11, 13, 14], [8, 6, 7, 9, 11, 13, 15, 16], [8, 6, 7, 9, 11, 13, 15, 17, 18], [8, 6, 7, 9, 11, 13, 15, 17, 19, 20], [8, 6, 7, 9, 11, 13, 15, 17, 19, 21, 22], [8, 6, 7, 9, 11, 13, 15, 17, 19, 21, 23, 24], [8, 6, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 26], [8, 6, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 28], [8, 6, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 30], [8, 6, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 32], [9, 10, 6, 7, 8], [9, 11, 12, 6, 7, 8], [9, 11, 13, 14, 6, 7, 8], [9, 11, 13, 15, 16, 6, 7, 8], [9, 11, 13, 15, 17, 18, 6, 7, 8], [9, 11, 13, 15, 17, 19, 20, 6, 7, 8], [9, 11, 13, 15, 17, 19, 21, 22, 6, 7, 8], [9, 11, 13, 15, 17, 19, 21, 23, 24, 6, 7, 8], [9, 11, 13, 15, 17, 19, 21, 23, 25, 26, 6, 7, 8], [9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 28, 6, 7, 8], [9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 30, 6, 7, 8], [9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 32, 6, 7, 8], [10, 6, 7, 9, 11, 12], [10, 6, 7, 9, 11, 13, 14], [10, 6, 7, 9, 11, 13, 15, 16], [10, 6, 7, 9, 11, 13, 15, 17, 18], [10, 6, 7, 9, 11, 13, 15, 17, 19, 20], [10, 6, 7, 9, 11, 13, 15, 17, 19, 21, 22], [10, 6, 7, 9, 11, 13, 15, 17, 19, 21, 23, 24], [10, 6, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 26], [10, 6, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 28], [10, 6, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 30], [10, 6, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 32], [11, 12, 6, 7, 9, 10], [11, 13, 14, 6, 7, 9, 10], [11, 13, 15, 16, 6, 7, 9, 10], [11, 13, 15, 17, 18, 6, 7, 9, 10], [11, 13, 15, 17, 19, 20, 6, 7, 9, 10], [11, 13, 15, 17, 19, 21, 22, 6, 7, 9, 10], [11, 13, 15, 17, 19, 21, 23, 24, 6, 7, 9, 10], [11, 13, 15, 17, 19, 21, 23, 25, 26, 6, 7, 9, 10], [11, 13, 15, 17, 19, 21, 23, 25, 27, 28, 6, 7, 9, 10], [11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 30, 6, 7, 9, 10], [11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 32, 6, 7, 9, 10], [12, 6, 7, 9, 11, 13, 14], [12, 6, 7, 9, 11, 13, 15, 16], [12, 6, 7, 9, 11, 13, 15, 17, 18], [12, 6, 7, 9, 11, 13, 15, 17, 19, 20], [12, 6, 7, 9, 11, 13, 15, 17, 19, 21, 22], [12, 6, 7, 9, 11, 13, 15, 17, 19, 21, 23, 24], [12, 6, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 26], [12, 6, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 28], [12, 6, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 30], [12, 6, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 32], [13, 14, 6, 7, 9, 11, 12], [13, 15, 16, 6, 7, 9, 11, 12], [13, 15, 17, 18, 6, 7, 9, 11, 12], [13, 15, 17, 19, 20, 6, 7, 9, 11, 12], [13, 15, 17, 19, 21, 22, 6, 7, 9, 11, 12], [13, 15, 17, 19, 21, 23, 24, 6, 7, 9, 11, 12], [13, 15, 17, 19, 21, 23, 25, 26, 6, 7, 9, 11, 12], [13, 15, 17, 19, 21, 23, 25, 27, 28, 6, 7, 9, 11, 12], [13, 15, 17, 19, 21, 23, 25, 27, 29, 30, 6, 7, 9, 11, 12], [13, 15, 17, 19, 21, 23, 25, 27, 29, 32, 6, 7, 9, 11, 12], [14, 6, 7, 9, 11, 13, 15, 16], [14, 6, 7, 9, 11, 13, 15, 17, 18], [14, 6, 7, 9, 11, 13, 15, 17, 19, 20], [14, 6, 7, 9, 11, 13, 15, 17, 19, 21, 22], [14, 6, 7, 9, 11, 13, 15, 17, 19, 21, 23, 24], [14, 6, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 26], [14, 6, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 28], [14, 6, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 30], [14, 6, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 32], [15, 16, 6, 7, 9, 11, 13, 14], [15, 17, 18, 6, 7, 9, 11, 13, 14], [15, 17, 19, 20, 6, 7, 9, 11, 13, 14], [15, 17, 19, 21, 22, 6, 7, 9, 11, 13, 14], [15, 17, 19, 21, 23, 24, 6, 7, 9, 11, 13, 14], [15, 17, 19, 21, 23, 25, 26, 6, 7, 9, 11, 13, 14], [15, 17, 19, 21, 23, 25, 27, 28, 6, 7, 9, 11, 13, 14], [15, 17, 19, 21, 23, 25, 27, 29, 30, 6, 7, 9, 11, 13, 14], [15, 17, 19, 21, 23, 25, 27, 29, 32, 6, 7, 9, 11, 13, 14], [16, 6, 7, 9, 11, 13, 15, 17, 18], [16, 6, 7, 9, 11, 13, 15, 17, 19, 20], [16, 6, 7, 9, 11, 13, 15, 17, 19, 21, 22], [16, 6, 7, 9, 11, 13, 15, 17, 19, 21, 23, 24], [16, 6, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 26], [16, 6, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 28], [16, 6, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 30], [16, 6, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 32], [17, 18, 6, 7, 9, 11, 13, 15, 16], [17, 19, 20, 6, 7, 9, 11, 13, 15, 16], [17, 19, 21, 22, 6, 7, 9, 11, 13, 15, 16], [17, 19, 21, 23, 24, 6, 7, 9, 11, 13, 15, 16], [17, 19, 21, 23, 25, 26, 6, 7, 9, 11, 13, 15, 16], [17, 19, 21, 23, 25, 27, 28, 6, 7, 9, 11, 13, 15, 16], [17, 19, 21, 23, 25, 27, 29, 30, 6, 7, 9, 11, 13, 15, 16], [17, 19, 21, 23, 25, 27, 29, 32, 6, 7, 9, 11, 13, 15, 16], [18, 6, 7, 9, 11, 13, 15, 17, 19, 20], [18, 6, 7, 9, 11, 13, 15, 17, 19, 21, 22], [18, 6, 7, 9, 11, 13, 15, 17, 19, 21, 23, 24], [18, 6, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 26], [18, 6, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 28], [18, 6, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 30], [18, 6, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 32], [19, 20, 6, 7, 9, 11, 13, 15, 17, 18], [19, 21, 22, 6, 7, 9, 11, 13, 15, 17, 18], [19, 21, 23, 24, 6, 7, 9, 11, 13, 15, 17, 18], [19, 21, 23, 25, 26, 6, 7, 9, 11, 13, 15, 17, 18], [19, 21, 23, 25, 27, 28, 6, 7, 9, 11, 13, 15, 17, 18], [19, 21, 23, 25, 27, 29, 30, 6, 7, 9, 11, 13, 15, 17, 18], [19, 21, 23, 25, 27, 29, 32, 6, 7, 9, 11, 13, 15, 17, 18], [20, 6, 7, 9, 11, 13, 15, 17, 19, 21, 22], [20, 6, 7, 9, 11, 13, 15, 17, 19, 21, 23, 24], [20, 6, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 26], [20, 6, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 28], [20, 6, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 30], [20, 6, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 32], [21, 22, 6, 7, 9, 11, 13, 15, 17, 19, 20], [21, 23, 24, 6, 7, 9, 11, 13, 15, 17, 19, 20], [21, 23, 25, 26, 6, 7, 9, 11, 13, 15, 17, 19, 20], [21, 23, 25, 27, 28, 6, 7, 9, 11, 13, 15, 17, 19, 20], [21, 23, 25, 27, 29, 30, 6, 7, 9, 11, 13, 15, 17, 19, 20], [21, 23, 25, 27, 29, 32, 6, 7, 9, 11, 13, 15, 17, 19, 20], [22, 6, 7, 9, 11, 13, 15, 17, 19, 21, 23, 24], [22, 6, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 26], [22, 6, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 28], [22, 6, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 30], [22, 6, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 32], [23, 24, 6, 7, 9, 11, 13, 15, 17, 19, 21, 22], [23, 25, 26, 6, 7, 9, 11, 13, 15, 17, 19, 21, 22], [23, 25, 27, 28, 6, 7, 9, 11, 13, 15, 17, 19, 21, 22], [23, 25, 27, 29, 30, 6, 7, 9, 11, 13, 15, 17, 19, 21, 22], [23, 25, 27, 29, 32, 6, 7, 9, 11, 13, 15, 17, 19, 21, 22], [24, 6, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 26], [24, 6, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 28], [24, 6, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 30], [24, 6, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 32], [25, 26, 6, 7, 9, 11, 13, 15, 17, 19, 21, 23, 24], [25, 27, 28, 6, 7, 9, 11, 13, 15, 17, 19, 21, 23, 24], [25, 27, 29, 30, 6, 7, 9, 11, 13, 15, 17, 19, 21, 23, 24], [25, 27, 29, 32, 6, 7, 9, 11, 13, 15, 17, 19, 21, 23, 24], [26, 6, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 28], [26, 6, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 30], [26, 6, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 32], [27, 28, 6, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 26], [27, 29, 30, 6, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 26], [27, 29, 32, 6, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 26], [28, 6, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 30], [28, 6, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 32], [29, 30, 6, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 28], [29, 32, 6, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 28], [30, 6, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 32], [32, 6, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 30], [1, 35, 5, 6, 33], [1, 35, 5, 6, 7, 8], [1, 35, 5, 6, 7, 9, 10], [1, 35, 5, 6, 7, 9, 11, 12], [1, 35, 5, 6, 7, 9, 11, 13, 14], [1, 35, 5, 6, 7, 9, 11, 13, 15, 16], [1, 35, 5, 6, 7, 9, 11, 13, 15, 17, 18], [1, 35, 5, 6, 7, 9, 11, 13, 15, 17, 19, 20], [1, 35, 5, 6, 7, 9, 11, 13, 15, 17, 19, 21, 22], [1, 35, 5, 6, 7, 9, 11, 13, 15, 17, 19, 21, 23, 24], [1, 35, 5, 6, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 26], [1, 35, 5, 6, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 28], [1, 35, 5, 6, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 30], [1, 35, 5, 6, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 32]], "covered_statements_linenumbers": [1, 2, 5, 6, 7, 8, 9, 11, 12, 13, 15, 16, 17, 19, 21, 22, 23, 24, 33, 35], "missing_statements_linenumbers": [10, 14, 18, 20, 25, 26, 27, 28, 29, 30, 32], "covered_prime_paths_linenumbers": [[7, 8, 6, 33], [7, 9, 11, 12, 6, 33], [7, 9, 11, 13, 15, 16, 6, 33], [7, 9, 11, 13, 15, 17, 19, 21, 22, 6, 33], [7, 9, 11, 13, 15, 17, 19, 21, 23, 24, 6, 33], [8, 6, 7, 9, 11, 12], [8, 6, 7, 9, 11, 13, 15, 16], [8, 6, 7, 9, 11, 13, 15, 17, 19, 21, 22], [8, 6, 7, 9, 11, 13, 15, 17, 19, 21, 23, 24], [9, 11, 12, 6, 7, 8], [9, 11, 13, 15, 16, 6, 7, 8], [9, 11, 13, 15, 17, 19, 21, 22, 6, 7, 8], [9, 11, 13, 15, 17, 19, 21, 23, 24, 6, 7, 8], [12, 6, 7, 9, 11, 13, 15, 16], [12, 6, 7, 9, 11, 13, 15, 17, 19, 21, 22], [12, 6, 7, 9, 11, 13, 15, 17, 19, 21, 23, 24], [13, 15, 16, 6, 7, 9, 11, 12], [13, 15, 17, 19, 21, 22, 6, 7, 9, 11, 12], [13, 15, 17, 19, 21, 23, 24, 6, 7, 9, 11, 12], [16, 6, 7, 9, 11, 13, 15, 17, 19, 21, 22], [16, 6, 7, 9, 11, 13, 15, 17, 19, 21, 23, 24], [17, 19, 21, 22, 6, 7, 9, 11, 13, 15, 16], [17, 19, 21, 23, 24, 6, 7, 9, 11, 13, 15, 16], [22, 6, 7, 9, 11, 13, 15, 17, 19, 21, 23, 24], [23, 24, 6, 7, 9, 11, 13, 15, 17, 19, 21, 22], [1, 35, 5, 6, 33], [1, 35, 5, 6, 7, 8], [1, 35, 5, 6, 7, 9, 11, 12], [1, 35, 5, 6, 7, 9, 11, 13, 15, 16], [1, 35, 5, 6, 7, 9, 11, 13, 15, 17, 19, 21, 22], [1, 35, 5, 6, 7, 9, 11, 13, 15, 17, 19, 21, 23, 24]], "missing_prime_paths_linenumbers": [[7, 9, 10, 6, 33], [7, 9, 11, 13, 14, 6, 33], [7, 9, 11, 13, 15, 17, 18, 6, 33], [7, 9, 11, 13, 15, 17, 19, 20, 6, 33], [7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 26, 6, 33], [7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 28, 6, 33], [7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 30, 6, 33], [7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 32, 6, 33], [8, 6, 7, 9, 10], [8, 6, 7, 9, 11, 13, 14], [8, 6, 7, 9, 11, 13, 15, 17, 18], [8, 6, 7, 9, 11, 13, 15, 17, 19, 20], [8, 6, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 26], [8, 6, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 28], [8, 6, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 30], [8, 6, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 32], [9, 10, 6, 7, 8], [9, 11, 13, 14, 6, 7, 8], [9, 11, 13, 15, 17, 18, 6, 7, 8], [9, 11, 13, 15, 17, 19, 20, 6, 7, 8], [9, 11, 13, 15, 17, 19, 21, 23, 25, 26, 6, 7, 8], [9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 28, 6, 7, 8], [9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 30, 6, 7, 8], [9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 32, 6, 7, 8], [10, 6, 7, 9, 11, 12], [10, 6, 7, 9, 11, 13, 14], [10, 6, 7, 9, 11, 13, 15, 16], [10, 6, 7, 9, 11, 13, 15, 17, 18], [10, 6, 7, 9, 11, 13, 15, 17, 19, 20], [10, 6, 7, 9, 11, 13, 15, 17, 19, 21, 22], [10, 6, 7, 9, 11, 13, 15, 17, 19, 21, 23, 24], [10, 6, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 26], [10, 6, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 28], [10, 6, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 30], [10, 6, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 32], [11, 12, 6, 7, 9, 10], [11, 13, 14, 6, 7, 9, 10], [11, 13, 15, 16, 6, 7, 9, 10], [11, 13, 15, 17, 18, 6, 7, 9, 10], [11, 13, 15, 17, 19, 20, 6, 7, 9, 10], [11, 13, 15, 17, 19, 21, 22, 6, 7, 9, 10], [11, 13, 15, 17, 19, 21, 23, 24, 6, 7, 9, 10], [11, 13, 15, 17, 19, 21, 23, 25, 26, 6, 7, 9, 10], [11, 13, 15, 17, 19, 21, 23, 25, 27, 28, 6, 7, 9, 10], [11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 30, 6, 7, 9, 10], [11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 32, 6, 7, 9, 10], [12, 6, 7, 9, 11, 13, 14], [12, 6, 7, 9, 11, 13, 15, 17, 18], [12, 6, 7, 9, 11, 13, 15, 17, 19, 20], [12, 6, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 26], [12, 6, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 28], [12, 6, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 30], [12, 6, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 32], [13, 14, 6, 7, 9, 11, 12], [13, 15, 17, 18, 6, 7, 9, 11, 12], [13, 15, 17, 19, 20, 6, 7, 9, 11, 12], [13, 15, 17, 19, 21, 23, 25, 26, 6, 7, 9, 11, 12], [13, 15, 17, 19, 21, 23, 25, 27, 28, 6, 7, 9, 11, 12], [13, 15, 17, 19, 21, 23, 25, 27, 29, 30, 6, 7, 9, 11, 12], [13, 15, 17, 19, 21, 23, 25, 27, 29, 32, 6, 7, 9, 11, 12], [14, 6, 7, 9, 11, 13, 15, 16], [14, 6, 7, 9, 11, 13, 15, 17, 18], [14, 6, 7, 9, 11, 13, 15, 17, 19, 20], [14, 6, 7, 9, 11, 13, 15, 17, 19, 21, 22], [14, 6, 7, 9, 11, 13, 15, 17, 19, 21, 23, 24], [14, 6, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 26], [14, 6, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 28], [14, 6, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 30], [14, 6, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 32], [15, 16, 6, 7, 9, 11, 13, 14], [15, 17, 18, 6, 7, 9, 11, 13, 14], [15, 17, 19, 20, 6, 7, 9, 11, 13, 14], [15, 17, 19, 21, 22, 6, 7, 9, 11, 13, 14], [15, 17, 19, 21, 23, 24, 6, 7, 9, 11, 13, 14], [15, 17, 19, 21, 23, 25, 26, 6, 7, 9, 11, 13, 14], [15, 17, 19, 21, 23, 25, 27, 28, 6, 7, 9, 11, 13, 14], [15, 17, 19, 21, 23, 25, 27, 29, 30, 6, 7, 9, 11, 13, 14], [15, 17, 19, 21, 23, 25, 27, 29, 32, 6, 7, 9, 11, 13, 14], [16, 6, 7, 9, 11, 13, 15, 17, 18], [16, 6, 7, 9, 11, 13, 15, 17, 19, 20], [16, 6, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 26], [16, 6, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 28], [16, 6, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 30], [16, 6, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 32], [17, 18, 6, 7, 9, 11, 13, 15, 16], [17, 19, 20, 6, 7, 9, 11, 13, 15, 16], [17, 19, 21, 23, 25, 26, 6, 7, 9, 11, 13, 15, 16], [17, 19, 21, 23, 25, 27, 28, 6, 7, 9, 11, 13, 15, 16], [17, 19, 21, 23, 25, 27, 29, 30, 6, 7, 9, 11, 13, 15, 16], [17, 19, 21, 23, 25, 27, 29, 32, 6, 7, 9, 11, 13, 15, 16], [18, 6, 7, 9, 11, 13, 15, 17, 19, 20], [18, 6, 7, 9, 11, 13, 15, 17, 19, 21, 22], [18, 6, 7, 9, 11, 13, 15, 17, 19, 21, 23, 24], [18, 6, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 26], [18, 6, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 28], [18, 6, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 30], [18, 6, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 32], [19, 20, 6, 7, 9, 11, 13, 15, 17, 18], [19, 21, 22, 6, 7, 9, 11, 13, 15, 17, 18], [19, 21, 23, 24, 6, 7, 9, 11, 13, 15, 17, 18], [19, 21, 23, 25, 26, 6, 7, 9, 11, 13, 15, 17, 18], [19, 21, 23, 25, 27, 28, 6, 7, 9, 11, 13, 15, 17, 18], [19, 21, 23, 25, 27, 29, 30, 6, 7, 9, 11, 13, 15, 17, 18], [19, 21, 23, 25, 27, 29, 32, 6, 7, 9, 11, 13, 15, 17, 18], [20, 6, 7, 9, 11, 13, 15, 17, 19, 21, 22], [20, 6, 7, 9, 11, 13, 15, 17, 19, 21, 23, 24], [20, 6, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 26], [20, 6, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 28], [20, 6, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 30], [20, 6, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 32], [21, 22, 6, 7, 9, 11, 13, 15, 17, 19, 20], [21, 23, 24, 6, 7, 9, 11, 13, 15, 17, 19, 20], [21, 23, 25, 26, 6, 7, 9, 11, 13, 15, 17, 19, 20], [21, 23, 25, 27, 28, 6, 7, 9, 11, 13, 15, 17, 19, 20], [21, 23, 25, 27, 29, 30, 6, 7, 9, 11, 13, 15, 17, 19, 20], [21, 23, 25, 27, 29, 32, 6, 7, 9, 11, 13, 15, 17, 19, 20], [22, 6, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 26], [22, 6, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 28], [22, 6, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 30], [22, 6, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 32], [23, 25, 26, 6, 7, 9, 11, 13, 15, 17, 19, 21, 22], [23, 25, 27, 28, 6, 7, 9, 11, 13, 15, 17, 19, 21, 22], [23, 25, 27, 29, 30, 6, 7, 9, 11, 13, 15, 17, 19, 21, 22], [23, 25, 27, 29, 32, 6, 7, 9, 11, 13, 15, 17, 19, 21, 22], [24, 6, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 26], [24, 6, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 28], [24, 6, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 30], [24, 6, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 32], [25, 26, 6, 7, 9, 11, 13, 15, 17, 19, 21, 23, 24], [25, 27, 28, 6, 7, 9, 11, 13, 15, 17, 19, 21, 23, 24], [25, 27, 29, 30, 6, 7, 9, 11, 13, 15, 17, 19, 21, 23, 24], [25, 27, 29, 32, 6, 7, 9, 11, 13, 15, 17, 19, 21, 23, 24], [26, 6, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 28], [26, 6, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 30], [26, 6, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 32], [27, 28, 6, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 26], [27, 29, 30, 6, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 26], [27, 29, 32, 6, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 26], [28, 6, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 30], [28, 6, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 32], [29, 30, 6, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 28], [29, 32, 6, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 28], [30, 6, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 32], [32, 6, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 30], [1, 35, 5, 6, 7, 9, 10], [1, 35, 5, 6, 7, 9, 11, 13, 14], [1, 35, 5, 6, 7, 9, 11, 13, 15, 17, 18], [1, 35, 5, 6, 7, 9, 11, 13, 15, 17, 19, 20], [1, 35, 5, 6, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 26], [1, 35, 5, 6, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 28], [1, 35, 5, 6, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 30], [1, 35, 5, 6, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 32]], "num_total_prime_paths": 183, "num_covered_paths": 31, "prime_path_coverage": 0.17, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_81_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_81_CFG.dot"}
{"humaneval_id": "HumanEval_119", "python_file": "HumanEval_119/main.py", "input_file": "HumanEval_119/input.txt", "prime_paths_nodes": [["5", "6", "8"], ["5", "6", "7", "9", "10", "12"], ["5", "6", "7", "11", "10", "12"], ["7", "9", "10", "6", "8"], ["7", "11", "10", "6", "8"], ["9", "10", "6", "7", "11"], ["11", "10", "6", "7", "9"], ["1", "20", "3", "17"]], "prime_paths_statements": [["val = 0\\l", "for i in s:\\l", "return True if val == 0 else False\\l"], ["val = 0\\l", "for i in s:\\l", "if i == '(':\\l", "val = val + 1\\l", "if val < 0:\\l", "return False\\l"], ["val = 0\\l", "for i in s:\\l", "if i == '(':\\l", "val = val - 1\\l", "if val < 0:\\l", "return False\\l"], ["if i == '(':\\l", "val = val + 1\\l", "if val < 0:\\l", "for i in s:\\l", "return True if val == 0 else False\\l"], ["if i == '(':\\l", "val = val - 1\\l", "if val < 0:\\l", "for i in s:\\l", "return True if val == 0 else False\\l"], ["val = val + 1\\l", "if val < 0:\\l", "for i in s:\\l", "if i == '(':\\l", "val = val - 1\\l"], ["val = val - 1\\l", "if val < 0:\\l", "for i in s:\\l", "if i == '(':\\l", "val = val + 1\\l"], ["from typing import *\\ldef match_parens(lst):...\\lmatch_parens(['()(', ')'])\\l", "match_parens", "def check(s):...\\lS1 = lst[0] + lst[1]\\lS2 = lst[1] + lst[0]\\l", "return 'Yes' if check(S1) or che...'No'\\l"]], "prime_paths_linenumbers": [[4, 5, 12], [4, 5, 6, 7, 10, 11], [4, 5, 6, 9, 10, 11], [6, 7, 10, 5, 12], [6, 9, 10, 5, 12], [7, 10, 5, 6, 9], [9, 10, 5, 6, 7], [1, 18, 3, 14, 15, 16]], "covered_statements_linenumbers": [1, 2, 3, 4, 5, 6, 7, 9, 10, 12, 14, 15, 16, 18], "missing_statements_linenumbers": [11], "covered_prime_paths_linenumbers": [[4, 5, 12], [6, 7, 10, 5, 12], [6, 9, 10, 5, 12], [7, 10, 5, 6, 9], [9, 10, 5, 6, 7], [1, 18, 3, 14, 15, 16]], "missing_prime_paths_linenumbers": [[4, 5, 6, 7, 10, 11], [4, 5, 6, 9, 10, 11]], "num_total_prime_paths": 8, "num_covered_paths": 6, "prime_path_coverage": 0.75, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_119_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_119_CFG.dot"}
{"humaneval_id": "HumanEval_10", "python_file": "HumanEval_10/main.py", "input_file": "HumanEval_10/input.txt", "prime_paths_nodes": [["8", "7", "9"], ["1", "12", "3", "4"], ["1", "12", "3", "5", "7", "8"], ["1", "12", "3", "5", "7", "9"]], "prime_paths_statements": [["beginning_of_suffix += 1\\l", "while not is_palindrome(string[beginning_of_suffix:]):\\l", "return string + string[:beginning_of_suffix][::-1]\\l"], ["from typing import *\\ldef is_palindrome(string: str) ->bool:...\\lis_palindrome('jerry')\\l", "is_palindrome", "if not string:\\l", "return ''\\l"], ["from typing import *\\ldef is_palindrome(string: str) ->bool:...\\lis_palindrome('jerry')\\l", "is_palindrome", "if not string:\\l", "beginning_of_suffix = 0\\l", "while not is_palindrome(string[beginning_of_suffix:]):\\l", "beginning_of_suffix += 1\\l"], ["from typing import *\\ldef is_palindrome(string: str) ->bool:...\\lis_palindrome('jerry')\\l", "is_palindrome", "if not string:\\l", "beginning_of_suffix = 0\\l", "while not is_palindrome(string[beginning_of_suffix:]):\\l", "return string + string[:beginning_of_suffix][::-1]\\l"]], "prime_paths_linenumbers": [[10, 9, 12], [1, 14, 4, 5], [1, 14, 4, 7, 9, 10], [1, 14, 4, 7, 9, 12]], "covered_statements_linenumbers": [129, 255, 137, 145, 20, 25, 154, 27, 28, 29, 30, 31, 32, 33, 155, 35, 157, 37, 159, 39, 167, 42, 43, 171, 175, 303, 49, 50, 51, 179, 53, 184, 57, 188, 61, 192, 65, 196, 200, 74, 335, 336, 209, 340, 342, 88, 352, 101, 114, 119, 120, 250, 127, 1, 3, 4, 7, 9, 14, 1, 1163, 12, 13, 268, 15, 16, 145, 18, 19, 20, 21, 22, 23, 274, 537, 660, 1048, 30, 31, 32, 33, 34, 287, 36, 37, 38, 39, 931, 425, 42, 45, 46, 559, 560, 49, 946, 310, 1591, 57, 442, 570, 1209, 1722, 192, 1093, 70, 329, 269, 1226, 460, 719, 208, 81, 1744, 1236, 1367, 219, 1633, 98, 1380, 869, 1005, 1520, 1776, 1777, 117, 247, 760, 1529, 382, 512, 513, 1025, 518, 519, 1030, 1544, 1545, 524, 525, 1039, 1040, 530, 531, 21, 22, 1047, 24, 25, 26, 27, 28, 29, 30, 536, 32, 33, 34, 542, 36, 543, 1054, 1058, 40, 41, 552, 43, 553, 1063, 558, 559, 48, 1067, 50, 1068, 565, 54, 566, 1081, 1082, 571, 572, 63, 64, 577, 578, 67, 68, 1089, 1090, 71, 72, 1603, 74, 75, 1100, 1101, 83, 1116, 1117, 96, 100, 1127, 1128, 105, 109, 1135, 1136, 114, 115, 1531, 631, 120, 121, 632, 1143, 1144, 1149, 640, 129, 130, 641, 649, 650, 537, 143, 144, 655, 656, 1167, 1168, 1173, 1174, 663, 664, 153, 154, 1179, 1180, 673, 1185, 1186, 1191, 1192, 170, 171, 1197, 1198, 179, 180, 1203, 1204, 696, 697, 1209, 1210, 702, 703, 1216, 1217, 708, 709, 201, 202, 714, 715, 1228, 1229, 720, 721, 1235, 1236, 213, 214, 726, 727, 220, 221, 735, 736, 1253, 230, 744, 745, 236, 240, 753, 754, 244, 245, 249, 250, 762, 763, 771, 772, 265, 266, 782, 279, 280, 793, 794, 802, 803, 293, 294, 814, 303, 304, 815, 316, 332, 340, 341, 868, 869, 360, 364, 368, 372, 376, 380, 384, 390, 398, 403, 1427, 1428, 408, 409, 1436, 1437, 417, 1442, 1443, 423, 1448, 1449, 1456, 949, 950, 1463, 453, 457, 969, 1484, 461, 976, 465, 469, 473, 480, 992, 484, 996, 1509, 488, 1000, 493, 494, 1005, 1521, 1015, 503, 504, 1019, 1037, 22, 24, 25, 26, 27, 536, 537, 30, 33, 34, 35, 36, 39, 40, 43, 44, 47, 48, 51, 52, 55, 56, 59, 60, 64, 69, 587, 77, 82, 83, 108, 621, 622, 623, 624, 154, 159, 164, 679, 686, 691, 697, 188, 713, 202, 734, 227, 756, 757, 259, 772, 773, 266, 778, 779, 271, 784, 785, 276, 790, 791, 797, 798, 803, 293, 808, 813, 304, 818, 823, 314, 830, 325, 841, 330, 842, 844, 334, 852, 341, 853, 855, 345, 863, 864, 353, 869, 874, 363, 875, 877, 886, 375, 376, 897, 387, 388, 903, 393, 394, 910, 911, 916, 407, 924, 928, 932, 937, 941, 945, 440, 953, 443, 959, 964, 970, 459, 460, 461, 462, 975, 980, 493, 503, 504, 32, 33, 65, 70, 75, 76, 49, 22, 23, 25, 26, 28, 29, 32, 1, 2, 3, 5, 7, 39, 9, 10, 13, 16, 48, 24, 57, 34, 35, 36, 38, 20, 21, 23, 26, 27, 28, 29, 30, 31, 1, 15, 16, 17, 19, 531, 21, 22, 23, 24, 25, 532, 30, 543, 32, 33, 34, 35, 37, 38, 41, 42, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 1591, 57, 1592, 574, 575, 64, 1601, 1608, 1610, 77, 83, 1621, 1623, 1636, 101, 113, 127, 150, 662, 1180, 670, 160, 1189, 1190, 169, 174, 1202, 186, 196, 708, 709, 710, 711, 1231, 1232, 212, 1251, 237, 1261, 557, 1271, 265, 299, 325, 349, 362, 370, 1417, 1418, 418, 458, 1483, 1484, 477, 478, 26, 19, 28, 31, 24, 25, 26, 27, 28, 160, 161, 47, 49, 54, 55, 57, 62, 65, 66, 68, 69, 71, 72, 75, 76, 86, 87, 3, 652, 14, 15, 16, 17, 18, 19, 20, 273, 22, 660, 661, 27, 28, 31, 32, 34, 291, 298, 299, 684, 685, 47, 308, 309, 55, 319, 65, 705, 706, 81, 209, 89, 95, 96, 485, 110, 503, 504, 638, 1, 1033, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 1050, 30, 1051, 32, 33, 35, 36, 39, 555, 53, 569, 588, 77, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 114, 626, 629, 136, 662, 669, 167, 680, 687, 182, 723, 731, 221, 230, 754, 250, 767, 786, 813, 314, 856, 864, 359, 872, 382, 905, 396, 397, 926, 429, 944, 961, 464, 976, 475, 486, 502, 1018, 263, 136, 264, 266, 17, 18, 145, 20, 21, 22, 23, 277, 25, 26, 155, 284, 29, 30, 33, 36, 170, 45, 46, 48, 53, 71, 72, 77, 83, 92, 101, 102, 104, 239, 112, 248, 125, 1, 516, 391, 12, 13, 14, 15, 141, 17, 18, 271, 20, 527, 26, 28, 30, 31, 32, 158, 34, 36, 42, 298, 44, 556, 174, 48, 307, 181, 54, 440, 443, 320, 577, 66, 194, 455, 207, 591, 340, 471, 93, 487, 238, 366, 495, 625, 121, 253, 1, 131, 12, 13, 14, 15, 142, 271, 18, 273, 20, 22, 29, 159, 36, 166, 41, 48, 58, 186, 193, 194, 195, 68, 196, 76, 83, 88, 98, 99, 240, 114, 245, 121, 255], "missing_statements_linenumbers": [27, 34, 39, 46, 56, 66, 74, 81, 86, 96, 112, 119, 129, 140, 157, 164, 177, 178, 179, 180, 182, 184, 191, 238, 243, 253, 262, 263, 264, 265, 266, 267, 268, 269, 279, 280, 282, 283, 284, 285, 286, 287, 288, 289, 290, 292, 293, 294, 295, 296, 297, 298, 299, 300, 302, 305, 307, 308, 309], "covered_prime_paths_linenumbers": [[10, 9, 12], [1, 14, 4, 5], [1, 14, 4, 7, 9, 10], [1, 14, 4, 7, 9, 12]], "missing_prime_paths_linenumbers": [], "num_total_prime_paths": 4, "num_covered_paths": 4, "prime_path_coverage": 1.0, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_10_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_10_CFG.dot"}
{"humaneval_id": "HumanEval_153__0", "python_file": "HumanEval_153__0/main.py", "input_file": "HumanEval_153__0/input.txt", "prime_paths_nodes": [["11", "19", "10", "12", "22"], ["11", "19", "20", "10", "12", "22"], ["19", "10", "11"], ["19", "20", "10", "11"], ["20", "10", "11", "19"], ["1", "25", "3", "10", "11", "19", "20"], ["1", "25", "3", "10", "12", "22"]], "prime_paths_statements": [["val = len([x for x in s if x.isalpha() and x.isupper()]) - len([x for x in\\l    s if x.isalpha() and x.islower()])\\l", "if val > my_val:\\l", "for s in extensions:\\l", "ans = class_name + '.' + strong\\l", "return ans\\l"], ["val = len([x for x in s if x.isalpha() and x.isupper()]) - len([x for x in\\l    s if x.isalpha() and x.islower()])\\l", "if val > my_val:\\l", "strong = s\\lmy_val = val\\l", "for s in extensions:\\l", "ans = class_name + '.' + strong\\l", "return ans\\l"], ["if val > my_val:\\l", "for s in extensions:\\l", "val = len([x for x in s if x.isalpha() and x.isupper()]) - len([x for x in\\l    s if x.isalpha() and x.islower()])\\l"], ["if val > my_val:\\l", "strong = s\\lmy_val = val\\l", "for s in extensions:\\l", "val = len([x for x in s if x.isalpha() and x.isupper()]) - len([x for x in\\l    s if x.isalpha() and x.islower()])\\l"], ["strong = s\\lmy_val = val\\l", "for s in extensions:\\l", "val = len([x for x in s if x.isalpha() and x.isupper()]) - len([x for x in\\l    s if x.isalpha() and x.islower()])\\l", "if val > my_val:\\l"], ["from typing import *\\ldef Strongest_Extension(class_name, extensions):...\\lStrongest_Extension('Sp', ['671235', 'Bb'])\\l", "Strongest_Extension", "strong = extensions[0]\\lmy_val = len([x for x in extensions[0] if x.isalpha() and x.isupper()]) - len([\\l    x for x in extensions[0] if x.isalpha() and x.islower()])\\l", "for s in extensions:\\l", "val = len([x for x in s if x.isalpha() and x.isupper()]) - len([x for x in\\l    s if x.isalpha() and x.islower()])\\l", "if val > my_val:\\l", "strong = s\\lmy_val = val\\l"], ["from typing import *\\ldef Strongest_Extension(class_name, extensions):...\\lStrongest_Extension('Sp', ['671235', 'Bb'])\\l", "Strongest_Extension", "strong = extensions[0]\\lmy_val = len([x for x in extensions[0] if x.isalpha() and x.isupper()]) - len([\\l    x for x in extensions[0] if x.isalpha() and x.islower()])\\l", "for s in extensions:\\l", "ans = class_name + '.' + strong\\l", "return ans\\l"]], "prime_paths_linenumbers": [[9, 11, 8, 15, 16], [9, 11, 12, 13, 8, 15, 16], [11, 8, 9], [11, 12, 13, 8, 9], [12, 13, 8, 9, 11], [1, 18, 5, 6, 8, 9, 11, 12, 13], [1, 18, 5, 6, 8, 15, 16]], "covered_statements_linenumbers": [1, 4, 5, 6, 7, 8, 9, 10, 11, 15, 16, 18], "missing_statements_linenumbers": [12, 13], "covered_prime_paths_linenumbers": [[9, 11, 8, 15, 16], [11, 8, 9], [1, 18, 5, 6, 8, 15, 16]], "missing_prime_paths_linenumbers": [[9, 11, 12, 13, 8, 15, 16], [11, 12, 13, 8, 9], [12, 13, 8, 9, 11], [1, 18, 5, 6, 8, 9, 11, 12, 13]], "num_total_prime_paths": 7, "num_covered_paths": 3, "prime_path_coverage": 0.43, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_153__0_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_153__0_CFG.dot"}
{"humaneval_id": "HumanEval_56", "python_file": "HumanEval_56/main.py", "input_file": "HumanEval_56/input.txt", "prime_paths_nodes": [["5", "7", "8", "4", "6"], ["5", "9", "8", "4", "6"], ["7", "8", "4", "5", "9"], ["9", "8", "4", "5", "7"], ["1", "15", "3", "4", "6"], ["1", "15", "3", "4", "5", "7", "8", "10"], ["1", "15", "3", "4", "5", "9", "8", "10"]], "prime_paths_statements": [["if b == '<':\\l", "depth += 1\\l", "if depth < 0:\\l", "for b in brackets:\\l", "return depth == 0\\l"], ["if b == '<':\\l", "depth -= 1\\l", "if depth < 0:\\l", "for b in brackets:\\l", "return depth == 0\\l"], ["depth += 1\\l", "if depth < 0:\\l", "for b in brackets:\\l", "if b == '<':\\l", "depth -= 1\\l"], ["depth -= 1\\l", "if depth < 0:\\l", "for b in brackets:\\l", "if b == '<':\\l", "depth += 1\\l"], ["from typing import *\\ldef correct_bracketing(brackets: str):...\\lcorrect_bracketing('<<><>>')\\l", "correct_bracketing", "depth = 0\\l", "for b in brackets:\\l", "return depth == 0\\l"], ["from typing import *\\ldef correct_bracketing(brackets: str):...\\lcorrect_bracketing('<<><>>')\\l", "correct_bracketing", "depth = 0\\l", "for b in brackets:\\l", "if b == '<':\\l", "depth += 1\\l", "if depth < 0:\\l", "return False\\l"], ["from typing import *\\ldef correct_bracketing(brackets: str):...\\lcorrect_bracketing('<<><>>')\\l", "correct_bracketing", "depth = 0\\l", "for b in brackets:\\l", "if b == '<':\\l", "depth -= 1\\l", "if depth < 0:\\l", "return False\\l"]], "prime_paths_linenumbers": [[5, 6, 9, 4, 11], [5, 8, 9, 4, 11], [6, 9, 4, 5, 8], [8, 9, 4, 5, 6], [1, 13, 3, 4, 11], [1, 13, 3, 4, 5, 6, 9, 10], [1, 13, 3, 4, 5, 8, 9, 10]], "covered_statements_linenumbers": [1, 2, 3, 4, 5, 6, 8, 9, 11, 13], "missing_statements_linenumbers": [10], "covered_prime_paths_linenumbers": [[5, 6, 9, 4, 11], [5, 8, 9, 4, 11], [6, 9, 4, 5, 8], [8, 9, 4, 5, 6], [1, 13, 3, 4, 11]], "missing_prime_paths_linenumbers": [[1, 13, 3, 4, 5, 6, 9, 10], [1, 13, 3, 4, 5, 8, 9, 10]], "num_total_prime_paths": 7, "num_covered_paths": 5, "prime_path_coverage": 0.71, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_56_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_56_CFG.dot"}
{"humaneval_id": "HumanEval_109", "python_file": "HumanEval_109/main.py", "input_file": "HumanEval_109/input.txt", "prime_paths_nodes": [["14", "11", "15"], ["1", "21", "3", "5"], ["1", "21", "3", "6", "11", "15"], ["1", "21", "3", "6", "11", "14", "16"]], "prime_paths_statements": [["if my_arr[i] != sorted_array[i]:\\l", "for i in range(len(arr)):\\l", "return True\\l"], ["from typing import *\\ldef move_one_ball(arr):...\\lmove_one_ball([3, 4, 5, 1, 2])\\l", "move_one_ball", "if len(arr) == 0:\\l", "return True\\l"], ["from typing import *\\ldef move_one_ball(arr):...\\lmove_one_ball([3, 4, 5, 1, 2])\\l", "move_one_ball", "if len(arr) == 0:\\l", "sorted_array = sorted(arr)\\lmy_arr = []\\lmin_value = min(arr)\\lmin_index = arr.index(min_value)\\lmy_arr = arr[min_index:] + arr[0:min_index]\\l", "for i in range(len(arr)):\\l", "return True\\l"], ["from typing import *\\ldef move_one_ball(arr):...\\lmove_one_ball([3, 4, 5, 1, 2])\\l", "move_one_ball", "if len(arr) == 0:\\l", "sorted_array = sorted(arr)\\lmy_arr = []\\lmin_value = min(arr)\\lmin_index = arr.index(min_value)\\lmy_arr = arr[min_index:] + arr[0:min_index]\\l", "for i in range(len(arr)):\\l", "if my_arr[i] != sorted_array[i]:\\l", "return False\\l"]], "prime_paths_linenumbers": [[12, 11, 14], [1, 16, 3, 4], [1, 16, 3, 5, 6, 8, 9, 10, 11, 14], [1, 16, 3, 5, 6, 8, 9, 10, 11, 12, 13]], "covered_statements_linenumbers": [1, 2, 3, 5, 6, 8, 9, 10, 11, 12, 14, 16], "missing_statements_linenumbers": [4, 13], "covered_prime_paths_linenumbers": [[12, 11, 14], [1, 16, 3, 5, 6, 8, 9, 10, 11, 14]], "missing_prime_paths_linenumbers": [[1, 16, 3, 4], [1, 16, 3, 5, 6, 8, 9, 10, 11, 12, 13]], "num_total_prime_paths": 4, "num_covered_paths": 2, "prime_path_coverage": 0.5, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_109_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_109_CFG.dot"}
{"humaneval_id": "HumanEval_81__0", "python_file": "HumanEval_81__0/main.py", "input_file": "HumanEval_81__0/input.txt", "prime_paths_nodes": [["5", "7", "4", "6"], ["5", "9", "10", "4", "6"], ["5", "9", "12", "13", "4", "6"], ["5", "9", "12", "15", "16", "4", "6"], ["5", "9", "12", "15", "18", "19", "4", "6"], ["5", "9", "12", "15", "18", "21", "22", "4", "6"], ["5", "9", "12", "15", "18", "21", "24", "25", "4", "6"], ["5", "9", "12", "15", "18", "21", "24", "27", "28", "4", "6"], ["5", "9", "12", "15", "18", "21", "24", "27", "30", "31", "4", "6"], ["5", "9", "12", "15", "18", "21", "24", "27", "30", "33", "34", "4", "6"], ["5", "9", "12", "15", "18", "21", "24", "27", "30", "33", "36", "37", "4", "6"], ["5", "9", "12", "15", "18", "21", "24", "27", "30", "33", "36", "39", "40", "4", "6"], ["5", "9", "12", "15", "18", "21", "24", "27", "30", "33", "36", "39", "42", "4", "6"], ["7", "4", "5", "9", "10"], ["7", "4", "5", "9", "12", "13"], ["7", "4", "5", "9", "12", "15", "16"], ["7", "4", "5", "9", "12", "15", "18", "19"], ["7", "4", "5", "9", "12", "15", "18", "21", "22"], ["7", "4", "5", "9", "12", "15", "18", "21", "24", "25"], ["7", "4", "5", "9", "12", "15", "18", "21", "24", "27", "28"], ["7", "4", "5", "9", "12", "15", "18", "21", "24", "27", "30", "31"], ["7", "4", "5", "9", "12", "15", "18", "21", "24", "27", "30", "33", "34"], ["7", "4", "5", "9", "12", "15", "18", "21", "24", "27", "30", "33", "36", "37"], ["7", "4", "5", "9", "12", "15", "18", "21", "24", "27", "30", "33", "36", "39", "40"], ["7", "4", "5", "9", "12", "15", "18", "21", "24", "27", "30", "33", "36", "39", "42"], ["9", "10", "4", "5", "7"], ["9", "12", "13", "4", "5", "7"], ["9", "12", "15", "16", "4", "5", "7"], ["9", "12", "15", "18", "19", "4", "5", "7"], ["9", "12", "15", "18", "21", "22", "4", "5", "7"], ["9", "12", "15", "18", "21", "24", "25", "4", "5", "7"], ["9", "12", "15", "18", "21", "24", "27", "28", "4", "5", "7"], ["9", "12", "15", "18", "21", "24", "27", "30", "31", "4", "5", "7"], ["9", "12", "15", "18", "21", "24", "27", "30", "33", "34", "4", "5", "7"], ["9", "12", "15", "18", "21", "24", "27", "30", "33", "36", "37", "4", "5", "7"], ["9", "12", "15", "18", "21", "24", "27", "30", "33", "36", "39", "40", "4", "5", "7"], ["9", "12", "15", "18", "21", "24", "27", "30", "33", "36", "39", "42", "4", "5", "7"], ["10", "4", "5", "9", "12", "13"], ["10", "4", "5", "9", "12", "15", "16"], ["10", "4", "5", "9", "12", "15", "18", "19"], ["10", "4", "5", "9", "12", "15", "18", "21", "22"], ["10", "4", "5", "9", "12", "15", "18", "21", "24", "25"], ["10", "4", "5", "9", "12", "15", "18", "21", "24", "27", "28"], ["10", "4", "5", "9", "12", "15", "18", "21", "24", "27", "30", "31"], ["10", "4", "5", "9", "12", "15", "18", "21", "24", "27", "30", "33", "34"], ["10", "4", "5", "9", "12", "15", "18", "21", "24", "27", "30", "33", "36", "37"], ["10", "4", "5", "9", "12", "15", "18", "21", "24", "27", "30", "33", "36", "39", "40"], ["10", "4", "5", "9", "12", "15", "18", "21", "24", "27", "30", "33", "36", "39", "42"], ["12", "13", "4", "5", "9", "10"], ["12", "15", "16", "4", "5", "9", "10"], ["12", "15", "18", "19", "4", "5", "9", "10"], ["12", "15", "18", "21", "22", "4", "5", "9", "10"], ["12", "15", "18", "21", "24", "25", "4", "5", "9", "10"], ["12", "15", "18", "21", "24", "27", "28", "4", "5", "9", "10"], ["12", "15", "18", "21", "24", "27", "30", "31", "4", "5", "9", "10"], ["12", "15", "18", "21", "24", "27", "30", "33", "34", "4", "5", "9", "10"], ["12", "15", "18", "21", "24", "27", "30", "33", "36", "37", "4", "5", "9", "10"], ["12", "15", "18", "21", "24", "27", "30", "33", "36", "39", "40", "4", "5", "9", "10"], ["12", "15", "18", "21", "24", "27", "30", "33", "36", "39", "42", "4", "5", "9", "10"], ["13", "4", "5", "9", "12", "15", "16"], ["13", "4", "5", "9", "12", "15", "18", "19"], ["13", "4", "5", "9", "12", "15", "18", "21", "22"], ["13", "4", "5", "9", "12", "15", "18", "21", "24", "25"], ["13", "4", "5", "9", "12", "15", "18", "21", "24", "27", "28"], ["13", "4", "5", "9", "12", "15", "18", "21", "24", "27", "30", "31"], ["13", "4", "5", "9", "12", "15", "18", "21", "24", "27", "30", "33", "34"], ["13", "4", "5", "9", "12", "15", "18", "21", "24", "27", "30", "33", "36", "37"], ["13", "4", "5", "9", "12", "15", "18", "21", "24", "27", "30", "33", "36", "39", "40"], ["13", "4", "5", "9", "12", "15", "18", "21", "24", "27", "30", "33", "36", "39", "42"], ["15", "16", "4", "5", "9", "12", "13"], ["15", "18", "19", "4", "5", "9", "12", "13"], ["15", "18", "21", "22", "4", "5", "9", "12", "13"], ["15", "18", "21", "24", "25", "4", "5", "9", "12", "13"], ["15", "18", "21", "24", "27", "28", "4", "5", "9", "12", "13"], ["15", "18", "21", "24", "27", "30", "31", "4", "5", "9", "12", "13"], ["15", "18", "21", "24", "27", "30", "33", "34", "4", "5", "9", "12", "13"], ["15", "18", "21", "24", "27", "30", "33", "36", "37", "4", "5", "9", "12", "13"], ["15", "18", "21", "24", "27", "30", "33", "36", "39", "40", "4", "5", "9", "12", "13"], ["15", "18", "21", "24", "27", "30", "33", "36", "39", "42", "4", "5", "9", "12", "13"], ["16", "4", "5", "9", "12", "15", "18", "19"], ["16", "4", "5", "9", "12", "15", "18", "21", "22"], ["16", "4", "5", "9", "12", "15", "18", "21", "24", "25"], ["16", "4", "5", "9", "12", "15", "18", "21", "24", "27", "28"], ["16", "4", "5", "9", "12", "15", "18", "21", "24", "27", "30", "31"], ["16", "4", "5", "9", "12", "15", "18", "21", "24", "27", "30", "33", "34"], ["16", "4", "5", "9", "12", "15", "18", "21", "24", "27", "30", "33", "36", "37"], ["16", "4", "5", "9", "12", "15", "18", "21", "24", "27", "30", "33", "36", "39", "40"], ["16", "4", "5", "9", "12", "15", "18", "21", "24", "27", "30", "33", "36", "39", "42"], ["18", "19", "4", "5", "9", "12", "15", "16"], ["18", "21", "22", "4", "5", "9", "12", "15", "16"], ["18", "21", "24", "25", "4", "5", "9", "12", "15", "16"], ["18", "21", "24", "27", "28", "4", "5", "9", "12", "15", "16"], ["18", "21", "24", "27", "30", "31", "4", "5", "9", "12", "15", "16"], ["18", "21", "24", "27", "30", "33", "34", "4", "5", "9", "12", "15", "16"], ["18", "21", "24", "27", "30", "33", "36", "37", "4", "5", "9", "12", "15", "16"], ["18", "21", "24", "27", "30", "33", "36", "39", "40", "4", "5", "9", "12", "15", "16"], ["18", "21", "24", "27", "30", "33", "36", "39", "42", "4", "5", "9", "12", "15", "16"], ["19", "4", "5", "9", "12", "15", "18", "21", "22"], ["19", "4", "5", "9", "12", "15", "18", "21", "24", "25"], ["19", "4", "5", "9", "12", "15", "18", "21", "24", "27", "28"], ["19", "4", "5", "9", "12", "15", "18", "21", "24", "27", "30", "31"], ["19", "4", "5", "9", "12", "15", "18", "21", "24", "27", "30", "33", "34"], ["19", "4", "5", "9", "12", "15", "18", "21", "24", "27", "30", "33", "36", "37"], ["19", "4", "5", "9", "12", "15", "18", "21", "24", "27", "30", "33", "36", "39", "40"], ["19", "4", "5", "9", "12", "15", "18", "21", "24", "27", "30", "33", "36", "39", "42"], ["21", "22", "4", "5", "9", "12", "15", "18", "19"], ["21", "24", "25", "4", "5", "9", "12", "15", "18", "19"], ["21", "24", "27", "28", "4", "5", "9", "12", "15", "18", "19"], ["21", "24", "27", "30", "31", "4", "5", "9", "12", "15", "18", "19"], ["21", "24", "27", "30", "33", "34", "4", "5", "9", "12", "15", "18", "19"], ["21", "24", "27", "30", "33", "36", "37", "4", "5", "9", "12", "15", "18", "19"], ["21", "24", "27", "30", "33", "36", "39", "40", "4", "5", "9", "12", "15", "18", "19"], ["21", "24", "27", "30", "33", "36", "39", "42", "4", "5", "9", "12", "15", "18", "19"], ["22", "4", "5", "9", "12", "15", "18", "21", "24", "25"], ["22", "4", "5", "9", "12", "15", "18", "21", "24", "27", "28"], ["22", "4", "5", "9", "12", "15", "18", "21", "24", "27", "30", "31"], ["22", "4", "5", "9", "12", "15", "18", "21", "24", "27", "30", "33", "34"], ["22", "4", "5", "9", "12", "15", "18", "21", "24", "27", "30", "33", "36", "37"], ["22", "4", "5", "9", "12", "15", "18", "21", "24", "27", "30", "33", "36", "39", "40"], ["22", "4", "5", "9", "12", "15", "18", "21", "24", "27", "30", "33", "36", "39", "42"], ["24", "25", "4", "5", "9", "12", "15", "18", "21", "22"], ["24", "27", "28", "4", "5", "9", "12", "15", "18", "21", "22"], ["24", "27", "30", "31", "4", "5", "9", "12", "15", "18", "21", "22"], ["24", "27", "30", "33", "34", "4", "5", "9", "12", "15", "18", "21", "22"], ["24", "27", "30", "33", "36", "37", "4", "5", "9", "12", "15", "18", "21", "22"], ["24", "27", "30", "33", "36", "39", "40", "4", "5", "9", "12", "15", "18", "21", "22"], ["24", "27", "30", "33", "36", "39", "42", "4", "5", "9", "12", "15", "18", "21", "22"], ["25", "4", "5", "9", "12", "15", "18", "21", "24", "27", "28"], ["25", "4", "5", "9", "12", "15", "18", "21", "24", "27", "30", "31"], ["25", "4", "5", "9", "12", "15", "18", "21", "24", "27", "30", "33", "34"], ["25", "4", "5", "9", "12", "15", "18", "21", "24", "27", "30", "33", "36", "37"], ["25", "4", "5", "9", "12", "15", "18", "21", "24", "27", "30", "33", "36", "39", "40"], ["25", "4", "5", "9", "12", "15", "18", "21", "24", "27", "30", "33", "36", "39", "42"], ["27", "28", "4", "5", "9", "12", "15", "18", "21", "24", "25"], ["27", "30", "31", "4", "5", "9", "12", "15", "18", "21", "24", "25"], ["27", "30", "33", "34", "4", "5", "9", "12", "15", "18", "21", "24", "25"], ["27", "30", "33", "36", "37", "4", "5", "9", "12", "15", "18", "21", "24", "25"], ["27", "30", "33", "36", "39", "40", "4", "5", "9", "12", "15", "18", "21", "24", "25"], ["27", "30", "33", "36", "39", "42", "4", "5", "9", "12", "15", "18", "21", "24", "25"], ["28", "4", "5", "9", "12", "15", "18", "21", "24", "27", "30", "31"], ["28", "4", "5", "9", "12", "15", "18", "21", "24", "27", "30", "33", "34"], ["28", "4", "5", "9", "12", "15", "18", "21", "24", "27", "30", "33", "36", "37"], ["28", "4", "5", "9", "12", "15", "18", "21", "24", "27", "30", "33", "36", "39", "40"], ["28", "4", "5", "9", "12", "15", "18", "21", "24", "27", "30", "33", "36", "39", "42"], ["30", "31", "4", "5", "9", "12", "15", "18", "21", "24", "27", "28"], ["30", "33", "34", "4", "5", "9", "12", "15", "18", "21", "24", "27", "28"], ["30", "33", "36", "37", "4", "5", "9", "12", "15", "18", "21", "24", "27", "28"], ["30", "33", "36", "39", "40", "4", "5", "9", "12", "15", "18", "21", "24", "27", "28"], ["30", "33", "36", "39", "42", "4", "5", "9", "12", "15", "18", "21", "24", "27", "28"], ["31", "4", "5", "9", "12", "15", "18", "21", "24", "27", "30", "33", "34"], ["31", "4", "5", "9", "12", "15", "18", "21", "24", "27", "30", "33", "36", "37"], ["31", "4", "5", "9", "12", "15", "18", "21", "24", "27", "30", "33", "36", "39", "40"], ["31", "4", "5", "9", "12", "15", "18", "21", "24", "27", "30", "33", "36", "39", "42"], ["33", "34", "4", "5", "9", "12", "15", "18", "21", "24", "27", "30", "31"], ["33", "36", "37", "4", "5", "9", "12", "15", "18", "21", "24", "27", "30", "31"], ["33", "36", "39", "40", "4", "5", "9", "12", "15", "18", "21", "24", "27", "30", "31"], ["33", "36", "39", "42", "4", "5", "9", "12", "15", "18", "21", "24", "27", "30", "31"], ["34", "4", "5", "9", "12", "15", "18", "21", "24", "27", "30", "33", "36", "37"], ["34", "4", "5", "9", "12", "15", "18", "21", "24", "27", "30", "33", "36", "39", "40"], ["34", "4", "5", "9", "12", "15", "18", "21", "24", "27", "30", "33", "36", "39", "42"], ["36", "37", "4", "5", "9", "12", "15", "18", "21", "24", "27", "30", "33", "34"], ["36", "39", "40", "4", "5", "9", "12", "15", "18", "21", "24", "27", "30", "33", "34"], ["36", "39", "42", "4", "5", "9", "12", "15", "18", "21", "24", "27", "30", "33", "34"], ["37", "4", "5", "9", "12", "15", "18", "21", "24", "27", "30", "33", "36", "39", "40"], ["37", "4", "5", "9", "12", "15", "18", "21", "24", "27", "30", "33", "36", "39", "42"], ["39", "40", "4", "5", "9", "12", "15", "18", "21", "24", "27", "30", "33", "36", "37"], ["39", "42", "4", "5", "9", "12", "15", "18", "21", "24", "27", "30", "33", "36", "37"], ["40", "4", "5", "9", "12", "15", "18", "21", "24", "27", "30", "33", "36", "39", "42"], ["42", "4", "5", "9", "12", "15", "18", "21", "24", "27", "30", "33", "36", "39", "40"], ["1", "58", "3", "4", "6"], ["1", "58", "3", "4", "5", "7"], ["1", "58", "3", "4", "5", "9", "10"], ["1", "58", "3", "4", "5", "9", "12", "13"], ["1", "58", "3", "4", "5", "9", "12", "15", "16"], ["1", "58", "3", "4", "5", "9", "12", "15", "18", "19"], ["1", "58", "3", "4", "5", "9", "12", "15", "18", "21", "22"], ["1", "58", "3", "4", "5", "9", "12", "15", "18", "21", "24", "25"], ["1", "58", "3", "4", "5", "9", "12", "15", "18", "21", "24", "27", "28"], ["1", "58", "3", "4", "5", "9", "12", "15", "18", "21", "24", "27", "30", "31"], ["1", "58", "3", "4", "5", "9", "12", "15", "18", "21", "24", "27", "30", "33", "34"], ["1", "58", "3", "4", "5", "9", "12", "15", "18", "21", "24", "27", "30", "33", "36", "37"], ["1", "58", "3", "4", "5", "9", "12", "15", "18", "21", "24", "27", "30", "33", "36", "39", "40"], ["1", "58", "3", "4", "5", "9", "12", "15", "18", "21", "24", "27", "30", "33", "36", "39", "42"]], "prime_paths_statements": [["if gpa == 4.0:\\l", "letter_grade.append('A+')\\l", "for gpa in grades:\\l", "return letter_grade\\l"], ["if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "letter_grade.append('A')\\l", "for gpa in grades:\\l", "return letter_grade\\l"], ["if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "letter_grade.append('A-')\\l", "for gpa in grades:\\l", "return letter_grade\\l"], ["if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "letter_grade.append('B+')\\l", "for gpa in grades:\\l", "return letter_grade\\l"], ["if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "letter_grade.append('B')\\l", "for gpa in grades:\\l", "return letter_grade\\l"], ["if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "letter_grade.append('B-')\\l", "for gpa in grades:\\l", "return letter_grade\\l"], ["if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "letter_grade.append('C+')\\l", "for gpa in grades:\\l", "return letter_grade\\l"], ["if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "letter_grade.append('C')\\l", "for gpa in grades:\\l", "return letter_grade\\l"], ["if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "if gpa > 1.3:\\l", "letter_grade.append('C-')\\l", "for gpa in grades:\\l", "return letter_grade\\l"], ["if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "if gpa > 1.3:\\l", "if gpa > 1.0:\\l", "letter_grade.append('D+')\\l", "for gpa in grades:\\l", "return letter_grade\\l"], ["if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "if gpa > 1.3:\\l", "if gpa > 1.0:\\l", "if gpa > 0.7:\\l", "letter_grade.append('D')\\l", "for gpa in grades:\\l", "return letter_grade\\l"], ["if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "if gpa > 1.3:\\l", "if gpa > 1.0:\\l", "if gpa > 0.7:\\l", "if gpa > 0.0:\\l", "letter_grade.append('D-')\\l", "for gpa in grades:\\l", "return letter_grade\\l"], ["if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "if gpa > 1.3:\\l", "if gpa > 1.0:\\l", "if gpa > 0.7:\\l", "if gpa > 0.0:\\l", "letter_grade.append('E')\\l", "for gpa in grades:\\l", "return letter_grade\\l"], ["letter_grade.append('A+')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "letter_grade.append('A')\\l"], ["letter_grade.append('A+')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "letter_grade.append('A-')\\l"], ["letter_grade.append('A+')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "letter_grade.append('B+')\\l"], ["letter_grade.append('A+')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "letter_grade.append('B')\\l"], ["letter_grade.append('A+')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "letter_grade.append('B-')\\l"], ["letter_grade.append('A+')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "letter_grade.append('C+')\\l"], ["letter_grade.append('A+')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "letter_grade.append('C')\\l"], ["letter_grade.append('A+')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "if gpa > 1.3:\\l", "letter_grade.append('C-')\\l"], ["letter_grade.append('A+')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "if gpa > 1.3:\\l", "if gpa > 1.0:\\l", "letter_grade.append('D+')\\l"], ["letter_grade.append('A+')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "if gpa > 1.3:\\l", "if gpa > 1.0:\\l", "if gpa > 0.7:\\l", "letter_grade.append('D')\\l"], ["letter_grade.append('A+')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "if gpa > 1.3:\\l", "if gpa > 1.0:\\l", "if gpa > 0.7:\\l", "if gpa > 0.0:\\l", "letter_grade.append('D-')\\l"], ["letter_grade.append('A+')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "if gpa > 1.3:\\l", "if gpa > 1.0:\\l", "if gpa > 0.7:\\l", "if gpa > 0.0:\\l", "letter_grade.append('E')\\l"], ["if gpa > 3.7:\\l", "letter_grade.append('A')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "letter_grade.append('A+')\\l"], ["if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "letter_grade.append('A-')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "letter_grade.append('A+')\\l"], ["if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "letter_grade.append('B+')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "letter_grade.append('A+')\\l"], ["if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "letter_grade.append('B')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "letter_grade.append('A+')\\l"], ["if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "letter_grade.append('B-')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "letter_grade.append('A+')\\l"], ["if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "letter_grade.append('C+')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "letter_grade.append('A+')\\l"], ["if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "letter_grade.append('C')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "letter_grade.append('A+')\\l"], ["if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "if gpa > 1.3:\\l", "letter_grade.append('C-')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "letter_grade.append('A+')\\l"], ["if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "if gpa > 1.3:\\l", "if gpa > 1.0:\\l", "letter_grade.append('D+')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "letter_grade.append('A+')\\l"], ["if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "if gpa > 1.3:\\l", "if gpa > 1.0:\\l", "if gpa > 0.7:\\l", "letter_grade.append('D')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "letter_grade.append('A+')\\l"], ["if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "if gpa > 1.3:\\l", "if gpa > 1.0:\\l", "if gpa > 0.7:\\l", "if gpa > 0.0:\\l", "letter_grade.append('D-')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "letter_grade.append('A+')\\l"], ["if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "if gpa > 1.3:\\l", "if gpa > 1.0:\\l", "if gpa > 0.7:\\l", "if gpa > 0.0:\\l", "letter_grade.append('E')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "letter_grade.append('A+')\\l"], ["letter_grade.append('A')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "letter_grade.append('A-')\\l"], ["letter_grade.append('A')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "letter_grade.append('B+')\\l"], ["letter_grade.append('A')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "letter_grade.append('B')\\l"], ["letter_grade.append('A')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "letter_grade.append('B-')\\l"], ["letter_grade.append('A')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "letter_grade.append('C+')\\l"], ["letter_grade.append('A')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "letter_grade.append('C')\\l"], ["letter_grade.append('A')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "if gpa > 1.3:\\l", "letter_grade.append('C-')\\l"], ["letter_grade.append('A')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "if gpa > 1.3:\\l", "if gpa > 1.0:\\l", "letter_grade.append('D+')\\l"], ["letter_grade.append('A')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "if gpa > 1.3:\\l", "if gpa > 1.0:\\l", "if gpa > 0.7:\\l", "letter_grade.append('D')\\l"], ["letter_grade.append('A')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "if gpa > 1.3:\\l", "if gpa > 1.0:\\l", "if gpa > 0.7:\\l", "if gpa > 0.0:\\l", "letter_grade.append('D-')\\l"], ["letter_grade.append('A')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "if gpa > 1.3:\\l", "if gpa > 1.0:\\l", "if gpa > 0.7:\\l", "if gpa > 0.0:\\l", "letter_grade.append('E')\\l"], ["if gpa > 3.3:\\l", "letter_grade.append('A-')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "letter_grade.append('A')\\l"], ["if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "letter_grade.append('B+')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "letter_grade.append('A')\\l"], ["if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "letter_grade.append('B')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "letter_grade.append('A')\\l"], ["if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "letter_grade.append('B-')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "letter_grade.append('A')\\l"], ["if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "letter_grade.append('C+')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "letter_grade.append('A')\\l"], ["if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "letter_grade.append('C')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "letter_grade.append('A')\\l"], ["if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "if gpa > 1.3:\\l", "letter_grade.append('C-')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "letter_grade.append('A')\\l"], ["if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "if gpa > 1.3:\\l", "if gpa > 1.0:\\l", "letter_grade.append('D+')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "letter_grade.append('A')\\l"], ["if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "if gpa > 1.3:\\l", "if gpa > 1.0:\\l", "if gpa > 0.7:\\l", "letter_grade.append('D')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "letter_grade.append('A')\\l"], ["if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "if gpa > 1.3:\\l", "if gpa > 1.0:\\l", "if gpa > 0.7:\\l", "if gpa > 0.0:\\l", "letter_grade.append('D-')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "letter_grade.append('A')\\l"], ["if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "if gpa > 1.3:\\l", "if gpa > 1.0:\\l", "if gpa > 0.7:\\l", "if gpa > 0.0:\\l", "letter_grade.append('E')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "letter_grade.append('A')\\l"], ["letter_grade.append('A-')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "letter_grade.append('B+')\\l"], ["letter_grade.append('A-')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "letter_grade.append('B')\\l"], ["letter_grade.append('A-')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "letter_grade.append('B-')\\l"], ["letter_grade.append('A-')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "letter_grade.append('C+')\\l"], ["letter_grade.append('A-')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "letter_grade.append('C')\\l"], ["letter_grade.append('A-')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "if gpa > 1.3:\\l", "letter_grade.append('C-')\\l"], ["letter_grade.append('A-')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "if gpa > 1.3:\\l", "if gpa > 1.0:\\l", "letter_grade.append('D+')\\l"], ["letter_grade.append('A-')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "if gpa > 1.3:\\l", "if gpa > 1.0:\\l", "if gpa > 0.7:\\l", "letter_grade.append('D')\\l"], ["letter_grade.append('A-')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "if gpa > 1.3:\\l", "if gpa > 1.0:\\l", "if gpa > 0.7:\\l", "if gpa > 0.0:\\l", "letter_grade.append('D-')\\l"], ["letter_grade.append('A-')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "if gpa > 1.3:\\l", "if gpa > 1.0:\\l", "if gpa > 0.7:\\l", "if gpa > 0.0:\\l", "letter_grade.append('E')\\l"], ["if gpa > 3.0:\\l", "letter_grade.append('B+')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "letter_grade.append('A-')\\l"], ["if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "letter_grade.append('B')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "letter_grade.append('A-')\\l"], ["if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "letter_grade.append('B-')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "letter_grade.append('A-')\\l"], ["if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "letter_grade.append('C+')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "letter_grade.append('A-')\\l"], ["if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "letter_grade.append('C')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "letter_grade.append('A-')\\l"], ["if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "if gpa > 1.3:\\l", "letter_grade.append('C-')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "letter_grade.append('A-')\\l"], ["if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "if gpa > 1.3:\\l", "if gpa > 1.0:\\l", "letter_grade.append('D+')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "letter_grade.append('A-')\\l"], ["if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "if gpa > 1.3:\\l", "if gpa > 1.0:\\l", "if gpa > 0.7:\\l", "letter_grade.append('D')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "letter_grade.append('A-')\\l"], ["if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "if gpa > 1.3:\\l", "if gpa > 1.0:\\l", "if gpa > 0.7:\\l", "if gpa > 0.0:\\l", "letter_grade.append('D-')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "letter_grade.append('A-')\\l"], ["if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "if gpa > 1.3:\\l", "if gpa > 1.0:\\l", "if gpa > 0.7:\\l", "if gpa > 0.0:\\l", "letter_grade.append('E')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "letter_grade.append('A-')\\l"], ["letter_grade.append('B+')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "letter_grade.append('B')\\l"], ["letter_grade.append('B+')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "letter_grade.append('B-')\\l"], ["letter_grade.append('B+')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "letter_grade.append('C+')\\l"], ["letter_grade.append('B+')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "letter_grade.append('C')\\l"], ["letter_grade.append('B+')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "if gpa > 1.3:\\l", "letter_grade.append('C-')\\l"], ["letter_grade.append('B+')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "if gpa > 1.3:\\l", "if gpa > 1.0:\\l", "letter_grade.append('D+')\\l"], ["letter_grade.append('B+')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "if gpa > 1.3:\\l", "if gpa > 1.0:\\l", "if gpa > 0.7:\\l", "letter_grade.append('D')\\l"], ["letter_grade.append('B+')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "if gpa > 1.3:\\l", "if gpa > 1.0:\\l", "if gpa > 0.7:\\l", "if gpa > 0.0:\\l", "letter_grade.append('D-')\\l"], ["letter_grade.append('B+')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "if gpa > 1.3:\\l", "if gpa > 1.0:\\l", "if gpa > 0.7:\\l", "if gpa > 0.0:\\l", "letter_grade.append('E')\\l"], ["if gpa > 2.7:\\l", "letter_grade.append('B')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "letter_grade.append('B+')\\l"], ["if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "letter_grade.append('B-')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "letter_grade.append('B+')\\l"], ["if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "letter_grade.append('C+')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "letter_grade.append('B+')\\l"], ["if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "letter_grade.append('C')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "letter_grade.append('B+')\\l"], ["if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "if gpa > 1.3:\\l", "letter_grade.append('C-')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "letter_grade.append('B+')\\l"], ["if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "if gpa > 1.3:\\l", "if gpa > 1.0:\\l", "letter_grade.append('D+')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "letter_grade.append('B+')\\l"], ["if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "if gpa > 1.3:\\l", "if gpa > 1.0:\\l", "if gpa > 0.7:\\l", "letter_grade.append('D')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "letter_grade.append('B+')\\l"], ["if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "if gpa > 1.3:\\l", "if gpa > 1.0:\\l", "if gpa > 0.7:\\l", "if gpa > 0.0:\\l", "letter_grade.append('D-')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "letter_grade.append('B+')\\l"], ["if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "if gpa > 1.3:\\l", "if gpa > 1.0:\\l", "if gpa > 0.7:\\l", "if gpa > 0.0:\\l", "letter_grade.append('E')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "letter_grade.append('B+')\\l"], ["letter_grade.append('B')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "letter_grade.append('B-')\\l"], ["letter_grade.append('B')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "letter_grade.append('C+')\\l"], ["letter_grade.append('B')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "letter_grade.append('C')\\l"], ["letter_grade.append('B')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "if gpa > 1.3:\\l", "letter_grade.append('C-')\\l"], ["letter_grade.append('B')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "if gpa > 1.3:\\l", "if gpa > 1.0:\\l", "letter_grade.append('D+')\\l"], ["letter_grade.append('B')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "if gpa > 1.3:\\l", "if gpa > 1.0:\\l", "if gpa > 0.7:\\l", "letter_grade.append('D')\\l"], ["letter_grade.append('B')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "if gpa > 1.3:\\l", "if gpa > 1.0:\\l", "if gpa > 0.7:\\l", "if gpa > 0.0:\\l", "letter_grade.append('D-')\\l"], ["letter_grade.append('B')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "if gpa > 1.3:\\l", "if gpa > 1.0:\\l", "if gpa > 0.7:\\l", "if gpa > 0.0:\\l", "letter_grade.append('E')\\l"], ["if gpa > 2.3:\\l", "letter_grade.append('B-')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "letter_grade.append('B')\\l"], ["if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "letter_grade.append('C+')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "letter_grade.append('B')\\l"], ["if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "letter_grade.append('C')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "letter_grade.append('B')\\l"], ["if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "if gpa > 1.3:\\l", "letter_grade.append('C-')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "letter_grade.append('B')\\l"], ["if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "if gpa > 1.3:\\l", "if gpa > 1.0:\\l", "letter_grade.append('D+')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "letter_grade.append('B')\\l"], ["if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "if gpa > 1.3:\\l", "if gpa > 1.0:\\l", "if gpa > 0.7:\\l", "letter_grade.append('D')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "letter_grade.append('B')\\l"], ["if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "if gpa > 1.3:\\l", "if gpa > 1.0:\\l", "if gpa > 0.7:\\l", "if gpa > 0.0:\\l", "letter_grade.append('D-')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "letter_grade.append('B')\\l"], ["if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "if gpa > 1.3:\\l", "if gpa > 1.0:\\l", "if gpa > 0.7:\\l", "if gpa > 0.0:\\l", "letter_grade.append('E')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "letter_grade.append('B')\\l"], ["letter_grade.append('B-')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "letter_grade.append('C+')\\l"], ["letter_grade.append('B-')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "letter_grade.append('C')\\l"], ["letter_grade.append('B-')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "if gpa > 1.3:\\l", "letter_grade.append('C-')\\l"], ["letter_grade.append('B-')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "if gpa > 1.3:\\l", "if gpa > 1.0:\\l", "letter_grade.append('D+')\\l"], ["letter_grade.append('B-')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "if gpa > 1.3:\\l", "if gpa > 1.0:\\l", "if gpa > 0.7:\\l", "letter_grade.append('D')\\l"], ["letter_grade.append('B-')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "if gpa > 1.3:\\l", "if gpa > 1.0:\\l", "if gpa > 0.7:\\l", "if gpa > 0.0:\\l", "letter_grade.append('D-')\\l"], ["letter_grade.append('B-')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "if gpa > 1.3:\\l", "if gpa > 1.0:\\l", "if gpa > 0.7:\\l", "if gpa > 0.0:\\l", "letter_grade.append('E')\\l"], ["if gpa > 2.0:\\l", "letter_grade.append('C+')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "letter_grade.append('B-')\\l"], ["if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "letter_grade.append('C')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "letter_grade.append('B-')\\l"], ["if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "if gpa > 1.3:\\l", "letter_grade.append('C-')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "letter_grade.append('B-')\\l"], ["if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "if gpa > 1.3:\\l", "if gpa > 1.0:\\l", "letter_grade.append('D+')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "letter_grade.append('B-')\\l"], ["if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "if gpa > 1.3:\\l", "if gpa > 1.0:\\l", "if gpa > 0.7:\\l", "letter_grade.append('D')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "letter_grade.append('B-')\\l"], ["if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "if gpa > 1.3:\\l", "if gpa > 1.0:\\l", "if gpa > 0.7:\\l", "if gpa > 0.0:\\l", "letter_grade.append('D-')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "letter_grade.append('B-')\\l"], ["if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "if gpa > 1.3:\\l", "if gpa > 1.0:\\l", "if gpa > 0.7:\\l", "if gpa > 0.0:\\l", "letter_grade.append('E')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "letter_grade.append('B-')\\l"], ["letter_grade.append('C+')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "letter_grade.append('C')\\l"], ["letter_grade.append('C+')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "if gpa > 1.3:\\l", "letter_grade.append('C-')\\l"], ["letter_grade.append('C+')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "if gpa > 1.3:\\l", "if gpa > 1.0:\\l", "letter_grade.append('D+')\\l"], ["letter_grade.append('C+')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "if gpa > 1.3:\\l", "if gpa > 1.0:\\l", "if gpa > 0.7:\\l", "letter_grade.append('D')\\l"], ["letter_grade.append('C+')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "if gpa > 1.3:\\l", "if gpa > 1.0:\\l", "if gpa > 0.7:\\l", "if gpa > 0.0:\\l", "letter_grade.append('D-')\\l"], ["letter_grade.append('C+')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "if gpa > 1.3:\\l", "if gpa > 1.0:\\l", "if gpa > 0.7:\\l", "if gpa > 0.0:\\l", "letter_grade.append('E')\\l"], ["if gpa > 1.7:\\l", "letter_grade.append('C')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "letter_grade.append('C+')\\l"], ["if gpa > 1.7:\\l", "if gpa > 1.3:\\l", "letter_grade.append('C-')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "letter_grade.append('C+')\\l"], ["if gpa > 1.7:\\l", "if gpa > 1.3:\\l", "if gpa > 1.0:\\l", "letter_grade.append('D+')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "letter_grade.append('C+')\\l"], ["if gpa > 1.7:\\l", "if gpa > 1.3:\\l", "if gpa > 1.0:\\l", "if gpa > 0.7:\\l", "letter_grade.append('D')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "letter_grade.append('C+')\\l"], ["if gpa > 1.7:\\l", "if gpa > 1.3:\\l", "if gpa > 1.0:\\l", "if gpa > 0.7:\\l", "if gpa > 0.0:\\l", "letter_grade.append('D-')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "letter_grade.append('C+')\\l"], ["if gpa > 1.7:\\l", "if gpa > 1.3:\\l", "if gpa > 1.0:\\l", "if gpa > 0.7:\\l", "if gpa > 0.0:\\l", "letter_grade.append('E')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "letter_grade.append('C+')\\l"], ["letter_grade.append('C')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "if gpa > 1.3:\\l", "letter_grade.append('C-')\\l"], ["letter_grade.append('C')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "if gpa > 1.3:\\l", "if gpa > 1.0:\\l", "letter_grade.append('D+')\\l"], ["letter_grade.append('C')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "if gpa > 1.3:\\l", "if gpa > 1.0:\\l", "if gpa > 0.7:\\l", "letter_grade.append('D')\\l"], ["letter_grade.append('C')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "if gpa > 1.3:\\l", "if gpa > 1.0:\\l", "if gpa > 0.7:\\l", "if gpa > 0.0:\\l", "letter_grade.append('D-')\\l"], ["letter_grade.append('C')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "if gpa > 1.3:\\l", "if gpa > 1.0:\\l", "if gpa > 0.7:\\l", "if gpa > 0.0:\\l", "letter_grade.append('E')\\l"], ["if gpa > 1.3:\\l", "letter_grade.append('C-')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "letter_grade.append('C')\\l"], ["if gpa > 1.3:\\l", "if gpa > 1.0:\\l", "letter_grade.append('D+')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "letter_grade.append('C')\\l"], ["if gpa > 1.3:\\l", "if gpa > 1.0:\\l", "if gpa > 0.7:\\l", "letter_grade.append('D')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "letter_grade.append('C')\\l"], ["if gpa > 1.3:\\l", "if gpa > 1.0:\\l", "if gpa > 0.7:\\l", "if gpa > 0.0:\\l", "letter_grade.append('D-')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "letter_grade.append('C')\\l"], ["if gpa > 1.3:\\l", "if gpa > 1.0:\\l", "if gpa > 0.7:\\l", "if gpa > 0.0:\\l", "letter_grade.append('E')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "letter_grade.append('C')\\l"], ["letter_grade.append('C-')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "if gpa > 1.3:\\l", "if gpa > 1.0:\\l", "letter_grade.append('D+')\\l"], ["letter_grade.append('C-')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "if gpa > 1.3:\\l", "if gpa > 1.0:\\l", "if gpa > 0.7:\\l", "letter_grade.append('D')\\l"], ["letter_grade.append('C-')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "if gpa > 1.3:\\l", "if gpa > 1.0:\\l", "if gpa > 0.7:\\l", "if gpa > 0.0:\\l", "letter_grade.append('D-')\\l"], ["letter_grade.append('C-')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "if gpa > 1.3:\\l", "if gpa > 1.0:\\l", "if gpa > 0.7:\\l", "if gpa > 0.0:\\l", "letter_grade.append('E')\\l"], ["if gpa > 1.0:\\l", "letter_grade.append('D+')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "if gpa > 1.3:\\l", "letter_grade.append('C-')\\l"], ["if gpa > 1.0:\\l", "if gpa > 0.7:\\l", "letter_grade.append('D')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "if gpa > 1.3:\\l", "letter_grade.append('C-')\\l"], ["if gpa > 1.0:\\l", "if gpa > 0.7:\\l", "if gpa > 0.0:\\l", "letter_grade.append('D-')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "if gpa > 1.3:\\l", "letter_grade.append('C-')\\l"], ["if gpa > 1.0:\\l", "if gpa > 0.7:\\l", "if gpa > 0.0:\\l", "letter_grade.append('E')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "if gpa > 1.3:\\l", "letter_grade.append('C-')\\l"], ["letter_grade.append('D+')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "if gpa > 1.3:\\l", "if gpa > 1.0:\\l", "if gpa > 0.7:\\l", "letter_grade.append('D')\\l"], ["letter_grade.append('D+')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "if gpa > 1.3:\\l", "if gpa > 1.0:\\l", "if gpa > 0.7:\\l", "if gpa > 0.0:\\l", "letter_grade.append('D-')\\l"], ["letter_grade.append('D+')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "if gpa > 1.3:\\l", "if gpa > 1.0:\\l", "if gpa > 0.7:\\l", "if gpa > 0.0:\\l", "letter_grade.append('E')\\l"], ["if gpa > 0.7:\\l", "letter_grade.append('D')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "if gpa > 1.3:\\l", "if gpa > 1.0:\\l", "letter_grade.append('D+')\\l"], ["if gpa > 0.7:\\l", "if gpa > 0.0:\\l", "letter_grade.append('D-')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "if gpa > 1.3:\\l", "if gpa > 1.0:\\l", "letter_grade.append('D+')\\l"], ["if gpa > 0.7:\\l", "if gpa > 0.0:\\l", "letter_grade.append('E')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "if gpa > 1.3:\\l", "if gpa > 1.0:\\l", "letter_grade.append('D+')\\l"], ["letter_grade.append('D')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "if gpa > 1.3:\\l", "if gpa > 1.0:\\l", "if gpa > 0.7:\\l", "if gpa > 0.0:\\l", "letter_grade.append('D-')\\l"], ["letter_grade.append('D')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "if gpa > 1.3:\\l", "if gpa > 1.0:\\l", "if gpa > 0.7:\\l", "if gpa > 0.0:\\l", "letter_grade.append('E')\\l"], ["if gpa > 0.0:\\l", "letter_grade.append('D-')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "if gpa > 1.3:\\l", "if gpa > 1.0:\\l", "if gpa > 0.7:\\l", "letter_grade.append('D')\\l"], ["if gpa > 0.0:\\l", "letter_grade.append('E')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "if gpa > 1.3:\\l", "if gpa > 1.0:\\l", "if gpa > 0.7:\\l", "letter_grade.append('D')\\l"], ["letter_grade.append('D-')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "if gpa > 1.3:\\l", "if gpa > 1.0:\\l", "if gpa > 0.7:\\l", "if gpa > 0.0:\\l", "letter_grade.append('E')\\l"], ["letter_grade.append('E')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "if gpa > 1.3:\\l", "if gpa > 1.0:\\l", "if gpa > 0.7:\\l", "if gpa > 0.0:\\l", "letter_grade.append('D-')\\l"], ["from typing import *\\ldef numerical_letter_grade(grades):...\\lnumerical_letter_grade([1.2])\\l", "numerical_letter_grade", "letter_grade = []\\l", "for gpa in grades:\\l", "return letter_grade\\l"], ["from typing import *\\ldef numerical_letter_grade(grades):...\\lnumerical_letter_grade([1.2])\\l", "numerical_letter_grade", "letter_grade = []\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "letter_grade.append('A+')\\l"], ["from typing import *\\ldef numerical_letter_grade(grades):...\\lnumerical_letter_grade([1.2])\\l", "numerical_letter_grade", "letter_grade = []\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "letter_grade.append('A')\\l"], ["from typing import *\\ldef numerical_letter_grade(grades):...\\lnumerical_letter_grade([1.2])\\l", "numerical_letter_grade", "letter_grade = []\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "letter_grade.append('A-')\\l"], ["from typing import *\\ldef numerical_letter_grade(grades):...\\lnumerical_letter_grade([1.2])\\l", "numerical_letter_grade", "letter_grade = []\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "letter_grade.append('B+')\\l"], ["from typing import *\\ldef numerical_letter_grade(grades):...\\lnumerical_letter_grade([1.2])\\l", "numerical_letter_grade", "letter_grade = []\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "letter_grade.append('B')\\l"], ["from typing import *\\ldef numerical_letter_grade(grades):...\\lnumerical_letter_grade([1.2])\\l", "numerical_letter_grade", "letter_grade = []\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "letter_grade.append('B-')\\l"], ["from typing import *\\ldef numerical_letter_grade(grades):...\\lnumerical_letter_grade([1.2])\\l", "numerical_letter_grade", "letter_grade = []\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "letter_grade.append('C+')\\l"], ["from typing import *\\ldef numerical_letter_grade(grades):...\\lnumerical_letter_grade([1.2])\\l", "numerical_letter_grade", "letter_grade = []\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "letter_grade.append('C')\\l"], ["from typing import *\\ldef numerical_letter_grade(grades):...\\lnumerical_letter_grade([1.2])\\l", "numerical_letter_grade", "letter_grade = []\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "if gpa > 1.3:\\l", "letter_grade.append('C-')\\l"], ["from typing import *\\ldef numerical_letter_grade(grades):...\\lnumerical_letter_grade([1.2])\\l", "numerical_letter_grade", "letter_grade = []\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "if gpa > 1.3:\\l", "if gpa > 1.0:\\l", "letter_grade.append('D+')\\l"], ["from typing import *\\ldef numerical_letter_grade(grades):...\\lnumerical_letter_grade([1.2])\\l", "numerical_letter_grade", "letter_grade = []\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "if gpa > 1.3:\\l", "if gpa > 1.0:\\l", "if gpa > 0.7:\\l", "letter_grade.append('D')\\l"], ["from typing import *\\ldef numerical_letter_grade(grades):...\\lnumerical_letter_grade([1.2])\\l", "numerical_letter_grade", "letter_grade = []\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "if gpa > 1.3:\\l", "if gpa > 1.0:\\l", "if gpa > 0.7:\\l", "if gpa > 0.0:\\l", "letter_grade.append('D-')\\l"], ["from typing import *\\ldef numerical_letter_grade(grades):...\\lnumerical_letter_grade([1.2])\\l", "numerical_letter_grade", "letter_grade = []\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "if gpa > 1.3:\\l", "if gpa > 1.0:\\l", "if gpa > 0.7:\\l", "if gpa > 0.0:\\l", "letter_grade.append('E')\\l"]], "prime_paths_linenumbers": [[8, 9, 7, 34], [8, 10, 11, 7, 34], [8, 10, 12, 13, 7, 34], [8, 10, 12, 14, 15, 7, 34], [8, 10, 12, 14, 16, 17, 7, 34], [8, 10, 12, 14, 16, 18, 19, 7, 34], [8, 10, 12, 14, 16, 18, 20, 21, 7, 34], [8, 10, 12, 14, 16, 18, 20, 22, 23, 7, 34], [8, 10, 12, 14, 16, 18, 20, 22, 24, 25, 7, 34], [8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 27, 7, 34], [8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 29, 7, 34], [8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 31, 7, 34], [8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 33, 7, 34], [9, 7, 8, 10, 11], [9, 7, 8, 10, 12, 13], [9, 7, 8, 10, 12, 14, 15], [9, 7, 8, 10, 12, 14, 16, 17], [9, 7, 8, 10, 12, 14, 16, 18, 19], [9, 7, 8, 10, 12, 14, 16, 18, 20, 21], [9, 7, 8, 10, 12, 14, 16, 18, 20, 22, 23], [9, 7, 8, 10, 12, 14, 16, 18, 20, 22, 24, 25], [9, 7, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 27], [9, 7, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 29], [9, 7, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 31], [9, 7, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 33], [10, 11, 7, 8, 9], [10, 12, 13, 7, 8, 9], [10, 12, 14, 15, 7, 8, 9], [10, 12, 14, 16, 17, 7, 8, 9], [10, 12, 14, 16, 18, 19, 7, 8, 9], [10, 12, 14, 16, 18, 20, 21, 7, 8, 9], [10, 12, 14, 16, 18, 20, 22, 23, 7, 8, 9], [10, 12, 14, 16, 18, 20, 22, 24, 25, 7, 8, 9], [10, 12, 14, 16, 18, 20, 22, 24, 26, 27, 7, 8, 9], [10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 29, 7, 8, 9], [10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 31, 7, 8, 9], [10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 33, 7, 8, 9], [11, 7, 8, 10, 12, 13], [11, 7, 8, 10, 12, 14, 15], [11, 7, 8, 10, 12, 14, 16, 17], [11, 7, 8, 10, 12, 14, 16, 18, 19], [11, 7, 8, 10, 12, 14, 16, 18, 20, 21], [11, 7, 8, 10, 12, 14, 16, 18, 20, 22, 23], [11, 7, 8, 10, 12, 14, 16, 18, 20, 22, 24, 25], [11, 7, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 27], [11, 7, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 29], [11, 7, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 31], [11, 7, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 33], [12, 13, 7, 8, 10, 11], [12, 14, 15, 7, 8, 10, 11], [12, 14, 16, 17, 7, 8, 10, 11], [12, 14, 16, 18, 19, 7, 8, 10, 11], [12, 14, 16, 18, 20, 21, 7, 8, 10, 11], [12, 14, 16, 18, 20, 22, 23, 7, 8, 10, 11], [12, 14, 16, 18, 20, 22, 24, 25, 7, 8, 10, 11], [12, 14, 16, 18, 20, 22, 24, 26, 27, 7, 8, 10, 11], [12, 14, 16, 18, 20, 22, 24, 26, 28, 29, 7, 8, 10, 11], [12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 31, 7, 8, 10, 11], [12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 33, 7, 8, 10, 11], [13, 7, 8, 10, 12, 14, 15], [13, 7, 8, 10, 12, 14, 16, 17], [13, 7, 8, 10, 12, 14, 16, 18, 19], [13, 7, 8, 10, 12, 14, 16, 18, 20, 21], [13, 7, 8, 10, 12, 14, 16, 18, 20, 22, 23], [13, 7, 8, 10, 12, 14, 16, 18, 20, 22, 24, 25], [13, 7, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 27], [13, 7, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 29], [13, 7, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 31], [13, 7, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 33], [14, 15, 7, 8, 10, 12, 13], [14, 16, 17, 7, 8, 10, 12, 13], [14, 16, 18, 19, 7, 8, 10, 12, 13], [14, 16, 18, 20, 21, 7, 8, 10, 12, 13], [14, 16, 18, 20, 22, 23, 7, 8, 10, 12, 13], [14, 16, 18, 20, 22, 24, 25, 7, 8, 10, 12, 13], [14, 16, 18, 20, 22, 24, 26, 27, 7, 8, 10, 12, 13], [14, 16, 18, 20, 22, 24, 26, 28, 29, 7, 8, 10, 12, 13], [14, 16, 18, 20, 22, 24, 26, 28, 30, 31, 7, 8, 10, 12, 13], [14, 16, 18, 20, 22, 24, 26, 28, 30, 33, 7, 8, 10, 12, 13], [15, 7, 8, 10, 12, 14, 16, 17], [15, 7, 8, 10, 12, 14, 16, 18, 19], [15, 7, 8, 10, 12, 14, 16, 18, 20, 21], [15, 7, 8, 10, 12, 14, 16, 18, 20, 22, 23], [15, 7, 8, 10, 12, 14, 16, 18, 20, 22, 24, 25], [15, 7, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 27], [15, 7, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 29], [15, 7, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 31], [15, 7, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 33], [16, 17, 7, 8, 10, 12, 14, 15], [16, 18, 19, 7, 8, 10, 12, 14, 15], [16, 18, 20, 21, 7, 8, 10, 12, 14, 15], [16, 18, 20, 22, 23, 7, 8, 10, 12, 14, 15], [16, 18, 20, 22, 24, 25, 7, 8, 10, 12, 14, 15], [16, 18, 20, 22, 24, 26, 27, 7, 8, 10, 12, 14, 15], [16, 18, 20, 22, 24, 26, 28, 29, 7, 8, 10, 12, 14, 15], [16, 18, 20, 22, 24, 26, 28, 30, 31, 7, 8, 10, 12, 14, 15], [16, 18, 20, 22, 24, 26, 28, 30, 33, 7, 8, 10, 12, 14, 15], [17, 7, 8, 10, 12, 14, 16, 18, 19], [17, 7, 8, 10, 12, 14, 16, 18, 20, 21], [17, 7, 8, 10, 12, 14, 16, 18, 20, 22, 23], [17, 7, 8, 10, 12, 14, 16, 18, 20, 22, 24, 25], [17, 7, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 27], [17, 7, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 29], [17, 7, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 31], [17, 7, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 33], [18, 19, 7, 8, 10, 12, 14, 16, 17], [18, 20, 21, 7, 8, 10, 12, 14, 16, 17], [18, 20, 22, 23, 7, 8, 10, 12, 14, 16, 17], [18, 20, 22, 24, 25, 7, 8, 10, 12, 14, 16, 17], [18, 20, 22, 24, 26, 27, 7, 8, 10, 12, 14, 16, 17], [18, 20, 22, 24, 26, 28, 29, 7, 8, 10, 12, 14, 16, 17], [18, 20, 22, 24, 26, 28, 30, 31, 7, 8, 10, 12, 14, 16, 17], [18, 20, 22, 24, 26, 28, 30, 33, 7, 8, 10, 12, 14, 16, 17], [19, 7, 8, 10, 12, 14, 16, 18, 20, 21], [19, 7, 8, 10, 12, 14, 16, 18, 20, 22, 23], [19, 7, 8, 10, 12, 14, 16, 18, 20, 22, 24, 25], [19, 7, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 27], [19, 7, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 29], [19, 7, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 31], [19, 7, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 33], [20, 21, 7, 8, 10, 12, 14, 16, 18, 19], [20, 22, 23, 7, 8, 10, 12, 14, 16, 18, 19], [20, 22, 24, 25, 7, 8, 10, 12, 14, 16, 18, 19], [20, 22, 24, 26, 27, 7, 8, 10, 12, 14, 16, 18, 19], [20, 22, 24, 26, 28, 29, 7, 8, 10, 12, 14, 16, 18, 19], [20, 22, 24, 26, 28, 30, 31, 7, 8, 10, 12, 14, 16, 18, 19], [20, 22, 24, 26, 28, 30, 33, 7, 8, 10, 12, 14, 16, 18, 19], [21, 7, 8, 10, 12, 14, 16, 18, 20, 22, 23], [21, 7, 8, 10, 12, 14, 16, 18, 20, 22, 24, 25], [21, 7, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 27], [21, 7, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 29], [21, 7, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 31], [21, 7, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 33], [22, 23, 7, 8, 10, 12, 14, 16, 18, 20, 21], [22, 24, 25, 7, 8, 10, 12, 14, 16, 18, 20, 21], [22, 24, 26, 27, 7, 8, 10, 12, 14, 16, 18, 20, 21], [22, 24, 26, 28, 29, 7, 8, 10, 12, 14, 16, 18, 20, 21], [22, 24, 26, 28, 30, 31, 7, 8, 10, 12, 14, 16, 18, 20, 21], [22, 24, 26, 28, 30, 33, 7, 8, 10, 12, 14, 16, 18, 20, 21], [23, 7, 8, 10, 12, 14, 16, 18, 20, 22, 24, 25], [23, 7, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 27], [23, 7, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 29], [23, 7, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 31], [23, 7, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 33], [24, 25, 7, 8, 10, 12, 14, 16, 18, 20, 22, 23], [24, 26, 27, 7, 8, 10, 12, 14, 16, 18, 20, 22, 23], [24, 26, 28, 29, 7, 8, 10, 12, 14, 16, 18, 20, 22, 23], [24, 26, 28, 30, 31, 7, 8, 10, 12, 14, 16, 18, 20, 22, 23], [24, 26, 28, 30, 33, 7, 8, 10, 12, 14, 16, 18, 20, 22, 23], [25, 7, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 27], [25, 7, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 29], [25, 7, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 31], [25, 7, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 33], [26, 27, 7, 8, 10, 12, 14, 16, 18, 20, 22, 24, 25], [26, 28, 29, 7, 8, 10, 12, 14, 16, 18, 20, 22, 24, 25], [26, 28, 30, 31, 7, 8, 10, 12, 14, 16, 18, 20, 22, 24, 25], [26, 28, 30, 33, 7, 8, 10, 12, 14, 16, 18, 20, 22, 24, 25], [27, 7, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 29], [27, 7, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 31], [27, 7, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 33], [28, 29, 7, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 27], [28, 30, 31, 7, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 27], [28, 30, 33, 7, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 27], [29, 7, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 31], [29, 7, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 33], [30, 31, 7, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 29], [30, 33, 7, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 29], [31, 7, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 33], [33, 7, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 31], [1, 36, 6, 7, 34], [1, 36, 6, 7, 8, 9], [1, 36, 6, 7, 8, 10, 11], [1, 36, 6, 7, 8, 10, 12, 13], [1, 36, 6, 7, 8, 10, 12, 14, 15], [1, 36, 6, 7, 8, 10, 12, 14, 16, 17], [1, 36, 6, 7, 8, 10, 12, 14, 16, 18, 19], [1, 36, 6, 7, 8, 10, 12, 14, 16, 18, 20, 21], [1, 36, 6, 7, 8, 10, 12, 14, 16, 18, 20, 22, 23], [1, 36, 6, 7, 8, 10, 12, 14, 16, 18, 20, 22, 24, 25], [1, 36, 6, 7, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 27], [1, 36, 6, 7, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 29], [1, 36, 6, 7, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 31], [1, 36, 6, 7, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 33]], "covered_statements_linenumbers": [1, 34, 4, 36, 6, 7, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 27], "missing_statements_linenumbers": [9, 11, 13, 15, 17, 19, 21, 23, 25, 28, 29, 30, 31, 33], "covered_prime_paths_linenumbers": [[8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 27, 7, 34], [1, 36, 6, 7, 34], [1, 36, 6, 7, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 27]], "missing_prime_paths_linenumbers": [[8, 9, 7, 34], [8, 10, 11, 7, 34], [8, 10, 12, 13, 7, 34], [8, 10, 12, 14, 15, 7, 34], [8, 10, 12, 14, 16, 17, 7, 34], [8, 10, 12, 14, 16, 18, 19, 7, 34], [8, 10, 12, 14, 16, 18, 20, 21, 7, 34], [8, 10, 12, 14, 16, 18, 20, 22, 23, 7, 34], [8, 10, 12, 14, 16, 18, 20, 22, 24, 25, 7, 34], [8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 29, 7, 34], [8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 31, 7, 34], [8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 33, 7, 34], [9, 7, 8, 10, 11], [9, 7, 8, 10, 12, 13], [9, 7, 8, 10, 12, 14, 15], [9, 7, 8, 10, 12, 14, 16, 17], [9, 7, 8, 10, 12, 14, 16, 18, 19], [9, 7, 8, 10, 12, 14, 16, 18, 20, 21], [9, 7, 8, 10, 12, 14, 16, 18, 20, 22, 23], [9, 7, 8, 10, 12, 14, 16, 18, 20, 22, 24, 25], [9, 7, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 27], [9, 7, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 29], [9, 7, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 31], [9, 7, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 33], [10, 11, 7, 8, 9], [10, 12, 13, 7, 8, 9], [10, 12, 14, 15, 7, 8, 9], [10, 12, 14, 16, 17, 7, 8, 9], [10, 12, 14, 16, 18, 19, 7, 8, 9], [10, 12, 14, 16, 18, 20, 21, 7, 8, 9], [10, 12, 14, 16, 18, 20, 22, 23, 7, 8, 9], [10, 12, 14, 16, 18, 20, 22, 24, 25, 7, 8, 9], [10, 12, 14, 16, 18, 20, 22, 24, 26, 27, 7, 8, 9], [10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 29, 7, 8, 9], [10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 31, 7, 8, 9], [10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 33, 7, 8, 9], [11, 7, 8, 10, 12, 13], [11, 7, 8, 10, 12, 14, 15], [11, 7, 8, 10, 12, 14, 16, 17], [11, 7, 8, 10, 12, 14, 16, 18, 19], [11, 7, 8, 10, 12, 14, 16, 18, 20, 21], [11, 7, 8, 10, 12, 14, 16, 18, 20, 22, 23], [11, 7, 8, 10, 12, 14, 16, 18, 20, 22, 24, 25], [11, 7, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 27], [11, 7, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 29], [11, 7, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 31], [11, 7, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 33], [12, 13, 7, 8, 10, 11], [12, 14, 15, 7, 8, 10, 11], [12, 14, 16, 17, 7, 8, 10, 11], [12, 14, 16, 18, 19, 7, 8, 10, 11], [12, 14, 16, 18, 20, 21, 7, 8, 10, 11], [12, 14, 16, 18, 20, 22, 23, 7, 8, 10, 11], [12, 14, 16, 18, 20, 22, 24, 25, 7, 8, 10, 11], [12, 14, 16, 18, 20, 22, 24, 26, 27, 7, 8, 10, 11], [12, 14, 16, 18, 20, 22, 24, 26, 28, 29, 7, 8, 10, 11], [12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 31, 7, 8, 10, 11], [12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 33, 7, 8, 10, 11], [13, 7, 8, 10, 12, 14, 15], [13, 7, 8, 10, 12, 14, 16, 17], [13, 7, 8, 10, 12, 14, 16, 18, 19], [13, 7, 8, 10, 12, 14, 16, 18, 20, 21], [13, 7, 8, 10, 12, 14, 16, 18, 20, 22, 23], [13, 7, 8, 10, 12, 14, 16, 18, 20, 22, 24, 25], [13, 7, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 27], [13, 7, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 29], [13, 7, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 31], [13, 7, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 33], [14, 15, 7, 8, 10, 12, 13], [14, 16, 17, 7, 8, 10, 12, 13], [14, 16, 18, 19, 7, 8, 10, 12, 13], [14, 16, 18, 20, 21, 7, 8, 10, 12, 13], [14, 16, 18, 20, 22, 23, 7, 8, 10, 12, 13], [14, 16, 18, 20, 22, 24, 25, 7, 8, 10, 12, 13], [14, 16, 18, 20, 22, 24, 26, 27, 7, 8, 10, 12, 13], [14, 16, 18, 20, 22, 24, 26, 28, 29, 7, 8, 10, 12, 13], [14, 16, 18, 20, 22, 24, 26, 28, 30, 31, 7, 8, 10, 12, 13], [14, 16, 18, 20, 22, 24, 26, 28, 30, 33, 7, 8, 10, 12, 13], [15, 7, 8, 10, 12, 14, 16, 17], [15, 7, 8, 10, 12, 14, 16, 18, 19], [15, 7, 8, 10, 12, 14, 16, 18, 20, 21], [15, 7, 8, 10, 12, 14, 16, 18, 20, 22, 23], [15, 7, 8, 10, 12, 14, 16, 18, 20, 22, 24, 25], [15, 7, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 27], [15, 7, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 29], [15, 7, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 31], [15, 7, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 33], [16, 17, 7, 8, 10, 12, 14, 15], [16, 18, 19, 7, 8, 10, 12, 14, 15], [16, 18, 20, 21, 7, 8, 10, 12, 14, 15], [16, 18, 20, 22, 23, 7, 8, 10, 12, 14, 15], [16, 18, 20, 22, 24, 25, 7, 8, 10, 12, 14, 15], [16, 18, 20, 22, 24, 26, 27, 7, 8, 10, 12, 14, 15], [16, 18, 20, 22, 24, 26, 28, 29, 7, 8, 10, 12, 14, 15], [16, 18, 20, 22, 24, 26, 28, 30, 31, 7, 8, 10, 12, 14, 15], [16, 18, 20, 22, 24, 26, 28, 30, 33, 7, 8, 10, 12, 14, 15], [17, 7, 8, 10, 12, 14, 16, 18, 19], [17, 7, 8, 10, 12, 14, 16, 18, 20, 21], [17, 7, 8, 10, 12, 14, 16, 18, 20, 22, 23], [17, 7, 8, 10, 12, 14, 16, 18, 20, 22, 24, 25], [17, 7, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 27], [17, 7, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 29], [17, 7, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 31], [17, 7, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 33], [18, 19, 7, 8, 10, 12, 14, 16, 17], [18, 20, 21, 7, 8, 10, 12, 14, 16, 17], [18, 20, 22, 23, 7, 8, 10, 12, 14, 16, 17], [18, 20, 22, 24, 25, 7, 8, 10, 12, 14, 16, 17], [18, 20, 22, 24, 26, 27, 7, 8, 10, 12, 14, 16, 17], [18, 20, 22, 24, 26, 28, 29, 7, 8, 10, 12, 14, 16, 17], [18, 20, 22, 24, 26, 28, 30, 31, 7, 8, 10, 12, 14, 16, 17], [18, 20, 22, 24, 26, 28, 30, 33, 7, 8, 10, 12, 14, 16, 17], [19, 7, 8, 10, 12, 14, 16, 18, 20, 21], [19, 7, 8, 10, 12, 14, 16, 18, 20, 22, 23], [19, 7, 8, 10, 12, 14, 16, 18, 20, 22, 24, 25], [19, 7, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 27], [19, 7, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 29], [19, 7, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 31], [19, 7, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 33], [20, 21, 7, 8, 10, 12, 14, 16, 18, 19], [20, 22, 23, 7, 8, 10, 12, 14, 16, 18, 19], [20, 22, 24, 25, 7, 8, 10, 12, 14, 16, 18, 19], [20, 22, 24, 26, 27, 7, 8, 10, 12, 14, 16, 18, 19], [20, 22, 24, 26, 28, 29, 7, 8, 10, 12, 14, 16, 18, 19], [20, 22, 24, 26, 28, 30, 31, 7, 8, 10, 12, 14, 16, 18, 19], [20, 22, 24, 26, 28, 30, 33, 7, 8, 10, 12, 14, 16, 18, 19], [21, 7, 8, 10, 12, 14, 16, 18, 20, 22, 23], [21, 7, 8, 10, 12, 14, 16, 18, 20, 22, 24, 25], [21, 7, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 27], [21, 7, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 29], [21, 7, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 31], [21, 7, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 33], [22, 23, 7, 8, 10, 12, 14, 16, 18, 20, 21], [22, 24, 25, 7, 8, 10, 12, 14, 16, 18, 20, 21], [22, 24, 26, 27, 7, 8, 10, 12, 14, 16, 18, 20, 21], [22, 24, 26, 28, 29, 7, 8, 10, 12, 14, 16, 18, 20, 21], [22, 24, 26, 28, 30, 31, 7, 8, 10, 12, 14, 16, 18, 20, 21], [22, 24, 26, 28, 30, 33, 7, 8, 10, 12, 14, 16, 18, 20, 21], [23, 7, 8, 10, 12, 14, 16, 18, 20, 22, 24, 25], [23, 7, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 27], [23, 7, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 29], [23, 7, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 31], [23, 7, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 33], [24, 25, 7, 8, 10, 12, 14, 16, 18, 20, 22, 23], [24, 26, 27, 7, 8, 10, 12, 14, 16, 18, 20, 22, 23], [24, 26, 28, 29, 7, 8, 10, 12, 14, 16, 18, 20, 22, 23], [24, 26, 28, 30, 31, 7, 8, 10, 12, 14, 16, 18, 20, 22, 23], [24, 26, 28, 30, 33, 7, 8, 10, 12, 14, 16, 18, 20, 22, 23], [25, 7, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 27], [25, 7, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 29], [25, 7, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 31], [25, 7, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 33], [26, 27, 7, 8, 10, 12, 14, 16, 18, 20, 22, 24, 25], [26, 28, 29, 7, 8, 10, 12, 14, 16, 18, 20, 22, 24, 25], [26, 28, 30, 31, 7, 8, 10, 12, 14, 16, 18, 20, 22, 24, 25], [26, 28, 30, 33, 7, 8, 10, 12, 14, 16, 18, 20, 22, 24, 25], [27, 7, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 29], [27, 7, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 31], [27, 7, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 33], [28, 29, 7, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 27], [28, 30, 31, 7, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 27], [28, 30, 33, 7, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 27], [29, 7, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 31], [29, 7, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 33], [30, 31, 7, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 29], [30, 33, 7, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 29], [31, 7, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 33], [33, 7, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 31], [1, 36, 6, 7, 8, 9], [1, 36, 6, 7, 8, 10, 11], [1, 36, 6, 7, 8, 10, 12, 13], [1, 36, 6, 7, 8, 10, 12, 14, 15], [1, 36, 6, 7, 8, 10, 12, 14, 16, 17], [1, 36, 6, 7, 8, 10, 12, 14, 16, 18, 19], [1, 36, 6, 7, 8, 10, 12, 14, 16, 18, 20, 21], [1, 36, 6, 7, 8, 10, 12, 14, 16, 18, 20, 22, 23], [1, 36, 6, 7, 8, 10, 12, 14, 16, 18, 20, 22, 24, 25], [1, 36, 6, 7, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 29], [1, 36, 6, 7, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 31], [1, 36, 6, 7, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 33]], "num_total_prime_paths": 183, "num_covered_paths": 3, "prime_path_coverage": 0.02, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_81__0_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_81__0_CFG.dot"}
{"humaneval_id": "HumanEval_43__1", "python_file": "HumanEval_43__1/main.py", "input_file": "HumanEval_43__1/input.txt", "prime_paths_nodes": [["9", "5", "3", "6"], ["1", "16", "3", "6"], ["1", "16", "3", "5", "9", "11"]], "prime_paths_statements": [["if l1 + l[j] == 0:\\l", "for j in range(i + 1, len(l)):\\l", "for i, l1 in enumerate(l):\\l", "return False\\l"], ["from typing import *\\ldef pairs_sum_to_zero(l):...\\lpairs_sum_to_zero([-3, 9, -1, 3, 2, 31])\\l", "pairs_sum_to_zero", "for i, l1 in enumerate(l):\\l", "return False\\l"], ["from typing import *\\ldef pairs_sum_to_zero(l):...\\lpairs_sum_to_zero([-3, 9, -1, 3, 2, 31])\\l", "pairs_sum_to_zero", "for i, l1 in enumerate(l):\\l", "for j in range(i + 1, len(l)):\\l", "if l1 + l[j] == 0:\\l", "return True\\l"]], "prime_paths_linenumbers": [[7, 6, 5, 9], [1, 11, 5, 9], [1, 11, 5, 6, 7, 8]], "covered_statements_linenumbers": [1, 4, 5, 6, 7, 8, 11], "missing_statements_linenumbers": [9], "covered_prime_paths_linenumbers": [[1, 11, 5, 6, 7, 8]], "missing_prime_paths_linenumbers": [[7, 6, 5, 9], [1, 11, 5, 9]], "num_total_prime_paths": 3, "num_covered_paths": 1, "prime_path_coverage": 0.33, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_43__1_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_43__1_CFG.dot"}
{"humaneval_id": "HumanEval_80__1", "python_file": "HumanEval_80__1/main.py", "input_file": "HumanEval_80__1/input.txt", "prime_paths_nodes": [["10", "6", "11"], ["1", "17", "3", "5"], ["1", "17", "3", "6", "11"], ["1", "17", "3", "6", "10", "12"]], "prime_paths_statements": [["if s[i] == s[i + 1] or s[i + 1] == s[i + 2] or s[i] == s[i + 2]:\\l", "for i in range(len(s) - 2):\\l", "return True\\l"], ["from typing import *\\ldef is_happy(s):...\\lis_happy('xyy')\\l", "is_happy", "if len(s) < 3:\\l", "return False\\l"], ["from typing import *\\ldef is_happy(s):...\\lis_happy('xyy')\\l", "is_happy", "if len(s) < 3:\\l", "for i in range(len(s) - 2):\\l", "return True\\l"], ["from typing import *\\ldef is_happy(s):...\\lis_happy('xyy')\\l", "is_happy", "if len(s) < 3:\\l", "for i in range(len(s) - 2):\\l", "if s[i] == s[i + 1] or s[i + 1] == s[i + 2] or s[i] == s[i + 2]:\\l", "return False\\l"]], "prime_paths_linenumbers": [[10, 8, 12], [1, 14, 5, 6], [1, 14, 5, 8, 12], [1, 14, 5, 8, 10, 11]], "covered_statements_linenumbers": [1, 4, 5, 8, 10, 11, 14], "missing_statements_linenumbers": [6, 12], "covered_prime_paths_linenumbers": [[1, 14, 5, 8, 10, 11]], "missing_prime_paths_linenumbers": [[10, 8, 12], [1, 14, 5, 6], [1, 14, 5, 8, 12]], "num_total_prime_paths": 4, "num_covered_paths": 1, "prime_path_coverage": 0.25, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_80__1_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_80__1_CFG.dot"}
{"humaneval_id": "HumanEval_33__0", "python_file": "HumanEval_33__0/main.py", "input_file": "HumanEval_33__0/input.txt", "prime_paths_nodes": [["1", "9", "3", "6"]], "prime_paths_statements": [["from typing import *\\ldef sort_third(l: list):...\\lsort_third([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\\l", "sort_third", "l = list(l)\\ll[::3] = sorted(l[::3])\\l", "return l\\l"]], "prime_paths_linenumbers": [[1, 9, 5, 6, 7]], "covered_statements_linenumbers": [1, 4, 5, 6, 7, 9], "missing_statements_linenumbers": [], "covered_prime_paths_linenumbers": [[1, 9, 5, 6, 7]], "missing_prime_paths_linenumbers": [], "num_total_prime_paths": 1, "num_covered_paths": 1, "prime_path_coverage": 1.0, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_33__0_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_33__0_CFG.dot"}
{"humaneval_id": "HumanEval_37__0", "python_file": "HumanEval_37__0/main.py", "input_file": "HumanEval_37__0/input.txt", "prime_paths_nodes": [["7", "5", "8", "12", "13"], ["7", "5", "8", "13"], ["1", "17", "3", "5", "7"], ["1", "17", "3", "5", "8", "12", "13"], ["1", "17", "3", "5", "8", "13"]], "prime_paths_statements": [["ans.extend([e, o])\\l", "for e, o in zip(evens, odds):\\l", "if len(evens) > len(odds):\\l", "ans.append(evens[-1])\\l", "return ans\\l"], ["ans.extend([e, o])\\l", "for e, o in zip(evens, odds):\\l", "if len(evens) > len(odds):\\l", "return ans\\l"], ["from typing import *\\ldef sort_even(l: list):...\\lsort_even([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\\l", "sort_even", "evens = l[::2]\\lodds = l[1::2]\\levens.sort()\\lans = []\\l", "for e, o in zip(evens, odds):\\l", "ans.extend([e, o])\\l"], ["from typing import *\\ldef sort_even(l: list):...\\lsort_even([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\\l", "sort_even", "evens = l[::2]\\lodds = l[1::2]\\levens.sort()\\lans = []\\l", "for e, o in zip(evens, odds):\\l", "if len(evens) > len(odds):\\l", "ans.append(evens[-1])\\l", "return ans\\l"], ["from typing import *\\ldef sort_even(l: list):...\\lsort_even([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\\l", "sort_even", "evens = l[::2]\\lodds = l[1::2]\\levens.sort()\\lans = []\\l", "for e, o in zip(evens, odds):\\l", "if len(evens) > len(odds):\\l", "return ans\\l"]], "prime_paths_linenumbers": [[10, 9, 11, 12, 13], [10, 9, 11, 13], [1, 15, 5, 6, 7, 8, 9, 10], [1, 15, 5, 6, 7, 8, 9, 11, 12, 13], [1, 15, 5, 6, 7, 8, 9, 11, 13]], "covered_statements_linenumbers": [1, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15], "missing_statements_linenumbers": [], "covered_prime_paths_linenumbers": [[10, 9, 11, 12, 13], [10, 9, 11, 13], [1, 15, 5, 6, 7, 8, 9, 10], [1, 15, 5, 6, 7, 8, 9, 11, 12, 13], [1, 15, 5, 6, 7, 8, 9, 11, 13]], "missing_prime_paths_linenumbers": [], "num_total_prime_paths": 5, "num_covered_paths": 5, "prime_path_coverage": 1.0, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_37__0_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_37__0_CFG.dot"}
{"humaneval_id": "HumanEval_152__0", "python_file": "HumanEval_152__0/main.py", "input_file": "HumanEval_152__0/input.txt", "prime_paths_nodes": [["1", "6", "3"]], "prime_paths_statements": [["from typing import *\\ldef compare(game, guess):...\\lcompare([1, 2, 3, 5], [-1, 2, 3, 4])\\l", "compare", "return [abs(x - y) for x, y in zip(game, guess)]\\l"]], "prime_paths_linenumbers": [[1, 7, 5]], "covered_statements_linenumbers": [1, 4, 5, 7], "missing_statements_linenumbers": [], "covered_prime_paths_linenumbers": [[1, 7, 5]], "missing_prime_paths_linenumbers": [], "num_total_prime_paths": 1, "num_covered_paths": 1, "prime_path_coverage": 1.0, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_152__0_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_152__0_CFG.dot"}
{"humaneval_id": "HumanEval_25", "python_file": "HumanEval_25/main.py", "input_file": "HumanEval_25/input.txt", "prime_paths_nodes": [["5", "7", "4", "6", "11", "12"], ["5", "7", "4", "6", "12"], ["5", "9", "4", "6", "11", "12"], ["5", "9", "4", "6", "12"], ["7", "4", "5", "9"], ["9", "4", "5", "7"], ["1", "16", "3", "4", "5", "7"], ["1", "16", "3", "4", "5", "9"], ["1", "16", "3", "4", "6", "11", "12"], ["1", "16", "3", "4", "6", "12"]], "prime_paths_statements": [["if n % i == 0:\\l", "fact.append(i)\\ln //= i\\l", "while i <= int(math.sqrt(n) + 1):\\l", "if n > 1:\\l", "fact.append(n)\\l", "return fact\\l"], ["if n % i == 0:\\l", "fact.append(i)\\ln //= i\\l", "while i <= int(math.sqrt(n) + 1):\\l", "if n > 1:\\l", "return fact\\l"], ["if n % i == 0:\\l", "i += 1\\l", "while i <= int(math.sqrt(n) + 1):\\l", "if n > 1:\\l", "fact.append(n)\\l", "return fact\\l"], ["if n % i == 0:\\l", "i += 1\\l", "while i <= int(math.sqrt(n) + 1):\\l", "if n > 1:\\l", "return fact\\l"], ["fact.append(i)\\ln //= i\\l", "while i <= int(math.sqrt(n) + 1):\\l", "if n % i == 0:\\l", "i += 1\\l"], ["i += 1\\l", "while i <= int(math.sqrt(n) + 1):\\l", "if n % i == 0:\\l", "fact.append(i)\\ln //= i\\l"], ["from typing import *\\ldef factorize(n: int) ->List[int]:...\\lfactorize(2)\\l", "factorize", "import math\\lfact = []\\li = 2\\l", "while i <= int(math.sqrt(n) + 1):\\l", "if n % i == 0:\\l", "fact.append(i)\\ln //= i\\l"], ["from typing import *\\ldef factorize(n: int) ->List[int]:...\\lfactorize(2)\\l", "factorize", "import math\\lfact = []\\li = 2\\l", "while i <= int(math.sqrt(n) + 1):\\l", "if n % i == 0:\\l", "i += 1\\l"], ["from typing import *\\ldef factorize(n: int) ->List[int]:...\\lfactorize(2)\\l", "factorize", "import math\\lfact = []\\li = 2\\l", "while i <= int(math.sqrt(n) + 1):\\l", "if n > 1:\\l", "fact.append(n)\\l", "return fact\\l"], ["from typing import *\\ldef factorize(n: int) ->List[int]:...\\lfactorize(2)\\l", "factorize", "import math\\lfact = []\\li = 2\\l", "while i <= int(math.sqrt(n) + 1):\\l", "if n > 1:\\l", "return fact\\l"]], "prime_paths_linenumbers": [[7, 8, 9, 6, 13, 14, 15], [7, 8, 9, 6, 13, 15], [7, 11, 6, 13, 14, 15], [7, 11, 6, 13, 15], [8, 9, 6, 7, 11], [11, 6, 7, 8, 9], [1, 17, 3, 4, 5, 6, 7, 8, 9], [1, 17, 3, 4, 5, 6, 7, 11], [1, 17, 3, 4, 5, 6, 13, 14, 15], [1, 17, 3, 4, 5, 6, 13, 15]], "covered_statements_linenumbers": [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 13, 15, 17], "missing_statements_linenumbers": [14], "covered_prime_paths_linenumbers": [[7, 8, 9, 6, 13, 15], [7, 11, 6, 13, 15], [8, 9, 6, 7, 11], [11, 6, 7, 8, 9], [1, 17, 3, 4, 5, 6, 7, 8, 9], [1, 17, 3, 4, 5, 6, 7, 11], [1, 17, 3, 4, 5, 6, 13, 15]], "missing_prime_paths_linenumbers": [[7, 8, 9, 6, 13, 14, 15], [7, 11, 6, 13, 14, 15], [1, 17, 3, 4, 5, 6, 13, 14, 15]], "num_total_prime_paths": 10, "num_covered_paths": 7, "prime_path_coverage": 0.7, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_25_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_25_CFG.dot"}
{"humaneval_id": "HumanEval_54__0", "python_file": "HumanEval_54__0/main.py", "input_file": "HumanEval_54__0/input.txt", "prime_paths_nodes": [["1", "6", "3"]], "prime_paths_statements": [["from typing import *\\ldef same_chars(s0: str, s1: str):...\\lsame_chars('abcd', 'dddddddabcf')\\l", "same_chars", "return set(s0) == set(s1)\\l"]], "prime_paths_linenumbers": [[1, 7, 5]], "covered_statements_linenumbers": [1, 4, 5, 7], "missing_statements_linenumbers": [], "covered_prime_paths_linenumbers": [[1, 7, 5]], "missing_prime_paths_linenumbers": [], "num_total_prime_paths": 1, "num_covered_paths": 1, "prime_path_coverage": 1.0, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_54__0_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_54__0_CFG.dot"}
{"humaneval_id": "HumanEval_101__0", "python_file": "HumanEval_101__0/main.py", "input_file": "HumanEval_101__0/input.txt", "prime_paths_nodes": [["8", "10", "7", "9", "16"], ["8", "12", "7", "9", "16"], ["10", "7", "8", "12"], ["12", "7", "8", "10"], ["1", "19", "3", "4"], ["1", "19", "3", "5", "7", "8", "10"], ["1", "19", "3", "5", "7", "8", "12"], ["1", "19", "3", "5", "7", "9", "16"]], "prime_paths_statements": [["if letter == ',':\\l", "s_list.append(' ')\\l", "for letter in s:\\l", "s_list = ''.join(s_list)\\l", "return s_list.split()\\l"], ["if letter == ',':\\l", "s_list.append(letter)\\l", "for letter in s:\\l", "s_list = ''.join(s_list)\\l", "return s_list.split()\\l"], ["s_list.append(' ')\\l", "for letter in s:\\l", "if letter == ',':\\l", "s_list.append(letter)\\l"], ["s_list.append(letter)\\l", "for letter in s:\\l", "if letter == ',':\\l", "s_list.append(' ')\\l"], ["from typing import *\\ldef words_string(s):...\\lwords_string('One, two, three, fou...')\\l", "words_string", "if not s:\\l", "return []\\l"], ["from typing import *\\ldef words_string(s):...\\lwords_string('One, two, three, fou...')\\l", "words_string", "if not s:\\l", "s_list = []\\l", "for letter in s:\\l", "if letter == ',':\\l", "s_list.append(' ')\\l"], ["from typing import *\\ldef words_string(s):...\\lwords_string('One, two, three, fou...')\\l", "words_string", "if not s:\\l", "s_list = []\\l", "for letter in s:\\l", "if letter == ',':\\l", "s_list.append(letter)\\l"], ["from typing import *\\ldef words_string(s):...\\lwords_string('One, two, three, fou...')\\l", "words_string", "if not s:\\l", "s_list = []\\l", "for letter in s:\\l", "s_list = ''.join(s_list)\\l", "return s_list.split()\\l"]], "prime_paths_linenumbers": [[11, 12, 10, 16, 17], [11, 14, 10, 16, 17], [12, 10, 11, 14], [14, 10, 11, 12], [1, 19, 5, 6], [1, 19, 5, 8, 10, 11, 12], [1, 19, 5, 8, 10, 11, 14], [1, 19, 5, 8, 10, 16, 17]], "covered_statements_linenumbers": [1, 4, 5, 8, 10, 11, 12, 14, 16, 17, 19], "missing_statements_linenumbers": [6], "covered_prime_paths_linenumbers": [[11, 12, 10, 16, 17], [11, 14, 10, 16, 17], [12, 10, 11, 14], [14, 10, 11, 12], [1, 19, 5, 8, 10, 11, 12], [1, 19, 5, 8, 10, 11, 14], [1, 19, 5, 8, 10, 16, 17]], "missing_prime_paths_linenumbers": [[1, 19, 5, 6]], "num_total_prime_paths": 8, "num_covered_paths": 7, "prime_path_coverage": 0.88, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_101__0_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_101__0_CFG.dot"}
{"humaneval_id": "HumanEval_8__1", "python_file": "HumanEval_8__1/main.py", "input_file": "HumanEval_8__1/input.txt", "prime_paths_nodes": [["5", "4", "6"], ["1", "9", "3", "4", "5"], ["1", "9", "3", "4", "6"]], "prime_paths_statements": [["sum_value += n\\lprod_value *= n\\l", "for n in numbers:\\l", "return sum_value, prod_value\\l"], ["from typing import *\\ldef sum_product(numbers: List[int]) ->Tuple[int, int]:...\\lsum_product([100, 0])\\l", "sum_product", "sum_value = 0\\lprod_value = 1\\l", "for n in numbers:\\l", "sum_value += n\\lprod_value *= n\\l"], ["from typing import *\\ldef sum_product(numbers: List[int]) ->Tuple[int, int]:...\\lsum_product([100, 0])\\l", "sum_product", "sum_value = 0\\lprod_value = 1\\l", "for n in numbers:\\l", "return sum_value, prod_value\\l"]], "prime_paths_linenumbers": [[9, 10, 8, 11], [1, 13, 5, 6, 8, 9, 10], [1, 13, 5, 6, 8, 11]], "covered_statements_linenumbers": [1, 4, 5, 6, 8, 9, 10, 11, 13], "missing_statements_linenumbers": [], "covered_prime_paths_linenumbers": [[9, 10, 8, 11], [1, 13, 5, 6, 8, 9, 10], [1, 13, 5, 6, 8, 11]], "missing_prime_paths_linenumbers": [], "num_total_prime_paths": 3, "num_covered_paths": 3, "prime_path_coverage": 1.0, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_8__1_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_8__1_CFG.dot"}
{"humaneval_id": "HumanEval_143__1", "python_file": "HumanEval_143__1/main.py", "input_file": "HumanEval_143__1/input.txt", "prime_paths_nodes": [["6", "8", "10", "11", "15", "4", "7"], ["6", "8", "10", "11", "15", "19", "4", "7"], ["6", "8", "11", "15", "4", "7"], ["6", "8", "11", "15", "19", "4", "7"], ["8", "10", "11", "15", "4", "6"], ["8", "10", "11", "15", "19", "4", "6"], ["8", "11", "15", "4", "6"], ["8", "11", "15", "19", "4", "6"], ["10", "11", "15", "4", "6", "8"], ["10", "11", "15", "19", "4", "6", "8"], ["14", "11", "15", "4", "7"], ["14", "11", "15", "19", "4", "7"], ["14", "17", "11", "15", "4", "7"], ["14", "17", "11", "15", "19", "4", "7"], ["14", "11", "15", "4", "6", "8", "10"], ["14", "11", "15", "19", "4", "6", "8", "10"], ["14", "17", "11", "15", "4", "6", "8", "10"], ["14", "17", "11", "15", "19", "4", "6", "8", "10"], ["15", "4", "6", "8", "10", "11", "14", "17"], ["15", "4", "6", "8", "11", "14", "17"], ["15", "19", "4", "6", "8", "10", "11", "14", "17"], ["15", "19", "4", "6", "8", "11", "14", "17"], ["17", "11", "14"], ["19", "4", "6", "8", "10", "11", "15"], ["19", "4", "6", "8", "11", "15"], ["1", "24", "3", "4", "7"], ["1", "24", "3", "4", "6", "8", "10", "11", "14", "17"], ["1", "24", "3", "4", "6", "8", "11", "14", "17"], ["1", "24", "3", "4", "6", "8", "10", "11", "15", "19"], ["1", "24", "3", "4", "6", "8", "11", "15", "19"]], "prime_paths_statements": [["flg = 0\\l", "if len(word) == 1:\\l", "flg = 1\\l", "for i in range(2, len(word)):\\l", "if flg == 0 or len(word) == 2:\\l", "for word in sentence.split():\\l", "return ' '.join(new_lst)\\l"], ["flg = 0\\l", "if len(word) == 1:\\l", "flg = 1\\l", "for i in range(2, len(word)):\\l", "if flg == 0 or len(word) == 2:\\l", "new_lst.append(word)\\l", "for word in sentence.split():\\l", "return ' '.join(new_lst)\\l"], ["flg = 0\\l", "if len(word) == 1:\\l", "for i in range(2, len(word)):\\l", "if flg == 0 or len(word) == 2:\\l", "for word in sentence.split():\\l", "return ' '.join(new_lst)\\l"], ["flg = 0\\l", "if len(word) == 1:\\l", "for i in range(2, len(word)):\\l", "if flg == 0 or len(word) == 2:\\l", "new_lst.append(word)\\l", "for word in sentence.split():\\l", "return ' '.join(new_lst)\\l"], ["if len(word) == 1:\\l", "flg = 1\\l", "for i in range(2, len(word)):\\l", "if flg == 0 or len(word) == 2:\\l", "for word in sentence.split():\\l", "flg = 0\\l"], ["if len(word) == 1:\\l", "flg = 1\\l", "for i in range(2, len(word)):\\l", "if flg == 0 or len(word) == 2:\\l", "new_lst.append(word)\\l", "for word in sentence.split():\\l", "flg = 0\\l"], ["if len(word) == 1:\\l", "for i in range(2, len(word)):\\l", "if flg == 0 or len(word) == 2:\\l", "for word in sentence.split():\\l", "flg = 0\\l"], ["if len(word) == 1:\\l", "for i in range(2, len(word)):\\l", "if flg == 0 or len(word) == 2:\\l", "new_lst.append(word)\\l", "for word in sentence.split():\\l", "flg = 0\\l"], ["flg = 1\\l", "for i in range(2, len(word)):\\l", "if flg == 0 or len(word) == 2:\\l", "for word in sentence.split():\\l", "flg = 0\\l", "if len(word) == 1:\\l"], ["flg = 1\\l", "for i in range(2, len(word)):\\l", "if flg == 0 or len(word) == 2:\\l", "new_lst.append(word)\\l", "for word in sentence.split():\\l", "flg = 0\\l", "if len(word) == 1:\\l"], ["if len(word) % i == 0:\\l", "for i in range(2, len(word)):\\l", "if flg == 0 or len(word) == 2:\\l", "for word in sentence.split():\\l", "return ' '.join(new_lst)\\l"], ["if len(word) % i == 0:\\l", "for i in range(2, len(word)):\\l", "if flg == 0 or len(word) == 2:\\l", "new_lst.append(word)\\l", "for word in sentence.split():\\l", "return ' '.join(new_lst)\\l"], ["if len(word) % i == 0:\\l", "flg = 1\\l", "for i in range(2, len(word)):\\l", "if flg == 0 or len(word) == 2:\\l", "for word in sentence.split():\\l", "return ' '.join(new_lst)\\l"], ["if len(word) % i == 0:\\l", "flg = 1\\l", "for i in range(2, len(word)):\\l", "if flg == 0 or len(word) == 2:\\l", "new_lst.append(word)\\l", "for word in sentence.split():\\l", "return ' '.join(new_lst)\\l"], ["if len(word) % i == 0:\\l", "for i in range(2, len(word)):\\l", "if flg == 0 or len(word) == 2:\\l", "for word in sentence.split():\\l", "flg = 0\\l", "if len(word) == 1:\\l", "flg = 1\\l"], ["if len(word) % i == 0:\\l", "for i in range(2, len(word)):\\l", "if flg == 0 or len(word) == 2:\\l", "new_lst.append(word)\\l", "for word in sentence.split():\\l", "flg = 0\\l", "if len(word) == 1:\\l", "flg = 1\\l"], ["if len(word) % i == 0:\\l", "flg = 1\\l", "for i in range(2, len(word)):\\l", "if flg == 0 or len(word) == 2:\\l", "for word in sentence.split():\\l", "flg = 0\\l", "if len(word) == 1:\\l", "flg = 1\\l"], ["if len(word) % i == 0:\\l", "flg = 1\\l", "for i in range(2, len(word)):\\l", "if flg == 0 or len(word) == 2:\\l", "new_lst.append(word)\\l", "for word in sentence.split():\\l", "flg = 0\\l", "if len(word) == 1:\\l", "flg = 1\\l"], ["if flg == 0 or len(word) == 2:\\l", "for word in sentence.split():\\l", "flg = 0\\l", "if len(word) == 1:\\l", "flg = 1\\l", "for i in range(2, len(word)):\\l", "if len(word) % i == 0:\\l", "flg = 1\\l"], ["if flg == 0 or len(word) == 2:\\l", "for word in sentence.split():\\l", "flg = 0\\l", "if len(word) == 1:\\l", "for i in range(2, len(word)):\\l", "if len(word) % i == 0:\\l", "flg = 1\\l"], ["if flg == 0 or len(word) == 2:\\l", "new_lst.append(word)\\l", "for word in sentence.split():\\l", "flg = 0\\l", "if len(word) == 1:\\l", "flg = 1\\l", "for i in range(2, len(word)):\\l", "if len(word) % i == 0:\\l", "flg = 1\\l"], ["if flg == 0 or len(word) == 2:\\l", "new_lst.append(word)\\l", "for word in sentence.split():\\l", "flg = 0\\l", "if len(word) == 1:\\l", "for i in range(2, len(word)):\\l", "if len(word) % i == 0:\\l", "flg = 1\\l"], ["flg = 1\\l", "for i in range(2, len(word)):\\l", "if len(word) % i == 0:\\l"], ["new_lst.append(word)\\l", "for word in sentence.split():\\l", "flg = 0\\l", "if len(word) == 1:\\l", "flg = 1\\l", "for i in range(2, len(word)):\\l", "if flg == 0 or len(word) == 2:\\l"], ["new_lst.append(word)\\l", "for word in sentence.split():\\l", "flg = 0\\l", "if len(word) == 1:\\l", "for i in range(2, len(word)):\\l", "if flg == 0 or len(word) == 2:\\l"], ["from typing import *\\ldef words_in_sentence(sentence):...\\lwords_in_sentence('go for it')\\l", "words_in_sentence", "new_lst = []\\l", "for word in sentence.split():\\l", "return ' '.join(new_lst)\\l"], ["from typing import *\\ldef words_in_sentence(sentence):...\\lwords_in_sentence('go for it')\\l", "words_in_sentence", "new_lst = []\\l", "for word in sentence.split():\\l", "flg = 0\\l", "if len(word) == 1:\\l", "flg = 1\\l", "for i in range(2, len(word)):\\l", "if len(word) % i == 0:\\l", "flg = 1\\l"], ["from typing import *\\ldef words_in_sentence(sentence):...\\lwords_in_sentence('go for it')\\l", "words_in_sentence", "new_lst = []\\l", "for word in sentence.split():\\l", "flg = 0\\l", "if len(word) == 1:\\l", "for i in range(2, len(word)):\\l", "if len(word) % i == 0:\\l", "flg = 1\\l"], ["from typing import *\\ldef words_in_sentence(sentence):...\\lwords_in_sentence('go for it')\\l", "words_in_sentence", "new_lst = []\\l", "for word in sentence.split():\\l", "flg = 0\\l", "if len(word) == 1:\\l", "flg = 1\\l", "for i in range(2, len(word)):\\l", "if flg == 0 or len(word) == 2:\\l", "new_lst.append(word)\\l"], ["from typing import *\\ldef words_in_sentence(sentence):...\\lwords_in_sentence('go for it')\\l", "words_in_sentence", "new_lst = []\\l", "for word in sentence.split():\\l", "flg = 0\\l", "if len(word) == 1:\\l", "for i in range(2, len(word)):\\l", "if flg == 0 or len(word) == 2:\\l", "new_lst.append(word)\\l"]], "prime_paths_linenumbers": [[7, 8, 9, 10, 13, 6, 15], [7, 8, 9, 10, 13, 14, 6, 15], [7, 8, 10, 13, 6, 15], [7, 8, 10, 13, 14, 6, 15], [8, 9, 10, 13, 6, 7], [8, 9, 10, 13, 14, 6, 7], [8, 10, 13, 6, 7], [8, 10, 13, 14, 6, 7], [9, 10, 13, 6, 7, 8], [9, 10, 13, 14, 6, 7, 8], [11, 10, 13, 6, 15], [11, 10, 13, 14, 6, 15], [11, 12, 10, 13, 6, 15], [11, 12, 10, 13, 14, 6, 15], [11, 10, 13, 6, 7, 8, 9], [11, 10, 13, 14, 6, 7, 8, 9], [11, 12, 10, 13, 6, 7, 8, 9], [11, 12, 10, 13, 14, 6, 7, 8, 9], [13, 6, 7, 8, 9, 10, 11, 12], [13, 6, 7, 8, 10, 11, 12], [13, 14, 6, 7, 8, 9, 10, 11, 12], [13, 14, 6, 7, 8, 10, 11, 12], [12, 10, 11], [14, 6, 7, 8, 9, 10, 13], [14, 6, 7, 8, 10, 13], [1, 17, 5, 6, 15], [1, 17, 5, 6, 7, 8, 9, 10, 11, 12], [1, 17, 5, 6, 7, 8, 10, 11, 12], [1, 17, 5, 6, 7, 8, 9, 10, 13, 14], [1, 17, 5, 6, 7, 8, 10, 13, 14]], "covered_statements_linenumbers": [1, 4, 5, 6, 7, 8, 10, 11, 13, 14, 15, 17], "missing_statements_linenumbers": [9, 12], "covered_prime_paths_linenumbers": [[7, 8, 10, 13, 6, 15], [7, 8, 10, 13, 14, 6, 15], [8, 10, 13, 6, 7], [8, 10, 13, 14, 6, 7], [11, 10, 13, 6, 15], [11, 10, 13, 14, 6, 15], [14, 6, 7, 8, 10, 13], [1, 17, 5, 6, 15], [1, 17, 5, 6, 7, 8, 10, 13, 14]], "missing_prime_paths_linenumbers": [[7, 8, 9, 10, 13, 6, 15], [7, 8, 9, 10, 13, 14, 6, 15], [8, 9, 10, 13, 6, 7], [8, 9, 10, 13, 14, 6, 7], [9, 10, 13, 6, 7, 8], [9, 10, 13, 14, 6, 7, 8], [11, 12, 10, 13, 6, 15], [11, 12, 10, 13, 14, 6, 15], [11, 10, 13, 6, 7, 8, 9], [11, 10, 13, 14, 6, 7, 8, 9], [11, 12, 10, 13, 6, 7, 8, 9], [11, 12, 10, 13, 14, 6, 7, 8, 9], [13, 6, 7, 8, 9, 10, 11, 12], [13, 6, 7, 8, 10, 11, 12], [13, 14, 6, 7, 8, 9, 10, 11, 12], [13, 14, 6, 7, 8, 10, 11, 12], [12, 10, 11], [14, 6, 7, 8, 9, 10, 13], [1, 17, 5, 6, 7, 8, 9, 10, 11, 12], [1, 17, 5, 6, 7, 8, 10, 11, 12], [1, 17, 5, 6, 7, 8, 9, 10, 13, 14]], "num_total_prime_paths": 30, "num_covered_paths": 9, "prime_path_coverage": 0.3, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_143__1_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_143__1_CFG.dot"}
{"humaneval_id": "HumanEval_25__1", "python_file": "HumanEval_25__1/main.py", "input_file": "HumanEval_25__1/input.txt", "prime_paths_nodes": [["5", "7", "4", "6", "11", "12"], ["5", "7", "4", "6", "12"], ["5", "9", "4", "6", "11", "12"], ["5", "9", "4", "6", "12"], ["7", "4", "5", "9"], ["9", "4", "5", "7"], ["1", "16", "3", "4", "5", "7"], ["1", "16", "3", "4", "5", "9"], ["1", "16", "3", "4", "6", "11", "12"], ["1", "16", "3", "4", "6", "12"]], "prime_paths_statements": [["if n % i == 0:\\l", "fact.append(i)\\ln //= i\\l", "while i <= int(math.sqrt(n) + 1):\\l", "if n > 1:\\l", "fact.append(n)\\l", "return fact\\l"], ["if n % i == 0:\\l", "fact.append(i)\\ln //= i\\l", "while i <= int(math.sqrt(n) + 1):\\l", "if n > 1:\\l", "return fact\\l"], ["if n % i == 0:\\l", "i += 1\\l", "while i <= int(math.sqrt(n) + 1):\\l", "if n > 1:\\l", "fact.append(n)\\l", "return fact\\l"], ["if n % i == 0:\\l", "i += 1\\l", "while i <= int(math.sqrt(n) + 1):\\l", "if n > 1:\\l", "return fact\\l"], ["fact.append(i)\\ln //= i\\l", "while i <= int(math.sqrt(n) + 1):\\l", "if n % i == 0:\\l", "i += 1\\l"], ["i += 1\\l", "while i <= int(math.sqrt(n) + 1):\\l", "if n % i == 0:\\l", "fact.append(i)\\ln //= i\\l"], ["from typing import *\\ldef factorize(n: int) ->List[int]:...\\lfactorize(3 * 19 * 3 * 19)\\l", "factorize", "import math\\lfact = []\\li = 2\\l", "while i <= int(math.sqrt(n) + 1):\\l", "if n % i == 0:\\l", "fact.append(i)\\ln //= i\\l"], ["from typing import *\\ldef factorize(n: int) ->List[int]:...\\lfactorize(3 * 19 * 3 * 19)\\l", "factorize", "import math\\lfact = []\\li = 2\\l", "while i <= int(math.sqrt(n) + 1):\\l", "if n % i == 0:\\l", "i += 1\\l"], ["from typing import *\\ldef factorize(n: int) ->List[int]:...\\lfactorize(3 * 19 * 3 * 19)\\l", "factorize", "import math\\lfact = []\\li = 2\\l", "while i <= int(math.sqrt(n) + 1):\\l", "if n > 1:\\l", "fact.append(n)\\l", "return fact\\l"], ["from typing import *\\ldef factorize(n: int) ->List[int]:...\\lfactorize(3 * 19 * 3 * 19)\\l", "factorize", "import math\\lfact = []\\li = 2\\l", "while i <= int(math.sqrt(n) + 1):\\l", "if n > 1:\\l", "return fact\\l"]], "prime_paths_linenumbers": [[9, 10, 11, 8, 15, 16, 17], [9, 10, 11, 8, 15, 17], [9, 13, 8, 15, 16, 17], [9, 13, 8, 15, 17], [10, 11, 8, 9, 13], [13, 8, 9, 10, 11], [1, 19, 5, 6, 7, 8, 9, 10, 11], [1, 19, 5, 6, 7, 8, 9, 13], [1, 19, 5, 6, 7, 8, 15, 16, 17], [1, 19, 5, 6, 7, 8, 15, 17]], "covered_statements_linenumbers": [1, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 16, 17, 19], "missing_statements_linenumbers": [], "covered_prime_paths_linenumbers": [[9, 10, 11, 8, 15, 16, 17], [9, 10, 11, 8, 15, 17], [9, 13, 8, 15, 16, 17], [9, 13, 8, 15, 17], [10, 11, 8, 9, 13], [13, 8, 9, 10, 11], [1, 19, 5, 6, 7, 8, 9, 10, 11], [1, 19, 5, 6, 7, 8, 9, 13], [1, 19, 5, 6, 7, 8, 15, 16, 17], [1, 19, 5, 6, 7, 8, 15, 17]], "missing_prime_paths_linenumbers": [], "num_total_prime_paths": 10, "num_covered_paths": 10, "prime_path_coverage": 1.0, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_25__1_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_25__1_CFG.dot"}
{"humaneval_id": "HumanEval_5__0", "python_file": "HumanEval_5__0/main.py", "input_file": "HumanEval_5__0/input.txt", "prime_paths_nodes": [["8", "7", "9", "13"], ["1", "16", "3", "4"], ["1", "16", "3", "5", "7", "8"], ["1", "16", "3", "5", "7", "9", "13"]], "prime_paths_statements": [["result.append(n)\\lresult.append(delimeter)\\l", "for n in numbers[:-1]:\\l", "result.append(numbers[-1])\\l", "return result\\l"], ["from typing import *\\ldef intersperse(numbers: List[int], delimeter: int) ->List[int]:...\\lintersperse([5, 6, 3, 2], 8)\\l", "intersperse", "if not numbers:\\l", "return []\\l"], ["from typing import *\\ldef intersperse(numbers: List[int], delimeter: int) ->List[int]:...\\lintersperse([5, 6, 3, 2], 8)\\l", "intersperse", "if not numbers:\\l", "result = []\\l", "for n in numbers[:-1]:\\l", "result.append(n)\\lresult.append(delimeter)\\l"], ["from typing import *\\ldef intersperse(numbers: List[int], delimeter: int) ->List[int]:...\\lintersperse([5, 6, 3, 2], 8)\\l", "intersperse", "if not numbers:\\l", "result = []\\l", "for n in numbers[:-1]:\\l", "result.append(numbers[-1])\\l", "return result\\l"]], "prime_paths_linenumbers": [[11, 12, 10, 14, 16], [1, 18, 5, 6], [1, 18, 5, 8, 10, 11, 12], [1, 18, 5, 8, 10, 14, 16]], "covered_statements_linenumbers": [1, 4, 5, 8, 10, 11, 12, 14, 16, 18], "missing_statements_linenumbers": [6], "covered_prime_paths_linenumbers": [[11, 12, 10, 14, 16], [1, 18, 5, 8, 10, 11, 12], [1, 18, 5, 8, 10, 14, 16]], "missing_prime_paths_linenumbers": [[1, 18, 5, 6]], "num_total_prime_paths": 4, "num_covered_paths": 3, "prime_path_coverage": 0.75, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_5__0_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_5__0_CFG.dot"}
{"humaneval_id": "HumanEval_43", "python_file": "HumanEval_43/main.py", "input_file": "HumanEval_43/input.txt", "prime_paths_nodes": [["9", "5", "3", "6"], ["1", "16", "3", "6"], ["1", "16", "3", "5", "9", "11"]], "prime_paths_statements": [["if l1 + l[j] == 0:\\l", "for j in range(i + 1, len(l)):\\l", "for i, l1 in enumerate(l):\\l", "return False\\l"], ["from typing import *\\ldef pairs_sum_to_zero(l):...\\lpairs_sum_to_zero([1, 3, 5, 0])\\l", "pairs_sum_to_zero", "for i, l1 in enumerate(l):\\l", "return False\\l"], ["from typing import *\\ldef pairs_sum_to_zero(l):...\\lpairs_sum_to_zero([1, 3, 5, 0])\\l", "pairs_sum_to_zero", "for i, l1 in enumerate(l):\\l", "for j in range(i + 1, len(l)):\\l", "if l1 + l[j] == 0:\\l", "return True\\l"]], "prime_paths_linenumbers": [[5, 4, 3, 7], [1, 9, 3, 7], [1, 9, 3, 4, 5, 6]], "covered_statements_linenumbers": [1, 2, 3, 4, 5, 7, 9], "missing_statements_linenumbers": [6], "covered_prime_paths_linenumbers": [[5, 4, 3, 7], [1, 9, 3, 7]], "missing_prime_paths_linenumbers": [[1, 9, 3, 4, 5, 6]], "num_total_prime_paths": 3, "num_covered_paths": 2, "prime_path_coverage": 0.67, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_43_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_43_CFG.dot"}
{"humaneval_id": "HumanEval_84", "python_file": "HumanEval_84/main.py", "input_file": "HumanEval_84/input.txt", "prime_paths_nodes": [["1", "6", "3"]], "prime_paths_statements": [["from typing import *\\ldef solve(N):...\\lsolve(1000)\\l", "solve", "return bin(sum(int(i) for i in str(N)))[2:]\\l"]], "prime_paths_linenumbers": [[1, 5, 3]], "covered_statements_linenumbers": [1, 2, 3, 5], "missing_statements_linenumbers": [], "covered_prime_paths_linenumbers": [[1, 5, 3]], "missing_prime_paths_linenumbers": [], "num_total_prime_paths": 1, "num_covered_paths": 1, "prime_path_coverage": 1.0, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_84_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_84_CFG.dot"}
{"humaneval_id": "HumanEval_43__0", "python_file": "HumanEval_43__0/main.py", "input_file": "HumanEval_43__0/input.txt", "prime_paths_nodes": [["9", "5", "3", "6"], ["1", "16", "3", "6"], ["1", "16", "3", "5", "9", "11"]], "prime_paths_statements": [["if l1 + l[j] == 0:\\l", "for j in range(i + 1, len(l)):\\l", "for i, l1 in enumerate(l):\\l", "return False\\l"], ["from typing import *\\ldef pairs_sum_to_zero(l):...\\lpairs_sum_to_zero([-3, 9, -1, 4, 2, 30])\\l", "pairs_sum_to_zero", "for i, l1 in enumerate(l):\\l", "return False\\l"], ["from typing import *\\ldef pairs_sum_to_zero(l):...\\lpairs_sum_to_zero([-3, 9, -1, 4, 2, 30])\\l", "pairs_sum_to_zero", "for i, l1 in enumerate(l):\\l", "for j in range(i + 1, len(l)):\\l", "if l1 + l[j] == 0:\\l", "return True\\l"]], "prime_paths_linenumbers": [[7, 6, 5, 9], [1, 11, 5, 9], [1, 11, 5, 6, 7, 8]], "covered_statements_linenumbers": [1, 4, 5, 6, 7, 9, 11], "missing_statements_linenumbers": [8], "covered_prime_paths_linenumbers": [[7, 6, 5, 9], [1, 11, 5, 9]], "missing_prime_paths_linenumbers": [[1, 11, 5, 6, 7, 8]], "num_total_prime_paths": 3, "num_covered_paths": 2, "prime_path_coverage": 0.67, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_43__0_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_43__0_CFG.dot"}
{"humaneval_id": "HumanEval_70", "python_file": "HumanEval_70/main.py", "input_file": "HumanEval_70/input.txt", "prime_paths_nodes": [["5", "4", "6"], ["1", "13", "3", "4", "5"], ["1", "13", "3", "4", "6"]], "prime_paths_statements": [["res.append(min(lst) if switch else max(lst))\\llst.remove(res[-1])\\lswitch = not switch\\l", "while lst:\\l", "return res\\l"], ["from typing import *\\ldef strange_sort_list(lst):...\\lstrange_sort_list([1, 2, 3, 4])\\l", "strange_sort_list", "res, switch = [], True\\l", "while lst:\\l", "res.append(min(lst) if switch else max(lst))\\llst.remove(res[-1])\\lswitch = not switch\\l"], ["from typing import *\\ldef strange_sort_list(lst):...\\lstrange_sort_list([1, 2, 3, 4])\\l", "strange_sort_list", "res, switch = [], True\\l", "while lst:\\l", "return res\\l"]], "prime_paths_linenumbers": [[5, 6, 7, 4, 8], [1, 10, 3, 4, 5, 6, 7], [1, 10, 3, 4, 8]], "covered_statements_linenumbers": [1, 2, 3, 4, 5, 6, 7, 8, 10], "missing_statements_linenumbers": [], "covered_prime_paths_linenumbers": [[5, 6, 7, 4, 8], [1, 10, 3, 4, 5, 6, 7], [1, 10, 3, 4, 8]], "missing_prime_paths_linenumbers": [], "num_total_prime_paths": 3, "num_covered_paths": 3, "prime_path_coverage": 1.0, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_70_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_70_CFG.dot"}
{"humaneval_id": "HumanEval_57__0", "python_file": "HumanEval_57__0/main.py", "input_file": "HumanEval_57__0/input.txt", "prime_paths_nodes": [["1", "9", "3", "4"], ["1", "9", "3", "5"]], "prime_paths_statements": [["from typing import *\\ldef monotonic(l: list):...\\lmonotonic([4, 1, 0, -10])\\l", "monotonic", "if l == sorted(l) or l == sorted(l, reverse=True):\\l", "return True\\l"], ["from typing import *\\ldef monotonic(l: list):...\\lmonotonic([4, 1, 0, -10])\\l", "monotonic", "if l == sorted(l) or l == sorted(l, reverse=True):\\l", "return False\\l"]], "prime_paths_linenumbers": [[1, 9, 5, 6], [1, 9, 5, 7]], "covered_statements_linenumbers": [1, 4, 5, 6, 9], "missing_statements_linenumbers": [7], "covered_prime_paths_linenumbers": [[1, 9, 5, 6]], "missing_prime_paths_linenumbers": [[1, 9, 5, 7]], "num_total_prime_paths": 2, "num_covered_paths": 1, "prime_path_coverage": 0.5, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_57__0_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_57__0_CFG.dot"}
{"humaneval_id": "HumanEval_98", "python_file": "HumanEval_98/main.py", "input_file": "HumanEval_98/input.txt", "prime_paths_nodes": [["7", "4", "8"], ["7", "9", "4", "8"], ["9", "4", "7"], ["1", "13", "3", "4", "8"], ["1", "13", "3", "4", "7", "9"]], "prime_paths_statements": [["if s[i] in 'AEIOU':\\l", "for i in range(0, len(s), 2):\\l", "return count\\l"], ["if s[i] in 'AEIOU':\\l", "count += 1\\l", "for i in range(0, len(s), 2):\\l", "return count\\l"], ["count += 1\\l", "for i in range(0, len(s), 2):\\l", "if s[i] in 'AEIOU':\\l"], ["from typing import *\\ldef count_upper(s):...\\lcount_upper('aBCdEf')\\l", "count_upper", "count = 0\\l", "for i in range(0, len(s), 2):\\l", "return count\\l"], ["from typing import *\\ldef count_upper(s):...\\lcount_upper('aBCdEf')\\l", "count_upper", "count = 0\\l", "for i in range(0, len(s), 2):\\l", "if s[i] in 'AEIOU':\\l", "count += 1\\l"]], "prime_paths_linenumbers": [[5, 4, 7], [5, 6, 4, 7], [6, 4, 5], [1, 9, 3, 4, 7], [1, 9, 3, 4, 5, 6]], "covered_statements_linenumbers": [1, 2, 3, 4, 5, 6, 7, 9], "missing_statements_linenumbers": [], "covered_prime_paths_linenumbers": [[5, 4, 7], [5, 6, 4, 7], [6, 4, 5], [1, 9, 3, 4, 7], [1, 9, 3, 4, 5, 6]], "missing_prime_paths_linenumbers": [], "num_total_prime_paths": 5, "num_covered_paths": 5, "prime_path_coverage": 1.0, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_98_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_98_CFG.dot"}
{"humaneval_id": "HumanEval_61__1", "python_file": "HumanEval_61__1/main.py", "input_file": "HumanEval_61__1/input.txt", "prime_paths_nodes": [["5", "7", "8", "4", "6"], ["5", "9", "8", "4", "6"], ["7", "8", "4", "5", "9"], ["9", "8", "4", "5", "7"], ["1", "15", "3", "4", "6"], ["1", "15", "3", "4", "5", "7", "8", "10"], ["1", "15", "3", "4", "5", "9", "8", "10"]], "prime_paths_statements": [["if b == '(':\\l", "depth += 1\\l", "if depth < 0:\\l", "for b in brackets:\\l", "return depth == 0\\l"], ["if b == '(':\\l", "depth -= 1\\l", "if depth < 0:\\l", "for b in brackets:\\l", "return depth == 0\\l"], ["depth += 1\\l", "if depth < 0:\\l", "for b in brackets:\\l", "if b == '(':\\l", "depth -= 1\\l"], ["depth -= 1\\l", "if depth < 0:\\l", "for b in brackets:\\l", "if b == '(':\\l", "depth += 1\\l"], ["from typing import *\\ldef correct_bracketing(brackets: str):...\\lcorrect_bracketing('(')\\l", "correct_bracketing", "depth = 0\\l", "for b in brackets:\\l", "return depth == 0\\l"], ["from typing import *\\ldef correct_bracketing(brackets: str):...\\lcorrect_bracketing('(')\\l", "correct_bracketing", "depth = 0\\l", "for b in brackets:\\l", "if b == '(':\\l", "depth += 1\\l", "if depth < 0:\\l", "return False\\l"], ["from typing import *\\ldef correct_bracketing(brackets: str):...\\lcorrect_bracketing('(')\\l", "correct_bracketing", "depth = 0\\l", "for b in brackets:\\l", "if b == '(':\\l", "depth -= 1\\l", "if depth < 0:\\l", "return False\\l"]], "prime_paths_linenumbers": [[7, 8, 11, 6, 13], [7, 10, 11, 6, 13], [8, 11, 6, 7, 10], [10, 11, 6, 7, 8], [1, 15, 5, 6, 13], [1, 15, 5, 6, 7, 8, 11, 12], [1, 15, 5, 6, 7, 10, 11, 12]], "covered_statements_linenumbers": [1, 4, 5, 6, 7, 8, 11, 13, 15], "missing_statements_linenumbers": [10, 12], "covered_prime_paths_linenumbers": [[7, 8, 11, 6, 13], [1, 15, 5, 6, 13]], "missing_prime_paths_linenumbers": [[7, 10, 11, 6, 13], [8, 11, 6, 7, 10], [10, 11, 6, 7, 8], [1, 15, 5, 6, 7, 8, 11, 12], [1, 15, 5, 6, 7, 10, 11, 12]], "num_total_prime_paths": 7, "num_covered_paths": 2, "prime_path_coverage": 0.29, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_61__1_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_61__1_CFG.dot"}
{"humaneval_id": "HumanEval_62__0", "python_file": "HumanEval_62__0/main.py", "input_file": "HumanEval_62__0/input.txt", "prime_paths_nodes": [["1", "6", "3"]], "prime_paths_statements": [["from typing import *\\ldef derivative(xs: list):...\\lderivative([1])\\l", "derivative", "return [(i * x) for i, x in enumerate(xs)][1:]\\l"]], "prime_paths_linenumbers": [[1, 7, 5]], "covered_statements_linenumbers": [1, 4, 5, 7], "missing_statements_linenumbers": [], "covered_prime_paths_linenumbers": [[1, 7, 5]], "missing_prime_paths_linenumbers": [], "num_total_prime_paths": 1, "num_covered_paths": 1, "prime_path_coverage": 1.0, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_62__0_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_62__0_CFG.dot"}
{"humaneval_id": "HumanEval_59__0", "python_file": "HumanEval_59__0/main.py", "input_file": "HumanEval_59__0/input.txt", "prime_paths_nodes": [["5", "6"], ["5", "7", "11"], ["5", "7", "10", "12"], ["10", "7", "11"], ["19", "17", "20"], ["19", "21", "17", "20"], ["21", "17", "19"], ["1", "26", "3", "17", "20"], ["1", "26", "3", "17", "19", "21"]], "prime_paths_statements": [["if k < 2:\\l", "return False\\l"], ["if k < 2:\\l", "for i in range(2, k - 1):\\l", "return True\\l"], ["if k < 2:\\l", "for i in range(2, k - 1):\\l", "if k % i == 0:\\l", "return False\\l"], ["if k % i == 0:\\l", "for i in range(2, k - 1):\\l", "return True\\l"], ["if n % j == 0 and is_prime(j):\\l", "for j in range(2, n + 1):\\l", "return largest\\l"], ["if n % j == 0 and is_prime(j):\\l", "largest = max(largest, j)\\l", "for j in range(2, n + 1):\\l", "return largest\\l"], ["largest = max(largest, j)\\l", "for j in range(2, n + 1):\\l", "if n % j == 0 and is_prime(j):\\l"], ["from typing import *\\ldef largest_prime_factor(n: int):...\\llargest_prime_factor(330)\\l", "largest_prime_factor", "def is_prime(k):...\\llargest = 1\\l", "for j in range(2, n + 1):\\l", "return largest\\l"], ["from typing import *\\ldef largest_prime_factor(n: int):...\\llargest_prime_factor(330)\\l", "largest_prime_factor", "def is_prime(k):...\\llargest = 1\\l", "for j in range(2, n + 1):\\l", "if n % j == 0 and is_prime(j):\\l", "largest = max(largest, j)\\l"]], "prime_paths_linenumbers": [[6, 7], [6, 8, 11], [6, 8, 9, 10], [9, 8, 11], [14, 13, 16], [14, 15, 13, 16], [15, 13, 14], [1, 18, 5, 12, 13, 16], [1, 18, 5, 12, 13, 14, 15]], "covered_statements_linenumbers": [1, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18], "missing_statements_linenumbers": [7], "covered_prime_paths_linenumbers": [[6, 8, 11], [6, 8, 9, 10], [9, 8, 11], [14, 13, 16], [14, 15, 13, 16], [15, 13, 14], [1, 18, 5, 12, 13, 16], [1, 18, 5, 12, 13, 14, 15]], "missing_prime_paths_linenumbers": [[6, 7]], "num_total_prime_paths": 9, "num_covered_paths": 8, "prime_path_coverage": 0.89, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_59__0_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_59__0_CFG.dot"}
{"humaneval_id": "HumanEval_29__1", "python_file": "HumanEval_29__1/main.py", "input_file": "HumanEval_29__1/input.txt", "prime_paths_nodes": [["1", "6", "3"]], "prime_paths_statements": [["from typing import *\\ldef filter_by_prefix(strings: List[str], prefix: str) ->List[str]:...\\lfilter_by_prefix(['a', 'ab', 'abc', 'ba', 'bb', 'bc'], 'a')\\l", "filter_by_prefix", "return [x for x in strings if x.startswith(prefix)]\\l"]], "prime_paths_linenumbers": [[1, 7, 5]], "covered_statements_linenumbers": [1, 4, 5, 7], "missing_statements_linenumbers": [], "covered_prime_paths_linenumbers": [[1, 7, 5]], "missing_prime_paths_linenumbers": [], "num_total_prime_paths": 1, "num_covered_paths": 1, "prime_path_coverage": 1.0, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_29__1_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_29__1_CFG.dot"}
{"humaneval_id": "HumanEval_148__0", "python_file": "HumanEval_148__0/main.py", "input_file": "HumanEval_148__0/input.txt", "prime_paths_nodes": [["1", "17", "3", "4", "5"], ["1", "17", "3", "4", "6", "10", "11"], ["1", "17", "3", "4", "6", "10", "13"]], "prime_paths_statements": [["from typing import *\\ldef bf(planet1, planet2):...\\lbf('Earth', 'Earth')\\l", "bf", "planet_names = ('Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\\l    'Uranus', 'Neptune')\\l", "if planet1 not in planet_names or planet2 not in planet_names or planet1 == planet2:\\l", "return ()\\l"], ["from typing import *\\ldef bf(planet1, planet2):...\\lbf('Earth', 'Earth')\\l", "bf", "planet_names = ('Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\\l    'Uranus', 'Neptune')\\l", "if planet1 not in planet_names or planet2 not in planet_names or planet1 == planet2:\\l", "planet1_index = planet_names.index(planet1)\\lplanet2_index = planet_names.index(planet2)\\l", "if planet1_index < planet2_index:\\l", "return planet_names[planet1_index + 1:planet2_index]\\l"], ["from typing import *\\ldef bf(planet1, planet2):...\\lbf('Earth', 'Earth')\\l", "bf", "planet_names = ('Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\\l    'Uranus', 'Neptune')\\l", "if planet1 not in planet_names or planet2 not in planet_names or planet1 == planet2:\\l", "planet1_index = planet_names.index(planet1)\\lplanet2_index = planet_names.index(planet2)\\l", "if planet1_index < planet2_index:\\l", "return planet_names[planet2_index + 1:planet1_index]\\l"]], "prime_paths_linenumbers": [[1, 23, 5, 14, 15], [1, 23, 5, 14, 16, 17, 18, 19], [1, 23, 5, 14, 16, 17, 18, 21]], "covered_statements_linenumbers": [1, 4, 5, 14, 15, 23], "missing_statements_linenumbers": [16, 17, 18, 19, 21], "covered_prime_paths_linenumbers": [[1, 23, 5, 14, 15]], "missing_prime_paths_linenumbers": [[1, 23, 5, 14, 16, 17, 18, 19], [1, 23, 5, 14, 16, 17, 18, 21]], "num_total_prime_paths": 3, "num_covered_paths": 1, "prime_path_coverage": 0.33, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_148__0_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_148__0_CFG.dot"}
{"humaneval_id": "HumanEval_139__1", "python_file": "HumanEval_139__1/main.py", "input_file": "HumanEval_139__1/input.txt", "prime_paths_nodes": [["6", "4", "7"], ["1", "10", "3", "4", "6"], ["1", "10", "3", "4", "7"]], "prime_paths_statements": [["fact_i *= i\\lspecial_fact *= fact_i\\l", "for i in range(1, n + 1):\\l", "return special_fact\\l"], ["from typing import *\\ldef special_factorial(n):...\\lspecial_factorial(5)\\l", "special_factorial", "fact_i = 1\\lspecial_fact = 1\\l", "for i in range(1, n + 1):\\l", "fact_i *= i\\lspecial_fact *= fact_i\\l"], ["from typing import *\\ldef special_factorial(n):...\\lspecial_factorial(5)\\l", "special_factorial", "fact_i = 1\\lspecial_fact = 1\\l", "for i in range(1, n + 1):\\l", "return special_fact\\l"]], "prime_paths_linenumbers": [[8, 9, 7, 10], [1, 12, 5, 6, 7, 8, 9], [1, 12, 5, 6, 7, 10]], "covered_statements_linenumbers": [1, 4, 5, 6, 7, 8, 9, 10, 12], "missing_statements_linenumbers": [], "covered_prime_paths_linenumbers": [[8, 9, 7, 10], [1, 12, 5, 6, 7, 8, 9], [1, 12, 5, 6, 7, 10]], "missing_prime_paths_linenumbers": [], "num_total_prime_paths": 3, "num_covered_paths": 3, "prime_path_coverage": 1.0, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_139__1_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_139__1_CFG.dot"}
{"humaneval_id": "HumanEval_158", "python_file": "HumanEval_158/main.py", "input_file": "HumanEval_158/input.txt", "prime_paths_nodes": [["1", "6", "3"]], "prime_paths_statements": [["from typing import *\\ldef find_max(words):...\\lfind_max(['name', 'of', 'string'])\\l", "find_max", "return sorted(words, key=lambda x: (-len(set(x)), x))[0]\\l"]], "prime_paths_linenumbers": [[1, 5, 3]], "covered_statements_linenumbers": [1, 2, 3, 5], "missing_statements_linenumbers": [], "covered_prime_paths_linenumbers": [[1, 5, 3]], "missing_prime_paths_linenumbers": [], "num_total_prime_paths": 1, "num_covered_paths": 1, "prime_path_coverage": 1.0, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_158_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_158_CFG.dot"}
{"humaneval_id": "HumanEval_72", "python_file": "HumanEval_72/main.py", "input_file": "HumanEval_72/input.txt", "prime_paths_nodes": [["10", "13", "9", "11"], ["13", "9", "10", "12"], ["1", "17", "3", "5"], ["1", "17", "3", "6", "9", "11"], ["1", "17", "3", "6", "9", "10", "12"], ["1", "17", "3", "6", "9", "10", "13"]], "prime_paths_statements": [["if q[i] != q[j]:\\l", "i += 1\\lj -= 1\\l", "while i < j:\\l", "return True\\l"], ["i += 1\\lj -= 1\\l", "while i < j:\\l", "if q[i] != q[j]:\\l", "return False\\l"], ["from typing import *\\ldef will_it_fly(q, w):...\\lwill_it_fly([3, 2, 3], 9)\\l", "will_it_fly", "if sum(q) > w:\\l", "return False\\l"], ["from typing import *\\ldef will_it_fly(q, w):...\\lwill_it_fly([3, 2, 3], 9)\\l", "will_it_fly", "if sum(q) > w:\\l", "i, j = 0, len(q) - 1\\l", "while i < j:\\l", "return True\\l"], ["from typing import *\\ldef will_it_fly(q, w):...\\lwill_it_fly([3, 2, 3], 9)\\l", "will_it_fly", "if sum(q) > w:\\l", "i, j = 0, len(q) - 1\\l", "while i < j:\\l", "if q[i] != q[j]:\\l", "return False\\l"], ["from typing import *\\ldef will_it_fly(q, w):...\\lwill_it_fly([3, 2, 3], 9)\\l", "will_it_fly", "if sum(q) > w:\\l", "i, j = 0, len(q) - 1\\l", "while i < j:\\l", "if q[i] != q[j]:\\l", "i += 1\\lj -= 1\\l"]], "prime_paths_linenumbers": [[8, 10, 11, 7, 12], [10, 11, 7, 8, 9], [1, 14, 3, 4], [1, 14, 3, 6, 7, 12], [1, 14, 3, 6, 7, 8, 9], [1, 14, 3, 6, 7, 8, 10, 11]], "covered_statements_linenumbers": [1, 2, 3, 6, 7, 8, 10, 11, 12, 14], "missing_statements_linenumbers": [4, 9], "covered_prime_paths_linenumbers": [[8, 10, 11, 7, 12], [1, 14, 3, 6, 7, 12], [1, 14, 3, 6, 7, 8, 10, 11]], "missing_prime_paths_linenumbers": [[10, 11, 7, 8, 9], [1, 14, 3, 4], [1, 14, 3, 6, 7, 8, 9]], "num_total_prime_paths": 6, "num_covered_paths": 3, "prime_path_coverage": 0.5, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_72_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_72_CFG.dot"}
{"humaneval_id": "HumanEval_17__0", "python_file": "HumanEval_17__0/main.py", "input_file": "HumanEval_17__0/input.txt", "prime_paths_nodes": [["1", "7", "3", "4"]], "prime_paths_statements": [["from typing import *\\ldef parse_music(music_string: str) ->List[int]:...\\lparse_music('o| .| o| .| o o| o o...')\\l", "parse_music", "note_map = {'o': 4, 'o|': 2, '.|': 1}\\l", "return [note_map[x] for x in music_string.split(' ') if x]\\l"]], "prime_paths_linenumbers": [[1, 8, 5, 6]], "covered_statements_linenumbers": [1, 4, 5, 6, 8], "missing_statements_linenumbers": [], "covered_prime_paths_linenumbers": [[1, 8, 5, 6]], "missing_prime_paths_linenumbers": [], "num_total_prime_paths": 1, "num_covered_paths": 1, "prime_path_coverage": 1.0, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_17__0_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_17__0_CFG.dot"}
{"humaneval_id": "HumanEval_22__1", "python_file": "HumanEval_22__1/main.py", "input_file": "HumanEval_22__1/input.txt", "prime_paths_nodes": [["1", "6", "3"]], "prime_paths_statements": [["from typing import *\\ldef filter_integers(values: List[Any]) ->List[int]:...\\lfilter_integers([4, {}, [], 23.2, 9, 'adasd'])\\l", "filter_integers", "return [x for x in values if isinstance(x, int)]\\l"]], "prime_paths_linenumbers": [[1, 7, 5]], "covered_statements_linenumbers": [1, 4, 5, 7], "missing_statements_linenumbers": [], "covered_prime_paths_linenumbers": [[1, 7, 5]], "missing_prime_paths_linenumbers": [], "num_total_prime_paths": 1, "num_covered_paths": 1, "prime_path_coverage": 1.0, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_22__1_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_22__1_CFG.dot"}
{"humaneval_id": "HumanEval_116__0", "python_file": "HumanEval_116__0/main.py", "input_file": "HumanEval_116__0/input.txt", "prime_paths_nodes": [["1", "6", "3"]], "prime_paths_statements": [["from typing import *\\ldef sort_array(arr):...\\lsort_array([3, 6, 44, 12, 32, 5])\\l", "sort_array", "return sorted(sorted(arr), key=lambda x: bin(x)[2:].count('1'))\\l"]], "prime_paths_linenumbers": [[1, 7, 5]], "covered_statements_linenumbers": [1, 4, 5, 7], "missing_statements_linenumbers": [], "covered_prime_paths_linenumbers": [[1, 7, 5]], "missing_prime_paths_linenumbers": [], "num_total_prime_paths": 1, "num_covered_paths": 1, "prime_path_coverage": 1.0, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_116__0_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_116__0_CFG.dot"}
{"humaneval_id": "HumanEval_156", "python_file": "HumanEval_156/main.py", "input_file": "HumanEval_156/input.txt", "prime_paths_nodes": [["5", "7", "9", "4", "6"], ["8", "7", "9", "4", "5"], ["8", "7", "9", "4", "6"], ["9", "4", "5", "7", "8"], ["1", "12", "3", "4", "6"], ["1", "12", "3", "4", "5", "7", "8"], ["1", "12", "3", "4", "5", "7", "9"]], "prime_paths_statements": [["div = number // num[i]\\lnumber %= num[i]\\l", "while div:\\l", "i -= 1\\l", "while number:\\l", "return res.lower()\\l"], ["res += sym[i]\\ldiv -= 1\\l", "while div:\\l", "i -= 1\\l", "while number:\\l", "div = number // num[i]\\lnumber %= num[i]\\l"], ["res += sym[i]\\ldiv -= 1\\l", "while div:\\l", "i -= 1\\l", "while number:\\l", "return res.lower()\\l"], ["i -= 1\\l", "while number:\\l", "div = number // num[i]\\lnumber %= num[i]\\l", "while div:\\l", "res += sym[i]\\ldiv -= 1\\l"], ["from typing import *\\ldef int_to_mini_roman(number):...\\lint_to_mini_roman(19)\\l", "int_to_mini_roman", "num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\\lsym = ['I', 'IV', 'V', 'IX', 'X', 'XL', 'L', 'XC', 'C', 'CD', 'D', 'CM', 'M']\\li = 12\\lres = ''\\l", "while number:\\l", "return res.lower()\\l"], ["from typing import *\\ldef int_to_mini_roman(number):...\\lint_to_mini_roman(19)\\l", "int_to_mini_roman", "num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\\lsym = ['I', 'IV', 'V', 'IX', 'X', 'XL', 'L', 'XC', 'C', 'CD', 'D', 'CM', 'M']\\li = 12\\lres = ''\\l", "while number:\\l", "div = number // num[i]\\lnumber %= num[i]\\l", "while div:\\l", "res += sym[i]\\ldiv -= 1\\l"], ["from typing import *\\ldef int_to_mini_roman(number):...\\lint_to_mini_roman(19)\\l", "int_to_mini_roman", "num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\\lsym = ['I', 'IV', 'V', 'IX', 'X', 'XL', 'L', 'XC', 'C', 'CD', 'D', 'CM', 'M']\\li = 12\\lres = ''\\l", "while number:\\l", "div = number // num[i]\\lnumber %= num[i]\\l", "while div:\\l", "i -= 1\\l"]], "prime_paths_linenumbers": [[10, 11, 12, 15, 9, 16], [13, 14, 12, 15, 9, 10, 11], [13, 14, 12, 15, 9, 16], [15, 9, 10, 11, 12, 13, 14], [1, 18, 3, 5, 7, 8, 9, 16], [1, 18, 3, 5, 7, 8, 9, 10, 11, 12, 13, 14], [1, 18, 3, 5, 7, 8, 9, 10, 11, 12, 15]], "covered_statements_linenumbers": [1, 2, 3, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18], "missing_statements_linenumbers": [], "covered_prime_paths_linenumbers": [[10, 11, 12, 15, 9, 16], [13, 14, 12, 15, 9, 10, 11], [13, 14, 12, 15, 9, 16], [15, 9, 10, 11, 12, 13, 14], [1, 18, 3, 5, 7, 8, 9, 16], [1, 18, 3, 5, 7, 8, 9, 10, 11, 12, 13, 14], [1, 18, 3, 5, 7, 8, 9, 10, 11, 12, 15]], "missing_prime_paths_linenumbers": [], "num_total_prime_paths": 7, "num_covered_paths": 7, "prime_path_coverage": 1.0, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_156_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_156_CFG.dot"}
{"humaneval_id": "HumanEval_3", "python_file": "HumanEval_3/main.py", "input_file": "HumanEval_3/input.txt", "prime_paths_nodes": [["5", "7", "4", "6"], ["7", "4", "5"], ["1", "13", "3", "4", "6"], ["1", "13", "3", "4", "5", "7", "8"]], "prime_paths_statements": [["balance += op\\l", "if balance < 0:\\l", "for op in operations:\\l", "return False\\l"], ["if balance < 0:\\l", "for op in operations:\\l", "balance += op\\l"], ["from typing import *\\ldef below_zero(operations: List[int]) ->bool:...\\lbelow_zero([1, 2, -3, 1, 2, -3])\\l", "below_zero", "balance = 0\\l", "for op in operations:\\l", "return False\\l"], ["from typing import *\\ldef below_zero(operations: List[int]) ->bool:...\\lbelow_zero([1, 2, -3, 1, 2, -3])\\l", "below_zero", "balance = 0\\l", "for op in operations:\\l", "balance += op\\l", "if balance < 0:\\l", "return True\\l"]], "prime_paths_linenumbers": [[6, 7, 5, 10], [7, 5, 6], [1, 12, 3, 5, 10], [1, 12, 3, 5, 6, 7, 8]], "covered_statements_linenumbers": [1, 2, 3, 5, 6, 7, 10, 12], "missing_statements_linenumbers": [8], "covered_prime_paths_linenumbers": [[6, 7, 5, 10], [7, 5, 6], [1, 12, 3, 5, 10]], "missing_prime_paths_linenumbers": [[1, 12, 3, 5, 6, 7, 8]], "num_total_prime_paths": 4, "num_covered_paths": 3, "prime_path_coverage": 0.75, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_3_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_3_CFG.dot"}
{"humaneval_id": "HumanEval_41__1", "python_file": "HumanEval_41__1/main.py", "input_file": "HumanEval_41__1/input.txt", "prime_paths_nodes": [["1", "6", "3"]], "prime_paths_statements": [["from typing import *\\ldef car_race_collision(n: int):...\\lcar_race_collision(8)\\l", "car_race_collision", "return n ** 2\\l"]], "prime_paths_linenumbers": [[1, 7, 5]], "covered_statements_linenumbers": [1, 4, 5, 7], "missing_statements_linenumbers": [], "covered_prime_paths_linenumbers": [[1, 7, 5]], "missing_prime_paths_linenumbers": [], "num_total_prime_paths": 1, "num_covered_paths": 1, "prime_path_coverage": 1.0, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_41__1_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_41__1_CFG.dot"}
{"humaneval_id": "HumanEval_49__0", "python_file": "HumanEval_49__0/main.py", "input_file": "HumanEval_49__0/input.txt", "prime_paths_nodes": [["6", "4", "7"], ["1", "10", "3", "4", "6"], ["1", "10", "3", "4", "7"]], "prime_paths_statements": [["ret = 2 * ret % p\\l", "for i in range(n):\\l", "return ret\\l"], ["from typing import *\\ldef modp(n: int, p: int):...\\lmodp(3, 11)\\l", "modp", "ret = 1\\l", "for i in range(n):\\l", "ret = 2 * ret % p\\l"], ["from typing import *\\ldef modp(n: int, p: int):...\\lmodp(3, 11)\\l", "modp", "ret = 1\\l", "for i in range(n):\\l", "return ret\\l"]], "prime_paths_linenumbers": [[7, 6, 8], [1, 10, 5, 6, 7], [1, 10, 5, 6, 8]], "covered_statements_linenumbers": [1, 4, 5, 6, 7, 8, 10], "missing_statements_linenumbers": [], "covered_prime_paths_linenumbers": [[7, 6, 8], [1, 10, 5, 6, 7], [1, 10, 5, 6, 8]], "missing_prime_paths_linenumbers": [], "num_total_prime_paths": 3, "num_covered_paths": 3, "prime_path_coverage": 1.0, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_49__0_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_49__0_CFG.dot"}
{"humaneval_id": "HumanEval_162__0", "python_file": "HumanEval_162__0/main.py", "input_file": "HumanEval_162__0/input.txt", "prime_paths_nodes": [["1", "7", "3", "4"]], "prime_paths_statements": [["from typing import *\\ldef string_to_md5(text):...\\lstring_to_md5('')\\l", "string_to_md5", "import hashlib\\l", "return hashlib.md5(text.encode('ascii')).hexdigest() if text else None\\l"]], "prime_paths_linenumbers": [[1, 8, 5, 6]], "covered_statements_linenumbers": [1, 4, 5, 6, 8], "missing_statements_linenumbers": [], "covered_prime_paths_linenumbers": [[1, 8, 5, 6]], "missing_prime_paths_linenumbers": [], "num_total_prime_paths": 1, "num_covered_paths": 1, "prime_path_coverage": 1.0, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_162__0_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_162__0_CFG.dot"}
{"humaneval_id": "HumanEval_148__1", "python_file": "HumanEval_148__1/main.py", "input_file": "HumanEval_148__1/input.txt", "prime_paths_nodes": [["1", "17", "3", "4", "5"], ["1", "17", "3", "4", "6", "10", "11"], ["1", "17", "3", "4", "6", "10", "13"]], "prime_paths_statements": [["from typing import *\\ldef bf(planet1, planet2):...\\lbf('Mercury', 'Uranus')\\l", "bf", "planet_names = ('Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\\l    'Uranus', 'Neptune')\\l", "if planet1 not in planet_names or planet2 not in planet_names or planet1 == planet2:\\l", "return ()\\l"], ["from typing import *\\ldef bf(planet1, planet2):...\\lbf('Mercury', 'Uranus')\\l", "bf", "planet_names = ('Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\\l    'Uranus', 'Neptune')\\l", "if planet1 not in planet_names or planet2 not in planet_names or planet1 == planet2:\\l", "planet1_index = planet_names.index(planet1)\\lplanet2_index = planet_names.index(planet2)\\l", "if planet1_index < planet2_index:\\l", "return planet_names[planet1_index + 1:planet2_index]\\l"], ["from typing import *\\ldef bf(planet1, planet2):...\\lbf('Mercury', 'Uranus')\\l", "bf", "planet_names = ('Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\\l    'Uranus', 'Neptune')\\l", "if planet1 not in planet_names or planet2 not in planet_names or planet1 == planet2:\\l", "planet1_index = planet_names.index(planet1)\\lplanet2_index = planet_names.index(planet2)\\l", "if planet1_index < planet2_index:\\l", "return planet_names[planet2_index + 1:planet1_index]\\l"]], "prime_paths_linenumbers": [[1, 23, 5, 14, 15], [1, 23, 5, 14, 16, 17, 18, 19], [1, 23, 5, 14, 16, 17, 18, 21]], "covered_statements_linenumbers": [1, 4, 5, 14, 16, 17, 18, 19, 23], "missing_statements_linenumbers": [15, 21], "covered_prime_paths_linenumbers": [[1, 23, 5, 14, 16, 17, 18, 19]], "missing_prime_paths_linenumbers": [[1, 23, 5, 14, 15], [1, 23, 5, 14, 16, 17, 18, 21]], "num_total_prime_paths": 3, "num_covered_paths": 1, "prime_path_coverage": 0.33, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_148__1_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_148__1_CFG.dot"}
{"humaneval_id": "HumanEval_161__0", "python_file": "HumanEval_161__0/main.py", "input_file": "HumanEval_161__0/input.txt", "prime_paths_nodes": [["6", "9", "10", "5", "7", "12", "13"], ["6", "10", "5", "7", "12", "13"], ["6", "9", "10", "5", "7", "12", "14", "15"], ["6", "10", "5", "7", "12", "14", "15"], ["6", "9", "10", "5", "7", "12", "14", "16"], ["6", "10", "5", "7", "12", "14", "16"], ["9", "10", "5", "6"], ["10", "5", "6", "9"], ["13", "12", "14", "15"], ["13", "12", "14", "16"], ["1", "20", "3", "5", "6", "9", "10"], ["1", "20", "3", "5", "6", "10"], ["1", "20", "3", "5", "7", "12", "13"], ["1", "20", "3", "5", "7", "12", "14", "15"], ["1", "20", "3", "5", "7", "12", "14", "16"]], "prime_paths_statements": [["if i.isalpha():\\l", "new_str[idx] = i.swapcase()\\lflg = 1\\l", "idx += 1\\l", "for i in s:\\l", "s = ''\\l", "for i in new_str:\\l", "s += i\\l"], ["if i.isalpha():\\l", "idx += 1\\l", "for i in s:\\l", "s = ''\\l", "for i in new_str:\\l", "s += i\\l"], ["if i.isalpha():\\l", "new_str[idx] = i.swapcase()\\lflg = 1\\l", "idx += 1\\l", "for i in s:\\l", "s = ''\\l", "for i in new_str:\\l", "if flg == 0:\\l", "return s[len(s)::-1]\\l"], ["if i.isalpha():\\l", "idx += 1\\l", "for i in s:\\l", "s = ''\\l", "for i in new_str:\\l", "if flg == 0:\\l", "return s[len(s)::-1]\\l"], ["if i.isalpha():\\l", "new_str[idx] = i.swapcase()\\lflg = 1\\l", "idx += 1\\l", "for i in s:\\l", "s = ''\\l", "for i in new_str:\\l", "if flg == 0:\\l", "return s\\l"], ["if i.isalpha():\\l", "idx += 1\\l", "for i in s:\\l", "s = ''\\l", "for i in new_str:\\l", "if flg == 0:\\l", "return s\\l"], ["new_str[idx] = i.swapcase()\\lflg = 1\\l", "idx += 1\\l", "for i in s:\\l", "if i.isalpha():\\l"], ["idx += 1\\l", "for i in s:\\l", "if i.isalpha():\\l", "new_str[idx] = i.swapcase()\\lflg = 1\\l"], ["s += i\\l", "for i in new_str:\\l", "if flg == 0:\\l", "return s[len(s)::-1]\\l"], ["s += i\\l", "for i in new_str:\\l", "if flg == 0:\\l", "return s\\l"], ["from typing import *\\ldef solve(s):...\\lsolve('#a@C')\\l", "solve", "flg = 0\\lidx = 0\\lnew_str = list(s)\\l", "for i in s:\\l", "if i.isalpha():\\l", "new_str[idx] = i.swapcase()\\lflg = 1\\l", "idx += 1\\l"], ["from typing import *\\ldef solve(s):...\\lsolve('#a@C')\\l", "solve", "flg = 0\\lidx = 0\\lnew_str = list(s)\\l", "for i in s:\\l", "if i.isalpha():\\l", "idx += 1\\l"], ["from typing import *\\ldef solve(s):...\\lsolve('#a@C')\\l", "solve", "flg = 0\\lidx = 0\\lnew_str = list(s)\\l", "for i in s:\\l", "s = ''\\l", "for i in new_str:\\l", "s += i\\l"], ["from typing import *\\ldef solve(s):...\\lsolve('#a@C')\\l", "solve", "flg = 0\\lidx = 0\\lnew_str = list(s)\\l", "for i in s:\\l", "s = ''\\l", "for i in new_str:\\l", "if flg == 0:\\l", "return s[len(s)::-1]\\l"], ["from typing import *\\ldef solve(s):...\\lsolve('#a@C')\\l", "solve", "flg = 0\\lidx = 0\\lnew_str = list(s)\\l", "for i in s:\\l", "s = ''\\l", "for i in new_str:\\l", "if flg == 0:\\l", "return s\\l"]], "prime_paths_linenumbers": [[9, 10, 11, 12, 8, 13, 14, 15], [9, 12, 8, 13, 14, 15], [9, 10, 11, 12, 8, 13, 14, 16, 17], [9, 12, 8, 13, 14, 16, 17], [9, 10, 11, 12, 8, 13, 14, 16, 18], [9, 12, 8, 13, 14, 16, 18], [10, 11, 12, 8, 9], [12, 8, 9, 10, 11], [15, 14, 16, 17], [15, 14, 16, 18], [1, 20, 5, 6, 7, 8, 9, 10, 11, 12], [1, 20, 5, 6, 7, 8, 9, 12], [1, 20, 5, 6, 7, 8, 13, 14, 15], [1, 20, 5, 6, 7, 8, 13, 14, 16, 17], [1, 20, 5, 6, 7, 8, 13, 14, 16, 18]], "covered_statements_linenumbers": [1, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 20], "missing_statements_linenumbers": [17], "covered_prime_paths_linenumbers": [[9, 10, 11, 12, 8, 13, 14, 15], [9, 12, 8, 13, 14, 15], [9, 10, 11, 12, 8, 13, 14, 16, 18], [9, 12, 8, 13, 14, 16, 18], [10, 11, 12, 8, 9], [12, 8, 9, 10, 11], [15, 14, 16, 18], [1, 20, 5, 6, 7, 8, 9, 10, 11, 12], [1, 20, 5, 6, 7, 8, 9, 12], [1, 20, 5, 6, 7, 8, 13, 14, 15], [1, 20, 5, 6, 7, 8, 13, 14, 16, 18]], "missing_prime_paths_linenumbers": [[9, 10, 11, 12, 8, 13, 14, 16, 17], [9, 12, 8, 13, 14, 16, 17], [15, 14, 16, 17], [1, 20, 5, 6, 7, 8, 13, 14, 16, 17]], "num_total_prime_paths": 15, "num_covered_paths": 11, "prime_path_coverage": 0.73, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_161__0_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_161__0_CFG.dot"}
{"humaneval_id": "HumanEval_127__1", "python_file": "HumanEval_127__1/main.py", "input_file": "HumanEval_127__1/input.txt", "prime_paths_nodes": [["5", "6"], ["5", "7", "9"], ["5", "7", "10", "14"], ["5", "7", "10", "13", "15"], ["13", "10", "14"], ["1", "28", "3", "22", "23"], ["1", "28", "3", "22", "24"]], "prime_paths_statements": [["if num == 1 or num == 0:\\l", "return False\\l"], ["if num == 1 or num == 0:\\l", "if num == 2:\\l", "return True\\l"], ["if num == 1 or num == 0:\\l", "if num == 2:\\l", "for i in range(2, num):\\l", "return True\\l"], ["if num == 1 or num == 0:\\l", "if num == 2:\\l", "for i in range(2, num):\\l", "if num % i == 0:\\l", "return False\\l"], ["if num % i == 0:\\l", "for i in range(2, num):\\l", "return True\\l"], ["from typing import *\\ldef intersection(interval1, interval2):...\\lintersection([-1, 1], [0, 4])\\l", "intersection", "def is_prime(num):...\\ll = max(interval1[0], interval2[0])\\lr = min(interval1[1], interval2[1])\\llength = r - l\\l", "if length > 0 and is_prime(length):\\l", "return 'YES'\\l"], ["from typing import *\\ldef intersection(interval1, interval2):...\\lintersection([-1, 1], [0, 4])\\l", "intersection", "def is_prime(num):...\\ll = max(interval1[0], interval2[0])\\lr = min(interval1[1], interval2[1])\\llength = r - l\\l", "if length > 0 and is_prime(length):\\l", "return 'NO'\\l"]], "prime_paths_linenumbers": [[6, 7], [6, 8, 9], [6, 8, 10, 13], [6, 8, 10, 11, 12], [11, 10, 13], [1, 22, 5, 15, 16, 17, 18, 19], [1, 22, 5, 15, 16, 17, 18, 20]], "covered_statements_linenumbers": [1, 4, 5, 6, 7, 15, 16, 17, 18, 20, 22], "missing_statements_linenumbers": [8, 9, 10, 11, 12, 13, 19], "covered_prime_paths_linenumbers": [[6, 7], [1, 22, 5, 15, 16, 17, 18, 20]], "missing_prime_paths_linenumbers": [[6, 8, 9], [6, 8, 10, 13], [6, 8, 10, 11, 12], [11, 10, 13], [1, 22, 5, 15, 16, 17, 18, 19]], "num_total_prime_paths": 7, "num_covered_paths": 2, "prime_path_coverage": 0.29, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_127__1_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_127__1_CFG.dot"}
{"humaneval_id": "HumanEval_97__0", "python_file": "HumanEval_97__0/main.py", "input_file": "HumanEval_97__0/input.txt", "prime_paths_nodes": [["1", "6", "3"]], "prime_paths_statements": [["from typing import *\\ldef multiply(a, b):...\\lmultiply(2020, 1851)\\l", "multiply", "return abs(a % 10) * abs(b % 10)\\l"]], "prime_paths_linenumbers": [[1, 7, 5]], "covered_statements_linenumbers": [1, 4, 5, 7], "missing_statements_linenumbers": [], "covered_prime_paths_linenumbers": [[1, 7, 5]], "missing_prime_paths_linenumbers": [], "num_total_prime_paths": 1, "num_covered_paths": 1, "prime_path_coverage": 1.0, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_97__0_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_97__0_CFG.dot"}
{"humaneval_id": "HumanEval_145__0", "python_file": "HumanEval_145__0/main.py", "input_file": "HumanEval_145__0/input.txt", "prime_paths_nodes": [["5", "6", "7", "8", "11"], ["5", "6", "8", "11"], ["1", "17", "3", "14"]], "prime_paths_statements": [["neg = 1\\l", "if n < 0:\\l", "n, neg = -1 * n, -1\\l", "n = [int(i) for i in str(n)]\\ln[0] = n[0] * neg\\l", "return sum(n)\\l"], ["neg = 1\\l", "if n < 0:\\l", "n = [int(i) for i in str(n)]\\ln[0] = n[0] * neg\\l", "return sum(n)\\l"], ["from typing import *\\ldef order_by_points(nums):...\\lorder_by_points([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, \\l    0, 46])\\l", "order_by_points", "def digits_sum(n):...\\l", "return sorted(nums, key=digits_sum)\\l"]], "prime_paths_linenumbers": [[6, 7, 8, 9, 10, 11], [6, 7, 9, 10, 11], [1, 14, 5, 12]], "covered_statements_linenumbers": [1, 4, 5, 6, 7, 9, 10, 11, 12, 14], "missing_statements_linenumbers": [8], "covered_prime_paths_linenumbers": [[6, 7, 9, 10, 11], [1, 14, 5, 12]], "missing_prime_paths_linenumbers": [[6, 7, 8, 9, 10, 11]], "num_total_prime_paths": 3, "num_covered_paths": 2, "prime_path_coverage": 0.67, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_145__0_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_145__0_CFG.dot"}
{"humaneval_id": "HumanEval_76__0", "python_file": "HumanEval_76__0/main.py", "input_file": "HumanEval_76__0/input.txt", "prime_paths_nodes": [["8", "7", "9"], ["1", "12", "3", "4"], ["1", "12", "3", "5", "7", "8"], ["1", "12", "3", "5", "7", "9"]], "prime_paths_statements": [["power = power * n\\l", "while power < x:\\l", "return power == x\\l"], ["from typing import *\\ldef is_simple_power(x, n):...\\lis_simple_power(1, 1)\\l", "is_simple_power", "if n == 1:\\l", "return x == 1\\l"], ["from typing import *\\ldef is_simple_power(x, n):...\\lis_simple_power(1, 1)\\l", "is_simple_power", "if n == 1:\\l", "power = 1\\l", "while power < x:\\l", "power = power * n\\l"], ["from typing import *\\ldef is_simple_power(x, n):...\\lis_simple_power(1, 1)\\l", "is_simple_power", "if n == 1:\\l", "power = 1\\l", "while power < x:\\l", "return power == x\\l"]], "prime_paths_linenumbers": [[9, 8, 10], [1, 12, 5, 6], [1, 12, 5, 7, 8, 9], [1, 12, 5, 7, 8, 10]], "covered_statements_linenumbers": [1, 4, 5, 6, 12], "missing_statements_linenumbers": [7, 8, 9, 10], "covered_prime_paths_linenumbers": [[1, 12, 5, 6]], "missing_prime_paths_linenumbers": [[9, 8, 10], [1, 12, 5, 7, 8, 9], [1, 12, 5, 7, 8, 10]], "num_total_prime_paths": 4, "num_covered_paths": 1, "prime_path_coverage": 0.25, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_76__0_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_76__0_CFG.dot"}
{"humaneval_id": "HumanEval_52", "python_file": "HumanEval_52/main.py", "input_file": "HumanEval_52/input.txt", "prime_paths_nodes": [["4", "3", "5"], ["1", "11", "3", "5"], ["1", "11", "3", "4", "6"]], "prime_paths_statements": [["if e >= t:\\l", "for e in l:\\l", "return True\\l"], ["from typing import *\\ldef below_threshold(l: list, t: int):...\\lbelow_threshold([1, 20, 4, 10], 21)\\l", "below_threshold", "for e in l:\\l", "return True\\l"], ["from typing import *\\ldef below_threshold(l: list, t: int):...\\lbelow_threshold([1, 20, 4, 10], 21)\\l", "below_threshold", "for e in l:\\l", "if e >= t:\\l", "return False\\l"]], "prime_paths_linenumbers": [[4, 3, 6], [1, 8, 3, 6], [1, 8, 3, 4, 5]], "covered_statements_linenumbers": [1, 2, 3, 4, 6, 8], "missing_statements_linenumbers": [5], "covered_prime_paths_linenumbers": [[4, 3, 6], [1, 8, 3, 6]], "missing_prime_paths_linenumbers": [[1, 8, 3, 4, 5]], "num_total_prime_paths": 3, "num_covered_paths": 2, "prime_path_coverage": 0.67, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_52_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_52_CFG.dot"}
{"humaneval_id": "HumanEval_108__1", "python_file": "HumanEval_108__1/main.py", "input_file": "HumanEval_108__1/input.txt", "prime_paths_nodes": [["5", "6", "7", "8", "11"], ["5", "6", "8", "11"], ["1", "17", "3", "14"]], "prime_paths_statements": [["neg = 1\\l", "if n < 0:\\l", "n, neg = -1 * n, -1\\l", "n = [int(i) for i in str(n)]\\ln[0] = n[0] * neg\\l", "return sum(n)\\l"], ["neg = 1\\l", "if n < 0:\\l", "n = [int(i) for i in str(n)]\\ln[0] = n[0] * neg\\l", "return sum(n)\\l"], ["from typing import *\\ldef count_nums(arr):...\\lcount_nums([1, 6, 9, -6, 0, 1, 5])\\l", "count_nums", "def digits_sum(n):...\\l", "return len(list(filter(lambda x: x > 0, [digits_sum(i) for i in arr])))\\l"]], "prime_paths_linenumbers": [[6, 7, 8, 9, 10, 11], [6, 7, 9, 10, 11], [1, 14, 5, 12]], "covered_statements_linenumbers": [1, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14], "missing_statements_linenumbers": [], "covered_prime_paths_linenumbers": [[6, 7, 8, 9, 10, 11], [6, 7, 9, 10, 11], [1, 14, 5, 12]], "missing_prime_paths_linenumbers": [], "num_total_prime_paths": 3, "num_covered_paths": 3, "prime_path_coverage": 1.0, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_108__1_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_108__1_CFG.dot"}
{"humaneval_id": "HumanEval_104__1", "python_file": "HumanEval_104__1/main.py", "input_file": "HumanEval_104__1/input.txt", "prime_paths_nodes": [["5", "4", "6"], ["5", "10", "4", "6"], ["10", "4", "5"], ["1", "15", "3", "4", "6"], ["1", "15", "3", "4", "5", "10"]], "prime_paths_statements": [["if all(int(c) % 2 == 1 for c in str(i)):\\l", "for i in x:\\l", "return sorted(odd_digit_elements)\\l"], ["if all(int(c) % 2 == 1 for c in str(i)):\\l", "odd_digit_elements.append(i)\\l", "for i in x:\\l", "return sorted(odd_digit_elements)\\l"], ["odd_digit_elements.append(i)\\l", "for i in x:\\l", "if all(int(c) % 2 == 1 for c in str(i)):\\l"], ["from typing import *\\ldef unique_digits(x):...\\lunique_digits([12345, 2033, 111, 151])\\l", "unique_digits", "odd_digit_elements = []\\l", "for i in x:\\l", "return sorted(odd_digit_elements)\\l"], ["from typing import *\\ldef unique_digits(x):...\\lunique_digits([12345, 2033, 111, 151])\\l", "unique_digits", "odd_digit_elements = []\\l", "for i in x:\\l", "if all(int(c) % 2 == 1 for c in str(i)):\\l", "odd_digit_elements.append(i)\\l"]], "prime_paths_linenumbers": [[7, 6, 9], [7, 8, 6, 9], [8, 6, 7], [1, 11, 5, 6, 9], [1, 11, 5, 6, 7, 8]], "covered_statements_linenumbers": [1, 4, 5, 6, 7, 8, 9, 11], "missing_statements_linenumbers": [], "covered_prime_paths_linenumbers": [[7, 6, 9], [7, 8, 6, 9], [8, 6, 7], [1, 11, 5, 6, 9], [1, 11, 5, 6, 7, 8]], "missing_prime_paths_linenumbers": [], "num_total_prime_paths": 5, "num_covered_paths": 5, "prime_path_coverage": 1.0, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_104__1_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_104__1_CFG.dot"}
{"humaneval_id": "HumanEval_89__1", "python_file": "HumanEval_89__1/main.py", "input_file": "HumanEval_89__1/input.txt", "prime_paths_nodes": [["5", "7", "4", "6"], ["5", "9", "4", "6"], ["7", "4", "5", "9"], ["9", "4", "5", "7"], ["1", "13", "3", "4", "6"], ["1", "13", "3", "4", "5", "7"], ["1", "13", "3", "4", "5", "9"]], "prime_paths_statements": [["if c in d:\\l", "out += d[(d.index(c) + 2 * 2) % 26]\\l", "for c in s:\\l", "return out\\l"], ["if c in d:\\l", "out += c\\l", "for c in s:\\l", "return out\\l"], ["out += d[(d.index(c) + 2 * 2) % 26]\\l", "for c in s:\\l", "if c in d:\\l", "out += c\\l"], ["out += c\\l", "for c in s:\\l", "if c in d:\\l", "out += d[(d.index(c) + 2 * 2) % 26]\\l"], ["from typing import *\\ldef encrypt(s):...\\lencrypt('asdfghjkl')\\l", "encrypt", "d = 'abcdefghijklmnopqrst...'\\lout = ''\\l", "for c in s:\\l", "return out\\l"], ["from typing import *\\ldef encrypt(s):...\\lencrypt('asdfghjkl')\\l", "encrypt", "d = 'abcdefghijklmnopqrst...'\\lout = ''\\l", "for c in s:\\l", "if c in d:\\l", "out += d[(d.index(c) + 2 * 2) % 26]\\l"], ["from typing import *\\ldef encrypt(s):...\\lencrypt('asdfghjkl')\\l", "encrypt", "d = 'abcdefghijklmnopqrst...'\\lout = ''\\l", "for c in s:\\l", "if c in d:\\l", "out += c\\l"]], "prime_paths_linenumbers": [[8, 9, 7, 12], [8, 11, 7, 12], [9, 7, 8, 11], [11, 7, 8, 9], [1, 14, 5, 6, 7, 12], [1, 14, 5, 6, 7, 8, 9], [1, 14, 5, 6, 7, 8, 11]], "covered_statements_linenumbers": [1, 4, 5, 6, 7, 8, 9, 12, 14], "missing_statements_linenumbers": [11], "covered_prime_paths_linenumbers": [[8, 9, 7, 12], [1, 14, 5, 6, 7, 12], [1, 14, 5, 6, 7, 8, 9]], "missing_prime_paths_linenumbers": [[8, 11, 7, 12], [9, 7, 8, 11], [11, 7, 8, 9], [1, 14, 5, 6, 7, 8, 11]], "num_total_prime_paths": 7, "num_covered_paths": 3, "prime_path_coverage": 0.43, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_89__1_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_89__1_CFG.dot"}
{"humaneval_id": "HumanEval_64", "python_file": "HumanEval_64/main.py", "input_file": "HumanEval_64/input.txt", "prime_paths_nodes": [["1", "10", "3", "5", "6", "7"], ["1", "10", "3", "5", "7"]], "prime_paths_statements": [["from typing import *\\ldef vowels_count(s):...\\lvowels_count('abcde')\\l", "vowels_count", "vowels = 'aeiouAEIOU'\\ln_vowels = sum(c in vowels for c in s)\\l", "if s[-1] == 'y' or s[-1] == 'Y':\\l", "n_vowels += 1\\l", "return n_vowels\\l"], ["from typing import *\\ldef vowels_count(s):...\\lvowels_count('abcde')\\l", "vowels_count", "vowels = 'aeiouAEIOU'\\ln_vowels = sum(c in vowels for c in s)\\l", "if s[-1] == 'y' or s[-1] == 'Y':\\l", "return n_vowels\\l"]], "prime_paths_linenumbers": [[1, 9, 3, 4, 5, 6, 7], [1, 9, 3, 4, 5, 7]], "covered_statements_linenumbers": [1, 2, 3, 4, 5, 7, 9], "missing_statements_linenumbers": [6], "covered_prime_paths_linenumbers": [[1, 9, 3, 4, 5, 7]], "missing_prime_paths_linenumbers": [[1, 9, 3, 4, 5, 6, 7]], "num_total_prime_paths": 2, "num_covered_paths": 1, "prime_path_coverage": 0.5, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_64_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_64_CFG.dot"}
{"humaneval_id": "HumanEval_152__1", "python_file": "HumanEval_152__1/main.py", "input_file": "HumanEval_152__1/input.txt", "prime_paths_nodes": [["1", "6", "3"]], "prime_paths_statements": [["from typing import *\\ldef compare(game, guess):...\\lcompare([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0])\\l", "compare", "return [abs(x - y) for x, y in zip(game, guess)]\\l"]], "prime_paths_linenumbers": [[1, 7, 5]], "covered_statements_linenumbers": [1, 4, 5, 7], "missing_statements_linenumbers": [], "covered_prime_paths_linenumbers": [[1, 7, 5]], "missing_prime_paths_linenumbers": [], "num_total_prime_paths": 1, "num_covered_paths": 1, "prime_path_coverage": 1.0, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_152__1_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_152__1_CFG.dot"}
{"humaneval_id": "HumanEval_3__0", "python_file": "HumanEval_3__0/main.py", "input_file": "HumanEval_3__0/input.txt", "prime_paths_nodes": [["5", "7", "4", "6"], ["7", "4", "5"], ["1", "13", "3", "4", "6"], ["1", "13", "3", "4", "5", "7", "8"]], "prime_paths_statements": [["balance += op\\l", "if balance < 0:\\l", "for op in operations:\\l", "return False\\l"], ["if balance < 0:\\l", "for op in operations:\\l", "balance += op\\l"], ["from typing import *\\ldef below_zero(operations: List[int]) ->bool:...\\lbelow_zero([1, 2, -4, 5, 6])\\l", "below_zero", "balance = 0\\l", "for op in operations:\\l", "return False\\l"], ["from typing import *\\ldef below_zero(operations: List[int]) ->bool:...\\lbelow_zero([1, 2, -4, 5, 6])\\l", "below_zero", "balance = 0\\l", "for op in operations:\\l", "balance += op\\l", "if balance < 0:\\l", "return True\\l"]], "prime_paths_linenumbers": [[8, 9, 7, 12], [9, 7, 8], [1, 14, 5, 7, 12], [1, 14, 5, 7, 8, 9, 10]], "covered_statements_linenumbers": [1, 4, 5, 7, 8, 9, 10, 14], "missing_statements_linenumbers": [12], "covered_prime_paths_linenumbers": [[9, 7, 8], [1, 14, 5, 7, 8, 9, 10]], "missing_prime_paths_linenumbers": [[8, 9, 7, 12], [1, 14, 5, 7, 12]], "num_total_prime_paths": 4, "num_covered_paths": 2, "prime_path_coverage": 0.5, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_3__0_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_3__0_CFG.dot"}
{"humaneval_id": "HumanEval_103__0", "python_file": "HumanEval_103__0/main.py", "input_file": "HumanEval_103__0/input.txt", "prime_paths_nodes": [["9", "7", "10"], ["1", "13", "3", "4"], ["1", "13", "3", "5", "7", "9"], ["1", "13", "3", "5", "7", "10"]], "prime_paths_statements": [["summation += i\\l", "for i in range(n, m + 1):\\l", "return bin(round(summation / (m - n + 1)))\\l"], ["from typing import *\\ldef rounded_avg(n, m):...\\lrounded_avg(560, 851)\\l", "rounded_avg", "if m < n:\\l", "return -1\\l"], ["from typing import *\\ldef rounded_avg(n, m):...\\lrounded_avg(560, 851)\\l", "rounded_avg", "if m < n:\\l", "summation = 0\\l", "for i in range(n, m + 1):\\l", "summation += i\\l"], ["from typing import *\\ldef rounded_avg(n, m):...\\lrounded_avg(560, 851)\\l", "rounded_avg", "if m < n:\\l", "summation = 0\\l", "for i in range(n, m + 1):\\l", "return bin(round(summation / (m - n + 1)))\\l"]], "prime_paths_linenumbers": [[9, 8, 10], [1, 12, 5, 6], [1, 12, 5, 7, 8, 9], [1, 12, 5, 7, 8, 10]], "covered_statements_linenumbers": [1, 4, 5, 7, 8, 9, 10, 12], "missing_statements_linenumbers": [6], "covered_prime_paths_linenumbers": [[9, 8, 10], [1, 12, 5, 7, 8, 9], [1, 12, 5, 7, 8, 10]], "missing_prime_paths_linenumbers": [[1, 12, 5, 6]], "num_total_prime_paths": 4, "num_covered_paths": 3, "prime_path_coverage": 0.75, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_103__0_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_103__0_CFG.dot"}
{"humaneval_id": "HumanEval_12__1", "python_file": "HumanEval_12__1/main.py", "input_file": "HumanEval_12__1/input.txt", "prime_paths_nodes": [["10", "9"], ["1", "17", "3", "4"], ["1", "17", "3", "5", "9", "10", "13"]], "prime_paths_statements": [["if len(s) == maxlen:\\l", "for s in strings:\\l"], ["from typing import *\\ldef longest(strings: List[str]) ->Optional[str]:...\\llongest([])\\l", "longest", "if not strings:\\l", "return None\\l"], ["from typing import *\\ldef longest(strings: List[str]) ->Optional[str]:...\\llongest([])\\l", "longest", "if not strings:\\l", "maxlen = max(len(x) for x in strings)\\l", "for s in strings:\\l", "if len(s) == maxlen:\\l", "return s\\l"]], "prime_paths_linenumbers": [[10, 9], [1, 13, 5, 6], [1, 13, 5, 8, 9, 10, 11]], "covered_statements_linenumbers": [1, 4, 5, 6, 13], "missing_statements_linenumbers": [8, 9, 10, 11], "covered_prime_paths_linenumbers": [[1, 13, 5, 6]], "missing_prime_paths_linenumbers": [[10, 9], [1, 13, 5, 8, 9, 10, 11]], "num_total_prime_paths": 3, "num_covered_paths": 1, "prime_path_coverage": 0.33, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_12__1_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_12__1_CFG.dot"}
{"humaneval_id": "HumanEval_133__0", "python_file": "HumanEval_133__0/main.py", "input_file": "HumanEval_133__0/input.txt", "prime_paths_nodes": [["5", "4", "6"], ["1", "10", "3", "4", "5"], ["1", "10", "3", "4", "6"]], "prime_paths_statements": [["squared += math.ceil(i) ** 2\\l", "for i in lst:\\l", "return squared\\l"], ["from typing import *\\ldef sum_squares(lst):...\\lsum_squares([1, 3, 5, 7])\\l", "sum_squares", "import math\\lsquared = 0\\l", "for i in lst:\\l", "squared += math.ceil(i) ** 2\\l"], ["from typing import *\\ldef sum_squares(lst):...\\lsum_squares([1, 3, 5, 7])\\l", "sum_squares", "import math\\lsquared = 0\\l", "for i in lst:\\l", "return squared\\l"]], "prime_paths_linenumbers": [[8, 7, 9], [1, 11, 5, 6, 7, 8], [1, 11, 5, 6, 7, 9]], "covered_statements_linenumbers": [1, 4, 5, 6, 7, 8, 9, 11], "missing_statements_linenumbers": [], "covered_prime_paths_linenumbers": [[8, 7, 9], [1, 11, 5, 6, 7, 8], [1, 11, 5, 6, 7, 9]], "missing_prime_paths_linenumbers": [], "num_total_prime_paths": 3, "num_covered_paths": 3, "prime_path_coverage": 1.0, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_133__0_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_133__0_CFG.dot"}
{"humaneval_id": "HumanEval_138__1", "python_file": "HumanEval_138__1/main.py", "input_file": "HumanEval_138__1/input.txt", "prime_paths_nodes": [["1", "6", "3"]], "prime_paths_statements": [["from typing import *\\ldef is_equal_to_sum_even(n):...\\lis_equal_to_sum_even(6)\\l", "is_equal_to_sum_even", "return n % 2 == 0 and n >= 8\\l"]], "prime_paths_linenumbers": [[1, 7, 5]], "covered_statements_linenumbers": [1, 4, 5, 7], "missing_statements_linenumbers": [], "covered_prime_paths_linenumbers": [[1, 7, 5]], "missing_prime_paths_linenumbers": [], "num_total_prime_paths": 1, "num_covered_paths": 1, "prime_path_coverage": 1.0, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_138__1_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_138__1_CFG.dot"}
{"humaneval_id": "HumanEval_35", "python_file": "HumanEval_35/main.py", "input_file": "HumanEval_35/input.txt", "prime_paths_nodes": [["5", "4", "6"], ["5", "7", "4", "6"], ["7", "4", "5"], ["1", "11", "3", "4", "6"], ["1", "11", "3", "4", "5", "7"]], "prime_paths_statements": [["if e > m:\\l", "for e in l:\\l", "return m\\l"], ["if e > m:\\l", "m = e\\l", "for e in l:\\l", "return m\\l"], ["m = e\\l", "for e in l:\\l", "if e > m:\\l"], ["from typing import *\\ldef max_element(l: list):...\\lmax_element([1, 2, 3])\\l", "max_element", "m = l[0]\\l", "for e in l:\\l", "return m\\l"], ["from typing import *\\ldef max_element(l: list):...\\lmax_element([1, 2, 3])\\l", "max_element", "m = l[0]\\l", "for e in l:\\l", "if e > m:\\l", "m = e\\l"]], "prime_paths_linenumbers": [[5, 4, 7], [5, 6, 4, 7], [6, 4, 5], [1, 9, 3, 4, 7], [1, 9, 3, 4, 5, 6]], "covered_statements_linenumbers": [1, 2, 3, 4, 5, 6, 7, 9], "missing_statements_linenumbers": [], "covered_prime_paths_linenumbers": [[5, 4, 7], [5, 6, 4, 7], [6, 4, 5], [1, 9, 3, 4, 7], [1, 9, 3, 4, 5, 6]], "missing_prime_paths_linenumbers": [], "num_total_prime_paths": 5, "num_covered_paths": 5, "prime_path_coverage": 1.0, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_35_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_35_CFG.dot"}
{"humaneval_id": "HumanEval_64__0", "python_file": "HumanEval_64__0/main.py", "input_file": "HumanEval_64__0/input.txt", "prime_paths_nodes": [["1", "10", "3", "5", "6", "7"], ["1", "10", "3", "5", "7"]], "prime_paths_statements": [["from typing import *\\ldef vowels_count(s):...\\lvowels_count('bYe')\\l", "vowels_count", "vowels = 'aeiouAEIOU'\\ln_vowels = sum(c in vowels for c in s)\\l", "if s[-1] == 'y' or s[-1] == 'Y':\\l", "n_vowels += 1\\l", "return n_vowels\\l"], ["from typing import *\\ldef vowels_count(s):...\\lvowels_count('bYe')\\l", "vowels_count", "vowels = 'aeiouAEIOU'\\ln_vowels = sum(c in vowels for c in s)\\l", "if s[-1] == 'y' or s[-1] == 'Y':\\l", "return n_vowels\\l"]], "prime_paths_linenumbers": [[1, 11, 5, 6, 7, 8, 9], [1, 11, 5, 6, 7, 9]], "covered_statements_linenumbers": [1, 4, 5, 6, 7, 9, 11], "missing_statements_linenumbers": [8], "covered_prime_paths_linenumbers": [[1, 11, 5, 6, 7, 9]], "missing_prime_paths_linenumbers": [[1, 11, 5, 6, 7, 8, 9]], "num_total_prime_paths": 2, "num_covered_paths": 1, "prime_path_coverage": 0.5, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_64__0_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_64__0_CFG.dot"}
{"humaneval_id": "HumanEval_39", "python_file": "HumanEval_39/main.py", "input_file": "HumanEval_39/input.txt", "prime_paths_nodes": [["5", "6"], ["5", "7", "14"], ["5", "7", "13", "15"], ["13", "7", "14"], ["21", "24", "26", "27", "20"], ["21", "24", "27", "20"], ["24", "26", "27", "20", "21"], ["24", "27", "20", "21"], ["26", "27", "20", "21", "24"], ["27", "20", "21", "24", "26"], ["1", "32", "3", "20", "21", "24", "26", "27", "28"], ["1", "32", "3", "20", "21", "24", "27", "28"]], "prime_paths_statements": [["if p < 2:\\l", "return False\\l"], ["if p < 2:\\l", "for k in range(2, min(int(math.sqrt(p)) + 1, p - 1)):\\l", "return True\\l"], ["if p < 2:\\l", "for k in range(2, min(int(math.sqrt(p)) + 1, p - 1)):\\l", "if p % k == 0:\\l", "return False\\l"], ["if p % k == 0:\\l", "for k in range(2, min(int(math.sqrt(p)) + 1, p - 1)):\\l", "return True\\l"], ["f.append(f[-1] + f[-2])\\l", "if is_prime(f[-1]):\\l", "n -= 1\\l", "if n == 0:\\l", "while True:\\l"], ["f.append(f[-1] + f[-2])\\l", "if is_prime(f[-1]):\\l", "if n == 0:\\l", "while True:\\l"], ["if is_prime(f[-1]):\\l", "n -= 1\\l", "if n == 0:\\l", "while True:\\l", "f.append(f[-1] + f[-2])\\l"], ["if is_prime(f[-1]):\\l", "if n == 0:\\l", "while True:\\l", "f.append(f[-1] + f[-2])\\l"], ["n -= 1\\l", "if n == 0:\\l", "while True:\\l", "f.append(f[-1] + f[-2])\\l", "if is_prime(f[-1]):\\l"], ["if n == 0:\\l", "while True:\\l", "f.append(f[-1] + f[-2])\\l", "if is_prime(f[-1]):\\l", "n -= 1\\l"], ["from typing import *\\ldef prime_fib(n: int):...\\lprime_fib(1)\\l", "prime_fib", "import math\\ldef is_prime(p):...\\lf = [0, 1]\\l", "while True:\\l", "f.append(f[-1] + f[-2])\\l", "if is_prime(f[-1]):\\l", "n -= 1\\l", "if n == 0:\\l", "return f[-1]\\l"], ["from typing import *\\ldef prime_fib(n: int):...\\lprime_fib(1)\\l", "prime_fib", "import math\\ldef is_prime(p):...\\lf = [0, 1]\\l", "while True:\\l", "f.append(f[-1] + f[-2])\\l", "if is_prime(f[-1]):\\l", "if n == 0:\\l", "return f[-1]\\l"]], "prime_paths_linenumbers": [[6, 7], [6, 8, 11], [6, 8, 9, 10], [9, 8, 11], [14, 15, 16, 17, 13], [14, 15, 17, 13], [15, 16, 17, 13, 14], [15, 17, 13, 14], [16, 17, 13, 14, 15], [17, 13, 14, 15, 16], [1, 20, 3, 5, 12, 13, 14, 15, 16, 17, 18], [1, 20, 3, 5, 12, 13, 14, 15, 17, 18]], "covered_statements_linenumbers": [1, 2, 3, 5, 6, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 20], "missing_statements_linenumbers": [9, 10], "covered_prime_paths_linenumbers": [[6, 7], [6, 8, 11], [14, 15, 16, 17, 13], [14, 15, 17, 13], [15, 16, 17, 13, 14], [15, 17, 13, 14], [16, 17, 13, 14, 15], [17, 13, 14, 15, 16], [1, 20, 3, 5, 12, 13, 14, 15, 16, 17, 18], [1, 20, 3, 5, 12, 13, 14, 15, 17, 18]], "missing_prime_paths_linenumbers": [[6, 8, 9, 10], [9, 8, 11]], "num_total_prime_paths": 12, "num_covered_paths": 10, "prime_path_coverage": 0.83, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_39_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_39_CFG.dot"}
{"humaneval_id": "HumanEval_154__1", "python_file": "HumanEval_154__1/main.py", "input_file": "HumanEval_154__1/input.txt", "prime_paths_nodes": [["11", "8", "5", "9"], ["1", "18", "3", "5", "9"], ["1", "18", "3", "5", "8", "11", "13"]], "prime_paths_statements": [["if a[i:i + l] == pat[j:j + l]:\\l", "for j in range(l + 1):\\l", "for i in range(len(a) - l + 1):\\l", "return False\\l"], ["from typing import *\\ldef cycpattern_check(a, b):...\\lcycpattern_check('efef', 'fee')\\l", "cycpattern_check", "l = len(b)\\lpat = b + b\\l", "for i in range(len(a) - l + 1):\\l", "return False\\l"], ["from typing import *\\ldef cycpattern_check(a, b):...\\lcycpattern_check('efef', 'fee')\\l", "cycpattern_check", "l = len(b)\\lpat = b + b\\l", "for i in range(len(a) - l + 1):\\l", "for j in range(l + 1):\\l", "if a[i:i + l] == pat[j:j + l]:\\l", "return True\\l"]], "prime_paths_linenumbers": [[9, 8, 7, 11], [1, 13, 5, 6, 7, 11], [1, 13, 5, 6, 7, 8, 9, 10]], "covered_statements_linenumbers": [1, 4, 5, 6, 7, 8, 9, 10, 13], "missing_statements_linenumbers": [11], "covered_prime_paths_linenumbers": [[1, 13, 5, 6, 7, 8, 9, 10]], "missing_prime_paths_linenumbers": [[9, 8, 7, 11], [1, 13, 5, 6, 7, 11]], "num_total_prime_paths": 3, "num_covered_paths": 1, "prime_path_coverage": 0.33, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_154__1_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_154__1_CFG.dot"}
{"humaneval_id": "HumanEval_16", "python_file": "HumanEval_16/main.py", "input_file": "HumanEval_16/input.txt", "prime_paths_nodes": [["1", "6", "3"]], "prime_paths_statements": [["from typing import *\\ldef count_distinct_characters(string: str) ->int:...\\lcount_distinct_characters('abcde' + 'cade' + 'CADE')\\l", "count_distinct_characters", "return len(set(string.lower()))\\l"]], "prime_paths_linenumbers": [[1, 5, 3]], "covered_statements_linenumbers": [1, 2, 3, 5], "missing_statements_linenumbers": [], "covered_prime_paths_linenumbers": [[1, 5, 3]], "missing_prime_paths_linenumbers": [], "num_total_prime_paths": 1, "num_covered_paths": 1, "prime_path_coverage": 1.0, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_16_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_16_CFG.dot"}
{"humaneval_id": "HumanEval_149__1", "python_file": "HumanEval_149__1/main.py", "input_file": "HumanEval_149__1/input.txt", "prime_paths_nodes": [["6", "5", "7"], ["6", "9", "5", "7"], ["9", "5", "6"], ["1", "14", "3", "5", "7"], ["1", "14", "3", "5", "6", "9"]], "prime_paths_statements": [["if len(i) % 2 == 0:\\l", "for i in lst:\\l", "return sorted(new_lst, key=len)\\l"], ["if len(i) % 2 == 0:\\l", "new_lst.append(i)\\l", "for i in lst:\\l", "return sorted(new_lst, key=len)\\l"], ["new_lst.append(i)\\l", "for i in lst:\\l", "if len(i) % 2 == 0:\\l"], ["from typing import *\\ldef sorted_list_sum(lst):...\\lsorted_list_sum(['school', 'AI', 'asdf', 'b'])\\l", "sorted_list_sum", "lst.sort()\\lnew_lst = []\\l", "for i in lst:\\l", "return sorted(new_lst, key=len)\\l"], ["from typing import *\\ldef sorted_list_sum(lst):...\\lsorted_list_sum(['school', 'AI', 'asdf', 'b'])\\l", "sorted_list_sum", "lst.sort()\\lnew_lst = []\\l", "for i in lst:\\l", "if len(i) % 2 == 0:\\l", "new_lst.append(i)\\l"]], "prime_paths_linenumbers": [[8, 7, 10], [8, 9, 7, 10], [9, 7, 8], [1, 12, 5, 6, 7, 10], [1, 12, 5, 6, 7, 8, 9]], "covered_statements_linenumbers": [1, 4, 5, 6, 7, 8, 9, 10, 12], "missing_statements_linenumbers": [], "covered_prime_paths_linenumbers": [[8, 7, 10], [8, 9, 7, 10], [9, 7, 8], [1, 12, 5, 6, 7, 10], [1, 12, 5, 6, 7, 8, 9]], "missing_prime_paths_linenumbers": [], "num_total_prime_paths": 5, "num_covered_paths": 5, "prime_path_coverage": 1.0, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_149__1_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_149__1_CFG.dot"}
{"humaneval_id": "HumanEval_137__0", "python_file": "HumanEval_137__0/main.py", "input_file": "HumanEval_137__0/input.txt", "prime_paths_nodes": [["1", "20", "3", "4", "6", "7", "10", "11", "15"], ["1", "20", "3", "4", "6", "7", "11", "15"], ["1", "20", "3", "4", "7", "10", "11", "15"], ["1", "20", "3", "4", "7", "11", "15"], ["1", "20", "3", "4", "6", "7", "10", "11", "16"], ["1", "20", "3", "4", "6", "7", "11", "16"], ["1", "20", "3", "4", "7", "10", "11", "16"], ["1", "20", "3", "4", "7", "11", "16"]], "prime_paths_statements": [["from typing import *\\ldef compare_one(a, b):...\\lcompare_one(5, 6)\\l", "compare_one", "temp_a, temp_b = a, b\\l", "if isinstance(temp_a, str):\\l", "temp_a = temp_a.replace(',', '.')\\l", "if isinstance(temp_b, str):\\l", "temp_b = temp_b.replace(',', '.')\\l", "if float(temp_a) == float(temp_b):\\l", "return None\\l"], ["from typing import *\\ldef compare_one(a, b):...\\lcompare_one(5, 6)\\l", "compare_one", "temp_a, temp_b = a, b\\l", "if isinstance(temp_a, str):\\l", "temp_a = temp_a.replace(',', '.')\\l", "if isinstance(temp_b, str):\\l", "if float(temp_a) == float(temp_b):\\l", "return None\\l"], ["from typing import *\\ldef compare_one(a, b):...\\lcompare_one(5, 6)\\l", "compare_one", "temp_a, temp_b = a, b\\l", "if isinstance(temp_a, str):\\l", "if isinstance(temp_b, str):\\l", "temp_b = temp_b.replace(',', '.')\\l", "if float(temp_a) == float(temp_b):\\l", "return None\\l"], ["from typing import *\\ldef compare_one(a, b):...\\lcompare_one(5, 6)\\l", "compare_one", "temp_a, temp_b = a, b\\l", "if isinstance(temp_a, str):\\l", "if isinstance(temp_b, str):\\l", "if float(temp_a) == float(temp_b):\\l", "return None\\l"], ["from typing import *\\ldef compare_one(a, b):...\\lcompare_one(5, 6)\\l", "compare_one", "temp_a, temp_b = a, b\\l", "if isinstance(temp_a, str):\\l", "temp_a = temp_a.replace(',', '.')\\l", "if isinstance(temp_b, str):\\l", "temp_b = temp_b.replace(',', '.')\\l", "if float(temp_a) == float(temp_b):\\l", "return a if float(temp_a) > float(temp_b) else b\\l"], ["from typing import *\\ldef compare_one(a, b):...\\lcompare_one(5, 6)\\l", "compare_one", "temp_a, temp_b = a, b\\l", "if isinstance(temp_a, str):\\l", "temp_a = temp_a.replace(',', '.')\\l", "if isinstance(temp_b, str):\\l", "if float(temp_a) == float(temp_b):\\l", "return a if float(temp_a) > float(temp_b) else b\\l"], ["from typing import *\\ldef compare_one(a, b):...\\lcompare_one(5, 6)\\l", "compare_one", "temp_a, temp_b = a, b\\l", "if isinstance(temp_a, str):\\l", "if isinstance(temp_b, str):\\l", "temp_b = temp_b.replace(',', '.')\\l", "if float(temp_a) == float(temp_b):\\l", "return a if float(temp_a) > float(temp_b) else b\\l"], ["from typing import *\\ldef compare_one(a, b):...\\lcompare_one(5, 6)\\l", "compare_one", "temp_a, temp_b = a, b\\l", "if isinstance(temp_a, str):\\l", "if isinstance(temp_b, str):\\l", "if float(temp_a) == float(temp_b):\\l", "return a if float(temp_a) > float(temp_b) else b\\l"]], "prime_paths_linenumbers": [[1, 14, 5, 6, 7, 8, 9, 10, 11], [1, 14, 5, 6, 7, 8, 10, 11], [1, 14, 5, 6, 8, 9, 10, 11], [1, 14, 5, 6, 8, 10, 11], [1, 14, 5, 6, 7, 8, 9, 10, 12], [1, 14, 5, 6, 7, 8, 10, 12], [1, 14, 5, 6, 8, 9, 10, 12], [1, 14, 5, 6, 8, 10, 12]], "covered_statements_linenumbers": [1, 4, 5, 6, 8, 10, 12, 14], "missing_statements_linenumbers": [7, 9, 11], "covered_prime_paths_linenumbers": [[1, 14, 5, 6, 8, 10, 12]], "missing_prime_paths_linenumbers": [[1, 14, 5, 6, 7, 8, 9, 10, 11], [1, 14, 5, 6, 7, 8, 10, 11], [1, 14, 5, 6, 8, 9, 10, 11], [1, 14, 5, 6, 8, 10, 11], [1, 14, 5, 6, 7, 8, 9, 10, 12], [1, 14, 5, 6, 7, 8, 10, 12], [1, 14, 5, 6, 8, 9, 10, 12]], "num_total_prime_paths": 8, "num_covered_paths": 1, "prime_path_coverage": 0.12, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_137__0_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_137__0_CFG.dot"}
{"humaneval_id": "HumanEval_6__1", "python_file": "HumanEval_6__1/main.py", "input_file": "HumanEval_6__1/input.txt", "prime_paths_nodes": [["5", "6", "8"], ["5", "6", "7", "9"], ["5", "6", "7", "11"], ["7", "9", "6", "8"], ["7", "11", "6", "8"], ["9", "6", "7", "11"], ["11", "6", "7", "9"], ["1", "18", "3", "15"]], "prime_paths_statements": [["depth = 0\\lmax_depth = 0\\l", "for c in s:\\l", "return max_depth\\l"], ["depth = 0\\lmax_depth = 0\\l", "for c in s:\\l", "if c == '(':\\l", "depth += 1\\lmax_depth = max(depth, max_depth)\\l"], ["depth = 0\\lmax_depth = 0\\l", "for c in s:\\l", "if c == '(':\\l", "depth -= 1\\l"], ["if c == '(':\\l", "depth += 1\\lmax_depth = max(depth, max_depth)\\l", "for c in s:\\l", "return max_depth\\l"], ["if c == '(':\\l", "depth -= 1\\l", "for c in s:\\l", "return max_depth\\l"], ["depth += 1\\lmax_depth = max(depth, max_depth)\\l", "for c in s:\\l", "if c == '(':\\l", "depth -= 1\\l"], ["depth -= 1\\l", "for c in s:\\l", "if c == '(':\\l", "depth += 1\\lmax_depth = max(depth, max_depth)\\l"], ["from typing import *\\ldef parse_nested_parens(paren_string: str) ->List[int]:...\\lparse_nested_parens('(()(())((())))')\\l", "parse_nested_parens", "def parse_paren_group(s):...\\l", "return [parse_paren_group(x) for x in paren_string.split(' ') if x]\\l"]], "prime_paths_linenumbers": [[6, 7, 8, 15], [6, 7, 8, 9, 10, 11], [6, 7, 8, 9, 13], [9, 10, 11, 8, 15], [9, 13, 8, 15], [10, 11, 8, 9, 13], [13, 8, 9, 10, 11], [1, 19, 5, 17]], "covered_statements_linenumbers": [1, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19], "missing_statements_linenumbers": [], "covered_prime_paths_linenumbers": [[6, 7, 8, 15], [6, 7, 8, 9, 10, 11], [6, 7, 8, 9, 13], [9, 10, 11, 8, 15], [9, 13, 8, 15], [10, 11, 8, 9, 13], [13, 8, 9, 10, 11], [1, 19, 5, 17]], "missing_prime_paths_linenumbers": [], "num_total_prime_paths": 8, "num_covered_paths": 8, "prime_path_coverage": 1.0, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_6__1_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_6__1_CFG.dot"}
{"humaneval_id": "HumanEval_54", "python_file": "HumanEval_54/main.py", "input_file": "HumanEval_54/input.txt", "prime_paths_nodes": [["1", "6", "3"]], "prime_paths_statements": [["from typing import *\\ldef same_chars(s0: str, s1: str):...\\lsame_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\\l", "same_chars", "return set(s0) == set(s1)\\l"]], "prime_paths_linenumbers": [[1, 5, 3]], "covered_statements_linenumbers": [1, 2, 3, 5], "missing_statements_linenumbers": [], "covered_prime_paths_linenumbers": [[1, 5, 3]], "missing_prime_paths_linenumbers": [], "num_total_prime_paths": 1, "num_covered_paths": 1, "prime_path_coverage": 1.0, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_54_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_54_CFG.dot"}
{"humaneval_id": "HumanEval_152", "python_file": "HumanEval_152/main.py", "input_file": "HumanEval_152/input.txt", "prime_paths_nodes": [["1", "6", "3"]], "prime_paths_statements": [["from typing import *\\ldef compare(game, guess):...\\lcompare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\\l", "compare", "return [abs(x - y) for x, y in zip(game, guess)]\\l"]], "prime_paths_linenumbers": [[1, 5, 3]], "covered_statements_linenumbers": [1, 2, 3, 5], "missing_statements_linenumbers": [], "covered_prime_paths_linenumbers": [[1, 5, 3]], "missing_prime_paths_linenumbers": [], "num_total_prime_paths": 1, "num_covered_paths": 1, "prime_path_coverage": 1.0, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_152_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_152_CFG.dot"}
{"humaneval_id": "HumanEval_63__1", "python_file": "HumanEval_63__1/main.py", "input_file": "HumanEval_63__1/input.txt", "prime_paths_nodes": [["1", "15", "3", "4"], ["1", "15", "3", "5", "7"], ["1", "15", "3", "5", "8", "10"], ["1", "15", "3", "5", "8", "11"]], "prime_paths_statements": [["from typing import *\\ldef fibfib(n: int):...\\lfibfib(10)\\l", "fibfib", "if n == 0:\\l", "return 0\\l"], ["from typing import *\\ldef fibfib(n: int):...\\lfibfib(10)\\l", "fibfib", "if n == 0:\\l", "if n == 1:\\l", "return 0\\l"], ["from typing import *\\ldef fibfib(n: int):...\\lfibfib(10)\\l", "fibfib", "if n == 0:\\l", "if n == 1:\\l", "if n == 2:\\l", "return 1\\l"], ["from typing import *\\ldef fibfib(n: int):...\\lfibfib(10)\\l", "fibfib", "if n == 0:\\l", "if n == 1:\\l", "if n == 2:\\l", "return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\\l"]], "prime_paths_linenumbers": [[1, 13, 5, 6], [1, 13, 5, 7, 8], [1, 13, 5, 7, 9, 10], [1, 13, 5, 7, 9, 11]], "covered_statements_linenumbers": [1, 4, 5, 6, 7, 8, 9, 10, 11, 13], "missing_statements_linenumbers": [], "covered_prime_paths_linenumbers": [[1, 13, 5, 6], [1, 13, 5, 7, 8], [1, 13, 5, 7, 9, 10], [1, 13, 5, 7, 9, 11]], "missing_prime_paths_linenumbers": [], "num_total_prime_paths": 4, "num_covered_paths": 4, "prime_path_coverage": 1.0, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_63__1_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_63__1_CFG.dot"}
{"humaneval_id": "HumanEval_116__1", "python_file": "HumanEval_116__1/main.py", "input_file": "HumanEval_116__1/input.txt", "prime_paths_nodes": [["1", "6", "3"]], "prime_paths_statements": [["from typing import *\\ldef sort_array(arr):...\\lsort_array([])\\l", "sort_array", "return sorted(sorted(arr), key=lambda x: bin(x)[2:].count('1'))\\l"]], "prime_paths_linenumbers": [[1, 7, 5]], "covered_statements_linenumbers": [1, 4, 5, 7], "missing_statements_linenumbers": [], "covered_prime_paths_linenumbers": [[1, 7, 5]], "missing_prime_paths_linenumbers": [], "num_total_prime_paths": 1, "num_covered_paths": 1, "prime_path_coverage": 1.0, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_116__1_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_116__1_CFG.dot"}
{"humaneval_id": "HumanEval_150__0", "python_file": "HumanEval_150__0/main.py", "input_file": "HumanEval_150__0/input.txt", "prime_paths_nodes": [["8", "5"], ["1", "15", "3", "4"], ["1", "15", "3", "5", "8", "10"]], "prime_paths_statements": [["if n % i == 0:\\l", "for i in range(2, n):\\l"], ["from typing import *\\ldef x_or_y(n, x, y):...\\lx_or_y(3, 33, 5212)\\l", "x_or_y", "if n == 1:\\l", "return y\\l"], ["from typing import *\\ldef x_or_y(n, x, y):...\\lx_or_y(3, 33, 5212)\\l", "x_or_y", "if n == 1:\\l", "for i in range(2, n):\\l", "if n % i == 0:\\l", "return y\\l"]], "prime_paths_linenumbers": [[8, 7], [1, 14, 5, 6], [1, 14, 5, 7, 8, 9]], "covered_statements_linenumbers": [1, 4, 5, 7, 8, 12, 14], "missing_statements_linenumbers": [6, 9], "covered_prime_paths_linenumbers": [[8, 7]], "missing_prime_paths_linenumbers": [[1, 14, 5, 6], [1, 14, 5, 7, 8, 9]], "num_total_prime_paths": 3, "num_covered_paths": 1, "prime_path_coverage": 0.33, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_150__0_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_150__0_CFG.dot"}
{"humaneval_id": "HumanEval_85__1", "python_file": "HumanEval_85__1/main.py", "input_file": "HumanEval_85__1/input.txt", "prime_paths_nodes": [["1", "6", "3"]], "prime_paths_statements": [["from typing import *\\ldef add(lst):...\\ladd([4, 4, 6, 8])\\l", "add", "return sum([lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0])\\l"]], "prime_paths_linenumbers": [[1, 7, 5]], "covered_statements_linenumbers": [1, 4, 5, 7], "missing_statements_linenumbers": [], "covered_prime_paths_linenumbers": [[1, 7, 5]], "missing_prime_paths_linenumbers": [], "num_total_prime_paths": 1, "num_covered_paths": 1, "prime_path_coverage": 1.0, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_85__1_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_85__1_CFG.dot"}
{"humaneval_id": "HumanEval_141__1", "python_file": "HumanEval_141__1/main.py", "input_file": "HumanEval_141__1/input.txt", "prime_paths_nodes": [["1", "28", "3", "5", "7"], ["1", "28", "3", "5", "8", "10"], ["1", "28", "3", "5", "8", "11", "14"], ["1", "28", "3", "5", "8", "11", "15", "17"], ["1", "28", "3", "5", "8", "11", "15", "18", "22", "23"], ["1", "28", "3", "5", "8", "11", "15", "18", "22", "24"]], "prime_paths_statements": [["from typing import *\\ldef file_name_check(file_name):...\\lfile_name_check('@this1_is6_valid.exe...')\\l", "file_name_check", "suf = ['txt', 'exe', 'dll']\\llst = file_name.split(sep='.')\\l", "if len(lst) != 2:\\l", "return 'No'\\l"], ["from typing import *\\ldef file_name_check(file_name):...\\lfile_name_check('@this1_is6_valid.exe...')\\l", "file_name_check", "suf = ['txt', 'exe', 'dll']\\llst = file_name.split(sep='.')\\l", "if len(lst) != 2:\\l", "if not lst[1] in suf:\\l", "return 'No'\\l"], ["from typing import *\\ldef file_name_check(file_name):...\\lfile_name_check('@this1_is6_valid.exe...')\\l", "file_name_check", "suf = ['txt', 'exe', 'dll']\\llst = file_name.split(sep='.')\\l", "if len(lst) != 2:\\l", "if not lst[1] in suf:\\l", "if len(lst[0]) == 0:\\l", "return 'No'\\l"], ["from typing import *\\ldef file_name_check(file_name):...\\lfile_name_check('@this1_is6_valid.exe...')\\l", "file_name_check", "suf = ['txt', 'exe', 'dll']\\llst = file_name.split(sep='.')\\l", "if len(lst) != 2:\\l", "if not lst[1] in suf:\\l", "if len(lst[0]) == 0:\\l", "if not lst[0][0].isalpha():\\l", "return 'No'\\l"], ["from typing import *\\ldef file_name_check(file_name):...\\lfile_name_check('@this1_is6_valid.exe...')\\l", "file_name_check", "suf = ['txt', 'exe', 'dll']\\llst = file_name.split(sep='.')\\l", "if len(lst) != 2:\\l", "if not lst[1] in suf:\\l", "if len(lst[0]) == 0:\\l", "if not lst[0][0].isalpha():\\l", "t = len([x for x in lst[0] if x.isdigit()])\\l", "if t > 3:\\l", "return 'No'\\l"], ["from typing import *\\ldef file_name_check(file_name):...\\lfile_name_check('@this1_is6_valid.exe...')\\l", "file_name_check", "suf = ['txt', 'exe', 'dll']\\llst = file_name.split(sep='.')\\l", "if len(lst) != 2:\\l", "if not lst[1] in suf:\\l", "if len(lst[0]) == 0:\\l", "if not lst[0][0].isalpha():\\l", "t = len([x for x in lst[0] if x.isdigit()])\\l", "if t > 3:\\l", "return 'Yes'\\l"]], "prime_paths_linenumbers": [[1, 20, 5, 6, 7, 8], [1, 20, 5, 6, 7, 9, 10], [1, 20, 5, 6, 7, 9, 11, 12], [1, 20, 5, 6, 7, 9, 11, 13, 14], [1, 20, 5, 6, 7, 9, 11, 13, 15, 16, 17], [1, 20, 5, 6, 7, 9, 11, 13, 15, 16, 18]], "covered_statements_linenumbers": [1, 4, 5, 6, 7, 9, 11, 13, 14, 20], "missing_statements_linenumbers": [8, 10, 12, 15, 16, 17, 18], "covered_prime_paths_linenumbers": [[1, 20, 5, 6, 7, 9, 11, 13, 14]], "missing_prime_paths_linenumbers": [[1, 20, 5, 6, 7, 8], [1, 20, 5, 6, 7, 9, 10], [1, 20, 5, 6, 7, 9, 11, 12], [1, 20, 5, 6, 7, 9, 11, 13, 15, 16, 17], [1, 20, 5, 6, 7, 9, 11, 13, 15, 16, 18]], "num_total_prime_paths": 6, "num_covered_paths": 1, "prime_path_coverage": 0.17, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_141__1_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_141__1_CFG.dot"}
{"humaneval_id": "HumanEval_146", "python_file": "HumanEval_146/main.py", "input_file": "HumanEval_146/input.txt", "prime_paths_nodes": [["5", "4", "6"], ["5", "7", "10", "4", "6"], ["5", "7", "10", "11", "4", "6"], ["7", "10", "4", "5"], ["7", "10", "11", "4", "5"], ["10", "4", "5", "7"], ["10", "11", "4", "5", "7"], ["11", "4", "5", "7", "10"], ["1", "15", "3", "4", "6"], ["1", "15", "3", "4", "5", "7", "10", "11"]], "prime_paths_statements": [["if num > 10:\\l", "for num in nums:\\l", "return count\\l"], ["if num > 10:\\l", "odd_digits = 1, 3, 5, 7, 9\\lnumber_as_string = str(num)\\l", "if int(number_as_string[0]) in odd_digits and int(number_as_string[-1]\\l", "for num in nums:\\l", "return count\\l"], ["if num > 10:\\l", "odd_digits = 1, 3, 5, 7, 9\\lnumber_as_string = str(num)\\l", "if int(number_as_string[0]) in odd_digits and int(number_as_string[-1]\\l", "count += 1\\l", "for num in nums:\\l", "return count\\l"], ["odd_digits = 1, 3, 5, 7, 9\\lnumber_as_string = str(num)\\l", "if int(number_as_string[0]) in odd_digits and int(number_as_string[-1]\\l", "for num in nums:\\l", "if num > 10:\\l"], ["odd_digits = 1, 3, 5, 7, 9\\lnumber_as_string = str(num)\\l", "if int(number_as_string[0]) in odd_digits and int(number_as_string[-1]\\l", "count += 1\\l", "for num in nums:\\l", "if num > 10:\\l"], ["if int(number_as_string[0]) in odd_digits and int(number_as_string[-1]\\l", "for num in nums:\\l", "if num > 10:\\l", "odd_digits = 1, 3, 5, 7, 9\\lnumber_as_string = str(num)\\l"], ["if int(number_as_string[0]) in odd_digits and int(number_as_string[-1]\\l", "count += 1\\l", "for num in nums:\\l", "if num > 10:\\l", "odd_digits = 1, 3, 5, 7, 9\\lnumber_as_string = str(num)\\l"], ["count += 1\\l", "for num in nums:\\l", "if num > 10:\\l", "odd_digits = 1, 3, 5, 7, 9\\lnumber_as_string = str(num)\\l", "if int(number_as_string[0]) in odd_digits and int(number_as_string[-1]\\l"], ["from typing import *\\ldef specialFilter(nums):...\\lspecialFilter([5, -2, 1, -5])\\l", "specialFilter", "count = 0\\l", "for num in nums:\\l", "return count\\l"], ["from typing import *\\ldef specialFilter(nums):...\\lspecialFilter([5, -2, 1, -5])\\l", "specialFilter", "count = 0\\l", "for num in nums:\\l", "if num > 10:\\l", "odd_digits = 1, 3, 5, 7, 9\\lnumber_as_string = str(num)\\l", "if int(number_as_string[0]) in odd_digits and int(number_as_string[-1]\\l", "count += 1\\l"]], "prime_paths_linenumbers": [[6, 5, 12], [6, 7, 8, 9, 5, 12], [6, 7, 8, 9, 10, 5, 12], [7, 8, 9, 5, 6], [7, 8, 9, 10, 5, 6], [9, 5, 6, 7, 8], [9, 10, 5, 6, 7, 8], [10, 5, 6, 7, 8, 9], [1, 14, 4, 5, 12], [1, 14, 4, 5, 6, 7, 8, 9, 10]], "covered_statements_linenumbers": [1, 2, 4, 5, 6, 12, 14], "missing_statements_linenumbers": [7, 8, 9, 10], "covered_prime_paths_linenumbers": [[6, 5, 12], [1, 14, 4, 5, 12]], "missing_prime_paths_linenumbers": [[6, 7, 8, 9, 5, 12], [6, 7, 8, 9, 10, 5, 12], [7, 8, 9, 5, 6], [7, 8, 9, 10, 5, 6], [9, 5, 6, 7, 8], [9, 10, 5, 6, 7, 8], [10, 5, 6, 7, 8, 9], [1, 14, 4, 5, 6, 7, 8, 9, 10]], "num_total_prime_paths": 10, "num_covered_paths": 2, "prime_path_coverage": 0.2, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_146_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_146_CFG.dot"}
{"humaneval_id": "HumanEval_2", "python_file": "HumanEval_2/main.py", "input_file": "HumanEval_2/input.txt", "prime_paths_nodes": [["1", "6", "3"]], "prime_paths_statements": [["from typing import *\\ldef truncate_number(number: float) ->float:...\\ltruncate_number(3.5)\\l", "truncate_number", "return number % 1.0\\l"]], "prime_paths_linenumbers": [[1, 5, 3]], "covered_statements_linenumbers": [1, 2, 3, 5], "missing_statements_linenumbers": [], "covered_prime_paths_linenumbers": [[1, 5, 3]], "missing_prime_paths_linenumbers": [], "num_total_prime_paths": 1, "num_covered_paths": 1, "prime_path_coverage": 1.0, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_2_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_2_CFG.dot"}
{"humaneval_id": "HumanEval_131", "python_file": "HumanEval_131/main.py", "input_file": "HumanEval_131/input.txt", "prime_paths_nodes": [["6", "9", "4", "7", "12"], ["6", "9", "10", "4", "7", "12"], ["6", "9", "4", "7", "14"], ["6", "9", "10", "4", "7", "14"], ["9", "4", "6"], ["9", "10", "4", "6"], ["10", "4", "6", "9"], ["1", "18", "3", "4", "6", "9", "10"], ["1", "18", "3", "4", "7", "12"], ["1", "18", "3", "4", "7", "14"]], "prime_paths_statements": [["int_digit = int(digit)\\l", "if int_digit % 2 == 1:\\l", "for digit in str(n):\\l", "if odd_count == 0:\\l", "return 0\\l"], ["int_digit = int(digit)\\l", "if int_digit % 2 == 1:\\l", "product = product * int_digit\\lodd_count += 1\\l", "for digit in str(n):\\l", "if odd_count == 0:\\l", "return 0\\l"], ["int_digit = int(digit)\\l", "if int_digit % 2 == 1:\\l", "for digit in str(n):\\l", "if odd_count == 0:\\l", "return product\\l"], ["int_digit = int(digit)\\l", "if int_digit % 2 == 1:\\l", "product = product * int_digit\\lodd_count += 1\\l", "for digit in str(n):\\l", "if odd_count == 0:\\l", "return product\\l"], ["if int_digit % 2 == 1:\\l", "for digit in str(n):\\l", "int_digit = int(digit)\\l"], ["if int_digit % 2 == 1:\\l", "product = product * int_digit\\lodd_count += 1\\l", "for digit in str(n):\\l", "int_digit = int(digit)\\l"], ["product = product * int_digit\\lodd_count += 1\\l", "for digit in str(n):\\l", "int_digit = int(digit)\\l", "if int_digit % 2 == 1:\\l"], ["from typing import *\\ldef digits(n):...\\ldigits(5)\\l", "digits", "product = 1\\lodd_count = 0\\l", "for digit in str(n):\\l", "int_digit = int(digit)\\l", "if int_digit % 2 == 1:\\l", "product = product * int_digit\\lodd_count += 1\\l"], ["from typing import *\\ldef digits(n):...\\ldigits(5)\\l", "digits", "product = 1\\lodd_count = 0\\l", "for digit in str(n):\\l", "if odd_count == 0:\\l", "return 0\\l"], ["from typing import *\\ldef digits(n):...\\ldigits(5)\\l", "digits", "product = 1\\lodd_count = 0\\l", "for digit in str(n):\\l", "if odd_count == 0:\\l", "return product\\l"]], "prime_paths_linenumbers": [[6, 7, 5, 10, 11], [6, 7, 8, 9, 5, 10, 11], [6, 7, 5, 10, 13], [6, 7, 8, 9, 5, 10, 13], [7, 5, 6], [7, 8, 9, 5, 6], [8, 9, 5, 6, 7], [1, 15, 3, 4, 5, 6, 7, 8, 9], [1, 15, 3, 4, 5, 10, 11], [1, 15, 3, 4, 5, 10, 13]], "covered_statements_linenumbers": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 13, 15], "missing_statements_linenumbers": [11], "covered_prime_paths_linenumbers": [[6, 7, 5, 10, 13], [6, 7, 8, 9, 5, 10, 13], [7, 5, 6], [7, 8, 9, 5, 6], [8, 9, 5, 6, 7], [1, 15, 3, 4, 5, 6, 7, 8, 9], [1, 15, 3, 4, 5, 10, 13]], "missing_prime_paths_linenumbers": [[6, 7, 5, 10, 11], [6, 7, 8, 9, 5, 10, 11], [1, 15, 3, 4, 5, 10, 11]], "num_total_prime_paths": 10, "num_covered_paths": 7, "prime_path_coverage": 0.7, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_131_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_131_CFG.dot"}
{"humaneval_id": "HumanEval_82__0", "python_file": "HumanEval_82__0/main.py", "input_file": "HumanEval_82__0/input.txt", "prime_paths_nodes": [["10", "7", "11"], ["1", "17", "3", "5", "6"], ["1", "17", "3", "5", "7", "11"], ["1", "17", "3", "5", "7", "10", "12"]], "prime_paths_statements": [["if l % i == 0:\\l", "for i in range(2, l):\\l", "return True\\l"], ["from typing import *\\ldef prime_length(string):...\\lprime_length('Wow')\\l", "prime_length", "l = len(string)\\l", "if l == 0 or l == 1:\\l", "return False\\l"], ["from typing import *\\ldef prime_length(string):...\\lprime_length('Wow')\\l", "prime_length", "l = len(string)\\l", "if l == 0 or l == 1:\\l", "for i in range(2, l):\\l", "return True\\l"], ["from typing import *\\ldef prime_length(string):...\\lprime_length('Wow')\\l", "prime_length", "l = len(string)\\l", "if l == 0 or l == 1:\\l", "for i in range(2, l):\\l", "if l % i == 0:\\l", "return False\\l"]], "prime_paths_linenumbers": [[9, 8, 11], [1, 13, 5, 6, 7], [1, 13, 5, 6, 8, 11], [1, 13, 5, 6, 8, 9, 10]], "covered_statements_linenumbers": [1, 4, 5, 6, 8, 9, 11, 13], "missing_statements_linenumbers": [7, 10], "covered_prime_paths_linenumbers": [[9, 8, 11], [1, 13, 5, 6, 8, 11]], "missing_prime_paths_linenumbers": [[1, 13, 5, 6, 7], [1, 13, 5, 6, 8, 9, 10]], "num_total_prime_paths": 4, "num_covered_paths": 2, "prime_path_coverage": 0.5, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_82__0_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_82__0_CFG.dot"}
{"humaneval_id": "HumanEval_35__1", "python_file": "HumanEval_35__1/main.py", "input_file": "HumanEval_35__1/input.txt", "prime_paths_nodes": [["5", "4", "6"], ["5", "7", "4", "6"], ["7", "4", "5"], ["1", "11", "3", "4", "6"], ["1", "11", "3", "4", "5", "7"]], "prime_paths_statements": [["if e > m:\\l", "for e in l:\\l", "return m\\l"], ["if e > m:\\l", "m = e\\l", "for e in l:\\l", "return m\\l"], ["m = e\\l", "for e in l:\\l", "if e > m:\\l"], ["from typing import *\\ldef max_element(l: list):...\\lmax_element([3, 2, -3.5, 0])\\l", "max_element", "m = l[0]\\l", "for e in l:\\l", "return m\\l"], ["from typing import *\\ldef max_element(l: list):...\\lmax_element([3, 2, -3.5, 0])\\l", "max_element", "m = l[0]\\l", "for e in l:\\l", "if e > m:\\l", "m = e\\l"]], "prime_paths_linenumbers": [[7, 6, 9], [7, 8, 6, 9], [8, 6, 7], [1, 11, 5, 6, 9], [1, 11, 5, 6, 7, 8]], "covered_statements_linenumbers": [1, 4, 5, 6, 7, 9, 11], "missing_statements_linenumbers": [8], "covered_prime_paths_linenumbers": [[7, 6, 9], [1, 11, 5, 6, 9]], "missing_prime_paths_linenumbers": [[7, 8, 6, 9], [8, 6, 7], [1, 11, 5, 6, 7, 8]], "num_total_prime_paths": 5, "num_covered_paths": 2, "prime_path_coverage": 0.4, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_35__1_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_35__1_CFG.dot"}
{"humaneval_id": "HumanEval_116", "python_file": "HumanEval_116/main.py", "input_file": "HumanEval_116/input.txt", "prime_paths_nodes": [["1", "6", "3"]], "prime_paths_statements": [["from typing import *\\ldef sort_array(arr):...\\lsort_array([1, 5, 2, 3, 4])\\l", "sort_array", "return sorted(sorted(arr), key=lambda x: bin(x)[2:].count('1'))\\l"]], "prime_paths_linenumbers": [[1, 5, 3]], "covered_statements_linenumbers": [1, 2, 3, 5], "missing_statements_linenumbers": [], "covered_prime_paths_linenumbers": [[1, 5, 3]], "missing_prime_paths_linenumbers": [], "num_total_prime_paths": 1, "num_covered_paths": 1, "prime_path_coverage": 1.0, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_116_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_116_CFG.dot"}
{"humaneval_id": "HumanEval_105", "python_file": "HumanEval_105/main.py", "input_file": "HumanEval_105/input.txt", "prime_paths_nodes": [["8", "5", "7"], ["10", "5", "7"], ["10", "5", "8"], ["1", "14", "3", "5", "7"], ["1", "14", "3", "5", "8"]], "prime_paths_statements": [["new_arr.append(dic[var])\\l", "for var in sorted_arr:\\l", "return new_arr\\l"], ["", "for var in sorted_arr:\\l", "return new_arr\\l"], ["", "for var in sorted_arr:\\l", "new_arr.append(dic[var])\\l"], ["from typing import *\\ldef by_length(arr):...\\lby_length([2, 1, 1, 4, 5, 8, 2, 3])\\l", "by_length", "dic = {(1): 'One', (2): 'Two', (3): 'Three', (4): 'Four', (5): 'Five', (6):\\l    'Six', (7): 'Seven', (8): 'Eight', (9): 'Nine'}\\lsorted_arr = sorted(arr, reverse=True)\\lnew_arr = []\\l", "for var in sorted_arr:\\l", "return new_arr\\l"], ["from typing import *\\ldef by_length(arr):...\\lby_length([2, 1, 1, 4, 5, 8, 2, 3])\\l", "by_length", "dic = {(1): 'One', (2): 'Two', (3): 'Three', (4): 'Four', (5): 'Five', (6):\\l    'Six', (7): 'Seven', (8): 'Eight', (9): 'Nine'}\\lsorted_arr = sorted(arr, reverse=True)\\lnew_arr = []\\l", "for var in sorted_arr:\\l", "new_arr.append(dic[var])\\l"]], "prime_paths_linenumbers": [[17, 18, 16, 21], [16, 21], [16, 17, 18], [1, 23, 3, 14, 15, 16, 21], [1, 23, 3, 14, 15, 16, 17, 18]], "covered_statements_linenumbers": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 15, 16, 17, 18, 21, 23], "missing_statements_linenumbers": [19, 20], "covered_prime_paths_linenumbers": [[17, 18, 16, 21], [16, 21], [16, 17, 18], [1, 23, 3, 14, 15, 16, 21], [1, 23, 3, 14, 15, 16, 17, 18]], "missing_prime_paths_linenumbers": [], "num_total_prime_paths": 5, "num_covered_paths": 5, "prime_path_coverage": 1.0, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_105_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_105_CFG.dot"}
{"humaneval_id": "HumanEval_18__1", "python_file": "HumanEval_18__1/main.py", "input_file": "HumanEval_18__1/input.txt", "prime_paths_nodes": [["8", "4", "9"], ["8", "11", "4", "9"], ["11", "4", "8"], ["1", "15", "3", "4", "9"], ["1", "15", "3", "4", "8", "11"]], "prime_paths_statements": [["if string[i:i + len(substring)] == substring:\\l", "for i in range(len(string) - len(substring) + 1):\\l", "return times\\l"], ["if string[i:i + len(substring)] == substring:\\l", "times += 1\\l", "for i in range(len(string) - len(substring) + 1):\\l", "return times\\l"], ["times += 1\\l", "for i in range(len(string) - len(substring) + 1):\\l", "if string[i:i + len(substring)] == substring:\\l"], ["from typing import *\\ldef how_many_times(string: str, substring: str) ->int:...\\lhow_many_times('john doe', 'john')\\l", "how_many_times", "times = 0\\l", "for i in range(len(string) - len(substring) + 1):\\l", "return times\\l"], ["from typing import *\\ldef how_many_times(string: str, substring: str) ->int:...\\lhow_many_times('john doe', 'john')\\l", "how_many_times", "times = 0\\l", "for i in range(len(string) - len(substring) + 1):\\l", "if string[i:i + len(substring)] == substring:\\l", "times += 1\\l"]], "prime_paths_linenumbers": [[8, 7, 11], [8, 9, 7, 11], [9, 7, 8], [1, 13, 5, 7, 11], [1, 13, 5, 7, 8, 9]], "covered_statements_linenumbers": [1, 4, 5, 7, 8, 9, 11, 13], "missing_statements_linenumbers": [], "covered_prime_paths_linenumbers": [[8, 7, 11], [8, 9, 7, 11], [9, 7, 8], [1, 13, 5, 7, 11], [1, 13, 5, 7, 8, 9]], "missing_prime_paths_linenumbers": [], "num_total_prime_paths": 5, "num_covered_paths": 5, "prime_path_coverage": 1.0, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_18__1_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_18__1_CFG.dot"}
{"humaneval_id": "HumanEval_23", "python_file": "HumanEval_23/main.py", "input_file": "HumanEval_23/input.txt", "prime_paths_nodes": [["1", "6", "3"]], "prime_paths_statements": [["from typing import *\\ldef strlen(string: str) ->int:...\\lstrlen('asdasnakj')\\l", "strlen", "return len(string)\\l"]], "prime_paths_linenumbers": [[1, 5, 3]], "covered_statements_linenumbers": [1, 2, 3, 5], "missing_statements_linenumbers": [], "covered_prime_paths_linenumbers": [[1, 5, 3]], "missing_prime_paths_linenumbers": [], "num_total_prime_paths": 1, "num_covered_paths": 1, "prime_path_coverage": 1.0, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_23_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_23_CFG.dot"}
{"humaneval_id": "HumanEval_112", "python_file": "HumanEval_112/main.py", "input_file": "HumanEval_112/input.txt", "prime_paths_nodes": [["1", "8", "3", "5"]], "prime_paths_statements": [["from typing import *\\ldef reverse_delete(s, c):...\\lreverse_delete('abcde', 'ae')\\l", "reverse_delete", "s = ''.join([char for char in s if char not in c])\\l", "return s, s[::-1] == s\\l"]], "prime_paths_linenumbers": [[1, 6, 3, 4]], "covered_statements_linenumbers": [1, 2, 3, 4, 6], "missing_statements_linenumbers": [], "covered_prime_paths_linenumbers": [[1, 6, 3, 4]], "missing_prime_paths_linenumbers": [], "num_total_prime_paths": 1, "num_covered_paths": 1, "prime_path_coverage": 1.0, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_112_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_112_CFG.dot"}
{"humaneval_id": "HumanEval_88__0", "python_file": "HumanEval_88__0/main.py", "input_file": "HumanEval_88__0/input.txt", "prime_paths_nodes": [["1", "6", "3"]], "prime_paths_statements": [["from typing import *\\ldef sort_array(array):...\\lsort_array([2, 4, 3, 0, 1, 5, 6])\\l", "sort_array", "return [] if len(array) == 0 else sorted(array, reverse=(array[0] + array[-\\l    1]) % 2 == 0)\\l"]], "prime_paths_linenumbers": [[1, 8, 5]], "covered_statements_linenumbers": [1, 4, 5, 6, 8], "missing_statements_linenumbers": [], "covered_prime_paths_linenumbers": [[1, 8, 5]], "missing_prime_paths_linenumbers": [], "num_total_prime_paths": 1, "num_covered_paths": 1, "prime_path_coverage": 1.0, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_88__0_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_88__0_CFG.dot"}
{"humaneval_id": "HumanEval_55__0", "python_file": "HumanEval_55__0/main.py", "input_file": "HumanEval_55__0/input.txt", "prime_paths_nodes": [["1", "12", "3", "4"], ["1", "12", "3", "5", "7"], ["1", "12", "3", "5", "8"]], "prime_paths_statements": [["from typing import *\\ldef fib(n: int):...\\lfib(12)\\l", "fib", "if n == 0:\\l", "return 0\\l"], ["from typing import *\\ldef fib(n: int):...\\lfib(12)\\l", "fib", "if n == 0:\\l", "if n == 1:\\l", "return 1\\l"], ["from typing import *\\ldef fib(n: int):...\\lfib(12)\\l", "fib", "if n == 0:\\l", "if n == 1:\\l", "return fib(n - 1) + fib(n - 2)\\l"]], "prime_paths_linenumbers": [[1, 11, 5, 6], [1, 11, 5, 7, 8], [1, 11, 5, 7, 9]], "covered_statements_linenumbers": [1, 4, 5, 6, 7, 8, 9, 11], "missing_statements_linenumbers": [], "covered_prime_paths_linenumbers": [[1, 11, 5, 6], [1, 11, 5, 7, 8], [1, 11, 5, 7, 9]], "missing_prime_paths_linenumbers": [], "num_total_prime_paths": 3, "num_covered_paths": 3, "prime_path_coverage": 1.0, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_55__0_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_55__0_CFG.dot"}
{"humaneval_id": "HumanEval_60__0", "python_file": "HumanEval_60__0/main.py", "input_file": "HumanEval_60__0/input.txt", "prime_paths_nodes": [["1", "6", "3"]], "prime_paths_statements": [["from typing import *\\ldef sum_to_n(n: int):...\\lsum_to_n(6)\\l", "sum_to_n", "return sum(range(n + 1))\\l"]], "prime_paths_linenumbers": [[1, 7, 5]], "covered_statements_linenumbers": [1, 4, 5, 7], "missing_statements_linenumbers": [], "covered_prime_paths_linenumbers": [[1, 7, 5]], "missing_prime_paths_linenumbers": [], "num_total_prime_paths": 1, "num_covered_paths": 1, "prime_path_coverage": 1.0, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_60__0_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_60__0_CFG.dot"}
{"humaneval_id": "HumanEval_140__0", "python_file": "HumanEval_140__0/main.py", "input_file": "HumanEval_140__0/input.txt", "prime_paths_nodes": [["5", "7", "8", "4", "6", "16", "17"], ["5", "7", "8", "4", "6", "18", "17"], ["5", "7", "8", "4", "6", "18", "19", "17"], ["5", "9", "10", "11", "8", "4", "6", "16", "17"], ["5", "9", "10", "11", "8", "4", "6", "18", "17"], ["5", "9", "10", "11", "8", "4", "6", "18", "19", "17"], ["5", "9", "12", "13", "11", "8", "4", "6", "16", "17"], ["5", "9", "12", "13", "11", "8", "4", "6", "18", "17"], ["5", "9", "12", "13", "11", "8", "4", "6", "18", "19", "17"], ["5", "9", "12", "15", "11", "8", "4", "6", "16", "17"], ["5", "9", "12", "15", "11", "8", "4", "6", "18", "17"], ["5", "9", "12", "15", "11", "8", "4", "6", "18", "19", "17"], ["7", "8", "4", "5", "9", "10", "11"], ["7", "8", "4", "5", "9", "12", "13", "11"], ["7", "8", "4", "5", "9", "12", "15", "11"], ["9", "10", "11", "8", "4", "5", "7"], ["9", "12", "13", "11", "8", "4", "5", "7"], ["9", "12", "15", "11", "8", "4", "5", "7"], ["10", "11", "8", "4", "5", "9", "12", "13"], ["10", "11", "8", "4", "5", "9", "12", "15"], ["12", "13", "11", "8", "4", "5", "9", "10"], ["12", "15", "11", "8", "4", "5", "9", "10"], ["13", "11", "8", "4", "5", "9", "12", "15"], ["15", "11", "8", "4", "5", "9", "12", "13"], ["1", "23", "3", "4", "5", "7", "8"], ["1", "23", "3", "4", "5", "9", "10", "11", "8"], ["1", "23", "3", "4", "5", "9", "12", "13", "11", "8"], ["1", "23", "3", "4", "5", "9", "12", "15", "11", "8"], ["1", "23", "3", "4", "6", "16", "17"], ["1", "23", "3", "4", "6", "18", "17"], ["1", "23", "3", "4", "6", "18", "19", "17"]], "prime_paths_statements": [["if text[i] == ' ':\\l", "end += 1\\l", "i += 1\\l", "while i < len(text):\\l", "if end - start > 2:\\l", "new_text += '-'\\l", "return new_text\\l"], ["if text[i] == ' ':\\l", "end += 1\\l", "i += 1\\l", "while i < len(text):\\l", "if end - start > 2:\\l", "if end - start > 0:\\l", "return new_text\\l"], ["if text[i] == ' ':\\l", "end += 1\\l", "i += 1\\l", "while i < len(text):\\l", "if end - start > 2:\\l", "if end - start > 0:\\l", "new_text += '_'\\l", "return new_text\\l"], ["if text[i] == ' ':\\l", "if end - start > 2:\\l", "new_text += '-' + text[i]\\l", "start, end = i + 1, i + 1\\l", "i += 1\\l", "while i < len(text):\\l", "if end - start > 2:\\l", "new_text += '-'\\l", "return new_text\\l"], ["if text[i] == ' ':\\l", "if end - start > 2:\\l", "new_text += '-' + text[i]\\l", "start, end = i + 1, i + 1\\l", "i += 1\\l", "while i < len(text):\\l", "if end - start > 2:\\l", "if end - start > 0:\\l", "return new_text\\l"], ["if text[i] == ' ':\\l", "if end - start > 2:\\l", "new_text += '-' + text[i]\\l", "start, end = i + 1, i + 1\\l", "i += 1\\l", "while i < len(text):\\l", "if end - start > 2:\\l", "if end - start > 0:\\l", "new_text += '_'\\l", "return new_text\\l"], ["if text[i] == ' ':\\l", "if end - start > 2:\\l", "if end - start > 0:\\l", "new_text += '_' * (end - start) + text[i]\\l", "start, end = i + 1, i + 1\\l", "i += 1\\l", "while i < len(text):\\l", "if end - start > 2:\\l", "new_text += '-'\\l", "return new_text\\l"], ["if text[i] == ' ':\\l", "if end - start > 2:\\l", "if end - start > 0:\\l", "new_text += '_' * (end - start) + text[i]\\l", "start, end = i + 1, i + 1\\l", "i += 1\\l", "while i < len(text):\\l", "if end - start > 2:\\l", "if end - start > 0:\\l", "return new_text\\l"], ["if text[i] == ' ':\\l", "if end - start > 2:\\l", "if end - start > 0:\\l", "new_text += '_' * (end - start) + text[i]\\l", "start, end = i + 1, i + 1\\l", "i += 1\\l", "while i < len(text):\\l", "if end - start > 2:\\l", "if end - start > 0:\\l", "new_text += '_'\\l", "return new_text\\l"], ["if text[i] == ' ':\\l", "if end - start > 2:\\l", "if end - start > 0:\\l", "new_text += text[i]\\l", "start, end = i + 1, i + 1\\l", "i += 1\\l", "while i < len(text):\\l", "if end - start > 2:\\l", "new_text += '-'\\l", "return new_text\\l"], ["if text[i] == ' ':\\l", "if end - start > 2:\\l", "if end - start > 0:\\l", "new_text += text[i]\\l", "start, end = i + 1, i + 1\\l", "i += 1\\l", "while i < len(text):\\l", "if end - start > 2:\\l", "if end - start > 0:\\l", "return new_text\\l"], ["if text[i] == ' ':\\l", "if end - start > 2:\\l", "if end - start > 0:\\l", "new_text += text[i]\\l", "start, end = i + 1, i + 1\\l", "i += 1\\l", "while i < len(text):\\l", "if end - start > 2:\\l", "if end - start > 0:\\l", "new_text += '_'\\l", "return new_text\\l"], ["end += 1\\l", "i += 1\\l", "while i < len(text):\\l", "if text[i] == ' ':\\l", "if end - start > 2:\\l", "new_text += '-' + text[i]\\l", "start, end = i + 1, i + 1\\l"], ["end += 1\\l", "i += 1\\l", "while i < len(text):\\l", "if text[i] == ' ':\\l", "if end - start > 2:\\l", "if end - start > 0:\\l", "new_text += '_' * (end - start) + text[i]\\l", "start, end = i + 1, i + 1\\l"], ["end += 1\\l", "i += 1\\l", "while i < len(text):\\l", "if text[i] == ' ':\\l", "if end - start > 2:\\l", "if end - start > 0:\\l", "new_text += text[i]\\l", "start, end = i + 1, i + 1\\l"], ["if end - start > 2:\\l", "new_text += '-' + text[i]\\l", "start, end = i + 1, i + 1\\l", "i += 1\\l", "while i < len(text):\\l", "if text[i] == ' ':\\l", "end += 1\\l"], ["if end - start > 2:\\l", "if end - start > 0:\\l", "new_text += '_' * (end - start) + text[i]\\l", "start, end = i + 1, i + 1\\l", "i += 1\\l", "while i < len(text):\\l", "if text[i] == ' ':\\l", "end += 1\\l"], ["if end - start > 2:\\l", "if end - start > 0:\\l", "new_text += text[i]\\l", "start, end = i + 1, i + 1\\l", "i += 1\\l", "while i < len(text):\\l", "if text[i] == ' ':\\l", "end += 1\\l"], ["new_text += '-' + text[i]\\l", "start, end = i + 1, i + 1\\l", "i += 1\\l", "while i < len(text):\\l", "if text[i] == ' ':\\l", "if end - start > 2:\\l", "if end - start > 0:\\l", "new_text += '_' * (end - start) + text[i]\\l"], ["new_text += '-' + text[i]\\l", "start, end = i + 1, i + 1\\l", "i += 1\\l", "while i < len(text):\\l", "if text[i] == ' ':\\l", "if end - start > 2:\\l", "if end - start > 0:\\l", "new_text += text[i]\\l"], ["if end - start > 0:\\l", "new_text += '_' * (end - start) + text[i]\\l", "start, end = i + 1, i + 1\\l", "i += 1\\l", "while i < len(text):\\l", "if text[i] == ' ':\\l", "if end - start > 2:\\l", "new_text += '-' + text[i]\\l"], ["if end - start > 0:\\l", "new_text += text[i]\\l", "start, end = i + 1, i + 1\\l", "i += 1\\l", "while i < len(text):\\l", "if text[i] == ' ':\\l", "if end - start > 2:\\l", "new_text += '-' + text[i]\\l"], ["new_text += '_' * (end - start) + text[i]\\l", "start, end = i + 1, i + 1\\l", "i += 1\\l", "while i < len(text):\\l", "if text[i] == ' ':\\l", "if end - start > 2:\\l", "if end - start > 0:\\l", "new_text += text[i]\\l"], ["new_text += text[i]\\l", "start, end = i + 1, i + 1\\l", "i += 1\\l", "while i < len(text):\\l", "if text[i] == ' ':\\l", "if end - start > 2:\\l", "if end - start > 0:\\l", "new_text += '_' * (end - start) + text[i]\\l"], ["from typing import *\\ldef fix_spaces(text):...\\lfix_spaces('Exa   mple')\\l", "fix_spaces", "new_text = ''\\li = 0\\lstart, end = 0, 0\\l", "while i < len(text):\\l", "if text[i] == ' ':\\l", "end += 1\\l", "i += 1\\l"], ["from typing import *\\ldef fix_spaces(text):...\\lfix_spaces('Exa   mple')\\l", "fix_spaces", "new_text = ''\\li = 0\\lstart, end = 0, 0\\l", "while i < len(text):\\l", "if text[i] == ' ':\\l", "if end - start > 2:\\l", "new_text += '-' + text[i]\\l", "start, end = i + 1, i + 1\\l", "i += 1\\l"], ["from typing import *\\ldef fix_spaces(text):...\\lfix_spaces('Exa   mple')\\l", "fix_spaces", "new_text = ''\\li = 0\\lstart, end = 0, 0\\l", "while i < len(text):\\l", "if text[i] == ' ':\\l", "if end - start > 2:\\l", "if end - start > 0:\\l", "new_text += '_' * (end - start) + text[i]\\l", "start, end = i + 1, i + 1\\l", "i += 1\\l"], ["from typing import *\\ldef fix_spaces(text):...\\lfix_spaces('Exa   mple')\\l", "fix_spaces", "new_text = ''\\li = 0\\lstart, end = 0, 0\\l", "while i < len(text):\\l", "if text[i] == ' ':\\l", "if end - start > 2:\\l", "if end - start > 0:\\l", "new_text += text[i]\\l", "start, end = i + 1, i + 1\\l", "i += 1\\l"], ["from typing import *\\ldef fix_spaces(text):...\\lfix_spaces('Exa   mple')\\l", "fix_spaces", "new_text = ''\\li = 0\\lstart, end = 0, 0\\l", "while i < len(text):\\l", "if end - start > 2:\\l", "new_text += '-'\\l", "return new_text\\l"], ["from typing import *\\ldef fix_spaces(text):...\\lfix_spaces('Exa   mple')\\l", "fix_spaces", "new_text = ''\\li = 0\\lstart, end = 0, 0\\l", "while i < len(text):\\l", "if end - start > 2:\\l", "if end - start > 0:\\l", "return new_text\\l"], ["from typing import *\\ldef fix_spaces(text):...\\lfix_spaces('Exa   mple')\\l", "fix_spaces", "new_text = ''\\li = 0\\lstart, end = 0, 0\\l", "while i < len(text):\\l", "if end - start > 2:\\l", "if end - start > 0:\\l", "new_text += '_'\\l", "return new_text\\l"]], "prime_paths_linenumbers": [[9, 10, 19, 8, 20, 21, 24], [9, 10, 19, 8, 20, 22, 24], [9, 10, 19, 8, 20, 22, 23, 24], [9, 12, 13, 18, 19, 8, 20, 21, 24], [9, 12, 13, 18, 19, 8, 20, 22, 24], [9, 12, 13, 18, 19, 8, 20, 22, 23, 24], [9, 12, 14, 15, 18, 19, 8, 20, 21, 24], [9, 12, 14, 15, 18, 19, 8, 20, 22, 24], [9, 12, 14, 15, 18, 19, 8, 20, 22, 23, 24], [9, 12, 14, 17, 18, 19, 8, 20, 21, 24], [9, 12, 14, 17, 18, 19, 8, 20, 22, 24], [9, 12, 14, 17, 18, 19, 8, 20, 22, 23, 24], [10, 19, 8, 9, 12, 13, 18], [10, 19, 8, 9, 12, 14, 15, 18], [10, 19, 8, 9, 12, 14, 17, 18], [12, 13, 18, 19, 8, 9, 10], [12, 14, 15, 18, 19, 8, 9, 10], [12, 14, 17, 18, 19, 8, 9, 10], [13, 18, 19, 8, 9, 12, 14, 15], [13, 18, 19, 8, 9, 12, 14, 17], [14, 15, 18, 19, 8, 9, 12, 13], [14, 17, 18, 19, 8, 9, 12, 13], [15, 18, 19, 8, 9, 12, 14, 17], [17, 18, 19, 8, 9, 12, 14, 15], [1, 26, 5, 6, 7, 8, 9, 10, 19], [1, 26, 5, 6, 7, 8, 9, 12, 13, 18, 19], [1, 26, 5, 6, 7, 8, 9, 12, 14, 15, 18, 19], [1, 26, 5, 6, 7, 8, 9, 12, 14, 17, 18, 19], [1, 26, 5, 6, 7, 8, 20, 21, 24], [1, 26, 5, 6, 7, 8, 20, 22, 24], [1, 26, 5, 6, 7, 8, 20, 22, 23, 24]], "covered_statements_linenumbers": [1, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 17, 18, 19, 20, 22, 24, 26], "missing_statements_linenumbers": [15, 21, 23], "covered_prime_paths_linenumbers": [[9, 10, 19, 8, 20, 22, 24], [9, 12, 13, 18, 19, 8, 20, 22, 24], [9, 12, 14, 17, 18, 19, 8, 20, 22, 24], [10, 19, 8, 9, 12, 13, 18], [10, 19, 8, 9, 12, 14, 17, 18], [12, 13, 18, 19, 8, 9, 10], [12, 14, 17, 18, 19, 8, 9, 10], [13, 18, 19, 8, 9, 12, 14, 17], [14, 17, 18, 19, 8, 9, 12, 13], [1, 26, 5, 6, 7, 8, 9, 10, 19], [1, 26, 5, 6, 7, 8, 9, 12, 13, 18, 19], [1, 26, 5, 6, 7, 8, 9, 12, 14, 17, 18, 19], [1, 26, 5, 6, 7, 8, 20, 22, 24]], "missing_prime_paths_linenumbers": [[9, 10, 19, 8, 20, 21, 24], [9, 10, 19, 8, 20, 22, 23, 24], [9, 12, 13, 18, 19, 8, 20, 21, 24], [9, 12, 13, 18, 19, 8, 20, 22, 23, 24], [9, 12, 14, 15, 18, 19, 8, 20, 21, 24], [9, 12, 14, 15, 18, 19, 8, 20, 22, 24], [9, 12, 14, 15, 18, 19, 8, 20, 22, 23, 24], [9, 12, 14, 17, 18, 19, 8, 20, 21, 24], [9, 12, 14, 17, 18, 19, 8, 20, 22, 23, 24], [10, 19, 8, 9, 12, 14, 15, 18], [12, 14, 15, 18, 19, 8, 9, 10], [13, 18, 19, 8, 9, 12, 14, 15], [14, 15, 18, 19, 8, 9, 12, 13], [15, 18, 19, 8, 9, 12, 14, 17], [17, 18, 19, 8, 9, 12, 14, 15], [1, 26, 5, 6, 7, 8, 9, 12, 14, 15, 18, 19], [1, 26, 5, 6, 7, 8, 20, 21, 24], [1, 26, 5, 6, 7, 8, 20, 22, 23, 24]], "num_total_prime_paths": 31, "num_covered_paths": 13, "prime_path_coverage": 0.42, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_140__0_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_140__0_CFG.dot"}
{"humaneval_id": "HumanEval_100__1", "python_file": "HumanEval_100__1/main.py", "input_file": "HumanEval_100__1/input.txt", "prime_paths_nodes": [["1", "6", "3"]], "prime_paths_statements": [["from typing import *\\ldef make_a_pile(n):...\\lmake_a_pile(6)\\l", "make_a_pile", "return [(n + 2 * i) for i in range(n)]\\l"]], "prime_paths_linenumbers": [[1, 7, 5]], "covered_statements_linenumbers": [1, 4, 5, 7], "missing_statements_linenumbers": [], "covered_prime_paths_linenumbers": [[1, 7, 5]], "missing_prime_paths_linenumbers": [], "num_total_prime_paths": 1, "num_covered_paths": 1, "prime_path_coverage": 1.0, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_100__1_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_100__1_CFG.dot"}
{"humaneval_id": "HumanEval_42", "python_file": "HumanEval_42/main.py", "input_file": "HumanEval_42/input.txt", "prime_paths_nodes": [["1", "6", "3"]], "prime_paths_statements": [["from typing import *\\ldef incr_list(l: list):...\\lincr_list([5, 2, 5, 2, 3, 3, 9, 0, 123])\\l", "incr_list", "return [(e + 1) for e in l]\\l"]], "prime_paths_linenumbers": [[1, 5, 3]], "covered_statements_linenumbers": [1, 2, 3, 5], "missing_statements_linenumbers": [], "covered_prime_paths_linenumbers": [[1, 5, 3]], "missing_prime_paths_linenumbers": [], "num_total_prime_paths": 1, "num_covered_paths": 1, "prime_path_coverage": 1.0, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_42_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_42_CFG.dot"}
{"humaneval_id": "HumanEval_163", "python_file": "HumanEval_163/main.py", "input_file": "HumanEval_163/input.txt", "prime_paths_nodes": [["1", "11", "3", "8"]], "prime_paths_statements": [["from typing import *\\ldef generate_integers(a, b):...\\lgenerate_integers(2, 10)\\l", "generate_integers", "lower = max(2, min(a, b))\\lupper = min(8, max(a, b))\\l", "return [i for i in range(lower, upper + 1) if i % 2 == 0]\\l"]], "prime_paths_linenumbers": [[1, 8, 3, 4, 6]], "covered_statements_linenumbers": [1, 2, 3, 4, 6, 8], "missing_statements_linenumbers": [], "covered_prime_paths_linenumbers": [[1, 8, 3, 4, 6]], "missing_prime_paths_linenumbers": [], "num_total_prime_paths": 1, "num_covered_paths": 1, "prime_path_coverage": 1.0, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_163_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_163_CFG.dot"}
{"humaneval_id": "HumanEval_29__0", "python_file": "HumanEval_29__0/main.py", "input_file": "HumanEval_29__0/input.txt", "prime_paths_nodes": [["1", "6", "3"]], "prime_paths_statements": [["from typing import *\\ldef filter_by_prefix(strings: List[str], prefix: str) ->List[str]:...\\lfilter_by_prefix(['abc', 'abcd', 'abcde'], 'abc')\\l", "filter_by_prefix", "return [x for x in strings if x.startswith(prefix)]\\l"]], "prime_paths_linenumbers": [[1, 7, 5]], "covered_statements_linenumbers": [1, 4, 5, 7], "missing_statements_linenumbers": [], "covered_prime_paths_linenumbers": [[1, 7, 5]], "missing_prime_paths_linenumbers": [], "num_total_prime_paths": 1, "num_covered_paths": 1, "prime_path_coverage": 1.0, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_29__0_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_29__0_CFG.dot"}
{"humaneval_id": "HumanEval_51__1", "python_file": "HumanEval_51__1/main.py", "input_file": "HumanEval_51__1/input.txt", "prime_paths_nodes": [["1", "6", "3"]], "prime_paths_statements": [["from typing import *\\ldef remove_vowels(text):...\\lremove_vowels('ybcd')\\l", "remove_vowels", "return ''.join([s for s in te...'a', 'e', 'i', 'o', 'u']])\\l"]], "prime_paths_linenumbers": [[1, 8, 5]], "covered_statements_linenumbers": [1, 4, 5, 6, 8], "missing_statements_linenumbers": [], "covered_prime_paths_linenumbers": [[1, 8, 5]], "missing_prime_paths_linenumbers": [], "num_total_prime_paths": 1, "num_covered_paths": 1, "prime_path_coverage": 1.0, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_51__1_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_51__1_CFG.dot"}
{"humaneval_id": "HumanEval_124__1", "python_file": "HumanEval_124__1/main.py", "input_file": "HumanEval_124__1/input.txt", "prime_paths_nodes": [["1", "28", "3"], ["1", "29", "3"]], "prime_paths_statements": [["from typing import *\\ldef valid_date(date):...\\lvalid_date('04-2003')\\lvalid_date('04-2003')\\l", "valid_date", ""], ["from typing import *\\ldef valid_date(date):...\\lvalid_date('04-2003')\\lvalid_date('04-2003')\\l", "valid_date", ""]], "prime_paths_linenumbers": [[1, 21], [1, 23]], "covered_statements_linenumbers": [1, 4, 5, 6, 7, 17, 18, 21, 23], "missing_statements_linenumbers": [8, 9, 10, 11, 12, 13, 14, 15, 16, 20], "covered_prime_paths_linenumbers": [[1, 21], [1, 23]], "missing_prime_paths_linenumbers": [], "num_total_prime_paths": 2, "num_covered_paths": 2, "prime_path_coverage": 1.0, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_124__1_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_124__1_CFG.dot"}
{"humaneval_id": "HumanEval_134__1", "python_file": "HumanEval_134__1/main.py", "input_file": "HumanEval_134__1/input.txt", "prime_paths_nodes": [["1", "8", "3", "5"]], "prime_paths_statements": [["from typing import *\\ldef check_if_last_char_is_a_letter(txt):...\\lcheck_if_last_char_is_a_letter('A')\\l", "check_if_last_char_is_a_letter", "check = txt.split(' ')[-1]\\l", "return True if len(check) == 1 and 97 <= ord(check.lower()) <= 122 else False\\l"]], "prime_paths_linenumbers": [[1, 10, 6, 7]], "covered_statements_linenumbers": [1, 4, 6, 7, 8, 10], "missing_statements_linenumbers": [], "covered_prime_paths_linenumbers": [[1, 10, 6, 7]], "missing_prime_paths_linenumbers": [], "num_total_prime_paths": 1, "num_covered_paths": 1, "prime_path_coverage": 1.0, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_134__1_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_134__1_CFG.dot"}
{"humaneval_id": "HumanEval_119__1", "python_file": "HumanEval_119__1/main.py", "input_file": "HumanEval_119__1/input.txt", "prime_paths_nodes": [["5", "6", "8"], ["5", "6", "7", "9", "10", "12"], ["5", "6", "7", "11", "10", "12"], ["7", "9", "10", "6", "8"], ["7", "11", "10", "6", "8"], ["9", "10", "6", "7", "11"], ["11", "10", "6", "7", "9"], ["1", "20", "3", "17"]], "prime_paths_statements": [["val = 0\\l", "for i in s:\\l", "return True if val == 0 else False\\l"], ["val = 0\\l", "for i in s:\\l", "if i == '(':\\l", "val = val + 1\\l", "if val < 0:\\l", "return False\\l"], ["val = 0\\l", "for i in s:\\l", "if i == '(':\\l", "val = val - 1\\l", "if val < 0:\\l", "return False\\l"], ["if i == '(':\\l", "val = val + 1\\l", "if val < 0:\\l", "for i in s:\\l", "return True if val == 0 else False\\l"], ["if i == '(':\\l", "val = val - 1\\l", "if val < 0:\\l", "for i in s:\\l", "return True if val == 0 else False\\l"], ["val = val + 1\\l", "if val < 0:\\l", "for i in s:\\l", "if i == '(':\\l", "val = val - 1\\l"], ["val = val - 1\\l", "if val < 0:\\l", "for i in s:\\l", "if i == '(':\\l", "val = val + 1\\l"], ["from typing import *\\ldef match_parens(lst):...\\lmatch_parens(['(()(())', '())())'])\\l", "match_parens", "def check(s):...\\lS1 = lst[0] + lst[1]\\lS2 = lst[1] + lst[0]\\l", "return 'Yes' if check(S1) or che...'No'\\l"]], "prime_paths_linenumbers": [[6, 7, 14], [6, 7, 8, 9, 12, 13], [6, 7, 8, 11, 12, 13], [8, 9, 12, 7, 14], [8, 11, 12, 7, 14], [9, 12, 7, 8, 11], [11, 12, 7, 8, 9], [1, 20, 5, 16, 17, 18]], "covered_statements_linenumbers": [1, 4, 5, 6, 7, 8, 9, 11, 12, 13, 16, 17, 18, 20], "missing_statements_linenumbers": [14], "covered_prime_paths_linenumbers": [[6, 7, 8, 9, 12, 13], [6, 7, 8, 11, 12, 13], [9, 12, 7, 8, 11], [11, 12, 7, 8, 9], [1, 20, 5, 16, 17, 18]], "missing_prime_paths_linenumbers": [[6, 7, 14], [8, 9, 12, 7, 14], [8, 11, 12, 7, 14]], "num_total_prime_paths": 8, "num_covered_paths": 5, "prime_path_coverage": 0.62, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_119__1_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_119__1_CFG.dot"}
{"humaneval_id": "HumanEval_82__1", "python_file": "HumanEval_82__1/main.py", "input_file": "HumanEval_82__1/input.txt", "prime_paths_nodes": [["10", "7", "11"], ["1", "17", "3", "5", "6"], ["1", "17", "3", "5", "7", "11"], ["1", "17", "3", "5", "7", "10", "12"]], "prime_paths_statements": [["if l % i == 0:\\l", "for i in range(2, l):\\l", "return True\\l"], ["from typing import *\\ldef prime_length(string):...\\lprime_length('0')\\l", "prime_length", "l = len(string)\\l", "if l == 0 or l == 1:\\l", "return False\\l"], ["from typing import *\\ldef prime_length(string):...\\lprime_length('0')\\l", "prime_length", "l = len(string)\\l", "if l == 0 or l == 1:\\l", "for i in range(2, l):\\l", "return True\\l"], ["from typing import *\\ldef prime_length(string):...\\lprime_length('0')\\l", "prime_length", "l = len(string)\\l", "if l == 0 or l == 1:\\l", "for i in range(2, l):\\l", "if l % i == 0:\\l", "return False\\l"]], "prime_paths_linenumbers": [[9, 8, 11], [1, 13, 5, 6, 7], [1, 13, 5, 6, 8, 11], [1, 13, 5, 6, 8, 9, 10]], "covered_statements_linenumbers": [1, 4, 5, 6, 7, 13], "missing_statements_linenumbers": [8, 9, 10, 11], "covered_prime_paths_linenumbers": [[1, 13, 5, 6, 7]], "missing_prime_paths_linenumbers": [[9, 8, 11], [1, 13, 5, 6, 8, 11], [1, 13, 5, 6, 8, 9, 10]], "num_total_prime_paths": 4, "num_covered_paths": 1, "prime_path_coverage": 0.25, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_82__1_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_82__1_CFG.dot"}
{"humaneval_id": "HumanEval_149", "python_file": "HumanEval_149/main.py", "input_file": "HumanEval_149/input.txt", "prime_paths_nodes": [["6", "5", "7"], ["6", "9", "5", "7"], ["9", "5", "6"], ["1", "14", "3", "5", "7"], ["1", "14", "3", "5", "6", "9"]], "prime_paths_statements": [["if len(i) % 2 == 0:\\l", "for i in lst:\\l", "return sorted(new_lst, key=len)\\l"], ["if len(i) % 2 == 0:\\l", "new_lst.append(i)\\l", "for i in lst:\\l", "return sorted(new_lst, key=len)\\l"], ["new_lst.append(i)\\l", "for i in lst:\\l", "if len(i) % 2 == 0:\\l"], ["from typing import *\\ldef sorted_list_sum(lst):...\\lsorted_list_sum(['aa', 'a', 'aaa'])\\l", "sorted_list_sum", "lst.sort()\\lnew_lst = []\\l", "for i in lst:\\l", "return sorted(new_lst, key=len)\\l"], ["from typing import *\\ldef sorted_list_sum(lst):...\\lsorted_list_sum(['aa', 'a', 'aaa'])\\l", "sorted_list_sum", "lst.sort()\\lnew_lst = []\\l", "for i in lst:\\l", "if len(i) % 2 == 0:\\l", "new_lst.append(i)\\l"]], "prime_paths_linenumbers": [[6, 5, 8], [6, 7, 5, 8], [7, 5, 6], [1, 10, 3, 4, 5, 8], [1, 10, 3, 4, 5, 6, 7]], "covered_statements_linenumbers": [1, 2, 3, 4, 5, 6, 7, 8, 10], "missing_statements_linenumbers": [], "covered_prime_paths_linenumbers": [[6, 5, 8], [6, 7, 5, 8], [7, 5, 6], [1, 10, 3, 4, 5, 8], [1, 10, 3, 4, 5, 6, 7]], "missing_prime_paths_linenumbers": [], "num_total_prime_paths": 5, "num_covered_paths": 5, "prime_path_coverage": 1.0, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_149_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_149_CFG.dot"}
{"humaneval_id": "HumanEval_54__1", "python_file": "HumanEval_54__1/main.py", "input_file": "HumanEval_54__1/input.txt", "prime_paths_nodes": [["1", "6", "3"]], "prime_paths_statements": [["from typing import *\\ldef same_chars(s0: str, s1: str):...\\lsame_chars('eabcd', 'dddddddabc')\\l", "same_chars", "return set(s0) == set(s1)\\l"]], "prime_paths_linenumbers": [[1, 7, 5]], "covered_statements_linenumbers": [1, 4, 5, 7], "missing_statements_linenumbers": [], "covered_prime_paths_linenumbers": [[1, 7, 5]], "missing_prime_paths_linenumbers": [], "num_total_prime_paths": 1, "num_covered_paths": 1, "prime_path_coverage": 1.0, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_54__1_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_54__1_CFG.dot"}
{"humaneval_id": "HumanEval_27", "python_file": "HumanEval_27/main.py", "input_file": "HumanEval_27/input.txt", "prime_paths_nodes": [["1", "6", "3"]], "prime_paths_statements": [["from typing import *\\ldef flip_case(string: str) ->str:...\\lflip_case('Hello!')\\l", "flip_case", "return string.swapcase()\\l"]], "prime_paths_linenumbers": [[1, 5, 3]], "covered_statements_linenumbers": [1, 2, 3, 5], "missing_statements_linenumbers": [], "covered_prime_paths_linenumbers": [[1, 5, 3]], "missing_prime_paths_linenumbers": [], "num_total_prime_paths": 1, "num_covered_paths": 1, "prime_path_coverage": 1.0, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_27_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_27_CFG.dot"}
{"humaneval_id": "HumanEval_159__1", "python_file": "HumanEval_159__1/main.py", "input_file": "HumanEval_159__1/input.txt", "prime_paths_nodes": [["1", "10", "3", "4"], ["1", "10", "3", "6"]], "prime_paths_statements": [["from typing import *\\ldef eat(number, need, remaining):...\\leat(2, 11, 5)\\l", "eat", "if need <= remaining:\\l", "return [number + need, remaining - need]\\l"], ["from typing import *\\ldef eat(number, need, remaining):...\\leat(2, 11, 5)\\l", "eat", "if need <= remaining:\\l", "return [number + remaining, 0]\\l"]], "prime_paths_linenumbers": [[1, 10, 5, 6], [1, 10, 5, 8]], "covered_statements_linenumbers": [1, 4, 5, 8, 10], "missing_statements_linenumbers": [6], "covered_prime_paths_linenumbers": [[1, 10, 5, 8]], "missing_prime_paths_linenumbers": [[1, 10, 5, 6]], "num_total_prime_paths": 2, "num_covered_paths": 1, "prime_path_coverage": 0.5, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_159__1_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_159__1_CFG.dot"}
{"humaneval_id": "HumanEval_2__1", "python_file": "HumanEval_2__1/main.py", "input_file": "HumanEval_2__1/input.txt", "prime_paths_nodes": [["1", "6", "3"]], "prime_paths_statements": [["from typing import *\\ldef truncate_number(number: float) ->float:...\\ltruncate_number(1.33)\\l", "truncate_number", "return number % 1.0\\l"]], "prime_paths_linenumbers": [[1, 7, 5]], "covered_statements_linenumbers": [1, 4, 5, 7], "missing_statements_linenumbers": [], "covered_prime_paths_linenumbers": [[1, 7, 5]], "missing_prime_paths_linenumbers": [], "num_total_prime_paths": 1, "num_covered_paths": 1, "prime_path_coverage": 1.0, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_2__1_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_2__1_CFG.dot"}
{"humaneval_id": "HumanEval_108__0", "python_file": "HumanEval_108__0/main.py", "input_file": "HumanEval_108__0/input.txt", "prime_paths_nodes": [["5", "6", "7", "8", "11"], ["5", "6", "8", "11"], ["1", "17", "3", "14"]], "prime_paths_statements": [["neg = 1\\l", "if n < 0:\\l", "n, neg = -1 * n, -1\\l", "n = [int(i) for i in str(n)]\\ln[0] = n[0] * neg\\l", "return sum(n)\\l"], ["neg = 1\\l", "if n < 0:\\l", "n = [int(i) for i in str(n)]\\ln[0] = n[0] * neg\\l", "return sum(n)\\l"], ["from typing import *\\ldef count_nums(arr):...\\lcount_nums([1])\\l", "count_nums", "def digits_sum(n):...\\l", "return len(list(filter(lambda x: x > 0, [digits_sum(i) for i in arr])))\\l"]], "prime_paths_linenumbers": [[6, 7, 8, 9, 10, 11], [6, 7, 9, 10, 11], [1, 14, 5, 12]], "covered_statements_linenumbers": [1, 4, 5, 6, 7, 9, 10, 11, 12, 14], "missing_statements_linenumbers": [8], "covered_prime_paths_linenumbers": [[6, 7, 9, 10, 11], [1, 14, 5, 12]], "missing_prime_paths_linenumbers": [[6, 7, 8, 9, 10, 11]], "num_total_prime_paths": 3, "num_covered_paths": 2, "prime_path_coverage": 0.67, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_108__0_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_108__0_CFG.dot"}
{"humaneval_id": "HumanEval_4__1", "python_file": "HumanEval_4__1/main.py", "input_file": "HumanEval_4__1/input.txt", "prime_paths_nodes": [["1", "9", "3", "6"]], "prime_paths_statements": [["from typing import *\\ldef mean_absolute_deviation(numbers: List[float]) ->float:...\\lmean_absolute_deviation([1.0, 2.0, 3.0, 4.0, 5.0])\\l", "mean_absolute_deviation", "mean = sum(numbers) / len(numbers)\\l", "return sum(abs(x - mean) for x in numbers) / len(numbers)\\l"]], "prime_paths_linenumbers": [[1, 8, 5, 6]], "covered_statements_linenumbers": [1, 4, 5, 6, 8], "missing_statements_linenumbers": [], "covered_prime_paths_linenumbers": [[1, 8, 5, 6]], "missing_prime_paths_linenumbers": [], "num_total_prime_paths": 1, "num_covered_paths": 1, "prime_path_coverage": 1.0, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_4__1_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_4__1_CFG.dot"}
{"humaneval_id": "HumanEval_26", "python_file": "HumanEval_26/main.py", "input_file": "HumanEval_26/input.txt", "prime_paths_nodes": [["1", "8", "3", "5"]], "prime_paths_statements": [["from typing import *\\ldef remove_duplicates(numbers: List[int]) ->List[int]:...\\lremove_duplicates([1, 2, 3, 2, 4, 3, 5])\\l", "remove_duplicates", "import collections\\lc = collections.Counter(numbers)\\l", "return [n for n in numbers if c[n] <= 1]\\l"]], "prime_paths_linenumbers": [[1, 7, 3, 4, 5]], "covered_statements_linenumbers": [1, 2, 3, 4, 5, 7], "missing_statements_linenumbers": [], "covered_prime_paths_linenumbers": [[1, 7, 3, 4, 5]], "missing_prime_paths_linenumbers": [], "num_total_prime_paths": 1, "num_covered_paths": 1, "prime_path_coverage": 1.0, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_26_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_26_CFG.dot"}
{"humaneval_id": "HumanEval_144", "python_file": "HumanEval_144/main.py", "input_file": "HumanEval_144/input.txt", "prime_paths_nodes": [["1", "17", "3", "10", "12"], ["1", "17", "3", "10", "13"]], "prime_paths_statements": [["from typing import *\\ldef simplify(x, n):...\\lsimplify('1/5', '5/1')\\l", "simplify", "a, b = x.split('/')\\lc, d = n.split('/')\\lnumerator = int(a) * int(c)\\ldenom = int(b) * int(d)\\l", "if numerator / denom == int(numerator / denom):\\l", "return True\\l"], ["from typing import *\\ldef simplify(x, n):...\\lsimplify('1/5', '5/1')\\l", "simplify", "a, b = x.split('/')\\lc, d = n.split('/')\\lnumerator = int(a) * int(c)\\ldenom = int(b) * int(d)\\l", "if numerator / denom == int(numerator / denom):\\l", "return False\\l"]], "prime_paths_linenumbers": [[1, 11, 3, 4, 5, 6, 7, 8], [1, 11, 3, 4, 5, 6, 7, 9]], "covered_statements_linenumbers": [1, 2, 3, 4, 5, 6, 7, 8, 11], "missing_statements_linenumbers": [9], "covered_prime_paths_linenumbers": [[1, 11, 3, 4, 5, 6, 7, 8]], "missing_prime_paths_linenumbers": [[1, 11, 3, 4, 5, 6, 7, 9]], "num_total_prime_paths": 2, "num_covered_paths": 1, "prime_path_coverage": 0.5, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_144_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_144_CFG.dot"}
{"humaneval_id": "HumanEval_72__1", "python_file": "HumanEval_72__1/main.py", "input_file": "HumanEval_72__1/input.txt", "prime_paths_nodes": [["10", "13", "9", "11"], ["13", "9", "10", "12"], ["1", "17", "3", "5"], ["1", "17", "3", "6", "9", "11"], ["1", "17", "3", "6", "9", "10", "12"], ["1", "17", "3", "6", "9", "10", "13"]], "prime_paths_statements": [["if q[i] != q[j]:\\l", "i += 1\\lj -= 1\\l", "while i < j:\\l", "return True\\l"], ["i += 1\\lj -= 1\\l", "while i < j:\\l", "if q[i] != q[j]:\\l", "return False\\l"], ["from typing import *\\ldef will_it_fly(q, w):...\\lwill_it_fly([1, 2, 3], 6)\\l", "will_it_fly", "if sum(q) > w:\\l", "return False\\l"], ["from typing import *\\ldef will_it_fly(q, w):...\\lwill_it_fly([1, 2, 3], 6)\\l", "will_it_fly", "if sum(q) > w:\\l", "i, j = 0, len(q) - 1\\l", "while i < j:\\l", "return True\\l"], ["from typing import *\\ldef will_it_fly(q, w):...\\lwill_it_fly([1, 2, 3], 6)\\l", "will_it_fly", "if sum(q) > w:\\l", "i, j = 0, len(q) - 1\\l", "while i < j:\\l", "if q[i] != q[j]:\\l", "return False\\l"], ["from typing import *\\ldef will_it_fly(q, w):...\\lwill_it_fly([1, 2, 3], 6)\\l", "will_it_fly", "if sum(q) > w:\\l", "i, j = 0, len(q) - 1\\l", "while i < j:\\l", "if q[i] != q[j]:\\l", "i += 1\\lj -= 1\\l"]], "prime_paths_linenumbers": [[10, 12, 13, 9, 14], [12, 13, 9, 10, 11], [1, 16, 5, 6], [1, 16, 5, 8, 9, 14], [1, 16, 5, 8, 9, 10, 11], [1, 16, 5, 8, 9, 10, 12, 13]], "covered_statements_linenumbers": [1, 4, 5, 8, 9, 10, 11, 16], "missing_statements_linenumbers": [6, 12, 13, 14], "covered_prime_paths_linenumbers": [[1, 16, 5, 8, 9, 10, 11]], "missing_prime_paths_linenumbers": [[10, 12, 13, 9, 14], [12, 13, 9, 10, 11], [1, 16, 5, 6], [1, 16, 5, 8, 9, 14], [1, 16, 5, 8, 9, 10, 12, 13]], "num_total_prime_paths": 6, "num_covered_paths": 1, "prime_path_coverage": 0.17, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_72__1_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_72__1_CFG.dot"}
{"humaneval_id": "HumanEval_61__0", "python_file": "HumanEval_61__0/main.py", "input_file": "HumanEval_61__0/input.txt", "prime_paths_nodes": [["5", "7", "8", "4", "6"], ["5", "9", "8", "4", "6"], ["7", "8", "4", "5", "9"], ["9", "8", "4", "5", "7"], ["1", "15", "3", "4", "6"], ["1", "15", "3", "4", "5", "7", "8", "10"], ["1", "15", "3", "4", "5", "9", "8", "10"]], "prime_paths_statements": [["if b == '(':\\l", "depth += 1\\l", "if depth < 0:\\l", "for b in brackets:\\l", "return depth == 0\\l"], ["if b == '(':\\l", "depth -= 1\\l", "if depth < 0:\\l", "for b in brackets:\\l", "return depth == 0\\l"], ["depth += 1\\l", "if depth < 0:\\l", "for b in brackets:\\l", "if b == '(':\\l", "depth -= 1\\l"], ["depth -= 1\\l", "if depth < 0:\\l", "for b in brackets:\\l", "if b == '(':\\l", "depth += 1\\l"], ["from typing import *\\ldef correct_bracketing(brackets: str):...\\lcorrect_bracketing(')((')\\l", "correct_bracketing", "depth = 0\\l", "for b in brackets:\\l", "return depth == 0\\l"], ["from typing import *\\ldef correct_bracketing(brackets: str):...\\lcorrect_bracketing(')((')\\l", "correct_bracketing", "depth = 0\\l", "for b in brackets:\\l", "if b == '(':\\l", "depth += 1\\l", "if depth < 0:\\l", "return False\\l"], ["from typing import *\\ldef correct_bracketing(brackets: str):...\\lcorrect_bracketing(')((')\\l", "correct_bracketing", "depth = 0\\l", "for b in brackets:\\l", "if b == '(':\\l", "depth -= 1\\l", "if depth < 0:\\l", "return False\\l"]], "prime_paths_linenumbers": [[7, 8, 11, 6, 13], [7, 10, 11, 6, 13], [8, 11, 6, 7, 10], [10, 11, 6, 7, 8], [1, 15, 5, 6, 13], [1, 15, 5, 6, 7, 8, 11, 12], [1, 15, 5, 6, 7, 10, 11, 12]], "covered_statements_linenumbers": [1, 4, 5, 6, 7, 10, 11, 12, 15], "missing_statements_linenumbers": [8, 13], "covered_prime_paths_linenumbers": [[1, 15, 5, 6, 7, 10, 11, 12]], "missing_prime_paths_linenumbers": [[7, 8, 11, 6, 13], [7, 10, 11, 6, 13], [8, 11, 6, 7, 10], [10, 11, 6, 7, 8], [1, 15, 5, 6, 13], [1, 15, 5, 6, 7, 8, 11, 12]], "num_total_prime_paths": 7, "num_covered_paths": 1, "prime_path_coverage": 0.14, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_61__0_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_61__0_CFG.dot"}
{"humaneval_id": "HumanEval_158__1", "python_file": "HumanEval_158__1/main.py", "input_file": "HumanEval_158__1/input.txt", "prime_paths_nodes": [["1", "6", "3"]], "prime_paths_statements": [["from typing import *\\ldef find_max(words):...\\lfind_max(['name', 'enam', 'game'])\\l", "find_max", "return sorted(words, key=lambda x: (-len(set(x)), x))[0]\\l"]], "prime_paths_linenumbers": [[1, 7, 5]], "covered_statements_linenumbers": [1, 4, 5, 7], "missing_statements_linenumbers": [], "covered_prime_paths_linenumbers": [[1, 7, 5]], "missing_prime_paths_linenumbers": [], "num_total_prime_paths": 1, "num_covered_paths": 1, "prime_path_coverage": 1.0, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_158__1_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_158__1_CFG.dot"}
{"humaneval_id": "HumanEval_153", "python_file": "HumanEval_153/main.py", "input_file": "HumanEval_153/input.txt", "prime_paths_nodes": [["11", "19", "10", "12", "22"], ["11", "19", "20", "10", "12", "22"], ["19", "10", "11"], ["19", "20", "10", "11"], ["20", "10", "11", "19"], ["1", "25", "3", "10", "11", "19", "20"], ["1", "25", "3", "10", "12", "22"]], "prime_paths_statements": [["val = len([x for x in s if x.isalpha() and x.isupper()]) - len([x for x in\\l    s if x.isalpha() and x.islower()])\\l", "if val > my_val:\\l", "for s in extensions:\\l", "ans = class_name + '.' + strong\\l", "return ans\\l"], ["val = len([x for x in s if x.isalpha() and x.isupper()]) - len([x for x in\\l    s if x.isalpha() and x.islower()])\\l", "if val > my_val:\\l", "strong = s\\lmy_val = val\\l", "for s in extensions:\\l", "ans = class_name + '.' + strong\\l", "return ans\\l"], ["if val > my_val:\\l", "for s in extensions:\\l", "val = len([x for x in s if x.isalpha() and x.isupper()]) - len([x for x in\\l    s if x.isalpha() and x.islower()])\\l"], ["if val > my_val:\\l", "strong = s\\lmy_val = val\\l", "for s in extensions:\\l", "val = len([x for x in s if x.isalpha() and x.isupper()]) - len([x for x in\\l    s if x.isalpha() and x.islower()])\\l"], ["strong = s\\lmy_val = val\\l", "for s in extensions:\\l", "val = len([x for x in s if x.isalpha() and x.isupper()]) - len([x for x in\\l    s if x.isalpha() and x.islower()])\\l", "if val > my_val:\\l"], ["from typing import *\\ldef Strongest_Extension(class_name, extensions):...\\lStrongest_Extension('Watashi', ['tEN', 'niNE', 'eIGHt8OKe'])\\l", "Strongest_Extension", "strong = extensions[0]\\lmy_val = len([x for x in extensions[0] if x.isalpha() and x.isupper()]) - len([\\l    x for x in extensions[0] if x.isalpha() and x.islower()])\\l", "for s in extensions:\\l", "val = len([x for x in s if x.isalpha() and x.isupper()]) - len([x for x in\\l    s if x.isalpha() and x.islower()])\\l", "if val > my_val:\\l", "strong = s\\lmy_val = val\\l"], ["from typing import *\\ldef Strongest_Extension(class_name, extensions):...\\lStrongest_Extension('Watashi', ['tEN', 'niNE', 'eIGHt8OKe'])\\l", "Strongest_Extension", "strong = extensions[0]\\lmy_val = len([x for x in extensions[0] if x.isalpha() and x.isupper()]) - len([\\l    x for x in extensions[0] if x.isalpha() and x.islower()])\\l", "for s in extensions:\\l", "ans = class_name + '.' + strong\\l", "return ans\\l"]], "prime_paths_linenumbers": [[6, 7, 5, 11, 12], [6, 7, 8, 9, 5, 11, 12], [7, 5, 6], [7, 8, 9, 5, 6], [8, 9, 5, 6, 7], [1, 15, 3, 4, 5, 6, 7, 8, 9], [1, 15, 3, 4, 5, 11, 12]], "covered_statements_linenumbers": [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15], "missing_statements_linenumbers": [], "covered_prime_paths_linenumbers": [[6, 7, 5, 11, 12], [6, 7, 8, 9, 5, 11, 12], [7, 5, 6], [7, 8, 9, 5, 6], [8, 9, 5, 6, 7], [1, 15, 3, 4, 5, 6, 7, 8, 9], [1, 15, 3, 4, 5, 11, 12]], "missing_prime_paths_linenumbers": [], "num_total_prime_paths": 7, "num_covered_paths": 7, "prime_path_coverage": 1.0, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_153_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_153_CFG.dot"}
{"humaneval_id": "HumanEval_126", "python_file": "HumanEval_126/main.py", "input_file": "HumanEval_126/input.txt", "prime_paths_nodes": [["6", "5", "7", "9"], ["6", "5", "7", "10", "15"], ["6", "5", "7", "10", "17"], ["1", "21", "3", "5", "6"], ["1", "21", "3", "5", "7", "9"], ["1", "21", "3", "5", "7", "10", "15"], ["1", "21", "3", "5", "7", "10", "17"]], "prime_paths_statements": [["count_digit[i] += 1\\l", "for i in lst:\\l", "if any(count_digit[i] > 2 for i in lst):\\l", "return False\\l"], ["count_digit[i] += 1\\l", "for i in lst:\\l", "if any(count_digit[i] > 2 for i in lst):\\l", "if all(lst[i - 1] <= lst[i] for i in range(1, len(lst))):\\l", "return True\\l"], ["count_digit[i] += 1\\l", "for i in lst:\\l", "if any(count_digit[i] > 2 for i in lst):\\l", "if all(lst[i - 1] <= lst[i] for i in range(1, len(lst))):\\l", "return False\\l"], ["from typing import *\\ldef is_sorted(lst):...\\lis_sorted([5])\\l", "is_sorted", "count_digit = dict([(i, 0) for i in lst])\\l", "for i in lst:\\l", "count_digit[i] += 1\\l"], ["from typing import *\\ldef is_sorted(lst):...\\lis_sorted([5])\\l", "is_sorted", "count_digit = dict([(i, 0) for i in lst])\\l", "for i in lst:\\l", "if any(count_digit[i] > 2 for i in lst):\\l", "return False\\l"], ["from typing import *\\ldef is_sorted(lst):...\\lis_sorted([5])\\l", "is_sorted", "count_digit = dict([(i, 0) for i in lst])\\l", "for i in lst:\\l", "if any(count_digit[i] > 2 for i in lst):\\l", "if all(lst[i - 1] <= lst[i] for i in range(1, len(lst))):\\l", "return True\\l"], ["from typing import *\\ldef is_sorted(lst):...\\lis_sorted([5])\\l", "is_sorted", "count_digit = dict([(i, 0) for i in lst])\\l", "for i in lst:\\l", "if any(count_digit[i] > 2 for i in lst):\\l", "if all(lst[i - 1] <= lst[i] for i in range(1, len(lst))):\\l", "return False\\l"]], "prime_paths_linenumbers": [[5, 4, 6, 7], [5, 4, 6, 8, 9], [5, 4, 6, 8, 11], [1, 15, 3, 4, 5], [1, 15, 3, 4, 6, 7], [1, 15, 3, 4, 6, 8, 9], [1, 15, 3, 4, 6, 8, 11]], "covered_statements_linenumbers": [1, 2, 3, 4, 5, 6, 8, 9, 15], "missing_statements_linenumbers": [7, 11], "covered_prime_paths_linenumbers": [[5, 4, 6, 8, 9], [1, 15, 3, 4, 5], [1, 15, 3, 4, 6, 8, 9]], "missing_prime_paths_linenumbers": [[5, 4, 6, 7], [5, 4, 6, 8, 11], [1, 15, 3, 4, 6, 7], [1, 15, 3, 4, 6, 8, 11]], "num_total_prime_paths": 7, "num_covered_paths": 3, "prime_path_coverage": 0.43, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_126_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_126_CFG.dot"}
{"humaneval_id": "HumanEval_1__0", "python_file": "HumanEval_1__0/main.py", "input_file": "HumanEval_1__0/input.txt", "prime_paths_nodes": [["5", "7", "4", "6"], ["5", "9", "4", "6"], ["5", "9", "10", "13", "4", "6"], ["5", "9", "10", "13", "14", "4", "6"], ["7", "4", "5", "9", "10", "13", "14"], ["9", "4", "5", "7"], ["9", "10", "13", "4", "5", "7"], ["9", "10", "13", "14", "4", "5", "7"], ["10", "13", "4", "5", "9"], ["10", "13", "14", "4", "5", "9"], ["13", "4", "5", "9", "10"], ["13", "14", "4", "5", "9", "10"], ["14", "4", "5", "9", "10", "13"], ["1", "22", "3", "4", "6"], ["1", "22", "3", "4", "5", "7"], ["1", "22", "3", "4", "5", "9", "10", "13", "14"]], "prime_paths_statements": [["if c == '(':\\l", "current_depth += 1\\lcurrent_string.append(c)\\l", "for c in paren_string:\\l", "return result\\l"], ["if c == '(':\\l", "if c == ')':\\l", "for c in paren_string:\\l", "return result\\l"], ["if c == '(':\\l", "if c == ')':\\l", "current_depth -= 1\\lcurrent_string.append(c)\\l", "if current_depth == 0:\\l", "for c in paren_string:\\l", "return result\\l"], ["if c == '(':\\l", "if c == ')':\\l", "current_depth -= 1\\lcurrent_string.append(c)\\l", "if current_depth == 0:\\l", "result.append(''.join(current_string))\\lcurrent_string.clear()\\l", "for c in paren_string:\\l", "return result\\l"], ["current_depth += 1\\lcurrent_string.append(c)\\l", "for c in paren_string:\\l", "if c == '(':\\l", "if c == ')':\\l", "current_depth -= 1\\lcurrent_string.append(c)\\l", "if current_depth == 0:\\l", "result.append(''.join(current_string))\\lcurrent_string.clear()\\l"], ["if c == ')':\\l", "for c in paren_string:\\l", "if c == '(':\\l", "current_depth += 1\\lcurrent_string.append(c)\\l"], ["if c == ')':\\l", "current_depth -= 1\\lcurrent_string.append(c)\\l", "if current_depth == 0:\\l", "for c in paren_string:\\l", "if c == '(':\\l", "current_depth += 1\\lcurrent_string.append(c)\\l"], ["if c == ')':\\l", "current_depth -= 1\\lcurrent_string.append(c)\\l", "if current_depth == 0:\\l", "result.append(''.join(current_string))\\lcurrent_string.clear()\\l", "for c in paren_string:\\l", "if c == '(':\\l", "current_depth += 1\\lcurrent_string.append(c)\\l"], ["current_depth -= 1\\lcurrent_string.append(c)\\l", "if current_depth == 0:\\l", "for c in paren_string:\\l", "if c == '(':\\l", "if c == ')':\\l"], ["current_depth -= 1\\lcurrent_string.append(c)\\l", "if current_depth == 0:\\l", "result.append(''.join(current_string))\\lcurrent_string.clear()\\l", "for c in paren_string:\\l", "if c == '(':\\l", "if c == ')':\\l"], ["if current_depth == 0:\\l", "for c in paren_string:\\l", "if c == '(':\\l", "if c == ')':\\l", "current_depth -= 1\\lcurrent_string.append(c)\\l"], ["if current_depth == 0:\\l", "result.append(''.join(current_string))\\lcurrent_string.clear()\\l", "for c in paren_string:\\l", "if c == '(':\\l", "if c == ')':\\l", "current_depth -= 1\\lcurrent_string.append(c)\\l"], ["result.append(''.join(current_string))\\lcurrent_string.clear()\\l", "for c in paren_string:\\l", "if c == '(':\\l", "if c == ')':\\l", "current_depth -= 1\\lcurrent_string.append(c)\\l", "if current_depth == 0:\\l"], ["from typing import *\\ldef separate_paren_groups(paren_string: str) ->List[str]:...\\lseparate_paren_groups('(()(())((())))')\\l", "separate_paren_groups", "result = []\\lcurrent_string = []\\lcurrent_depth = 0\\l", "for c in paren_string:\\l", "return result\\l"], ["from typing import *\\ldef separate_paren_groups(paren_string: str) ->List[str]:...\\lseparate_paren_groups('(()(())((())))')\\l", "separate_paren_groups", "result = []\\lcurrent_string = []\\lcurrent_depth = 0\\l", "for c in paren_string:\\l", "if c == '(':\\l", "current_depth += 1\\lcurrent_string.append(c)\\l"], ["from typing import *\\ldef separate_paren_groups(paren_string: str) ->List[str]:...\\lseparate_paren_groups('(()(())((())))')\\l", "separate_paren_groups", "result = []\\lcurrent_string = []\\lcurrent_depth = 0\\l", "for c in paren_string:\\l", "if c == '(':\\l", "if c == ')':\\l", "current_depth -= 1\\lcurrent_string.append(c)\\l", "if current_depth == 0:\\l", "result.append(''.join(current_string))\\lcurrent_string.clear()\\l"]], "prime_paths_linenumbers": [[10, 11, 12, 9, 21], [10, 13, 9, 21], [10, 13, 14, 15, 17, 9, 21], [10, 13, 14, 15, 17, 18, 19, 9, 21], [11, 12, 9, 10, 13, 14, 15, 17, 18, 19], [13, 9, 10, 11, 12], [13, 14, 15, 17, 9, 10, 11, 12], [13, 14, 15, 17, 18, 19, 9, 10, 11, 12], [14, 15, 17, 9, 10, 13], [14, 15, 17, 18, 19, 9, 10, 13], [17, 9, 10, 13, 14, 15], [17, 18, 19, 9, 10, 13, 14, 15], [18, 19, 9, 10, 13, 14, 15, 17], [1, 23, 5, 6, 7, 9, 21], [1, 23, 5, 6, 7, 9, 10, 11, 12], [1, 23, 5, 6, 7, 9, 10, 13, 14, 15, 17, 18, 19]], "covered_statements_linenumbers": [1, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 21, 23], "missing_statements_linenumbers": [], "covered_prime_paths_linenumbers": [[10, 11, 12, 9, 21], [10, 13, 9, 21], [10, 13, 14, 15, 17, 9, 21], [10, 13, 14, 15, 17, 18, 19, 9, 21], [11, 12, 9, 10, 13, 14, 15, 17, 18, 19], [13, 9, 10, 11, 12], [13, 14, 15, 17, 9, 10, 11, 12], [13, 14, 15, 17, 18, 19, 9, 10, 11, 12], [14, 15, 17, 9, 10, 13], [14, 15, 17, 18, 19, 9, 10, 13], [17, 9, 10, 13, 14, 15], [17, 18, 19, 9, 10, 13, 14, 15], [18, 19, 9, 10, 13, 14, 15, 17], [1, 23, 5, 6, 7, 9, 21], [1, 23, 5, 6, 7, 9, 10, 11, 12], [1, 23, 5, 6, 7, 9, 10, 13, 14, 15, 17, 18, 19]], "missing_prime_paths_linenumbers": [], "num_total_prime_paths": 16, "num_covered_paths": 16, "prime_path_coverage": 1.0, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_1__0_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_1__0_CFG.dot"}
{"humaneval_id": "HumanEval_5", "python_file": "HumanEval_5/main.py", "input_file": "HumanEval_5/input.txt", "prime_paths_nodes": [["8", "7", "9", "13"], ["1", "16", "3", "4"], ["1", "16", "3", "5", "7", "8"], ["1", "16", "3", "5", "7", "9", "13"]], "prime_paths_statements": [["result.append(n)\\lresult.append(delimeter)\\l", "for n in numbers[:-1]:\\l", "result.append(numbers[-1])\\l", "return result\\l"], ["from typing import *\\ldef intersperse(numbers: List[int], delimeter: int) ->List[int]:...\\lintersperse([], 7)\\l", "intersperse", "if not numbers:\\l", "return []\\l"], ["from typing import *\\ldef intersperse(numbers: List[int], delimeter: int) ->List[int]:...\\lintersperse([], 7)\\l", "intersperse", "if not numbers:\\l", "result = []\\l", "for n in numbers[:-1]:\\l", "result.append(n)\\lresult.append(delimeter)\\l"], ["from typing import *\\ldef intersperse(numbers: List[int], delimeter: int) ->List[int]:...\\lintersperse([], 7)\\l", "intersperse", "if not numbers:\\l", "result = []\\l", "for n in numbers[:-1]:\\l", "result.append(numbers[-1])\\l", "return result\\l"]], "prime_paths_linenumbers": [[9, 10, 8, 12, 14], [1, 16, 3, 4], [1, 16, 3, 6, 8, 9, 10], [1, 16, 3, 6, 8, 12, 14]], "covered_statements_linenumbers": [1, 2, 3, 4, 16], "missing_statements_linenumbers": [6, 8, 9, 10, 12, 14], "covered_prime_paths_linenumbers": [[1, 16, 3, 4]], "missing_prime_paths_linenumbers": [[9, 10, 8, 12, 14], [1, 16, 3, 6, 8, 9, 10], [1, 16, 3, 6, 8, 12, 14]], "num_total_prime_paths": 4, "num_covered_paths": 1, "prime_path_coverage": 0.25, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_5_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_5_CFG.dot"}
{"humaneval_id": "HumanEval_11__0", "python_file": "HumanEval_11__0/main.py", "input_file": "HumanEval_11__0/input.txt", "prime_paths_nodes": [["5", "6"], ["5", "8"], ["1", "15", "3", "12"]], "prime_paths_statements": [["if i == j:\\l", "return '0'\\l"], ["if i == j:\\l", "return '1'\\l"], ["from typing import *\\ldef string_xor(a: str, b: str) ->str:...\\lstring_xor('1', '1')\\l", "string_xor", "def xor(i, j):...\\l", "return ''.join(xor(x, y) for x, y in zip(a, b))\\l"]], "prime_paths_linenumbers": [[6, 7], [6, 9], [1, 13, 5, 11]], "covered_statements_linenumbers": [1, 4, 5, 6, 7, 11, 13], "missing_statements_linenumbers": [9], "covered_prime_paths_linenumbers": [[6, 7], [1, 13, 5, 11]], "missing_prime_paths_linenumbers": [[6, 9]], "num_total_prime_paths": 3, "num_covered_paths": 2, "prime_path_coverage": 0.67, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_11__0_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_11__0_CFG.dot"}
{"humaneval_id": "HumanEval_62__1", "python_file": "HumanEval_62__1/main.py", "input_file": "HumanEval_62__1/input.txt", "prime_paths_nodes": [["1", "6", "3"]], "prime_paths_statements": [["from typing import *\\ldef derivative(xs: list):...\\lderivative([3, 2, 1])\\l", "derivative", "return [(i * x) for i, x in enumerate(xs)][1:]\\l"]], "prime_paths_linenumbers": [[1, 7, 5]], "covered_statements_linenumbers": [1, 4, 5, 7], "missing_statements_linenumbers": [], "covered_prime_paths_linenumbers": [[1, 7, 5]], "missing_prime_paths_linenumbers": [], "num_total_prime_paths": 1, "num_covered_paths": 1, "prime_path_coverage": 1.0, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_62__1_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_62__1_CFG.dot"}
{"humaneval_id": "HumanEval_75__1", "python_file": "HumanEval_75__1/main.py", "input_file": "HumanEval_75__1/input.txt", "prime_paths_nodes": [["5", "7", "9"], ["7", "5", "8"], ["16", "18", "14", "17"], ["16", "19", "14", "17"], ["18", "14", "16", "19", "22", "24"], ["18", "14", "16", "19", "22", "25", "28", "30"], ["18", "14", "16", "19", "22", "25", "28", "31", "33"], ["22", "24", "19", "14", "17"], ["22", "25", "19", "14", "17"], ["22", "24", "19", "14", "16", "18"], ["22", "25", "19", "14", "16", "18"], ["24", "19", "22", "25", "28", "30"], ["24", "19", "22", "25", "28", "31", "33"], ["28", "30", "25", "19", "14", "17"], ["28", "31", "25", "19", "14", "17"], ["28", "30", "25", "19", "14", "16", "18"], ["28", "31", "25", "19", "14", "16", "18"], ["28", "30", "25", "19", "22", "24"], ["28", "31", "25", "19", "22", "24"], ["30", "25", "28", "31", "33"], ["31", "25", "28", "30"], ["1", "38", "3", "14", "17"], ["1", "38", "3", "14", "16", "18"], ["1", "38", "3", "14", "16", "19", "22", "24"], ["1", "38", "3", "14", "16", "19", "22", "25", "28", "30"], ["1", "38", "3", "14", "16", "19", "22", "25", "28", "31", "33"]], "prime_paths_statements": [["for j in range(2, n):\\l", "if n % j == 0:\\l", "return False\\l"], ["if n % j == 0:\\l", "for j in range(2, n):\\l", "return True\\l"], ["if not is_prime(i):\\l", "continue\\l", "for i in range(2, 101):\\l", "return False\\l"], ["if not is_prime(i):\\l", "for j in range(2, 101):\\l", "for i in range(2, 101):\\l", "return False\\l"], ["continue\\l", "for i in range(2, 101):\\l", "if not is_prime(i):\\l", "for j in range(2, 101):\\l", "if not is_prime(j):\\l", "continue\\l"], ["continue\\l", "for i in range(2, 101):\\l", "if not is_prime(i):\\l", "for j in range(2, 101):\\l", "if not is_prime(j):\\l", "for k in range(2, 101):\\l", "if not is_prime(k):\\l", "continue\\l"], ["continue\\l", "for i in range(2, 101):\\l", "if not is_prime(i):\\l", "for j in range(2, 101):\\l", "if not is_prime(j):\\l", "for k in range(2, 101):\\l", "if not is_prime(k):\\l", "if i * j * k == a:\\l", "return True\\l"], ["if not is_prime(j):\\l", "continue\\l", "for j in range(2, 101):\\l", "for i in range(2, 101):\\l", "return False\\l"], ["if not is_prime(j):\\l", "for k in range(2, 101):\\l", "for j in range(2, 101):\\l", "for i in range(2, 101):\\l", "return False\\l"], ["if not is_prime(j):\\l", "continue\\l", "for j in range(2, 101):\\l", "for i in range(2, 101):\\l", "if not is_prime(i):\\l", "continue\\l"], ["if not is_prime(j):\\l", "for k in range(2, 101):\\l", "for j in range(2, 101):\\l", "for i in range(2, 101):\\l", "if not is_prime(i):\\l", "continue\\l"], ["continue\\l", "for j in range(2, 101):\\l", "if not is_prime(j):\\l", "for k in range(2, 101):\\l", "if not is_prime(k):\\l", "continue\\l"], ["continue\\l", "for j in range(2, 101):\\l", "if not is_prime(j):\\l", "for k in range(2, 101):\\l", "if not is_prime(k):\\l", "if i * j * k == a:\\l", "return True\\l"], ["if not is_prime(k):\\l", "continue\\l", "for k in range(2, 101):\\l", "for j in range(2, 101):\\l", "for i in range(2, 101):\\l", "return False\\l"], ["if not is_prime(k):\\l", "if i * j * k == a:\\l", "for k in range(2, 101):\\l", "for j in range(2, 101):\\l", "for i in range(2, 101):\\l", "return False\\l"], ["if not is_prime(k):\\l", "continue\\l", "for k in range(2, 101):\\l", "for j in range(2, 101):\\l", "for i in range(2, 101):\\l", "if not is_prime(i):\\l", "continue\\l"], ["if not is_prime(k):\\l", "if i * j * k == a:\\l", "for k in range(2, 101):\\l", "for j in range(2, 101):\\l", "for i in range(2, 101):\\l", "if not is_prime(i):\\l", "continue\\l"], ["if not is_prime(k):\\l", "continue\\l", "for k in range(2, 101):\\l", "for j in range(2, 101):\\l", "if not is_prime(j):\\l", "continue\\l"], ["if not is_prime(k):\\l", "if i * j * k == a:\\l", "for k in range(2, 101):\\l", "for j in range(2, 101):\\l", "if not is_prime(j):\\l", "continue\\l"], ["continue\\l", "for k in range(2, 101):\\l", "if not is_prime(k):\\l", "if i * j * k == a:\\l", "return True\\l"], ["if i * j * k == a:\\l", "for k in range(2, 101):\\l", "if not is_prime(k):\\l", "continue\\l"], ["from typing import *\\ldef is_multiply_prime(a):...\\lis_multiply_prime(125)\\l", "is_multiply_prime", "def is_prime(n):...\\l", "for i in range(2, 101):\\l", "return False\\l"], ["from typing import *\\ldef is_multiply_prime(a):...\\lis_multiply_prime(125)\\l", "is_multiply_prime", "def is_prime(n):...\\l", "for i in range(2, 101):\\l", "if not is_prime(i):\\l", "continue\\l"], ["from typing import *\\ldef is_multiply_prime(a):...\\lis_multiply_prime(125)\\l", "is_multiply_prime", "def is_prime(n):...\\l", "for i in range(2, 101):\\l", "if not is_prime(i):\\l", "for j in range(2, 101):\\l", "if not is_prime(j):\\l", "continue\\l"], ["from typing import *\\ldef is_multiply_prime(a):...\\lis_multiply_prime(125)\\l", "is_multiply_prime", "def is_prime(n):...\\l", "for i in range(2, 101):\\l", "if not is_prime(i):\\l", "for j in range(2, 101):\\l", "if not is_prime(j):\\l", "for k in range(2, 101):\\l", "if not is_prime(k):\\l", "continue\\l"], ["from typing import *\\ldef is_multiply_prime(a):...\\lis_multiply_prime(125)\\l", "is_multiply_prime", "def is_prime(n):...\\l", "for i in range(2, 101):\\l", "if not is_prime(i):\\l", "for j in range(2, 101):\\l", "if not is_prime(j):\\l", "for k in range(2, 101):\\l", "if not is_prime(k):\\l", "if i * j * k == a:\\l", "return True\\l"]], "prime_paths_linenumbers": [[6, 7, 8], [7, 6, 9], [12, 13, 11, 22], [12, 14, 11, 22], [13, 11, 12, 14, 15, 16], [13, 11, 12, 14, 15, 17, 18, 19], [13, 11, 12, 14, 15, 17, 18, 20, 21], [15, 16, 14, 11, 22], [15, 17, 14, 11, 22], [15, 16, 14, 11, 12, 13], [15, 17, 14, 11, 12, 13], [16, 14, 15, 17, 18, 19], [16, 14, 15, 17, 18, 20, 21], [18, 19, 17, 14, 11, 22], [18, 20, 17, 14, 11, 22], [18, 19, 17, 14, 11, 12, 13], [18, 20, 17, 14, 11, 12, 13], [18, 19, 17, 14, 15, 16], [18, 20, 17, 14, 15, 16], [19, 17, 18, 20, 21], [20, 17, 18, 19], [1, 24, 5, 11, 22], [1, 24, 5, 11, 12, 13], [1, 24, 5, 11, 12, 14, 15, 16], [1, 24, 5, 11, 12, 14, 15, 17, 18, 19], [1, 24, 5, 11, 12, 14, 15, 17, 18, 20, 21]], "covered_statements_linenumbers": [1, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 24], "missing_statements_linenumbers": [22], "covered_prime_paths_linenumbers": [[6, 7, 8], [7, 6, 9], [13, 11, 12, 14, 15, 16], [13, 11, 12, 14, 15, 17, 18, 19], [13, 11, 12, 14, 15, 17, 18, 20, 21], [15, 16, 14, 11, 12, 13], [15, 17, 14, 11, 12, 13], [16, 14, 15, 17, 18, 19], [16, 14, 15, 17, 18, 20, 21], [18, 19, 17, 14, 11, 12, 13], [18, 20, 17, 14, 11, 12, 13], [18, 19, 17, 14, 15, 16], [18, 20, 17, 14, 15, 16], [19, 17, 18, 20, 21], [20, 17, 18, 19], [1, 24, 5, 11, 12, 13], [1, 24, 5, 11, 12, 14, 15, 16], [1, 24, 5, 11, 12, 14, 15, 17, 18, 19], [1, 24, 5, 11, 12, 14, 15, 17, 18, 20, 21]], "missing_prime_paths_linenumbers": [[12, 13, 11, 22], [12, 14, 11, 22], [15, 16, 14, 11, 22], [15, 17, 14, 11, 22], [18, 19, 17, 14, 11, 22], [18, 20, 17, 14, 11, 22], [1, 24, 5, 11, 22]], "num_total_prime_paths": 26, "num_covered_paths": 19, "prime_path_coverage": 0.73, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_75__1_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_75__1_CFG.dot"}
{"humaneval_id": "HumanEval_127__0", "python_file": "HumanEval_127__0/main.py", "input_file": "HumanEval_127__0/input.txt", "prime_paths_nodes": [["5", "6"], ["5", "7", "9"], ["5", "7", "10", "14"], ["5", "7", "10", "13", "15"], ["13", "10", "14"], ["1", "28", "3", "22", "23"], ["1", "28", "3", "22", "24"]], "prime_paths_statements": [["if num == 1 or num == 0:\\l", "return False\\l"], ["if num == 1 or num == 0:\\l", "if num == 2:\\l", "return True\\l"], ["if num == 1 or num == 0:\\l", "if num == 2:\\l", "for i in range(2, num):\\l", "return True\\l"], ["if num == 1 or num == 0:\\l", "if num == 2:\\l", "for i in range(2, num):\\l", "if num % i == 0:\\l", "return False\\l"], ["if num % i == 0:\\l", "for i in range(2, num):\\l", "return True\\l"], ["from typing import *\\ldef intersection(interval1, interval2):...\\lintersection([-2, -2], [-3, -2])\\l", "intersection", "def is_prime(num):...\\ll = max(interval1[0], interval2[0])\\lr = min(interval1[1], interval2[1])\\llength = r - l\\l", "if length > 0 and is_prime(length):\\l", "return 'YES'\\l"], ["from typing import *\\ldef intersection(interval1, interval2):...\\lintersection([-2, -2], [-3, -2])\\l", "intersection", "def is_prime(num):...\\ll = max(interval1[0], interval2[0])\\lr = min(interval1[1], interval2[1])\\llength = r - l\\l", "if length > 0 and is_prime(length):\\l", "return 'NO'\\l"]], "prime_paths_linenumbers": [[6, 7], [6, 8, 9], [6, 8, 10, 13], [6, 8, 10, 11, 12], [11, 10, 13], [1, 22, 5, 15, 16, 17, 18, 19], [1, 22, 5, 15, 16, 17, 18, 20]], "covered_statements_linenumbers": [1, 4, 5, 15, 16, 17, 18, 20, 22], "missing_statements_linenumbers": [6, 7, 8, 9, 10, 11, 12, 13, 19], "covered_prime_paths_linenumbers": [[1, 22, 5, 15, 16, 17, 18, 20]], "missing_prime_paths_linenumbers": [[6, 7], [6, 8, 9], [6, 8, 10, 13], [6, 8, 10, 11, 12], [11, 10, 13], [1, 22, 5, 15, 16, 17, 18, 19]], "num_total_prime_paths": 7, "num_covered_paths": 1, "prime_path_coverage": 0.14, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_127__0_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_127__0_CFG.dot"}
{"humaneval_id": "HumanEval_110__0", "python_file": "HumanEval_110__0/main.py", "input_file": "HumanEval_110__0/input.txt", "prime_paths_nodes": [["5", "4", "6", "9", "11"], ["5", "7", "4", "6", "9", "11"], ["5", "4", "6", "10", "13"], ["5", "7", "4", "6", "10", "13"], ["5", "4", "6", "10", "14"], ["5", "7", "4", "6", "10", "14"], ["7", "4", "5"], ["9", "6", "10", "13"], ["9", "11", "6", "10", "13"], ["9", "6", "10", "14"], ["9", "11", "6", "10", "14"], ["11", "6", "9"], ["1", "18", "3", "4", "5", "7"], ["1", "18", "3", "4", "6", "9", "11"], ["1", "18", "3", "4", "6", "10", "13"], ["1", "18", "3", "4", "6", "10", "14"]], "prime_paths_statements": [["if i % 2 == 1:\\l", "for i in lst1:\\l", "for i in lst2:\\l", "if i % 2 == 0:\\l", "even += 1\\l"], ["if i % 2 == 1:\\l", "odd += 1\\l", "for i in lst1:\\l", "for i in lst2:\\l", "if i % 2 == 0:\\l", "even += 1\\l"], ["if i % 2 == 1:\\l", "for i in lst1:\\l", "for i in lst2:\\l", "if even >= odd:\\l", "return 'YES'\\l"], ["if i % 2 == 1:\\l", "odd += 1\\l", "for i in lst1:\\l", "for i in lst2:\\l", "if even >= odd:\\l", "return 'YES'\\l"], ["if i % 2 == 1:\\l", "for i in lst1:\\l", "for i in lst2:\\l", "if even >= odd:\\l", "return 'NO'\\l"], ["if i % 2 == 1:\\l", "odd += 1\\l", "for i in lst1:\\l", "for i in lst2:\\l", "if even >= odd:\\l", "return 'NO'\\l"], ["odd += 1\\l", "for i in lst1:\\l", "if i % 2 == 1:\\l"], ["if i % 2 == 0:\\l", "for i in lst2:\\l", "if even >= odd:\\l", "return 'YES'\\l"], ["if i % 2 == 0:\\l", "even += 1\\l", "for i in lst2:\\l", "if even >= odd:\\l", "return 'YES'\\l"], ["if i % 2 == 0:\\l", "for i in lst2:\\l", "if even >= odd:\\l", "return 'NO'\\l"], ["if i % 2 == 0:\\l", "even += 1\\l", "for i in lst2:\\l", "if even >= odd:\\l", "return 'NO'\\l"], ["even += 1\\l", "for i in lst2:\\l", "if i % 2 == 0:\\l"], ["from typing import *\\ldef exchange(lst1, lst2):...\\lexchange([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1])\\l", "exchange", "odd = 0\\leven = 0\\l", "for i in lst1:\\l", "if i % 2 == 1:\\l", "odd += 1\\l"], ["from typing import *\\ldef exchange(lst1, lst2):...\\lexchange([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1])\\l", "exchange", "odd = 0\\leven = 0\\l", "for i in lst1:\\l", "for i in lst2:\\l", "if i % 2 == 0:\\l", "even += 1\\l"], ["from typing import *\\ldef exchange(lst1, lst2):...\\lexchange([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1])\\l", "exchange", "odd = 0\\leven = 0\\l", "for i in lst1:\\l", "for i in lst2:\\l", "if even >= odd:\\l", "return 'YES'\\l"], ["from typing import *\\ldef exchange(lst1, lst2):...\\lexchange([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1])\\l", "exchange", "odd = 0\\leven = 0\\l", "for i in lst1:\\l", "for i in lst2:\\l", "if even >= odd:\\l", "return 'NO'\\l"]], "prime_paths_linenumbers": [[8, 7, 10, 11, 12], [8, 9, 7, 10, 11, 12], [8, 7, 10, 13, 14], [8, 9, 7, 10, 13, 14], [8, 7, 10, 13, 15], [8, 9, 7, 10, 13, 15], [9, 7, 8], [11, 10, 13, 14], [11, 12, 10, 13, 14], [11, 10, 13, 15], [11, 12, 10, 13, 15], [12, 10, 11], [1, 17, 5, 6, 7, 8, 9], [1, 17, 5, 6, 7, 10, 11, 12], [1, 17, 5, 6, 7, 10, 13, 14], [1, 17, 5, 6, 7, 10, 13, 15]], "covered_statements_linenumbers": [1, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17], "missing_statements_linenumbers": [12, 14], "covered_prime_paths_linenumbers": [[8, 7, 10, 13, 15], [8, 9, 7, 10, 13, 15], [9, 7, 8], [11, 10, 13, 15], [1, 17, 5, 6, 7, 8, 9], [1, 17, 5, 6, 7, 10, 13, 15]], "missing_prime_paths_linenumbers": [[8, 7, 10, 11, 12], [8, 9, 7, 10, 11, 12], [8, 7, 10, 13, 14], [8, 9, 7, 10, 13, 14], [11, 10, 13, 14], [11, 12, 10, 13, 14], [11, 12, 10, 13, 15], [12, 10, 11], [1, 17, 5, 6, 7, 10, 11, 12], [1, 17, 5, 6, 7, 10, 13, 14]], "num_total_prime_paths": 16, "num_covered_paths": 6, "prime_path_coverage": 0.38, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_110__0_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_110__0_CFG.dot"}
{"humaneval_id": "HumanEval_159", "python_file": "HumanEval_159/main.py", "input_file": "HumanEval_159/input.txt", "prime_paths_nodes": [["1", "10", "3", "4"], ["1", "10", "3", "6"]], "prime_paths_statements": [["from typing import *\\ldef eat(number, need, remaining):...\\leat(5, 6, 10)\\l", "eat", "if need <= remaining:\\l", "return [number + need, remaining - need]\\l"], ["from typing import *\\ldef eat(number, need, remaining):...\\leat(5, 6, 10)\\l", "eat", "if need <= remaining:\\l", "return [number + remaining, 0]\\l"]], "prime_paths_linenumbers": [[1, 8, 3, 4], [1, 8, 3, 6]], "covered_statements_linenumbers": [1, 2, 3, 4, 8], "missing_statements_linenumbers": [6], "covered_prime_paths_linenumbers": [[1, 8, 3, 4]], "missing_prime_paths_linenumbers": [[1, 8, 3, 6]], "num_total_prime_paths": 2, "num_covered_paths": 1, "prime_path_coverage": 0.5, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_159_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_159_CFG.dot"}
{"humaneval_id": "HumanEval_55__1", "python_file": "HumanEval_55__1/main.py", "input_file": "HumanEval_55__1/input.txt", "prime_paths_nodes": [["1", "12", "3", "4"], ["1", "12", "3", "5", "7"], ["1", "12", "3", "5", "8"]], "prime_paths_statements": [["from typing import *\\ldef fib(n: int):...\\lfib(11)\\l", "fib", "if n == 0:\\l", "return 0\\l"], ["from typing import *\\ldef fib(n: int):...\\lfib(11)\\l", "fib", "if n == 0:\\l", "if n == 1:\\l", "return 1\\l"], ["from typing import *\\ldef fib(n: int):...\\lfib(11)\\l", "fib", "if n == 0:\\l", "if n == 1:\\l", "return fib(n - 1) + fib(n - 2)\\l"]], "prime_paths_linenumbers": [[1, 11, 5, 6], [1, 11, 5, 7, 8], [1, 11, 5, 7, 9]], "covered_statements_linenumbers": [1, 4, 5, 6, 7, 8, 9, 11], "missing_statements_linenumbers": [], "covered_prime_paths_linenumbers": [[1, 11, 5, 6], [1, 11, 5, 7, 8], [1, 11, 5, 7, 9]], "missing_prime_paths_linenumbers": [], "num_total_prime_paths": 3, "num_covered_paths": 3, "prime_path_coverage": 1.0, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_55__1_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_55__1_CFG.dot"}
{"humaneval_id": "HumanEval_14", "python_file": "HumanEval_14/main.py", "input_file": "HumanEval_14/input.txt", "prime_paths_nodes": [["7", "4", "8"], ["1", "12", "3", "4", "7"], ["1", "12", "3", "4", "8"]], "prime_paths_statements": [["result.append(string[:i + 1])\\l", "for i in range(len(string)):\\l", "return result\\l"], ["from typing import *\\ldef all_prefixes(string: str) ->List[str]:...\\lall_prefixes('asdfgh')\\l", "all_prefixes", "result = []\\l", "for i in range(len(string)):\\l", "result.append(string[:i + 1])\\l"], ["from typing import *\\ldef all_prefixes(string: str) ->List[str]:...\\lall_prefixes('asdfgh')\\l", "all_prefixes", "result = []\\l", "for i in range(len(string)):\\l", "return result\\l"]], "prime_paths_linenumbers": [[6, 5, 7], [1, 9, 3, 5, 6], [1, 9, 3, 5, 7]], "covered_statements_linenumbers": [1, 2, 3, 5, 6, 7, 9], "missing_statements_linenumbers": [], "covered_prime_paths_linenumbers": [[6, 5, 7], [1, 9, 3, 5, 6], [1, 9, 3, 5, 7]], "missing_prime_paths_linenumbers": [], "num_total_prime_paths": 3, "num_covered_paths": 3, "prime_path_coverage": 1.0, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_14_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_14_CFG.dot"}
{"humaneval_id": "HumanEval_13", "python_file": "HumanEval_13/main.py", "input_file": "HumanEval_13/input.txt", "prime_paths_nodes": [["4", "3", "5"], ["1", "8", "3", "4"], ["1", "8", "3", "5"]], "prime_paths_statements": [["a, b = b, a % b\\l", "while b:\\l", "return a\\l"], ["from typing import *\\ldef greatest_common_divisor(a: int, b: int) ->int:...\\lgreatest_common_divisor(3, 7)\\l", "greatest_common_divisor", "while b:\\l", "a, b = b, a % b\\l"], ["from typing import *\\ldef greatest_common_divisor(a: int, b: int) ->int:...\\lgreatest_common_divisor(3, 7)\\l", "greatest_common_divisor", "while b:\\l", "return a\\l"]], "prime_paths_linenumbers": [[4, 3, 5], [1, 7, 3, 4], [1, 7, 3, 5]], "covered_statements_linenumbers": [1, 2, 3, 4, 5, 7], "missing_statements_linenumbers": [], "covered_prime_paths_linenumbers": [[4, 3, 5], [1, 7, 3, 4], [1, 7, 3, 5]], "missing_prime_paths_linenumbers": [], "num_total_prime_paths": 3, "num_covered_paths": 3, "prime_path_coverage": 1.0, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_13_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_13_CFG.dot"}
{"humaneval_id": "HumanEval_151", "python_file": "HumanEval_151/main.py", "input_file": "HumanEval_151/input.txt", "prime_paths_nodes": [["1", "6", "3"]], "prime_paths_statements": [["from typing import *\\ldef double_the_difference(lst):...\\ldouble_the_difference([0.2, 3, 5])\\l", "double_the_difference", "return sum([(i ** 2) for i in lst if i > 0 and i % 2 != 0 and '.' not in\\l    str(i)])\\l"]], "prime_paths_linenumbers": [[1, 5, 3]], "covered_statements_linenumbers": [1, 2, 3, 5], "missing_statements_linenumbers": [], "covered_prime_paths_linenumbers": [[1, 5, 3]], "missing_prime_paths_linenumbers": [], "num_total_prime_paths": 1, "num_covered_paths": 1, "prime_path_coverage": 1.0, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_151_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_151_CFG.dot"}
{"humaneval_id": "HumanEval_51__0", "python_file": "HumanEval_51__0/main.py", "input_file": "HumanEval_51__0/input.txt", "prime_paths_nodes": [["1", "6", "3"]], "prime_paths_statements": [["from typing import *\\ldef remove_vowels(text):...\\lremove_vowels('')\\l", "remove_vowels", "return ''.join([s for s in te...'a', 'e', 'i', 'o', 'u']])\\l"]], "prime_paths_linenumbers": [[1, 8, 5]], "covered_statements_linenumbers": [8, 1, 4, 5], "missing_statements_linenumbers": [], "covered_prime_paths_linenumbers": [[1, 8, 5]], "missing_prime_paths_linenumbers": [], "num_total_prime_paths": 1, "num_covered_paths": 1, "prime_path_coverage": 1.0, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_51__0_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_51__0_CFG.dot"}
{"humaneval_id": "HumanEval_59", "python_file": "HumanEval_59/main.py", "input_file": "HumanEval_59/input.txt", "prime_paths_nodes": [["5", "6"], ["5", "7", "11"], ["5", "7", "10", "12"], ["10", "7", "11"], ["19", "17", "20"], ["19", "21", "17", "20"], ["21", "17", "19"], ["1", "26", "3", "17", "20"], ["1", "26", "3", "17", "19", "21"]], "prime_paths_statements": [["if k < 2:\\l", "return False\\l"], ["if k < 2:\\l", "for i in range(2, k - 1):\\l", "return True\\l"], ["if k < 2:\\l", "for i in range(2, k - 1):\\l", "if k % i == 0:\\l", "return False\\l"], ["if k % i == 0:\\l", "for i in range(2, k - 1):\\l", "return True\\l"], ["if n % j == 0 and is_prime(j):\\l", "for j in range(2, n + 1):\\l", "return largest\\l"], ["if n % j == 0 and is_prime(j):\\l", "largest = max(largest, j)\\l", "for j in range(2, n + 1):\\l", "return largest\\l"], ["largest = max(largest, j)\\l", "for j in range(2, n + 1):\\l", "if n % j == 0 and is_prime(j):\\l"], ["from typing import *\\ldef largest_prime_factor(n: int):...\\llargest_prime_factor(15)\\l", "largest_prime_factor", "def is_prime(k):...\\llargest = 1\\l", "for j in range(2, n + 1):\\l", "return largest\\l"], ["from typing import *\\ldef largest_prime_factor(n: int):...\\llargest_prime_factor(15)\\l", "largest_prime_factor", "def is_prime(k):...\\llargest = 1\\l", "for j in range(2, n + 1):\\l", "if n % j == 0 and is_prime(j):\\l", "largest = max(largest, j)\\l"]], "prime_paths_linenumbers": [[4, 5], [4, 6, 9], [4, 6, 7, 8], [7, 6, 9], [12, 11, 14], [12, 13, 11, 14], [13, 11, 12], [1, 16, 3, 10, 11, 14], [1, 16, 3, 10, 11, 12, 13]], "covered_statements_linenumbers": [1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16], "missing_statements_linenumbers": [5], "covered_prime_paths_linenumbers": [[4, 6, 9], [4, 6, 7, 8], [7, 6, 9], [12, 11, 14], [12, 13, 11, 14], [13, 11, 12], [1, 16, 3, 10, 11, 14], [1, 16, 3, 10, 11, 12, 13]], "missing_prime_paths_linenumbers": [[4, 5]], "num_total_prime_paths": 9, "num_covered_paths": 8, "prime_path_coverage": 0.89, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_59_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_59_CFG.dot"}
{"humaneval_id": "HumanEval_13__0", "python_file": "HumanEval_13__0/main.py", "input_file": "HumanEval_13__0/input.txt", "prime_paths_nodes": [["4", "3", "5"], ["1", "8", "3", "4"], ["1", "8", "3", "5"]], "prime_paths_statements": [["a, b = b, a % b\\l", "while b:\\l", "return a\\l"], ["from typing import *\\ldef greatest_common_divisor(a: int, b: int) ->int:...\\lgreatest_common_divisor(10, 15)\\l", "greatest_common_divisor", "while b:\\l", "a, b = b, a % b\\l"], ["from typing import *\\ldef greatest_common_divisor(a: int, b: int) ->int:...\\lgreatest_common_divisor(10, 15)\\l", "greatest_common_divisor", "while b:\\l", "return a\\l"]], "prime_paths_linenumbers": [[6, 5, 7], [1, 9, 5, 6], [1, 9, 5, 7]], "covered_statements_linenumbers": [1, 4, 5, 6, 7, 9], "missing_statements_linenumbers": [], "covered_prime_paths_linenumbers": [[6, 5, 7], [1, 9, 5, 6], [1, 9, 5, 7]], "missing_prime_paths_linenumbers": [], "num_total_prime_paths": 3, "num_covered_paths": 3, "prime_path_coverage": 1.0, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_13__0_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_13__0_CFG.dot"}
{"humaneval_id": "HumanEval_56__1", "python_file": "HumanEval_56__1/main.py", "input_file": "HumanEval_56__1/input.txt", "prime_paths_nodes": [["5", "7", "8", "4", "6"], ["5", "9", "8", "4", "6"], ["7", "8", "4", "5", "9"], ["9", "8", "4", "5", "7"], ["1", "15", "3", "4", "6"], ["1", "15", "3", "4", "5", "7", "8", "10"], ["1", "15", "3", "4", "5", "9", "8", "10"]], "prime_paths_statements": [["if b == '<':\\l", "depth += 1\\l", "if depth < 0:\\l", "for b in brackets:\\l", "return depth == 0\\l"], ["if b == '<':\\l", "depth -= 1\\l", "if depth < 0:\\l", "for b in brackets:\\l", "return depth == 0\\l"], ["depth += 1\\l", "if depth < 0:\\l", "for b in brackets:\\l", "if b == '<':\\l", "depth -= 1\\l"], ["depth -= 1\\l", "if depth < 0:\\l", "for b in brackets:\\l", "if b == '<':\\l", "depth += 1\\l"], ["from typing import *\\ldef correct_bracketing(brackets: str):...\\lcorrect_bracketing('<<<><>>>>')\\l", "correct_bracketing", "depth = 0\\l", "for b in brackets:\\l", "return depth == 0\\l"], ["from typing import *\\ldef correct_bracketing(brackets: str):...\\lcorrect_bracketing('<<<><>>>>')\\l", "correct_bracketing", "depth = 0\\l", "for b in brackets:\\l", "if b == '<':\\l", "depth += 1\\l", "if depth < 0:\\l", "return False\\l"], ["from typing import *\\ldef correct_bracketing(brackets: str):...\\lcorrect_bracketing('<<<><>>>>')\\l", "correct_bracketing", "depth = 0\\l", "for b in brackets:\\l", "if b == '<':\\l", "depth -= 1\\l", "if depth < 0:\\l", "return False\\l"]], "prime_paths_linenumbers": [[7, 8, 11, 6, 13], [7, 10, 11, 6, 13], [8, 11, 6, 7, 10], [10, 11, 6, 7, 8], [1, 15, 5, 6, 13], [1, 15, 5, 6, 7, 8, 11, 12], [1, 15, 5, 6, 7, 10, 11, 12]], "covered_statements_linenumbers": [1, 4, 5, 6, 7, 8, 10, 11, 12, 15], "missing_statements_linenumbers": [13], "covered_prime_paths_linenumbers": [[8, 11, 6, 7, 10], [10, 11, 6, 7, 8], [1, 15, 5, 6, 7, 8, 11, 12], [1, 15, 5, 6, 7, 10, 11, 12]], "missing_prime_paths_linenumbers": [[7, 8, 11, 6, 13], [7, 10, 11, 6, 13], [1, 15, 5, 6, 13]], "num_total_prime_paths": 7, "num_covered_paths": 4, "prime_path_coverage": 0.57, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_56__1_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_56__1_CFG.dot"}
{"humaneval_id": "HumanEval_141__0", "python_file": "HumanEval_141__0/main.py", "input_file": "HumanEval_141__0/input.txt", "prime_paths_nodes": [["1", "28", "3", "5", "7"], ["1", "28", "3", "5", "8", "10"], ["1", "28", "3", "5", "8", "11", "14"], ["1", "28", "3", "5", "8", "11", "15", "17"], ["1", "28", "3", "5", "8", "11", "15", "18", "22", "23"], ["1", "28", "3", "5", "8", "11", "15", "18", "22", "24"]], "prime_paths_statements": [["from typing import *\\ldef file_name_check(file_name):...\\lfile_name_check('I563_No.exe')\\l", "file_name_check", "suf = ['txt', 'exe', 'dll']\\llst = file_name.split(sep='.')\\l", "if len(lst) != 2:\\l", "return 'No'\\l"], ["from typing import *\\ldef file_name_check(file_name):...\\lfile_name_check('I563_No.exe')\\l", "file_name_check", "suf = ['txt', 'exe', 'dll']\\llst = file_name.split(sep='.')\\l", "if len(lst) != 2:\\l", "if not lst[1] in suf:\\l", "return 'No'\\l"], ["from typing import *\\ldef file_name_check(file_name):...\\lfile_name_check('I563_No.exe')\\l", "file_name_check", "suf = ['txt', 'exe', 'dll']\\llst = file_name.split(sep='.')\\l", "if len(lst) != 2:\\l", "if not lst[1] in suf:\\l", "if len(lst[0]) == 0:\\l", "return 'No'\\l"], ["from typing import *\\ldef file_name_check(file_name):...\\lfile_name_check('I563_No.exe')\\l", "file_name_check", "suf = ['txt', 'exe', 'dll']\\llst = file_name.split(sep='.')\\l", "if len(lst) != 2:\\l", "if not lst[1] in suf:\\l", "if len(lst[0]) == 0:\\l", "if not lst[0][0].isalpha():\\l", "return 'No'\\l"], ["from typing import *\\ldef file_name_check(file_name):...\\lfile_name_check('I563_No.exe')\\l", "file_name_check", "suf = ['txt', 'exe', 'dll']\\llst = file_name.split(sep='.')\\l", "if len(lst) != 2:\\l", "if not lst[1] in suf:\\l", "if len(lst[0]) == 0:\\l", "if not lst[0][0].isalpha():\\l", "t = len([x for x in lst[0] if x.isdigit()])\\l", "if t > 3:\\l", "return 'No'\\l"], ["from typing import *\\ldef file_name_check(file_name):...\\lfile_name_check('I563_No.exe')\\l", "file_name_check", "suf = ['txt', 'exe', 'dll']\\llst = file_name.split(sep='.')\\l", "if len(lst) != 2:\\l", "if not lst[1] in suf:\\l", "if len(lst[0]) == 0:\\l", "if not lst[0][0].isalpha():\\l", "t = len([x for x in lst[0] if x.isdigit()])\\l", "if t > 3:\\l", "return 'Yes'\\l"]], "prime_paths_linenumbers": [[1, 20, 5, 6, 7, 8], [1, 20, 5, 6, 7, 9, 10], [1, 20, 5, 6, 7, 9, 11, 12], [1, 20, 5, 6, 7, 9, 11, 13, 14], [1, 20, 5, 6, 7, 9, 11, 13, 15, 16, 17], [1, 20, 5, 6, 7, 9, 11, 13, 15, 16, 18]], "covered_statements_linenumbers": [1, 4, 5, 6, 7, 9, 11, 13, 15, 16, 18, 20], "missing_statements_linenumbers": [8, 10, 12, 14, 17], "covered_prime_paths_linenumbers": [[1, 20, 5, 6, 7, 9, 11, 13, 15, 16, 18]], "missing_prime_paths_linenumbers": [[1, 20, 5, 6, 7, 8], [1, 20, 5, 6, 7, 9, 10], [1, 20, 5, 6, 7, 9, 11, 12], [1, 20, 5, 6, 7, 9, 11, 13, 14], [1, 20, 5, 6, 7, 9, 11, 13, 15, 16, 17]], "num_total_prime_paths": 6, "num_covered_paths": 1, "prime_path_coverage": 0.17, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_141__0_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_141__0_CFG.dot"}
{"humaneval_id": "HumanEval_140", "python_file": "HumanEval_140/main.py", "input_file": "HumanEval_140/input.txt", "prime_paths_nodes": [["5", "7", "8", "4", "6", "16", "17"], ["5", "7", "8", "4", "6", "18", "17"], ["5", "7", "8", "4", "6", "18", "19", "17"], ["5", "9", "10", "11", "8", "4", "6", "16", "17"], ["5", "9", "10", "11", "8", "4", "6", "18", "17"], ["5", "9", "10", "11", "8", "4", "6", "18", "19", "17"], ["5", "9", "12", "13", "11", "8", "4", "6", "16", "17"], ["5", "9", "12", "13", "11", "8", "4", "6", "18", "17"], ["5", "9", "12", "13", "11", "8", "4", "6", "18", "19", "17"], ["5", "9", "12", "15", "11", "8", "4", "6", "16", "17"], ["5", "9", "12", "15", "11", "8", "4", "6", "18", "17"], ["5", "9", "12", "15", "11", "8", "4", "6", "18", "19", "17"], ["7", "8", "4", "5", "9", "10", "11"], ["7", "8", "4", "5", "9", "12", "13", "11"], ["7", "8", "4", "5", "9", "12", "15", "11"], ["9", "10", "11", "8", "4", "5", "7"], ["9", "12", "13", "11", "8", "4", "5", "7"], ["9", "12", "15", "11", "8", "4", "5", "7"], ["10", "11", "8", "4", "5", "9", "12", "13"], ["10", "11", "8", "4", "5", "9", "12", "15"], ["12", "13", "11", "8", "4", "5", "9", "10"], ["12", "15", "11", "8", "4", "5", "9", "10"], ["13", "11", "8", "4", "5", "9", "12", "15"], ["15", "11", "8", "4", "5", "9", "12", "13"], ["1", "23", "3", "4", "5", "7", "8"], ["1", "23", "3", "4", "5", "9", "10", "11", "8"], ["1", "23", "3", "4", "5", "9", "12", "13", "11", "8"], ["1", "23", "3", "4", "5", "9", "12", "15", "11", "8"], ["1", "23", "3", "4", "6", "16", "17"], ["1", "23", "3", "4", "6", "18", "17"], ["1", "23", "3", "4", "6", "18", "19", "17"]], "prime_paths_statements": [["if text[i] == ' ':\\l", "end += 1\\l", "i += 1\\l", "while i < len(text):\\l", "if end - start > 2:\\l", "new_text += '-'\\l", "return new_text\\l"], ["if text[i] == ' ':\\l", "end += 1\\l", "i += 1\\l", "while i < len(text):\\l", "if end - start > 2:\\l", "if end - start > 0:\\l", "return new_text\\l"], ["if text[i] == ' ':\\l", "end += 1\\l", "i += 1\\l", "while i < len(text):\\l", "if end - start > 2:\\l", "if end - start > 0:\\l", "new_text += '_'\\l", "return new_text\\l"], ["if text[i] == ' ':\\l", "if end - start > 2:\\l", "new_text += '-' + text[i]\\l", "start, end = i + 1, i + 1\\l", "i += 1\\l", "while i < len(text):\\l", "if end - start > 2:\\l", "new_text += '-'\\l", "return new_text\\l"], ["if text[i] == ' ':\\l", "if end - start > 2:\\l", "new_text += '-' + text[i]\\l", "start, end = i + 1, i + 1\\l", "i += 1\\l", "while i < len(text):\\l", "if end - start > 2:\\l", "if end - start > 0:\\l", "return new_text\\l"], ["if text[i] == ' ':\\l", "if end - start > 2:\\l", "new_text += '-' + text[i]\\l", "start, end = i + 1, i + 1\\l", "i += 1\\l", "while i < len(text):\\l", "if end - start > 2:\\l", "if end - start > 0:\\l", "new_text += '_'\\l", "return new_text\\l"], ["if text[i] == ' ':\\l", "if end - start > 2:\\l", "if end - start > 0:\\l", "new_text += '_' * (end - start) + text[i]\\l", "start, end = i + 1, i + 1\\l", "i += 1\\l", "while i < len(text):\\l", "if end - start > 2:\\l", "new_text += '-'\\l", "return new_text\\l"], ["if text[i] == ' ':\\l", "if end - start > 2:\\l", "if end - start > 0:\\l", "new_text += '_' * (end - start) + text[i]\\l", "start, end = i + 1, i + 1\\l", "i += 1\\l", "while i < len(text):\\l", "if end - start > 2:\\l", "if end - start > 0:\\l", "return new_text\\l"], ["if text[i] == ' ':\\l", "if end - start > 2:\\l", "if end - start > 0:\\l", "new_text += '_' * (end - start) + text[i]\\l", "start, end = i + 1, i + 1\\l", "i += 1\\l", "while i < len(text):\\l", "if end - start > 2:\\l", "if end - start > 0:\\l", "new_text += '_'\\l", "return new_text\\l"], ["if text[i] == ' ':\\l", "if end - start > 2:\\l", "if end - start > 0:\\l", "new_text += text[i]\\l", "start, end = i + 1, i + 1\\l", "i += 1\\l", "while i < len(text):\\l", "if end - start > 2:\\l", "new_text += '-'\\l", "return new_text\\l"], ["if text[i] == ' ':\\l", "if end - start > 2:\\l", "if end - start > 0:\\l", "new_text += text[i]\\l", "start, end = i + 1, i + 1\\l", "i += 1\\l", "while i < len(text):\\l", "if end - start > 2:\\l", "if end - start > 0:\\l", "return new_text\\l"], ["if text[i] == ' ':\\l", "if end - start > 2:\\l", "if end - start > 0:\\l", "new_text += text[i]\\l", "start, end = i + 1, i + 1\\l", "i += 1\\l", "while i < len(text):\\l", "if end - start > 2:\\l", "if end - start > 0:\\l", "new_text += '_'\\l", "return new_text\\l"], ["end += 1\\l", "i += 1\\l", "while i < len(text):\\l", "if text[i] == ' ':\\l", "if end - start > 2:\\l", "new_text += '-' + text[i]\\l", "start, end = i + 1, i + 1\\l"], ["end += 1\\l", "i += 1\\l", "while i < len(text):\\l", "if text[i] == ' ':\\l", "if end - start > 2:\\l", "if end - start > 0:\\l", "new_text += '_' * (end - start) + text[i]\\l", "start, end = i + 1, i + 1\\l"], ["end += 1\\l", "i += 1\\l", "while i < len(text):\\l", "if text[i] == ' ':\\l", "if end - start > 2:\\l", "if end - start > 0:\\l", "new_text += text[i]\\l", "start, end = i + 1, i + 1\\l"], ["if end - start > 2:\\l", "new_text += '-' + text[i]\\l", "start, end = i + 1, i + 1\\l", "i += 1\\l", "while i < len(text):\\l", "if text[i] == ' ':\\l", "end += 1\\l"], ["if end - start > 2:\\l", "if end - start > 0:\\l", "new_text += '_' * (end - start) + text[i]\\l", "start, end = i + 1, i + 1\\l", "i += 1\\l", "while i < len(text):\\l", "if text[i] == ' ':\\l", "end += 1\\l"], ["if end - start > 2:\\l", "if end - start > 0:\\l", "new_text += text[i]\\l", "start, end = i + 1, i + 1\\l", "i += 1\\l", "while i < len(text):\\l", "if text[i] == ' ':\\l", "end += 1\\l"], ["new_text += '-' + text[i]\\l", "start, end = i + 1, i + 1\\l", "i += 1\\l", "while i < len(text):\\l", "if text[i] == ' ':\\l", "if end - start > 2:\\l", "if end - start > 0:\\l", "new_text += '_' * (end - start) + text[i]\\l"], ["new_text += '-' + text[i]\\l", "start, end = i + 1, i + 1\\l", "i += 1\\l", "while i < len(text):\\l", "if text[i] == ' ':\\l", "if end - start > 2:\\l", "if end - start > 0:\\l", "new_text += text[i]\\l"], ["if end - start > 0:\\l", "new_text += '_' * (end - start) + text[i]\\l", "start, end = i + 1, i + 1\\l", "i += 1\\l", "while i < len(text):\\l", "if text[i] == ' ':\\l", "if end - start > 2:\\l", "new_text += '-' + text[i]\\l"], ["if end - start > 0:\\l", "new_text += text[i]\\l", "start, end = i + 1, i + 1\\l", "i += 1\\l", "while i < len(text):\\l", "if text[i] == ' ':\\l", "if end - start > 2:\\l", "new_text += '-' + text[i]\\l"], ["new_text += '_' * (end - start) + text[i]\\l", "start, end = i + 1, i + 1\\l", "i += 1\\l", "while i < len(text):\\l", "if text[i] == ' ':\\l", "if end - start > 2:\\l", "if end - start > 0:\\l", "new_text += text[i]\\l"], ["new_text += text[i]\\l", "start, end = i + 1, i + 1\\l", "i += 1\\l", "while i < len(text):\\l", "if text[i] == ' ':\\l", "if end - start > 2:\\l", "if end - start > 0:\\l", "new_text += '_' * (end - start) + text[i]\\l"], ["from typing import *\\ldef fix_spaces(text):...\\lfix_spaces('Example')\\l", "fix_spaces", "new_text = ''\\li = 0\\lstart, end = 0, 0\\l", "while i < len(text):\\l", "if text[i] == ' ':\\l", "end += 1\\l", "i += 1\\l"], ["from typing import *\\ldef fix_spaces(text):...\\lfix_spaces('Example')\\l", "fix_spaces", "new_text = ''\\li = 0\\lstart, end = 0, 0\\l", "while i < len(text):\\l", "if text[i] == ' ':\\l", "if end - start > 2:\\l", "new_text += '-' + text[i]\\l", "start, end = i + 1, i + 1\\l", "i += 1\\l"], ["from typing import *\\ldef fix_spaces(text):...\\lfix_spaces('Example')\\l", "fix_spaces", "new_text = ''\\li = 0\\lstart, end = 0, 0\\l", "while i < len(text):\\l", "if text[i] == ' ':\\l", "if end - start > 2:\\l", "if end - start > 0:\\l", "new_text += '_' * (end - start) + text[i]\\l", "start, end = i + 1, i + 1\\l", "i += 1\\l"], ["from typing import *\\ldef fix_spaces(text):...\\lfix_spaces('Example')\\l", "fix_spaces", "new_text = ''\\li = 0\\lstart, end = 0, 0\\l", "while i < len(text):\\l", "if text[i] == ' ':\\l", "if end - start > 2:\\l", "if end - start > 0:\\l", "new_text += text[i]\\l", "start, end = i + 1, i + 1\\l", "i += 1\\l"], ["from typing import *\\ldef fix_spaces(text):...\\lfix_spaces('Example')\\l", "fix_spaces", "new_text = ''\\li = 0\\lstart, end = 0, 0\\l", "while i < len(text):\\l", "if end - start > 2:\\l", "new_text += '-'\\l", "return new_text\\l"], ["from typing import *\\ldef fix_spaces(text):...\\lfix_spaces('Example')\\l", "fix_spaces", "new_text = ''\\li = 0\\lstart, end = 0, 0\\l", "while i < len(text):\\l", "if end - start > 2:\\l", "if end - start > 0:\\l", "return new_text\\l"], ["from typing import *\\ldef fix_spaces(text):...\\lfix_spaces('Example')\\l", "fix_spaces", "new_text = ''\\li = 0\\lstart, end = 0, 0\\l", "while i < len(text):\\l", "if end - start > 2:\\l", "if end - start > 0:\\l", "new_text += '_'\\l", "return new_text\\l"]], "prime_paths_linenumbers": [[7, 8, 17, 6, 18, 19, 22], [7, 8, 17, 6, 18, 20, 22], [7, 8, 17, 6, 18, 20, 21, 22], [7, 10, 11, 16, 17, 6, 18, 19, 22], [7, 10, 11, 16, 17, 6, 18, 20, 22], [7, 10, 11, 16, 17, 6, 18, 20, 21, 22], [7, 10, 12, 13, 16, 17, 6, 18, 19, 22], [7, 10, 12, 13, 16, 17, 6, 18, 20, 22], [7, 10, 12, 13, 16, 17, 6, 18, 20, 21, 22], [7, 10, 12, 15, 16, 17, 6, 18, 19, 22], [7, 10, 12, 15, 16, 17, 6, 18, 20, 22], [7, 10, 12, 15, 16, 17, 6, 18, 20, 21, 22], [8, 17, 6, 7, 10, 11, 16], [8, 17, 6, 7, 10, 12, 13, 16], [8, 17, 6, 7, 10, 12, 15, 16], [10, 11, 16, 17, 6, 7, 8], [10, 12, 13, 16, 17, 6, 7, 8], [10, 12, 15, 16, 17, 6, 7, 8], [11, 16, 17, 6, 7, 10, 12, 13], [11, 16, 17, 6, 7, 10, 12, 15], [12, 13, 16, 17, 6, 7, 10, 11], [12, 15, 16, 17, 6, 7, 10, 11], [13, 16, 17, 6, 7, 10, 12, 15], [15, 16, 17, 6, 7, 10, 12, 13], [1, 24, 3, 4, 5, 6, 7, 8, 17], [1, 24, 3, 4, 5, 6, 7, 10, 11, 16, 17], [1, 24, 3, 4, 5, 6, 7, 10, 12, 13, 16, 17], [1, 24, 3, 4, 5, 6, 7, 10, 12, 15, 16, 17], [1, 24, 3, 4, 5, 6, 18, 19, 22], [1, 24, 3, 4, 5, 6, 18, 20, 22], [1, 24, 3, 4, 5, 6, 18, 20, 21, 22]], "covered_statements_linenumbers": [1, 2, 3, 4, 5, 6, 7, 10, 12, 15, 16, 17, 18, 20, 22, 24], "missing_statements_linenumbers": [8, 11, 13, 19, 21], "covered_prime_paths_linenumbers": [[7, 10, 12, 15, 16, 17, 6, 18, 20, 22], [1, 24, 3, 4, 5, 6, 7, 10, 12, 15, 16, 17], [1, 24, 3, 4, 5, 6, 18, 20, 22]], "missing_prime_paths_linenumbers": [[7, 8, 17, 6, 18, 19, 22], [7, 8, 17, 6, 18, 20, 22], [7, 8, 17, 6, 18, 20, 21, 22], [7, 10, 11, 16, 17, 6, 18, 19, 22], [7, 10, 11, 16, 17, 6, 18, 20, 22], [7, 10, 11, 16, 17, 6, 18, 20, 21, 22], [7, 10, 12, 13, 16, 17, 6, 18, 19, 22], [7, 10, 12, 13, 16, 17, 6, 18, 20, 22], [7, 10, 12, 13, 16, 17, 6, 18, 20, 21, 22], [7, 10, 12, 15, 16, 17, 6, 18, 19, 22], [7, 10, 12, 15, 16, 17, 6, 18, 20, 21, 22], [8, 17, 6, 7, 10, 11, 16], [8, 17, 6, 7, 10, 12, 13, 16], [8, 17, 6, 7, 10, 12, 15, 16], [10, 11, 16, 17, 6, 7, 8], [10, 12, 13, 16, 17, 6, 7, 8], [10, 12, 15, 16, 17, 6, 7, 8], [11, 16, 17, 6, 7, 10, 12, 13], [11, 16, 17, 6, 7, 10, 12, 15], [12, 13, 16, 17, 6, 7, 10, 11], [12, 15, 16, 17, 6, 7, 10, 11], [13, 16, 17, 6, 7, 10, 12, 15], [15, 16, 17, 6, 7, 10, 12, 13], [1, 24, 3, 4, 5, 6, 7, 8, 17], [1, 24, 3, 4, 5, 6, 7, 10, 11, 16, 17], [1, 24, 3, 4, 5, 6, 7, 10, 12, 13, 16, 17], [1, 24, 3, 4, 5, 6, 18, 19, 22], [1, 24, 3, 4, 5, 6, 18, 20, 21, 22]], "num_total_prime_paths": 31, "num_covered_paths": 3, "prime_path_coverage": 0.1, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_140_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_140_CFG.dot"}
{"humaneval_id": "HumanEval_144__0", "python_file": "HumanEval_144__0/main.py", "input_file": "HumanEval_144__0/input.txt", "prime_paths_nodes": [["1", "17", "3", "10", "12"], ["1", "17", "3", "10", "13"]], "prime_paths_statements": [["from typing import *\\ldef simplify(x, n):...\\lsimplify('2/4', '8/4')\\l", "simplify", "a, b = x.split('/')\\lc, d = n.split('/')\\lnumerator = int(a) * int(c)\\ldenom = int(b) * int(d)\\l", "if numerator / denom == int(numerator / denom):\\l", "return True\\l"], ["from typing import *\\ldef simplify(x, n):...\\lsimplify('2/4', '8/4')\\l", "simplify", "a, b = x.split('/')\\lc, d = n.split('/')\\lnumerator = int(a) * int(c)\\ldenom = int(b) * int(d)\\l", "if numerator / denom == int(numerator / denom):\\l", "return False\\l"]], "prime_paths_linenumbers": [[1, 13, 5, 6, 7, 8, 9, 10], [1, 13, 5, 6, 7, 8, 9, 11]], "covered_statements_linenumbers": [1, 4, 5, 6, 7, 8, 9, 10, 13], "missing_statements_linenumbers": [11], "covered_prime_paths_linenumbers": [[1, 13, 5, 6, 7, 8, 9, 10]], "missing_prime_paths_linenumbers": [[1, 13, 5, 6, 7, 8, 9, 11]], "num_total_prime_paths": 2, "num_covered_paths": 1, "prime_path_coverage": 0.5, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_144__0_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_144__0_CFG.dot"}
{"humaneval_id": "HumanEval_66__1", "python_file": "HumanEval_66__1/main.py", "input_file": "HumanEval_66__1/input.txt", "prime_paths_nodes": [["1", "9", "3", "4"], ["1", "9", "3", "5"]], "prime_paths_statements": [["from typing import *\\ldef digitSum(s):...\\ldigitSum('aAaaaXa')\\l", "digitSum", "if s == '':\\l", "return 0\\l"], ["from typing import *\\ldef digitSum(s):...\\ldigitSum('aAaaaXa')\\l", "digitSum", "if s == '':\\l", "return sum(ord(char) if char.isupper() else 0 for char in s)\\l"]], "prime_paths_linenumbers": [[1, 9, 5, 6], [1, 9, 5, 7]], "covered_statements_linenumbers": [1, 4, 5, 7, 9], "missing_statements_linenumbers": [6], "covered_prime_paths_linenumbers": [[1, 9, 5, 7]], "missing_prime_paths_linenumbers": [[1, 9, 5, 6]], "num_total_prime_paths": 2, "num_covered_paths": 1, "prime_path_coverage": 0.5, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_66__1_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_66__1_CFG.dot"}
{"humaneval_id": "HumanEval_132", "python_file": "HumanEval_132/main.py", "input_file": "HumanEval_132/input.txt", "prime_paths_nodes": [["7", "9", "4", "8", "16", "18"], ["7", "11", "4", "8", "16", "18"], ["7", "9", "4", "8", "16", "17", "19"], ["7", "11", "4", "8", "16", "17", "19"], ["9", "4", "7", "11"], ["11", "4", "7", "9"], ["17", "16", "18"], ["17", "19", "16", "18"], ["19", "16", "17"], ["1", "23", "3", "4", "7", "9"], ["1", "23", "3", "4", "7", "11"], ["1", "23", "3", "4", "8", "16", "18"], ["1", "23", "3", "4", "8", "16", "17", "19"]], "prime_paths_statements": [["if string[i] == '[':\\l", "opening_bracket_index.append(i)\\l", "for i in range(len(string)):\\l", "closing_bracket_index.reverse()\\lcnt = 0\\li = 0\\ll = len(closing_bracket_index)\\l", "for idx in opening_bracket_index:\\l", "return cnt >= 2\\l"], ["if string[i] == '[':\\l", "closing_bracket_index.append(i)\\l", "for i in range(len(string)):\\l", "closing_bracket_index.reverse()\\lcnt = 0\\li = 0\\ll = len(closing_bracket_index)\\l", "for idx in opening_bracket_index:\\l", "return cnt >= 2\\l"], ["if string[i] == '[':\\l", "opening_bracket_index.append(i)\\l", "for i in range(len(string)):\\l", "closing_bracket_index.reverse()\\lcnt = 0\\li = 0\\ll = len(closing_bracket_index)\\l", "for idx in opening_bracket_index:\\l", "if i < l and idx < closing_bracket_index[i]:\\l", "cnt += 1\\li += 1\\l"], ["if string[i] == '[':\\l", "closing_bracket_index.append(i)\\l", "for i in range(len(string)):\\l", "closing_bracket_index.reverse()\\lcnt = 0\\li = 0\\ll = len(closing_bracket_index)\\l", "for idx in opening_bracket_index:\\l", "if i < l and idx < closing_bracket_index[i]:\\l", "cnt += 1\\li += 1\\l"], ["opening_bracket_index.append(i)\\l", "for i in range(len(string)):\\l", "if string[i] == '[':\\l", "closing_bracket_index.append(i)\\l"], ["closing_bracket_index.append(i)\\l", "for i in range(len(string)):\\l", "if string[i] == '[':\\l", "opening_bracket_index.append(i)\\l"], ["if i < l and idx < closing_bracket_index[i]:\\l", "for idx in opening_bracket_index:\\l", "return cnt >= 2\\l"], ["if i < l and idx < closing_bracket_index[i]:\\l", "cnt += 1\\li += 1\\l", "for idx in opening_bracket_index:\\l", "return cnt >= 2\\l"], ["cnt += 1\\li += 1\\l", "for idx in opening_bracket_index:\\l", "if i < l and idx < closing_bracket_index[i]:\\l"], ["from typing import *\\ldef is_nested(string):...\\lis_nested('[[]]')\\l", "is_nested", "opening_bracket_index = []\\lclosing_bracket_index = []\\l", "for i in range(len(string)):\\l", "if string[i] == '[':\\l", "opening_bracket_index.append(i)\\l"], ["from typing import *\\ldef is_nested(string):...\\lis_nested('[[]]')\\l", "is_nested", "opening_bracket_index = []\\lclosing_bracket_index = []\\l", "for i in range(len(string)):\\l", "if string[i] == '[':\\l", "closing_bracket_index.append(i)\\l"], ["from typing import *\\ldef is_nested(string):...\\lis_nested('[[]]')\\l", "is_nested", "opening_bracket_index = []\\lclosing_bracket_index = []\\l", "for i in range(len(string)):\\l", "closing_bracket_index.reverse()\\lcnt = 0\\li = 0\\ll = len(closing_bracket_index)\\l", "for idx in opening_bracket_index:\\l", "return cnt >= 2\\l"], ["from typing import *\\ldef is_nested(string):...\\lis_nested('[[]]')\\l", "is_nested", "opening_bracket_index = []\\lclosing_bracket_index = []\\l", "for i in range(len(string)):\\l", "closing_bracket_index.reverse()\\lcnt = 0\\li = 0\\ll = len(closing_bracket_index)\\l", "for idx in opening_bracket_index:\\l", "if i < l and idx < closing_bracket_index[i]:\\l", "cnt += 1\\li += 1\\l"]], "prime_paths_linenumbers": [[6, 7, 5, 10, 11, 12, 13, 14, 18], [6, 9, 5, 10, 11, 12, 13, 14, 18], [6, 7, 5, 10, 11, 12, 13, 14, 15, 16, 17], [6, 9, 5, 10, 11, 12, 13, 14, 15, 16, 17], [7, 5, 6, 9], [9, 5, 6, 7], [15, 14, 18], [15, 16, 17, 14, 18], [16, 17, 14, 15], [1, 22, 3, 4, 5, 6, 7], [1, 22, 3, 4, 5, 6, 9], [1, 22, 3, 4, 5, 10, 11, 12, 13, 14, 18], [1, 22, 3, 4, 5, 10, 11, 12, 13, 14, 15, 16, 17]], "covered_statements_linenumbers": [1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 22], "missing_statements_linenumbers": [], "covered_prime_paths_linenumbers": [[6, 7, 5, 10, 11, 12, 13, 14, 18], [6, 9, 5, 10, 11, 12, 13, 14, 18], [6, 7, 5, 10, 11, 12, 13, 14, 15, 16, 17], [6, 9, 5, 10, 11, 12, 13, 14, 15, 16, 17], [7, 5, 6, 9], [9, 5, 6, 7], [15, 14, 18], [15, 16, 17, 14, 18], [16, 17, 14, 15], [1, 22, 3, 4, 5, 6, 7], [1, 22, 3, 4, 5, 6, 9], [1, 22, 3, 4, 5, 10, 11, 12, 13, 14, 18], [1, 22, 3, 4, 5, 10, 11, 12, 13, 14, 15, 16, 17]], "missing_prime_paths_linenumbers": [], "num_total_prime_paths": 13, "num_covered_paths": 13, "prime_path_coverage": 1.0, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_132_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_132_CFG.dot"}
{"humaneval_id": "HumanEval_86__1", "python_file": "HumanEval_86__1/main.py", "input_file": "HumanEval_86__1/input.txt", "prime_paths_nodes": [["1", "6", "3"]], "prime_paths_statements": [["from typing import *\\ldef anti_shuffle(s):...\\lanti_shuffle('Hello World!!!')\\l", "anti_shuffle", "return ' '.join([''.join(sorted(list(i)...' ')])\\l"]], "prime_paths_linenumbers": [[1, 7, 5]], "covered_statements_linenumbers": [1, 4, 5, 7], "missing_statements_linenumbers": [], "covered_prime_paths_linenumbers": [[1, 7, 5]], "missing_prime_paths_linenumbers": [], "num_total_prime_paths": 1, "num_covered_paths": 1, "prime_path_coverage": 1.0, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_86__1_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_86__1_CFG.dot"}
{"humaneval_id": "HumanEval_10__1", "python_file": "HumanEval_10__1/main.py", "input_file": "HumanEval_10__1/input.txt", "prime_paths_nodes": [["8", "7", "9"], ["1", "12", "3", "4"], ["1", "12", "3", "5", "7", "8"], ["1", "12", "3", "5", "7", "9"]], "prime_paths_statements": [["beginning_of_suffix += 1\\l", "while not is_palindrome(string[beginning_of_suffix:]):\\l", "return string + string[:beginning_of_suffix][::-1]\\l"], ["from typing import *\\ldef is_palindrome(string: str) ->bool:...\\lis_palindrome('x')\\l", "is_palindrome", "if not string:\\l", "return ''\\l"], ["from typing import *\\ldef is_palindrome(string: str) ->bool:...\\lis_palindrome('x')\\l", "is_palindrome", "if not string:\\l", "beginning_of_suffix = 0\\l", "while not is_palindrome(string[beginning_of_suffix:]):\\l", "beginning_of_suffix += 1\\l"], ["from typing import *\\ldef is_palindrome(string: str) ->bool:...\\lis_palindrome('x')\\l", "is_palindrome", "if not string:\\l", "beginning_of_suffix = 0\\l", "while not is_palindrome(string[beginning_of_suffix:]):\\l", "return string + string[:beginning_of_suffix][::-1]\\l"]], "prime_paths_linenumbers": [[11, 10, 13], [1, 15, 5, 6], [1, 15, 5, 8, 10, 11], [1, 15, 5, 8, 10, 13]], "covered_statements_linenumbers": [129, 255, 137, 145, 20, 25, 154, 27, 28, 29, 30, 31, 32, 33, 155, 35, 157, 37, 159, 39, 167, 42, 43, 171, 175, 303, 49, 50, 51, 179, 53, 184, 57, 188, 61, 192, 65, 196, 200, 74, 335, 336, 209, 340, 342, 88, 352, 101, 114, 119, 120, 250, 127, 1, 1163, 12, 13, 268, 15, 16, 145, 18, 19, 20, 21, 22, 23, 274, 537, 660, 1048, 30, 31, 32, 33, 34, 287, 36, 37, 38, 39, 931, 425, 42, 45, 46, 559, 560, 49, 946, 310, 1591, 57, 442, 570, 1209, 1722, 192, 1093, 70, 329, 269, 1226, 460, 719, 208, 81, 1744, 1236, 1367, 219, 1633, 98, 1380, 869, 1005, 1520, 1776, 1777, 117, 247, 760, 1529, 382, 512, 513, 1025, 518, 519, 1030, 1544, 1545, 524, 525, 1039, 1040, 530, 531, 21, 22, 1047, 24, 25, 26, 27, 28, 29, 30, 536, 32, 33, 34, 542, 36, 543, 1054, 1058, 40, 41, 552, 43, 553, 1063, 558, 559, 48, 1067, 50, 1068, 565, 54, 566, 1081, 1082, 571, 572, 63, 64, 577, 578, 67, 68, 1089, 1090, 71, 72, 1603, 74, 75, 1100, 1101, 83, 1116, 1117, 96, 100, 1127, 1128, 105, 109, 1135, 1136, 114, 115, 1531, 631, 120, 121, 632, 1143, 1144, 1149, 640, 129, 130, 641, 649, 650, 537, 143, 144, 655, 656, 1167, 1168, 1173, 1174, 663, 664, 153, 154, 1179, 1180, 673, 1185, 1186, 1191, 1192, 170, 171, 1197, 1198, 179, 180, 1203, 1204, 696, 697, 1209, 1210, 702, 703, 1216, 1217, 708, 709, 201, 202, 714, 715, 1228, 1229, 720, 721, 1235, 1236, 213, 214, 726, 727, 220, 221, 735, 736, 1253, 230, 744, 745, 236, 240, 753, 754, 244, 245, 249, 250, 762, 763, 771, 772, 265, 266, 782, 279, 280, 793, 794, 802, 803, 293, 294, 814, 303, 304, 815, 316, 332, 340, 341, 868, 869, 360, 364, 368, 372, 376, 380, 384, 390, 398, 403, 1427, 1428, 408, 409, 1436, 1437, 417, 1442, 1443, 423, 1448, 1449, 1456, 949, 950, 1463, 453, 457, 969, 1484, 461, 976, 465, 469, 473, 480, 992, 484, 996, 1509, 488, 1000, 493, 494, 1005, 1521, 1015, 503, 504, 1019, 32, 33, 65, 70, 75, 76, 49, 22, 23, 25, 26, 28, 29, 1037, 22, 24, 25, 26, 27, 536, 537, 30, 33, 34, 35, 36, 39, 40, 43, 44, 47, 48, 51, 52, 55, 56, 59, 60, 64, 69, 587, 77, 82, 83, 108, 621, 622, 623, 624, 154, 159, 164, 679, 686, 691, 697, 188, 713, 202, 734, 227, 756, 757, 259, 772, 773, 266, 778, 779, 271, 784, 785, 276, 790, 791, 797, 798, 803, 293, 808, 813, 304, 818, 823, 314, 830, 325, 841, 330, 842, 844, 334, 852, 341, 853, 855, 345, 863, 864, 353, 869, 874, 363, 875, 877, 886, 375, 376, 897, 387, 388, 903, 393, 394, 910, 911, 916, 407, 924, 928, 932, 937, 941, 945, 440, 953, 443, 959, 964, 970, 459, 460, 461, 462, 975, 980, 493, 503, 504, 32, 1, 2, 3, 5, 7, 39, 9, 10, 13, 16, 48, 24, 57, 34, 35, 36, 38, 20, 21, 23, 26, 27, 28, 29, 30, 31, 1, 15, 16, 17, 19, 531, 21, 22, 23, 24, 25, 532, 30, 543, 32, 33, 34, 35, 37, 38, 41, 42, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 1591, 57, 1592, 574, 575, 64, 1601, 1608, 1610, 77, 83, 1621, 1623, 1636, 101, 113, 127, 150, 662, 1180, 670, 160, 1189, 1190, 169, 174, 1202, 186, 196, 708, 709, 710, 711, 1231, 1232, 212, 1251, 237, 1261, 557, 1271, 265, 299, 325, 349, 362, 370, 1417, 1418, 418, 458, 1483, 1484, 477, 478, 26, 19, 28, 31, 24, 25, 26, 27, 28, 160, 161, 47, 49, 54, 55, 57, 62, 65, 66, 68, 69, 71, 72, 75, 76, 86, 87, 3, 652, 14, 15, 16, 17, 18, 19, 20, 273, 22, 660, 661, 27, 28, 31, 32, 34, 291, 298, 299, 684, 685, 47, 308, 309, 55, 319, 65, 705, 706, 81, 209, 89, 95, 96, 485, 110, 503, 504, 638, 1, 1033, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 1050, 30, 1051, 32, 33, 35, 36, 39, 555, 53, 569, 588, 77, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 114, 626, 629, 136, 662, 669, 167, 680, 687, 182, 723, 731, 221, 230, 754, 250, 767, 786, 813, 314, 856, 864, 359, 872, 382, 905, 396, 397, 926, 429, 944, 961, 464, 976, 475, 486, 502, 1018, 1, 4, 5, 8, 10, 15, 263, 136, 264, 266, 17, 18, 145, 20, 21, 22, 23, 277, 25, 26, 155, 284, 29, 30, 33, 36, 170, 45, 46, 48, 53, 71, 72, 77, 83, 92, 101, 102, 104, 239, 112, 248, 125, 1, 516, 391, 12, 13, 14, 15, 141, 17, 18, 271, 20, 527, 26, 28, 30, 31, 32, 158, 34, 36, 42, 298, 44, 556, 174, 48, 307, 181, 54, 440, 443, 320, 577, 66, 194, 455, 207, 591, 340, 471, 93, 487, 238, 366, 495, 625, 121, 253, 1, 131, 12, 13, 14, 15, 142, 271, 18, 273, 20, 22, 29, 159, 36, 166, 41, 48, 58, 186, 193, 194, 195, 68, 196, 76, 83, 88, 98, 99, 240, 114, 245, 121, 255], "missing_statements_linenumbers": [27, 34, 39, 46, 56, 66, 74, 81, 86, 96, 112, 119, 129, 140, 157, 164, 177, 178, 179, 180, 182, 184, 191, 238, 243, 253, 262, 263, 264, 265, 266, 267, 268, 269, 279, 280, 282, 283, 284, 285, 286, 287, 288, 289, 290, 292, 293, 294, 295, 296, 297, 298, 299, 300, 302, 305, 307, 308, 309], "covered_prime_paths_linenumbers": [[11, 10, 13], [1, 15, 5, 6], [1, 15, 5, 8, 10, 11], [1, 15, 5, 8, 10, 13]], "missing_prime_paths_linenumbers": [], "num_total_prime_paths": 4, "num_covered_paths": 4, "prime_path_coverage": 1.0, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_10__1_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_10__1_CFG.dot"}
{"humaneval_id": "HumanEval_129__0", "python_file": "HumanEval_129__0/main.py", "input_file": "HumanEval_129__0/input.txt", "prime_paths_nodes": [["10", "7", "5", "8", "28", "31"], ["10", "12", "14", "15", "16", "18", "19", "21", "22", "24", "25", "7", "5", "8", "28", "31"], ["10", "12", "14", "15", "16", "18", "19", "21", "22", "25", "7", "5", "8", "28", "31"], ["10", "12", "14", "15", "16", "18", "19", "22", "24", "25", "7", "5", "8", "28", "31"], ["10", "12", "14", "15", "16", "18", "19", "22", "25", "7", "5", "8", "28", "31"], ["10", "12", "14", "15", "16", "19", "21", "22", "24", "25", "7", "5", "8", "28", "31"], ["10", "12", "14", "15", "16", "19", "21", "22", "25", "7", "5", "8", "28", "31"], ["10", "12", "14", "15", "16", "19", "22", "24", "25", "7", "5", "8", "28", "31"], ["10", "12", "14", "15", "16", "19", "22", "25", "7", "5", "8", "28", "31"], ["10", "12", "14", "16", "18", "19", "21", "22", "24", "25", "7", "5", "8", "28", "31"], ["10", "12", "14", "16", "18", "19", "21", "22", "25", "7", "5", "8", "28", "31"], ["10", "12", "14", "16", "18", "19", "22", "24", "25", "7", "5", "8", "28", "31"], ["10", "12", "14", "16", "18", "19", "22", "25", "7", "5", "8", "28", "31"], ["10", "12", "14", "16", "19", "21", "22", "24", "25", "7", "5", "8", "28", "31"], ["10", "12", "14", "16", "19", "21", "22", "25", "7", "5", "8", "28", "31"], ["10", "12", "14", "16", "19", "22", "24", "25", "7", "5", "8", "28", "31"], ["10", "12", "14", "16", "19", "22", "25", "7", "5", "8", "28", "31"], ["10", "7", "5", "8", "28", "30", "32"], ["10", "12", "14", "15", "16", "18", "19", "21", "22", "24", "25", "7", "5", "8", "28", "30", "32"], ["10", "12", "14", "15", "16", "18", "19", "21", "22", "25", "7", "5", "8", "28", "30", "32"], ["10", "12", "14", "15", "16", "18", "19", "22", "24", "25", "7", "5", "8", "28", "30", "32"], ["10", "12", "14", "15", "16", "18", "19", "22", "25", "7", "5", "8", "28", "30", "32"], ["10", "12", "14", "15", "16", "19", "21", "22", "24", "25", "7", "5", "8", "28", "30", "32"], ["10", "12", "14", "15", "16", "19", "21", "22", "25", "7", "5", "8", "28", "30", "32"], ["10", "12", "14", "15", "16", "19", "22", "24", "25", "7", "5", "8", "28", "30", "32"], ["10", "12", "14", "15", "16", "19", "22", "25", "7", "5", "8", "28", "30", "32"], ["10", "12", "14", "16", "18", "19", "21", "22", "24", "25", "7", "5", "8", "28", "30", "32"], ["10", "12", "14", "16", "18", "19", "21", "22", "25", "7", "5", "8", "28", "30", "32"], ["10", "12", "14", "16", "18", "19", "22", "24", "25", "7", "5", "8", "28", "30", "32"], ["10", "12", "14", "16", "18", "19", "22", "25", "7", "5", "8", "28", "30", "32"], ["10", "12", "14", "16", "19", "21", "22", "24", "25", "7", "5", "8", "28", "30", "32"], ["10", "12", "14", "16", "19", "21", "22", "25", "7", "5", "8", "28", "30", "32"], ["10", "12", "14", "16", "19", "22", "24", "25", "7", "5", "8", "28", "30", "32"], ["10", "12", "14", "16", "19", "22", "25", "7", "5", "8", "28", "30", "32"], ["10", "7", "5", "8", "28", "30", "34"], ["10", "12", "14", "15", "16", "18", "19", "21", "22", "24", "25", "7", "5", "8", "28", "30", "34"], ["10", "12", "14", "15", "16", "18", "19", "21", "22", "25", "7", "5", "8", "28", "30", "34"], ["10", "12", "14", "15", "16", "18", "19", "22", "24", "25", "7", "5", "8", "28", "30", "34"], ["10", "12", "14", "15", "16", "18", "19", "22", "25", "7", "5", "8", "28", "30", "34"], ["10", "12", "14", "15", "16", "19", "21", "22", "24", "25", "7", "5", "8", "28", "30", "34"], ["10", "12", "14", "15", "16", "19", "21", "22", "25", "7", "5", "8", "28", "30", "34"], ["10", "12", "14", "15", "16", "19", "22", "24", "25", "7", "5", "8", "28", "30", "34"], ["10", "12", "14", "15", "16", "19", "22", "25", "7", "5", "8", "28", "30", "34"], ["10", "12", "14", "16", "18", "19", "21", "22", "24", "25", "7", "5", "8", "28", "30", "34"], ["10", "12", "14", "16", "18", "19", "21", "22", "25", "7", "5", "8", "28", "30", "34"], ["10", "12", "14", "16", "18", "19", "22", "24", "25", "7", "5", "8", "28", "30", "34"], ["10", "12", "14", "16", "18", "19", "22", "25", "7", "5", "8", "28", "30", "34"], ["10", "12", "14", "16", "19", "21", "22", "24", "25", "7", "5", "8", "28", "30", "34"], ["10", "12", "14", "16", "19", "21", "22", "25", "7", "5", "8", "28", "30", "34"], ["10", "12", "14", "16", "19", "22", "24", "25", "7", "5", "8", "28", "30", "34"], ["10", "12", "14", "16", "19", "22", "25", "7", "5", "8", "28", "30", "34"], ["12", "14", "15", "16", "18", "19", "21", "22", "24", "25", "7", "10"], ["12", "14", "15", "16", "18", "19", "21", "22", "25", "7", "10"], ["12", "14", "15", "16", "18", "19", "22", "24", "25", "7", "10"], ["12", "14", "15", "16", "18", "19", "22", "25", "7", "10"], ["12", "14", "15", "16", "19", "21", "22", "24", "25", "7", "10"], ["12", "14", "15", "16", "19", "21", "22", "25", "7", "10"], ["12", "14", "15", "16", "19", "22", "24", "25", "7", "10"], ["12", "14", "15", "16", "19", "22", "25", "7", "10"], ["12", "14", "16", "18", "19", "21", "22", "24", "25", "7", "10"], ["12", "14", "16", "18", "19", "21", "22", "25", "7", "10"], ["12", "14", "16", "18", "19", "22", "24", "25", "7", "10"], ["12", "14", "16", "18", "19", "22", "25", "7", "10"], ["12", "14", "16", "19", "21", "22", "24", "25", "7", "10"], ["12", "14", "16", "19", "21", "22", "25", "7", "10"], ["12", "14", "16", "19", "22", "24", "25", "7", "10"], ["12", "14", "16", "19", "22", "25", "7", "10"], ["14", "15", "16", "18", "19", "21", "22", "24", "25", "7", "10", "12"], ["14", "15", "16", "18", "19", "21", "22", "25", "7", "10", "12"], ["14", "15", "16", "18", "19", "22", "24", "25", "7", "10", "12"], ["14", "15", "16", "18", "19", "22", "25", "7", "10", "12"], ["14", "15", "16", "19", "21", "22", "24", "25", "7", "10", "12"], ["14", "15", "16", "19", "21", "22", "25", "7", "10", "12"], ["14", "15", "16", "19", "22", "24", "25", "7", "10", "12"], ["14", "15", "16", "19", "22", "25", "7", "10", "12"], ["14", "16", "18", "19", "21", "22", "24", "25", "7", "10", "12"], ["14", "16", "18", "19", "21", "22", "25", "7", "10", "12"], ["14", "16", "18", "19", "22", "24", "25", "7", "10", "12"], ["14", "16", "18", "19", "22", "25", "7", "10", "12"], ["14", "16", "19", "21", "22", "24", "25", "7", "10", "12"], ["14", "16", "19", "21", "22", "25", "7", "10", "12"], ["14", "16", "19", "22", "24", "25", "7", "10", "12"], ["14", "16", "19", "22", "25", "7", "10", "12"], ["15", "16", "18", "19", "21", "22", "24", "25", "7", "10", "12", "14"], ["15", "16", "18", "19", "21", "22", "25", "7", "10", "12", "14"], ["15", "16", "18", "19", "22", "24", "25", "7", "10", "12", "14"], ["15", "16", "18", "19", "22", "25", "7", "10", "12", "14"], ["15", "16", "19", "21", "22", "24", "25", "7", "10", "12", "14"], ["15", "16", "19", "21", "22", "25", "7", "10", "12", "14"], ["15", "16", "19", "22", "24", "25", "7", "10", "12", "14"], ["15", "16", "19", "22", "25", "7", "10", "12", "14"], ["16", "18", "19", "21", "22", "24", "25", "7", "10", "12", "14", "15"], ["16", "18", "19", "21", "22", "25", "7", "10", "12", "14", "15"], ["16", "18", "19", "22", "24", "25", "7", "10", "12", "14", "15"], ["16", "18", "19", "22", "25", "7", "10", "12", "14", "15"], ["16", "19", "21", "22", "24", "25", "7", "10", "12", "14", "15"], ["16", "19", "21", "22", "25", "7", "10", "12", "14", "15"], ["16", "19", "22", "24", "25", "7", "10", "12", "14", "15"], ["16", "19", "22", "25", "7", "10", "12", "14", "15"], ["18", "19", "21", "22", "24", "25", "7", "10", "12", "14", "15", "16"], ["18", "19", "21", "22", "24", "25", "7", "10", "12", "14", "16"], ["18", "19", "21", "22", "25", "7", "10", "12", "14", "15", "16"], ["18", "19", "21", "22", "25", "7", "10", "12", "14", "16"], ["18", "19", "22", "24", "25", "7", "10", "12", "14", "15", "16"], ["18", "19", "22", "24", "25", "7", "10", "12", "14", "16"], ["18", "19", "22", "25", "7", "10", "12", "14", "15", "16"], ["18", "19", "22", "25", "7", "10", "12", "14", "16"], ["19", "21", "22", "24", "25", "7", "10", "12", "14", "15", "16", "18"], ["19", "21", "22", "24", "25", "7", "10", "12", "14", "16", "18"], ["19", "21", "22", "25", "7", "10", "12", "14", "15", "16", "18"], ["19", "21", "22", "25", "7", "10", "12", "14", "16", "18"], ["19", "22", "24", "25", "7", "10", "12", "14", "15", "16", "18"], ["19", "22", "24", "25", "7", "10", "12", "14", "16", "18"], ["19", "22", "25", "7", "10", "12", "14", "15", "16", "18"], ["19", "22", "25", "7", "10", "12", "14", "16", "18"], ["21", "22", "24", "25", "7", "10", "12", "14", "15", "16", "18", "19"], ["21", "22", "24", "25", "7", "10", "12", "14", "15", "16", "19"], ["21", "22", "24", "25", "7", "10", "12", "14", "16", "18", "19"], ["21", "22", "24", "25", "7", "10", "12", "14", "16", "19"], ["21", "22", "25", "7", "10", "12", "14", "15", "16", "18", "19"], ["21", "22", "25", "7", "10", "12", "14", "15", "16", "19"], ["21", "22", "25", "7", "10", "12", "14", "16", "18", "19"], ["21", "22", "25", "7", "10", "12", "14", "16", "19"], ["22", "24", "25", "7", "10", "12", "14", "15", "16", "18", "19", "21"], ["22", "24", "25", "7", "10", "12", "14", "15", "16", "19", "21"], ["22", "24", "25", "7", "10", "12", "14", "16", "18", "19", "21"], ["22", "24", "25", "7", "10", "12", "14", "16", "19", "21"], ["22", "25", "7", "10", "12", "14", "15", "16", "18", "19", "21"], ["22", "25", "7", "10", "12", "14", "15", "16", "19", "21"], ["22", "25", "7", "10", "12", "14", "16", "18", "19", "21"], ["22", "25", "7", "10", "12", "14", "16", "19", "21"], ["24", "25", "7", "10", "12", "14", "15", "16", "18", "19", "21", "22"], ["24", "25", "7", "10", "12", "14", "15", "16", "18", "19", "22"], ["24", "25", "7", "10", "12", "14", "15", "16", "19", "21", "22"], ["24", "25", "7", "10", "12", "14", "15", "16", "19", "22"], ["24", "25", "7", "10", "12", "14", "16", "18", "19", "21", "22"], ["24", "25", "7", "10", "12", "14", "16", "18", "19", "22"], ["24", "25", "7", "10", "12", "14", "16", "19", "21", "22"], ["24", "25", "7", "10", "12", "14", "16", "19", "22"], ["25", "7", "10", "12", "14", "15", "16", "18", "19", "21", "22", "24"], ["25", "7", "10", "12", "14", "15", "16", "18", "19", "22", "24"], ["25", "7", "10", "12", "14", "15", "16", "19", "21", "22", "24"], ["25", "7", "10", "12", "14", "15", "16", "19", "22", "24"], ["25", "7", "10", "12", "14", "16", "18", "19", "21", "22", "24"], ["25", "7", "10", "12", "14", "16", "18", "19", "22", "24"], ["25", "7", "10", "12", "14", "16", "19", "21", "22", "24"], ["25", "7", "10", "12", "14", "16", "19", "22", "24"], ["30", "32", "28", "31"], ["30", "34", "28", "31"], ["32", "28", "30", "34"], ["34", "28", "30", "32"], ["1", "39", "3", "5", "7", "10", "12", "14", "15", "16", "18", "19", "21", "22", "24", "25"], ["1", "39", "3", "5", "7", "10", "12", "14", "15", "16", "18", "19", "21", "22", "25"], ["1", "39", "3", "5", "7", "10", "12", "14", "15", "16", "18", "19", "22", "24", "25"], ["1", "39", "3", "5", "7", "10", "12", "14", "15", "16", "18", "19", "22", "25"], ["1", "39", "3", "5", "7", "10", "12", "14", "15", "16", "19", "21", "22", "24", "25"], ["1", "39", "3", "5", "7", "10", "12", "14", "15", "16", "19", "21", "22", "25"], ["1", "39", "3", "5", "7", "10", "12", "14", "15", "16", "19", "22", "24", "25"], ["1", "39", "3", "5", "7", "10", "12", "14", "15", "16", "19", "22", "25"], ["1", "39", "3", "5", "7", "10", "12", "14", "16", "18", "19", "21", "22", "24", "25"], ["1", "39", "3", "5", "7", "10", "12", "14", "16", "18", "19", "21", "22", "25"], ["1", "39", "3", "5", "7", "10", "12", "14", "16", "18", "19", "22", "24", "25"], ["1", "39", "3", "5", "7", "10", "12", "14", "16", "18", "19", "22", "25"], ["1", "39", "3", "5", "7", "10", "12", "14", "16", "19", "21", "22", "24", "25"], ["1", "39", "3", "5", "7", "10", "12", "14", "16", "19", "21", "22", "25"], ["1", "39", "3", "5", "7", "10", "12", "14", "16", "19", "22", "24", "25"], ["1", "39", "3", "5", "7", "10", "12", "14", "16", "19", "22", "25"], ["1", "39", "3", "5", "8", "28", "31"], ["1", "39", "3", "5", "8", "28", "30", "32"], ["1", "39", "3", "5", "8", "28", "30", "34"]], "prime_paths_statements": [["if grid[i][j] == 1:\\l", "for j in range(n):\\l", "for i in range(n):\\l", "ans = []\\l", "for i in range(k):\\l", "return ans\\l"], ["if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "temp.append(grid[i - 1][j])\\l", "if j != 0:\\l", "temp.append(grid[i][j - 1])\\l", "if i != n - 1:\\l", "temp.append(grid[i + 1][j])\\l", "if j != n - 1:\\l", "temp.append(grid[i][j + 1])\\l", "val = min(temp)\\l", "for j in range(n):\\l", "for i in range(n):\\l", "ans = []\\l", "for i in range(k):\\l", "return ans\\l"], ["if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "temp.append(grid[i - 1][j])\\l", "if j != 0:\\l", "temp.append(grid[i][j - 1])\\l", "if i != n - 1:\\l", "temp.append(grid[i + 1][j])\\l", "if j != n - 1:\\l", "val = min(temp)\\l", "for j in range(n):\\l", "for i in range(n):\\l", "ans = []\\l", "for i in range(k):\\l", "return ans\\l"], ["if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "temp.append(grid[i - 1][j])\\l", "if j != 0:\\l", "temp.append(grid[i][j - 1])\\l", "if i != n - 1:\\l", "if j != n - 1:\\l", "temp.append(grid[i][j + 1])\\l", "val = min(temp)\\l", "for j in range(n):\\l", "for i in range(n):\\l", "ans = []\\l", "for i in range(k):\\l", "return ans\\l"], ["if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "temp.append(grid[i - 1][j])\\l", "if j != 0:\\l", "temp.append(grid[i][j - 1])\\l", "if i != n - 1:\\l", "if j != n - 1:\\l", "val = min(temp)\\l", "for j in range(n):\\l", "for i in range(n):\\l", "ans = []\\l", "for i in range(k):\\l", "return ans\\l"], ["if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "temp.append(grid[i - 1][j])\\l", "if j != 0:\\l", "if i != n - 1:\\l", "temp.append(grid[i + 1][j])\\l", "if j != n - 1:\\l", "temp.append(grid[i][j + 1])\\l", "val = min(temp)\\l", "for j in range(n):\\l", "for i in range(n):\\l", "ans = []\\l", "for i in range(k):\\l", "return ans\\l"], ["if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "temp.append(grid[i - 1][j])\\l", "if j != 0:\\l", "if i != n - 1:\\l", "temp.append(grid[i + 1][j])\\l", "if j != n - 1:\\l", "val = min(temp)\\l", "for j in range(n):\\l", "for i in range(n):\\l", "ans = []\\l", "for i in range(k):\\l", "return ans\\l"], ["if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "temp.append(grid[i - 1][j])\\l", "if j != 0:\\l", "if i != n - 1:\\l", "if j != n - 1:\\l", "temp.append(grid[i][j + 1])\\l", "val = min(temp)\\l", "for j in range(n):\\l", "for i in range(n):\\l", "ans = []\\l", "for i in range(k):\\l", "return ans\\l"], ["if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "temp.append(grid[i - 1][j])\\l", "if j != 0:\\l", "if i != n - 1:\\l", "if j != n - 1:\\l", "val = min(temp)\\l", "for j in range(n):\\l", "for i in range(n):\\l", "ans = []\\l", "for i in range(k):\\l", "return ans\\l"], ["if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "if j != 0:\\l", "temp.append(grid[i][j - 1])\\l", "if i != n - 1:\\l", "temp.append(grid[i + 1][j])\\l", "if j != n - 1:\\l", "temp.append(grid[i][j + 1])\\l", "val = min(temp)\\l", "for j in range(n):\\l", "for i in range(n):\\l", "ans = []\\l", "for i in range(k):\\l", "return ans\\l"], ["if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "if j != 0:\\l", "temp.append(grid[i][j - 1])\\l", "if i != n - 1:\\l", "temp.append(grid[i + 1][j])\\l", "if j != n - 1:\\l", "val = min(temp)\\l", "for j in range(n):\\l", "for i in range(n):\\l", "ans = []\\l", "for i in range(k):\\l", "return ans\\l"], ["if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "if j != 0:\\l", "temp.append(grid[i][j - 1])\\l", "if i != n - 1:\\l", "if j != n - 1:\\l", "temp.append(grid[i][j + 1])\\l", "val = min(temp)\\l", "for j in range(n):\\l", "for i in range(n):\\l", "ans = []\\l", "for i in range(k):\\l", "return ans\\l"], ["if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "if j != 0:\\l", "temp.append(grid[i][j - 1])\\l", "if i != n - 1:\\l", "if j != n - 1:\\l", "val = min(temp)\\l", "for j in range(n):\\l", "for i in range(n):\\l", "ans = []\\l", "for i in range(k):\\l", "return ans\\l"], ["if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "if j != 0:\\l", "if i != n - 1:\\l", "temp.append(grid[i + 1][j])\\l", "if j != n - 1:\\l", "temp.append(grid[i][j + 1])\\l", "val = min(temp)\\l", "for j in range(n):\\l", "for i in range(n):\\l", "ans = []\\l", "for i in range(k):\\l", "return ans\\l"], ["if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "if j != 0:\\l", "if i != n - 1:\\l", "temp.append(grid[i + 1][j])\\l", "if j != n - 1:\\l", "val = min(temp)\\l", "for j in range(n):\\l", "for i in range(n):\\l", "ans = []\\l", "for i in range(k):\\l", "return ans\\l"], ["if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "if j != 0:\\l", "if i != n - 1:\\l", "if j != n - 1:\\l", "temp.append(grid[i][j + 1])\\l", "val = min(temp)\\l", "for j in range(n):\\l", "for i in range(n):\\l", "ans = []\\l", "for i in range(k):\\l", "return ans\\l"], ["if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "if j != 0:\\l", "if i != n - 1:\\l", "if j != n - 1:\\l", "val = min(temp)\\l", "for j in range(n):\\l", "for i in range(n):\\l", "ans = []\\l", "for i in range(k):\\l", "return ans\\l"], ["if grid[i][j] == 1:\\l", "for j in range(n):\\l", "for i in range(n):\\l", "ans = []\\l", "for i in range(k):\\l", "if i % 2 == 0:\\l", "ans.append(1)\\l"], ["if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "temp.append(grid[i - 1][j])\\l", "if j != 0:\\l", "temp.append(grid[i][j - 1])\\l", "if i != n - 1:\\l", "temp.append(grid[i + 1][j])\\l", "if j != n - 1:\\l", "temp.append(grid[i][j + 1])\\l", "val = min(temp)\\l", "for j in range(n):\\l", "for i in range(n):\\l", "ans = []\\l", "for i in range(k):\\l", "if i % 2 == 0:\\l", "ans.append(1)\\l"], ["if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "temp.append(grid[i - 1][j])\\l", "if j != 0:\\l", "temp.append(grid[i][j - 1])\\l", "if i != n - 1:\\l", "temp.append(grid[i + 1][j])\\l", "if j != n - 1:\\l", "val = min(temp)\\l", "for j in range(n):\\l", "for i in range(n):\\l", "ans = []\\l", "for i in range(k):\\l", "if i % 2 == 0:\\l", "ans.append(1)\\l"], ["if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "temp.append(grid[i - 1][j])\\l", "if j != 0:\\l", "temp.append(grid[i][j - 1])\\l", "if i != n - 1:\\l", "if j != n - 1:\\l", "temp.append(grid[i][j + 1])\\l", "val = min(temp)\\l", "for j in range(n):\\l", "for i in range(n):\\l", "ans = []\\l", "for i in range(k):\\l", "if i % 2 == 0:\\l", "ans.append(1)\\l"], ["if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "temp.append(grid[i - 1][j])\\l", "if j != 0:\\l", "temp.append(grid[i][j - 1])\\l", "if i != n - 1:\\l", "if j != n - 1:\\l", "val = min(temp)\\l", "for j in range(n):\\l", "for i in range(n):\\l", "ans = []\\l", "for i in range(k):\\l", "if i % 2 == 0:\\l", "ans.append(1)\\l"], ["if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "temp.append(grid[i - 1][j])\\l", "if j != 0:\\l", "if i != n - 1:\\l", "temp.append(grid[i + 1][j])\\l", "if j != n - 1:\\l", "temp.append(grid[i][j + 1])\\l", "val = min(temp)\\l", "for j in range(n):\\l", "for i in range(n):\\l", "ans = []\\l", "for i in range(k):\\l", "if i % 2 == 0:\\l", "ans.append(1)\\l"], ["if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "temp.append(grid[i - 1][j])\\l", "if j != 0:\\l", "if i != n - 1:\\l", "temp.append(grid[i + 1][j])\\l", "if j != n - 1:\\l", "val = min(temp)\\l", "for j in range(n):\\l", "for i in range(n):\\l", "ans = []\\l", "for i in range(k):\\l", "if i % 2 == 0:\\l", "ans.append(1)\\l"], ["if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "temp.append(grid[i - 1][j])\\l", "if j != 0:\\l", "if i != n - 1:\\l", "if j != n - 1:\\l", "temp.append(grid[i][j + 1])\\l", "val = min(temp)\\l", "for j in range(n):\\l", "for i in range(n):\\l", "ans = []\\l", "for i in range(k):\\l", "if i % 2 == 0:\\l", "ans.append(1)\\l"], ["if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "temp.append(grid[i - 1][j])\\l", "if j != 0:\\l", "if i != n - 1:\\l", "if j != n - 1:\\l", "val = min(temp)\\l", "for j in range(n):\\l", "for i in range(n):\\l", "ans = []\\l", "for i in range(k):\\l", "if i % 2 == 0:\\l", "ans.append(1)\\l"], ["if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "if j != 0:\\l", "temp.append(grid[i][j - 1])\\l", "if i != n - 1:\\l", "temp.append(grid[i + 1][j])\\l", "if j != n - 1:\\l", "temp.append(grid[i][j + 1])\\l", "val = min(temp)\\l", "for j in range(n):\\l", "for i in range(n):\\l", "ans = []\\l", "for i in range(k):\\l", "if i % 2 == 0:\\l", "ans.append(1)\\l"], ["if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "if j != 0:\\l", "temp.append(grid[i][j - 1])\\l", "if i != n - 1:\\l", "temp.append(grid[i + 1][j])\\l", "if j != n - 1:\\l", "val = min(temp)\\l", "for j in range(n):\\l", "for i in range(n):\\l", "ans = []\\l", "for i in range(k):\\l", "if i % 2 == 0:\\l", "ans.append(1)\\l"], ["if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "if j != 0:\\l", "temp.append(grid[i][j - 1])\\l", "if i != n - 1:\\l", "if j != n - 1:\\l", "temp.append(grid[i][j + 1])\\l", "val = min(temp)\\l", "for j in range(n):\\l", "for i in range(n):\\l", "ans = []\\l", "for i in range(k):\\l", "if i % 2 == 0:\\l", "ans.append(1)\\l"], ["if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "if j != 0:\\l", "temp.append(grid[i][j - 1])\\l", "if i != n - 1:\\l", "if j != n - 1:\\l", "val = min(temp)\\l", "for j in range(n):\\l", "for i in range(n):\\l", "ans = []\\l", "for i in range(k):\\l", "if i % 2 == 0:\\l", "ans.append(1)\\l"], ["if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "if j != 0:\\l", "if i != n - 1:\\l", "temp.append(grid[i + 1][j])\\l", "if j != n - 1:\\l", "temp.append(grid[i][j + 1])\\l", "val = min(temp)\\l", "for j in range(n):\\l", "for i in range(n):\\l", "ans = []\\l", "for i in range(k):\\l", "if i % 2 == 0:\\l", "ans.append(1)\\l"], ["if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "if j != 0:\\l", "if i != n - 1:\\l", "temp.append(grid[i + 1][j])\\l", "if j != n - 1:\\l", "val = min(temp)\\l", "for j in range(n):\\l", "for i in range(n):\\l", "ans = []\\l", "for i in range(k):\\l", "if i % 2 == 0:\\l", "ans.append(1)\\l"], ["if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "if j != 0:\\l", "if i != n - 1:\\l", "if j != n - 1:\\l", "temp.append(grid[i][j + 1])\\l", "val = min(temp)\\l", "for j in range(n):\\l", "for i in range(n):\\l", "ans = []\\l", "for i in range(k):\\l", "if i % 2 == 0:\\l", "ans.append(1)\\l"], ["if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "if j != 0:\\l", "if i != n - 1:\\l", "if j != n - 1:\\l", "val = min(temp)\\l", "for j in range(n):\\l", "for i in range(n):\\l", "ans = []\\l", "for i in range(k):\\l", "if i % 2 == 0:\\l", "ans.append(1)\\l"], ["if grid[i][j] == 1:\\l", "for j in range(n):\\l", "for i in range(n):\\l", "ans = []\\l", "for i in range(k):\\l", "if i % 2 == 0:\\l", "ans.append(val)\\l"], ["if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "temp.append(grid[i - 1][j])\\l", "if j != 0:\\l", "temp.append(grid[i][j - 1])\\l", "if i != n - 1:\\l", "temp.append(grid[i + 1][j])\\l", "if j != n - 1:\\l", "temp.append(grid[i][j + 1])\\l", "val = min(temp)\\l", "for j in range(n):\\l", "for i in range(n):\\l", "ans = []\\l", "for i in range(k):\\l", "if i % 2 == 0:\\l", "ans.append(val)\\l"], ["if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "temp.append(grid[i - 1][j])\\l", "if j != 0:\\l", "temp.append(grid[i][j - 1])\\l", "if i != n - 1:\\l", "temp.append(grid[i + 1][j])\\l", "if j != n - 1:\\l", "val = min(temp)\\l", "for j in range(n):\\l", "for i in range(n):\\l", "ans = []\\l", "for i in range(k):\\l", "if i % 2 == 0:\\l", "ans.append(val)\\l"], ["if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "temp.append(grid[i - 1][j])\\l", "if j != 0:\\l", "temp.append(grid[i][j - 1])\\l", "if i != n - 1:\\l", "if j != n - 1:\\l", "temp.append(grid[i][j + 1])\\l", "val = min(temp)\\l", "for j in range(n):\\l", "for i in range(n):\\l", "ans = []\\l", "for i in range(k):\\l", "if i % 2 == 0:\\l", "ans.append(val)\\l"], ["if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "temp.append(grid[i - 1][j])\\l", "if j != 0:\\l", "temp.append(grid[i][j - 1])\\l", "if i != n - 1:\\l", "if j != n - 1:\\l", "val = min(temp)\\l", "for j in range(n):\\l", "for i in range(n):\\l", "ans = []\\l", "for i in range(k):\\l", "if i % 2 == 0:\\l", "ans.append(val)\\l"], ["if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "temp.append(grid[i - 1][j])\\l", "if j != 0:\\l", "if i != n - 1:\\l", "temp.append(grid[i + 1][j])\\l", "if j != n - 1:\\l", "temp.append(grid[i][j + 1])\\l", "val = min(temp)\\l", "for j in range(n):\\l", "for i in range(n):\\l", "ans = []\\l", "for i in range(k):\\l", "if i % 2 == 0:\\l", "ans.append(val)\\l"], ["if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "temp.append(grid[i - 1][j])\\l", "if j != 0:\\l", "if i != n - 1:\\l", "temp.append(grid[i + 1][j])\\l", "if j != n - 1:\\l", "val = min(temp)\\l", "for j in range(n):\\l", "for i in range(n):\\l", "ans = []\\l", "for i in range(k):\\l", "if i % 2 == 0:\\l", "ans.append(val)\\l"], ["if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "temp.append(grid[i - 1][j])\\l", "if j != 0:\\l", "if i != n - 1:\\l", "if j != n - 1:\\l", "temp.append(grid[i][j + 1])\\l", "val = min(temp)\\l", "for j in range(n):\\l", "for i in range(n):\\l", "ans = []\\l", "for i in range(k):\\l", "if i % 2 == 0:\\l", "ans.append(val)\\l"], ["if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "temp.append(grid[i - 1][j])\\l", "if j != 0:\\l", "if i != n - 1:\\l", "if j != n - 1:\\l", "val = min(temp)\\l", "for j in range(n):\\l", "for i in range(n):\\l", "ans = []\\l", "for i in range(k):\\l", "if i % 2 == 0:\\l", "ans.append(val)\\l"], ["if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "if j != 0:\\l", "temp.append(grid[i][j - 1])\\l", "if i != n - 1:\\l", "temp.append(grid[i + 1][j])\\l", "if j != n - 1:\\l", "temp.append(grid[i][j + 1])\\l", "val = min(temp)\\l", "for j in range(n):\\l", "for i in range(n):\\l", "ans = []\\l", "for i in range(k):\\l", "if i % 2 == 0:\\l", "ans.append(val)\\l"], ["if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "if j != 0:\\l", "temp.append(grid[i][j - 1])\\l", "if i != n - 1:\\l", "temp.append(grid[i + 1][j])\\l", "if j != n - 1:\\l", "val = min(temp)\\l", "for j in range(n):\\l", "for i in range(n):\\l", "ans = []\\l", "for i in range(k):\\l", "if i % 2 == 0:\\l", "ans.append(val)\\l"], ["if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "if j != 0:\\l", "temp.append(grid[i][j - 1])\\l", "if i != n - 1:\\l", "if j != n - 1:\\l", "temp.append(grid[i][j + 1])\\l", "val = min(temp)\\l", "for j in range(n):\\l", "for i in range(n):\\l", "ans = []\\l", "for i in range(k):\\l", "if i % 2 == 0:\\l", "ans.append(val)\\l"], ["if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "if j != 0:\\l", "temp.append(grid[i][j - 1])\\l", "if i != n - 1:\\l", "if j != n - 1:\\l", "val = min(temp)\\l", "for j in range(n):\\l", "for i in range(n):\\l", "ans = []\\l", "for i in range(k):\\l", "if i % 2 == 0:\\l", "ans.append(val)\\l"], ["if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "if j != 0:\\l", "if i != n - 1:\\l", "temp.append(grid[i + 1][j])\\l", "if j != n - 1:\\l", "temp.append(grid[i][j + 1])\\l", "val = min(temp)\\l", "for j in range(n):\\l", "for i in range(n):\\l", "ans = []\\l", "for i in range(k):\\l", "if i % 2 == 0:\\l", "ans.append(val)\\l"], ["if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "if j != 0:\\l", "if i != n - 1:\\l", "temp.append(grid[i + 1][j])\\l", "if j != n - 1:\\l", "val = min(temp)\\l", "for j in range(n):\\l", "for i in range(n):\\l", "ans = []\\l", "for i in range(k):\\l", "if i % 2 == 0:\\l", "ans.append(val)\\l"], ["if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "if j != 0:\\l", "if i != n - 1:\\l", "if j != n - 1:\\l", "temp.append(grid[i][j + 1])\\l", "val = min(temp)\\l", "for j in range(n):\\l", "for i in range(n):\\l", "ans = []\\l", "for i in range(k):\\l", "if i % 2 == 0:\\l", "ans.append(val)\\l"], ["if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "if j != 0:\\l", "if i != n - 1:\\l", "if j != n - 1:\\l", "val = min(temp)\\l", "for j in range(n):\\l", "for i in range(n):\\l", "ans = []\\l", "for i in range(k):\\l", "if i % 2 == 0:\\l", "ans.append(val)\\l"], ["temp = []\\l", "if i != 0:\\l", "temp.append(grid[i - 1][j])\\l", "if j != 0:\\l", "temp.append(grid[i][j - 1])\\l", "if i != n - 1:\\l", "temp.append(grid[i + 1][j])\\l", "if j != n - 1:\\l", "temp.append(grid[i][j + 1])\\l", "val = min(temp)\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l"], ["temp = []\\l", "if i != 0:\\l", "temp.append(grid[i - 1][j])\\l", "if j != 0:\\l", "temp.append(grid[i][j - 1])\\l", "if i != n - 1:\\l", "temp.append(grid[i + 1][j])\\l", "if j != n - 1:\\l", "val = min(temp)\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l"], ["temp = []\\l", "if i != 0:\\l", "temp.append(grid[i - 1][j])\\l", "if j != 0:\\l", "temp.append(grid[i][j - 1])\\l", "if i != n - 1:\\l", "if j != n - 1:\\l", "temp.append(grid[i][j + 1])\\l", "val = min(temp)\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l"], ["temp = []\\l", "if i != 0:\\l", "temp.append(grid[i - 1][j])\\l", "if j != 0:\\l", "temp.append(grid[i][j - 1])\\l", "if i != n - 1:\\l", "if j != n - 1:\\l", "val = min(temp)\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l"], ["temp = []\\l", "if i != 0:\\l", "temp.append(grid[i - 1][j])\\l", "if j != 0:\\l", "if i != n - 1:\\l", "temp.append(grid[i + 1][j])\\l", "if j != n - 1:\\l", "temp.append(grid[i][j + 1])\\l", "val = min(temp)\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l"], ["temp = []\\l", "if i != 0:\\l", "temp.append(grid[i - 1][j])\\l", "if j != 0:\\l", "if i != n - 1:\\l", "temp.append(grid[i + 1][j])\\l", "if j != n - 1:\\l", "val = min(temp)\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l"], ["temp = []\\l", "if i != 0:\\l", "temp.append(grid[i - 1][j])\\l", "if j != 0:\\l", "if i != n - 1:\\l", "if j != n - 1:\\l", "temp.append(grid[i][j + 1])\\l", "val = min(temp)\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l"], ["temp = []\\l", "if i != 0:\\l", "temp.append(grid[i - 1][j])\\l", "if j != 0:\\l", "if i != n - 1:\\l", "if j != n - 1:\\l", "val = min(temp)\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l"], ["temp = []\\l", "if i != 0:\\l", "if j != 0:\\l", "temp.append(grid[i][j - 1])\\l", "if i != n - 1:\\l", "temp.append(grid[i + 1][j])\\l", "if j != n - 1:\\l", "temp.append(grid[i][j + 1])\\l", "val = min(temp)\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l"], ["temp = []\\l", "if i != 0:\\l", "if j != 0:\\l", "temp.append(grid[i][j - 1])\\l", "if i != n - 1:\\l", "temp.append(grid[i + 1][j])\\l", "if j != n - 1:\\l", "val = min(temp)\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l"], ["temp = []\\l", "if i != 0:\\l", "if j != 0:\\l", "temp.append(grid[i][j - 1])\\l", "if i != n - 1:\\l", "if j != n - 1:\\l", "temp.append(grid[i][j + 1])\\l", "val = min(temp)\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l"], ["temp = []\\l", "if i != 0:\\l", "if j != 0:\\l", "temp.append(grid[i][j - 1])\\l", "if i != n - 1:\\l", "if j != n - 1:\\l", "val = min(temp)\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l"], ["temp = []\\l", "if i != 0:\\l", "if j != 0:\\l", "if i != n - 1:\\l", "temp.append(grid[i + 1][j])\\l", "if j != n - 1:\\l", "temp.append(grid[i][j + 1])\\l", "val = min(temp)\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l"], ["temp = []\\l", "if i != 0:\\l", "if j != 0:\\l", "if i != n - 1:\\l", "temp.append(grid[i + 1][j])\\l", "if j != n - 1:\\l", "val = min(temp)\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l"], ["temp = []\\l", "if i != 0:\\l", "if j != 0:\\l", "if i != n - 1:\\l", "if j != n - 1:\\l", "temp.append(grid[i][j + 1])\\l", "val = min(temp)\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l"], ["temp = []\\l", "if i != 0:\\l", "if j != 0:\\l", "if i != n - 1:\\l", "if j != n - 1:\\l", "val = min(temp)\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l"], ["if i != 0:\\l", "temp.append(grid[i - 1][j])\\l", "if j != 0:\\l", "temp.append(grid[i][j - 1])\\l", "if i != n - 1:\\l", "temp.append(grid[i + 1][j])\\l", "if j != n - 1:\\l", "temp.append(grid[i][j + 1])\\l", "val = min(temp)\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l", "temp = []\\l"], ["if i != 0:\\l", "temp.append(grid[i - 1][j])\\l", "if j != 0:\\l", "temp.append(grid[i][j - 1])\\l", "if i != n - 1:\\l", "temp.append(grid[i + 1][j])\\l", "if j != n - 1:\\l", "val = min(temp)\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l", "temp = []\\l"], ["if i != 0:\\l", "temp.append(grid[i - 1][j])\\l", "if j != 0:\\l", "temp.append(grid[i][j - 1])\\l", "if i != n - 1:\\l", "if j != n - 1:\\l", "temp.append(grid[i][j + 1])\\l", "val = min(temp)\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l", "temp = []\\l"], ["if i != 0:\\l", "temp.append(grid[i - 1][j])\\l", "if j != 0:\\l", "temp.append(grid[i][j - 1])\\l", "if i != n - 1:\\l", "if j != n - 1:\\l", "val = min(temp)\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l", "temp = []\\l"], ["if i != 0:\\l", "temp.append(grid[i - 1][j])\\l", "if j != 0:\\l", "if i != n - 1:\\l", "temp.append(grid[i + 1][j])\\l", "if j != n - 1:\\l", "temp.append(grid[i][j + 1])\\l", "val = min(temp)\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l", "temp = []\\l"], ["if i != 0:\\l", "temp.append(grid[i - 1][j])\\l", "if j != 0:\\l", "if i != n - 1:\\l", "temp.append(grid[i + 1][j])\\l", "if j != n - 1:\\l", "val = min(temp)\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l", "temp = []\\l"], ["if i != 0:\\l", "temp.append(grid[i - 1][j])\\l", "if j != 0:\\l", "if i != n - 1:\\l", "if j != n - 1:\\l", "temp.append(grid[i][j + 1])\\l", "val = min(temp)\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l", "temp = []\\l"], ["if i != 0:\\l", "temp.append(grid[i - 1][j])\\l", "if j != 0:\\l", "if i != n - 1:\\l", "if j != n - 1:\\l", "val = min(temp)\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l", "temp = []\\l"], ["if i != 0:\\l", "if j != 0:\\l", "temp.append(grid[i][j - 1])\\l", "if i != n - 1:\\l", "temp.append(grid[i + 1][j])\\l", "if j != n - 1:\\l", "temp.append(grid[i][j + 1])\\l", "val = min(temp)\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l", "temp = []\\l"], ["if i != 0:\\l", "if j != 0:\\l", "temp.append(grid[i][j - 1])\\l", "if i != n - 1:\\l", "temp.append(grid[i + 1][j])\\l", "if j != n - 1:\\l", "val = min(temp)\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l", "temp = []\\l"], ["if i != 0:\\l", "if j != 0:\\l", "temp.append(grid[i][j - 1])\\l", "if i != n - 1:\\l", "if j != n - 1:\\l", "temp.append(grid[i][j + 1])\\l", "val = min(temp)\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l", "temp = []\\l"], ["if i != 0:\\l", "if j != 0:\\l", "temp.append(grid[i][j - 1])\\l", "if i != n - 1:\\l", "if j != n - 1:\\l", "val = min(temp)\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l", "temp = []\\l"], ["if i != 0:\\l", "if j != 0:\\l", "if i != n - 1:\\l", "temp.append(grid[i + 1][j])\\l", "if j != n - 1:\\l", "temp.append(grid[i][j + 1])\\l", "val = min(temp)\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l", "temp = []\\l"], ["if i != 0:\\l", "if j != 0:\\l", "if i != n - 1:\\l", "temp.append(grid[i + 1][j])\\l", "if j != n - 1:\\l", "val = min(temp)\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l", "temp = []\\l"], ["if i != 0:\\l", "if j != 0:\\l", "if i != n - 1:\\l", "if j != n - 1:\\l", "temp.append(grid[i][j + 1])\\l", "val = min(temp)\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l", "temp = []\\l"], ["if i != 0:\\l", "if j != 0:\\l", "if i != n - 1:\\l", "if j != n - 1:\\l", "val = min(temp)\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l", "temp = []\\l"], ["temp.append(grid[i - 1][j])\\l", "if j != 0:\\l", "temp.append(grid[i][j - 1])\\l", "if i != n - 1:\\l", "temp.append(grid[i + 1][j])\\l", "if j != n - 1:\\l", "temp.append(grid[i][j + 1])\\l", "val = min(temp)\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l"], ["temp.append(grid[i - 1][j])\\l", "if j != 0:\\l", "temp.append(grid[i][j - 1])\\l", "if i != n - 1:\\l", "temp.append(grid[i + 1][j])\\l", "if j != n - 1:\\l", "val = min(temp)\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l"], ["temp.append(grid[i - 1][j])\\l", "if j != 0:\\l", "temp.append(grid[i][j - 1])\\l", "if i != n - 1:\\l", "if j != n - 1:\\l", "temp.append(grid[i][j + 1])\\l", "val = min(temp)\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l"], ["temp.append(grid[i - 1][j])\\l", "if j != 0:\\l", "temp.append(grid[i][j - 1])\\l", "if i != n - 1:\\l", "if j != n - 1:\\l", "val = min(temp)\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l"], ["temp.append(grid[i - 1][j])\\l", "if j != 0:\\l", "if i != n - 1:\\l", "temp.append(grid[i + 1][j])\\l", "if j != n - 1:\\l", "temp.append(grid[i][j + 1])\\l", "val = min(temp)\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l"], ["temp.append(grid[i - 1][j])\\l", "if j != 0:\\l", "if i != n - 1:\\l", "temp.append(grid[i + 1][j])\\l", "if j != n - 1:\\l", "val = min(temp)\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l"], ["temp.append(grid[i - 1][j])\\l", "if j != 0:\\l", "if i != n - 1:\\l", "if j != n - 1:\\l", "temp.append(grid[i][j + 1])\\l", "val = min(temp)\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l"], ["temp.append(grid[i - 1][j])\\l", "if j != 0:\\l", "if i != n - 1:\\l", "if j != n - 1:\\l", "val = min(temp)\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l"], ["if j != 0:\\l", "temp.append(grid[i][j - 1])\\l", "if i != n - 1:\\l", "temp.append(grid[i + 1][j])\\l", "if j != n - 1:\\l", "temp.append(grid[i][j + 1])\\l", "val = min(temp)\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "temp.append(grid[i - 1][j])\\l"], ["if j != 0:\\l", "temp.append(grid[i][j - 1])\\l", "if i != n - 1:\\l", "temp.append(grid[i + 1][j])\\l", "if j != n - 1:\\l", "val = min(temp)\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "temp.append(grid[i - 1][j])\\l"], ["if j != 0:\\l", "temp.append(grid[i][j - 1])\\l", "if i != n - 1:\\l", "if j != n - 1:\\l", "temp.append(grid[i][j + 1])\\l", "val = min(temp)\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "temp.append(grid[i - 1][j])\\l"], ["if j != 0:\\l", "temp.append(grid[i][j - 1])\\l", "if i != n - 1:\\l", "if j != n - 1:\\l", "val = min(temp)\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "temp.append(grid[i - 1][j])\\l"], ["if j != 0:\\l", "if i != n - 1:\\l", "temp.append(grid[i + 1][j])\\l", "if j != n - 1:\\l", "temp.append(grid[i][j + 1])\\l", "val = min(temp)\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "temp.append(grid[i - 1][j])\\l"], ["if j != 0:\\l", "if i != n - 1:\\l", "temp.append(grid[i + 1][j])\\l", "if j != n - 1:\\l", "val = min(temp)\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "temp.append(grid[i - 1][j])\\l"], ["if j != 0:\\l", "if i != n - 1:\\l", "if j != n - 1:\\l", "temp.append(grid[i][j + 1])\\l", "val = min(temp)\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "temp.append(grid[i - 1][j])\\l"], ["if j != 0:\\l", "if i != n - 1:\\l", "if j != n - 1:\\l", "val = min(temp)\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "temp.append(grid[i - 1][j])\\l"], ["temp.append(grid[i][j - 1])\\l", "if i != n - 1:\\l", "temp.append(grid[i + 1][j])\\l", "if j != n - 1:\\l", "temp.append(grid[i][j + 1])\\l", "val = min(temp)\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "temp.append(grid[i - 1][j])\\l", "if j != 0:\\l"], ["temp.append(grid[i][j - 1])\\l", "if i != n - 1:\\l", "temp.append(grid[i + 1][j])\\l", "if j != n - 1:\\l", "temp.append(grid[i][j + 1])\\l", "val = min(temp)\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "if j != 0:\\l"], ["temp.append(grid[i][j - 1])\\l", "if i != n - 1:\\l", "temp.append(grid[i + 1][j])\\l", "if j != n - 1:\\l", "val = min(temp)\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "temp.append(grid[i - 1][j])\\l", "if j != 0:\\l"], ["temp.append(grid[i][j - 1])\\l", "if i != n - 1:\\l", "temp.append(grid[i + 1][j])\\l", "if j != n - 1:\\l", "val = min(temp)\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "if j != 0:\\l"], ["temp.append(grid[i][j - 1])\\l", "if i != n - 1:\\l", "if j != n - 1:\\l", "temp.append(grid[i][j + 1])\\l", "val = min(temp)\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "temp.append(grid[i - 1][j])\\l", "if j != 0:\\l"], ["temp.append(grid[i][j - 1])\\l", "if i != n - 1:\\l", "if j != n - 1:\\l", "temp.append(grid[i][j + 1])\\l", "val = min(temp)\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "if j != 0:\\l"], ["temp.append(grid[i][j - 1])\\l", "if i != n - 1:\\l", "if j != n - 1:\\l", "val = min(temp)\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "temp.append(grid[i - 1][j])\\l", "if j != 0:\\l"], ["temp.append(grid[i][j - 1])\\l", "if i != n - 1:\\l", "if j != n - 1:\\l", "val = min(temp)\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "if j != 0:\\l"], ["if i != n - 1:\\l", "temp.append(grid[i + 1][j])\\l", "if j != n - 1:\\l", "temp.append(grid[i][j + 1])\\l", "val = min(temp)\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "temp.append(grid[i - 1][j])\\l", "if j != 0:\\l", "temp.append(grid[i][j - 1])\\l"], ["if i != n - 1:\\l", "temp.append(grid[i + 1][j])\\l", "if j != n - 1:\\l", "temp.append(grid[i][j + 1])\\l", "val = min(temp)\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "if j != 0:\\l", "temp.append(grid[i][j - 1])\\l"], ["if i != n - 1:\\l", "temp.append(grid[i + 1][j])\\l", "if j != n - 1:\\l", "val = min(temp)\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "temp.append(grid[i - 1][j])\\l", "if j != 0:\\l", "temp.append(grid[i][j - 1])\\l"], ["if i != n - 1:\\l", "temp.append(grid[i + 1][j])\\l", "if j != n - 1:\\l", "val = min(temp)\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "if j != 0:\\l", "temp.append(grid[i][j - 1])\\l"], ["if i != n - 1:\\l", "if j != n - 1:\\l", "temp.append(grid[i][j + 1])\\l", "val = min(temp)\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "temp.append(grid[i - 1][j])\\l", "if j != 0:\\l", "temp.append(grid[i][j - 1])\\l"], ["if i != n - 1:\\l", "if j != n - 1:\\l", "temp.append(grid[i][j + 1])\\l", "val = min(temp)\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "if j != 0:\\l", "temp.append(grid[i][j - 1])\\l"], ["if i != n - 1:\\l", "if j != n - 1:\\l", "val = min(temp)\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "temp.append(grid[i - 1][j])\\l", "if j != 0:\\l", "temp.append(grid[i][j - 1])\\l"], ["if i != n - 1:\\l", "if j != n - 1:\\l", "val = min(temp)\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "if j != 0:\\l", "temp.append(grid[i][j - 1])\\l"], ["temp.append(grid[i + 1][j])\\l", "if j != n - 1:\\l", "temp.append(grid[i][j + 1])\\l", "val = min(temp)\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "temp.append(grid[i - 1][j])\\l", "if j != 0:\\l", "temp.append(grid[i][j - 1])\\l", "if i != n - 1:\\l"], ["temp.append(grid[i + 1][j])\\l", "if j != n - 1:\\l", "temp.append(grid[i][j + 1])\\l", "val = min(temp)\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "temp.append(grid[i - 1][j])\\l", "if j != 0:\\l", "if i != n - 1:\\l"], ["temp.append(grid[i + 1][j])\\l", "if j != n - 1:\\l", "temp.append(grid[i][j + 1])\\l", "val = min(temp)\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "if j != 0:\\l", "temp.append(grid[i][j - 1])\\l", "if i != n - 1:\\l"], ["temp.append(grid[i + 1][j])\\l", "if j != n - 1:\\l", "temp.append(grid[i][j + 1])\\l", "val = min(temp)\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "if j != 0:\\l", "if i != n - 1:\\l"], ["temp.append(grid[i + 1][j])\\l", "if j != n - 1:\\l", "val = min(temp)\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "temp.append(grid[i - 1][j])\\l", "if j != 0:\\l", "temp.append(grid[i][j - 1])\\l", "if i != n - 1:\\l"], ["temp.append(grid[i + 1][j])\\l", "if j != n - 1:\\l", "val = min(temp)\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "temp.append(grid[i - 1][j])\\l", "if j != 0:\\l", "if i != n - 1:\\l"], ["temp.append(grid[i + 1][j])\\l", "if j != n - 1:\\l", "val = min(temp)\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "if j != 0:\\l", "temp.append(grid[i][j - 1])\\l", "if i != n - 1:\\l"], ["temp.append(grid[i + 1][j])\\l", "if j != n - 1:\\l", "val = min(temp)\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "if j != 0:\\l", "if i != n - 1:\\l"], ["if j != n - 1:\\l", "temp.append(grid[i][j + 1])\\l", "val = min(temp)\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "temp.append(grid[i - 1][j])\\l", "if j != 0:\\l", "temp.append(grid[i][j - 1])\\l", "if i != n - 1:\\l", "temp.append(grid[i + 1][j])\\l"], ["if j != n - 1:\\l", "temp.append(grid[i][j + 1])\\l", "val = min(temp)\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "temp.append(grid[i - 1][j])\\l", "if j != 0:\\l", "if i != n - 1:\\l", "temp.append(grid[i + 1][j])\\l"], ["if j != n - 1:\\l", "temp.append(grid[i][j + 1])\\l", "val = min(temp)\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "if j != 0:\\l", "temp.append(grid[i][j - 1])\\l", "if i != n - 1:\\l", "temp.append(grid[i + 1][j])\\l"], ["if j != n - 1:\\l", "temp.append(grid[i][j + 1])\\l", "val = min(temp)\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "if j != 0:\\l", "if i != n - 1:\\l", "temp.append(grid[i + 1][j])\\l"], ["if j != n - 1:\\l", "val = min(temp)\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "temp.append(grid[i - 1][j])\\l", "if j != 0:\\l", "temp.append(grid[i][j - 1])\\l", "if i != n - 1:\\l", "temp.append(grid[i + 1][j])\\l"], ["if j != n - 1:\\l", "val = min(temp)\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "temp.append(grid[i - 1][j])\\l", "if j != 0:\\l", "if i != n - 1:\\l", "temp.append(grid[i + 1][j])\\l"], ["if j != n - 1:\\l", "val = min(temp)\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "if j != 0:\\l", "temp.append(grid[i][j - 1])\\l", "if i != n - 1:\\l", "temp.append(grid[i + 1][j])\\l"], ["if j != n - 1:\\l", "val = min(temp)\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "if j != 0:\\l", "if i != n - 1:\\l", "temp.append(grid[i + 1][j])\\l"], ["temp.append(grid[i][j + 1])\\l", "val = min(temp)\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "temp.append(grid[i - 1][j])\\l", "if j != 0:\\l", "temp.append(grid[i][j - 1])\\l", "if i != n - 1:\\l", "temp.append(grid[i + 1][j])\\l", "if j != n - 1:\\l"], ["temp.append(grid[i][j + 1])\\l", "val = min(temp)\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "temp.append(grid[i - 1][j])\\l", "if j != 0:\\l", "temp.append(grid[i][j - 1])\\l", "if i != n - 1:\\l", "if j != n - 1:\\l"], ["temp.append(grid[i][j + 1])\\l", "val = min(temp)\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "temp.append(grid[i - 1][j])\\l", "if j != 0:\\l", "if i != n - 1:\\l", "temp.append(grid[i + 1][j])\\l", "if j != n - 1:\\l"], ["temp.append(grid[i][j + 1])\\l", "val = min(temp)\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "temp.append(grid[i - 1][j])\\l", "if j != 0:\\l", "if i != n - 1:\\l", "if j != n - 1:\\l"], ["temp.append(grid[i][j + 1])\\l", "val = min(temp)\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "if j != 0:\\l", "temp.append(grid[i][j - 1])\\l", "if i != n - 1:\\l", "temp.append(grid[i + 1][j])\\l", "if j != n - 1:\\l"], ["temp.append(grid[i][j + 1])\\l", "val = min(temp)\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "if j != 0:\\l", "temp.append(grid[i][j - 1])\\l", "if i != n - 1:\\l", "if j != n - 1:\\l"], ["temp.append(grid[i][j + 1])\\l", "val = min(temp)\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "if j != 0:\\l", "if i != n - 1:\\l", "temp.append(grid[i + 1][j])\\l", "if j != n - 1:\\l"], ["temp.append(grid[i][j + 1])\\l", "val = min(temp)\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "if j != 0:\\l", "if i != n - 1:\\l", "if j != n - 1:\\l"], ["val = min(temp)\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "temp.append(grid[i - 1][j])\\l", "if j != 0:\\l", "temp.append(grid[i][j - 1])\\l", "if i != n - 1:\\l", "temp.append(grid[i + 1][j])\\l", "if j != n - 1:\\l", "temp.append(grid[i][j + 1])\\l"], ["val = min(temp)\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "temp.append(grid[i - 1][j])\\l", "if j != 0:\\l", "temp.append(grid[i][j - 1])\\l", "if i != n - 1:\\l", "if j != n - 1:\\l", "temp.append(grid[i][j + 1])\\l"], ["val = min(temp)\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "temp.append(grid[i - 1][j])\\l", "if j != 0:\\l", "if i != n - 1:\\l", "temp.append(grid[i + 1][j])\\l", "if j != n - 1:\\l", "temp.append(grid[i][j + 1])\\l"], ["val = min(temp)\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "temp.append(grid[i - 1][j])\\l", "if j != 0:\\l", "if i != n - 1:\\l", "if j != n - 1:\\l", "temp.append(grid[i][j + 1])\\l"], ["val = min(temp)\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "if j != 0:\\l", "temp.append(grid[i][j - 1])\\l", "if i != n - 1:\\l", "temp.append(grid[i + 1][j])\\l", "if j != n - 1:\\l", "temp.append(grid[i][j + 1])\\l"], ["val = min(temp)\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "if j != 0:\\l", "temp.append(grid[i][j - 1])\\l", "if i != n - 1:\\l", "if j != n - 1:\\l", "temp.append(grid[i][j + 1])\\l"], ["val = min(temp)\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "if j != 0:\\l", "if i != n - 1:\\l", "temp.append(grid[i + 1][j])\\l", "if j != n - 1:\\l", "temp.append(grid[i][j + 1])\\l"], ["val = min(temp)\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "if j != 0:\\l", "if i != n - 1:\\l", "if j != n - 1:\\l", "temp.append(grid[i][j + 1])\\l"], ["if i % 2 == 0:\\l", "ans.append(1)\\l", "for i in range(k):\\l", "return ans\\l"], ["if i % 2 == 0:\\l", "ans.append(val)\\l", "for i in range(k):\\l", "return ans\\l"], ["ans.append(1)\\l", "for i in range(k):\\l", "if i % 2 == 0:\\l", "ans.append(val)\\l"], ["ans.append(val)\\l", "for i in range(k):\\l", "if i % 2 == 0:\\l", "ans.append(1)\\l"], ["from typing import *\\ldef minPath(grid, k):...\\lminPath([[6, 4, 13, 10], [5, 7, 12, 1], [3, 16, 11, 15], [8, 14, 9, 2]], 7)\\l", "minPath", "n = len(grid)\\lval = n * n + 1\\l", "for i in range(n):\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "temp.append(grid[i - 1][j])\\l", "if j != 0:\\l", "temp.append(grid[i][j - 1])\\l", "if i != n - 1:\\l", "temp.append(grid[i + 1][j])\\l", "if j != n - 1:\\l", "temp.append(grid[i][j + 1])\\l", "val = min(temp)\\l"], ["from typing import *\\ldef minPath(grid, k):...\\lminPath([[6, 4, 13, 10], [5, 7, 12, 1], [3, 16, 11, 15], [8, 14, 9, 2]], 7)\\l", "minPath", "n = len(grid)\\lval = n * n + 1\\l", "for i in range(n):\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "temp.append(grid[i - 1][j])\\l", "if j != 0:\\l", "temp.append(grid[i][j - 1])\\l", "if i != n - 1:\\l", "temp.append(grid[i + 1][j])\\l", "if j != n - 1:\\l", "val = min(temp)\\l"], ["from typing import *\\ldef minPath(grid, k):...\\lminPath([[6, 4, 13, 10], [5, 7, 12, 1], [3, 16, 11, 15], [8, 14, 9, 2]], 7)\\l", "minPath", "n = len(grid)\\lval = n * n + 1\\l", "for i in range(n):\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "temp.append(grid[i - 1][j])\\l", "if j != 0:\\l", "temp.append(grid[i][j - 1])\\l", "if i != n - 1:\\l", "if j != n - 1:\\l", "temp.append(grid[i][j + 1])\\l", "val = min(temp)\\l"], ["from typing import *\\ldef minPath(grid, k):...\\lminPath([[6, 4, 13, 10], [5, 7, 12, 1], [3, 16, 11, 15], [8, 14, 9, 2]], 7)\\l", "minPath", "n = len(grid)\\lval = n * n + 1\\l", "for i in range(n):\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "temp.append(grid[i - 1][j])\\l", "if j != 0:\\l", "temp.append(grid[i][j - 1])\\l", "if i != n - 1:\\l", "if j != n - 1:\\l", "val = min(temp)\\l"], ["from typing import *\\ldef minPath(grid, k):...\\lminPath([[6, 4, 13, 10], [5, 7, 12, 1], [3, 16, 11, 15], [8, 14, 9, 2]], 7)\\l", "minPath", "n = len(grid)\\lval = n * n + 1\\l", "for i in range(n):\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "temp.append(grid[i - 1][j])\\l", "if j != 0:\\l", "if i != n - 1:\\l", "temp.append(grid[i + 1][j])\\l", "if j != n - 1:\\l", "temp.append(grid[i][j + 1])\\l", "val = min(temp)\\l"], ["from typing import *\\ldef minPath(grid, k):...\\lminPath([[6, 4, 13, 10], [5, 7, 12, 1], [3, 16, 11, 15], [8, 14, 9, 2]], 7)\\l", "minPath", "n = len(grid)\\lval = n * n + 1\\l", "for i in range(n):\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "temp.append(grid[i - 1][j])\\l", "if j != 0:\\l", "if i != n - 1:\\l", "temp.append(grid[i + 1][j])\\l", "if j != n - 1:\\l", "val = min(temp)\\l"], ["from typing import *\\ldef minPath(grid, k):...\\lminPath([[6, 4, 13, 10], [5, 7, 12, 1], [3, 16, 11, 15], [8, 14, 9, 2]], 7)\\l", "minPath", "n = len(grid)\\lval = n * n + 1\\l", "for i in range(n):\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "temp.append(grid[i - 1][j])\\l", "if j != 0:\\l", "if i != n - 1:\\l", "if j != n - 1:\\l", "temp.append(grid[i][j + 1])\\l", "val = min(temp)\\l"], ["from typing import *\\ldef minPath(grid, k):...\\lminPath([[6, 4, 13, 10], [5, 7, 12, 1], [3, 16, 11, 15], [8, 14, 9, 2]], 7)\\l", "minPath", "n = len(grid)\\lval = n * n + 1\\l", "for i in range(n):\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "temp.append(grid[i - 1][j])\\l", "if j != 0:\\l", "if i != n - 1:\\l", "if j != n - 1:\\l", "val = min(temp)\\l"], ["from typing import *\\ldef minPath(grid, k):...\\lminPath([[6, 4, 13, 10], [5, 7, 12, 1], [3, 16, 11, 15], [8, 14, 9, 2]], 7)\\l", "minPath", "n = len(grid)\\lval = n * n + 1\\l", "for i in range(n):\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "if j != 0:\\l", "temp.append(grid[i][j - 1])\\l", "if i != n - 1:\\l", "temp.append(grid[i + 1][j])\\l", "if j != n - 1:\\l", "temp.append(grid[i][j + 1])\\l", "val = min(temp)\\l"], ["from typing import *\\ldef minPath(grid, k):...\\lminPath([[6, 4, 13, 10], [5, 7, 12, 1], [3, 16, 11, 15], [8, 14, 9, 2]], 7)\\l", "minPath", "n = len(grid)\\lval = n * n + 1\\l", "for i in range(n):\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "if j != 0:\\l", "temp.append(grid[i][j - 1])\\l", "if i != n - 1:\\l", "temp.append(grid[i + 1][j])\\l", "if j != n - 1:\\l", "val = min(temp)\\l"], ["from typing import *\\ldef minPath(grid, k):...\\lminPath([[6, 4, 13, 10], [5, 7, 12, 1], [3, 16, 11, 15], [8, 14, 9, 2]], 7)\\l", "minPath", "n = len(grid)\\lval = n * n + 1\\l", "for i in range(n):\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "if j != 0:\\l", "temp.append(grid[i][j - 1])\\l", "if i != n - 1:\\l", "if j != n - 1:\\l", "temp.append(grid[i][j + 1])\\l", "val = min(temp)\\l"], ["from typing import *\\ldef minPath(grid, k):...\\lminPath([[6, 4, 13, 10], [5, 7, 12, 1], [3, 16, 11, 15], [8, 14, 9, 2]], 7)\\l", "minPath", "n = len(grid)\\lval = n * n + 1\\l", "for i in range(n):\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "if j != 0:\\l", "temp.append(grid[i][j - 1])\\l", "if i != n - 1:\\l", "if j != n - 1:\\l", "val = min(temp)\\l"], ["from typing import *\\ldef minPath(grid, k):...\\lminPath([[6, 4, 13, 10], [5, 7, 12, 1], [3, 16, 11, 15], [8, 14, 9, 2]], 7)\\l", "minPath", "n = len(grid)\\lval = n * n + 1\\l", "for i in range(n):\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "if j != 0:\\l", "if i != n - 1:\\l", "temp.append(grid[i + 1][j])\\l", "if j != n - 1:\\l", "temp.append(grid[i][j + 1])\\l", "val = min(temp)\\l"], ["from typing import *\\ldef minPath(grid, k):...\\lminPath([[6, 4, 13, 10], [5, 7, 12, 1], [3, 16, 11, 15], [8, 14, 9, 2]], 7)\\l", "minPath", "n = len(grid)\\lval = n * n + 1\\l", "for i in range(n):\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "if j != 0:\\l", "if i != n - 1:\\l", "temp.append(grid[i + 1][j])\\l", "if j != n - 1:\\l", "val = min(temp)\\l"], ["from typing import *\\ldef minPath(grid, k):...\\lminPath([[6, 4, 13, 10], [5, 7, 12, 1], [3, 16, 11, 15], [8, 14, 9, 2]], 7)\\l", "minPath", "n = len(grid)\\lval = n * n + 1\\l", "for i in range(n):\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "if j != 0:\\l", "if i != n - 1:\\l", "if j != n - 1:\\l", "temp.append(grid[i][j + 1])\\l", "val = min(temp)\\l"], ["from typing import *\\ldef minPath(grid, k):...\\lminPath([[6, 4, 13, 10], [5, 7, 12, 1], [3, 16, 11, 15], [8, 14, 9, 2]], 7)\\l", "minPath", "n = len(grid)\\lval = n * n + 1\\l", "for i in range(n):\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "if j != 0:\\l", "if i != n - 1:\\l", "if j != n - 1:\\l", "val = min(temp)\\l"], ["from typing import *\\ldef minPath(grid, k):...\\lminPath([[6, 4, 13, 10], [5, 7, 12, 1], [3, 16, 11, 15], [8, 14, 9, 2]], 7)\\l", "minPath", "n = len(grid)\\lval = n * n + 1\\l", "for i in range(n):\\l", "ans = []\\l", "for i in range(k):\\l", "return ans\\l"], ["from typing import *\\ldef minPath(grid, k):...\\lminPath([[6, 4, 13, 10], [5, 7, 12, 1], [3, 16, 11, 15], [8, 14, 9, 2]], 7)\\l", "minPath", "n = len(grid)\\lval = n * n + 1\\l", "for i in range(n):\\l", "ans = []\\l", "for i in range(k):\\l", "if i % 2 == 0:\\l", "ans.append(1)\\l"], ["from typing import *\\ldef minPath(grid, k):...\\lminPath([[6, 4, 13, 10], [5, 7, 12, 1], [3, 16, 11, 15], [8, 14, 9, 2]], 7)\\l", "minPath", "n = len(grid)\\lval = n * n + 1\\l", "for i in range(n):\\l", "ans = []\\l", "for i in range(k):\\l", "if i % 2 == 0:\\l", "ans.append(val)\\l"]], "prime_paths_linenumbers": [[9, 8, 7, 25, 26, 31], [9, 10, 11, 12, 14, 15, 17, 18, 20, 21, 23, 8, 7, 25, 26, 31], [9, 10, 11, 12, 14, 15, 17, 18, 20, 23, 8, 7, 25, 26, 31], [9, 10, 11, 12, 14, 15, 17, 20, 21, 23, 8, 7, 25, 26, 31], [9, 10, 11, 12, 14, 15, 17, 20, 23, 8, 7, 25, 26, 31], [9, 10, 11, 12, 14, 17, 18, 20, 21, 23, 8, 7, 25, 26, 31], [9, 10, 11, 12, 14, 17, 18, 20, 23, 8, 7, 25, 26, 31], [9, 10, 11, 12, 14, 17, 20, 21, 23, 8, 7, 25, 26, 31], [9, 10, 11, 12, 14, 17, 20, 23, 8, 7, 25, 26, 31], [9, 10, 11, 14, 15, 17, 18, 20, 21, 23, 8, 7, 25, 26, 31], [9, 10, 11, 14, 15, 17, 18, 20, 23, 8, 7, 25, 26, 31], [9, 10, 11, 14, 15, 17, 20, 21, 23, 8, 7, 25, 26, 31], [9, 10, 11, 14, 15, 17, 20, 23, 8, 7, 25, 26, 31], [9, 10, 11, 14, 17, 18, 20, 21, 23, 8, 7, 25, 26, 31], [9, 10, 11, 14, 17, 18, 20, 23, 8, 7, 25, 26, 31], [9, 10, 11, 14, 17, 20, 21, 23, 8, 7, 25, 26, 31], [9, 10, 11, 14, 17, 20, 23, 8, 7, 25, 26, 31], [9, 8, 7, 25, 26, 27, 28], [9, 10, 11, 12, 14, 15, 17, 18, 20, 21, 23, 8, 7, 25, 26, 27, 28], [9, 10, 11, 12, 14, 15, 17, 18, 20, 23, 8, 7, 25, 26, 27, 28], [9, 10, 11, 12, 14, 15, 17, 20, 21, 23, 8, 7, 25, 26, 27, 28], [9, 10, 11, 12, 14, 15, 17, 20, 23, 8, 7, 25, 26, 27, 28], [9, 10, 11, 12, 14, 17, 18, 20, 21, 23, 8, 7, 25, 26, 27, 28], [9, 10, 11, 12, 14, 17, 18, 20, 23, 8, 7, 25, 26, 27, 28], [9, 10, 11, 12, 14, 17, 20, 21, 23, 8, 7, 25, 26, 27, 28], [9, 10, 11, 12, 14, 17, 20, 23, 8, 7, 25, 26, 27, 28], [9, 10, 11, 14, 15, 17, 18, 20, 21, 23, 8, 7, 25, 26, 27, 28], [9, 10, 11, 14, 15, 17, 18, 20, 23, 8, 7, 25, 26, 27, 28], [9, 10, 11, 14, 15, 17, 20, 21, 23, 8, 7, 25, 26, 27, 28], [9, 10, 11, 14, 15, 17, 20, 23, 8, 7, 25, 26, 27, 28], [9, 10, 11, 14, 17, 18, 20, 21, 23, 8, 7, 25, 26, 27, 28], [9, 10, 11, 14, 17, 18, 20, 23, 8, 7, 25, 26, 27, 28], [9, 10, 11, 14, 17, 20, 21, 23, 8, 7, 25, 26, 27, 28], [9, 10, 11, 14, 17, 20, 23, 8, 7, 25, 26, 27, 28], [9, 8, 7, 25, 26, 27, 30], [9, 10, 11, 12, 14, 15, 17, 18, 20, 21, 23, 8, 7, 25, 26, 27, 30], [9, 10, 11, 12, 14, 15, 17, 18, 20, 23, 8, 7, 25, 26, 27, 30], [9, 10, 11, 12, 14, 15, 17, 20, 21, 23, 8, 7, 25, 26, 27, 30], [9, 10, 11, 12, 14, 15, 17, 20, 23, 8, 7, 25, 26, 27, 30], [9, 10, 11, 12, 14, 17, 18, 20, 21, 23, 8, 7, 25, 26, 27, 30], [9, 10, 11, 12, 14, 17, 18, 20, 23, 8, 7, 25, 26, 27, 30], [9, 10, 11, 12, 14, 17, 20, 21, 23, 8, 7, 25, 26, 27, 30], [9, 10, 11, 12, 14, 17, 20, 23, 8, 7, 25, 26, 27, 30], [9, 10, 11, 14, 15, 17, 18, 20, 21, 23, 8, 7, 25, 26, 27, 30], [9, 10, 11, 14, 15, 17, 18, 20, 23, 8, 7, 25, 26, 27, 30], [9, 10, 11, 14, 15, 17, 20, 21, 23, 8, 7, 25, 26, 27, 30], [9, 10, 11, 14, 15, 17, 20, 23, 8, 7, 25, 26, 27, 30], [9, 10, 11, 14, 17, 18, 20, 21, 23, 8, 7, 25, 26, 27, 30], [9, 10, 11, 14, 17, 18, 20, 23, 8, 7, 25, 26, 27, 30], [9, 10, 11, 14, 17, 20, 21, 23, 8, 7, 25, 26, 27, 30], [9, 10, 11, 14, 17, 20, 23, 8, 7, 25, 26, 27, 30], [10, 11, 12, 14, 15, 17, 18, 20, 21, 23, 8, 9], [10, 11, 12, 14, 15, 17, 18, 20, 23, 8, 9], [10, 11, 12, 14, 15, 17, 20, 21, 23, 8, 9], [10, 11, 12, 14, 15, 17, 20, 23, 8, 9], [10, 11, 12, 14, 17, 18, 20, 21, 23, 8, 9], [10, 11, 12, 14, 17, 18, 20, 23, 8, 9], [10, 11, 12, 14, 17, 20, 21, 23, 8, 9], [10, 11, 12, 14, 17, 20, 23, 8, 9], [10, 11, 14, 15, 17, 18, 20, 21, 23, 8, 9], [10, 11, 14, 15, 17, 18, 20, 23, 8, 9], [10, 11, 14, 15, 17, 20, 21, 23, 8, 9], [10, 11, 14, 15, 17, 20, 23, 8, 9], [10, 11, 14, 17, 18, 20, 21, 23, 8, 9], [10, 11, 14, 17, 18, 20, 23, 8, 9], [10, 11, 14, 17, 20, 21, 23, 8, 9], [10, 11, 14, 17, 20, 23, 8, 9], [11, 12, 14, 15, 17, 18, 20, 21, 23, 8, 9, 10], [11, 12, 14, 15, 17, 18, 20, 23, 8, 9, 10], [11, 12, 14, 15, 17, 20, 21, 23, 8, 9, 10], [11, 12, 14, 15, 17, 20, 23, 8, 9, 10], [11, 12, 14, 17, 18, 20, 21, 23, 8, 9, 10], [11, 12, 14, 17, 18, 20, 23, 8, 9, 10], [11, 12, 14, 17, 20, 21, 23, 8, 9, 10], [11, 12, 14, 17, 20, 23, 8, 9, 10], [11, 14, 15, 17, 18, 20, 21, 23, 8, 9, 10], [11, 14, 15, 17, 18, 20, 23, 8, 9, 10], [11, 14, 15, 17, 20, 21, 23, 8, 9, 10], [11, 14, 15, 17, 20, 23, 8, 9, 10], [11, 14, 17, 18, 20, 21, 23, 8, 9, 10], [11, 14, 17, 18, 20, 23, 8, 9, 10], [11, 14, 17, 20, 21, 23, 8, 9, 10], [11, 14, 17, 20, 23, 8, 9, 10], [12, 14, 15, 17, 18, 20, 21, 23, 8, 9, 10, 11], [12, 14, 15, 17, 18, 20, 23, 8, 9, 10, 11], [12, 14, 15, 17, 20, 21, 23, 8, 9, 10, 11], [12, 14, 15, 17, 20, 23, 8, 9, 10, 11], [12, 14, 17, 18, 20, 21, 23, 8, 9, 10, 11], [12, 14, 17, 18, 20, 23, 8, 9, 10, 11], [12, 14, 17, 20, 21, 23, 8, 9, 10, 11], [12, 14, 17, 20, 23, 8, 9, 10, 11], [14, 15, 17, 18, 20, 21, 23, 8, 9, 10, 11, 12], [14, 15, 17, 18, 20, 23, 8, 9, 10, 11, 12], [14, 15, 17, 20, 21, 23, 8, 9, 10, 11, 12], [14, 15, 17, 20, 23, 8, 9, 10, 11, 12], [14, 17, 18, 20, 21, 23, 8, 9, 10, 11, 12], [14, 17, 18, 20, 23, 8, 9, 10, 11, 12], [14, 17, 20, 21, 23, 8, 9, 10, 11, 12], [14, 17, 20, 23, 8, 9, 10, 11, 12], [15, 17, 18, 20, 21, 23, 8, 9, 10, 11, 12, 14], [15, 17, 18, 20, 21, 23, 8, 9, 10, 11, 14], [15, 17, 18, 20, 23, 8, 9, 10, 11, 12, 14], [15, 17, 18, 20, 23, 8, 9, 10, 11, 14], [15, 17, 20, 21, 23, 8, 9, 10, 11, 12, 14], [15, 17, 20, 21, 23, 8, 9, 10, 11, 14], [15, 17, 20, 23, 8, 9, 10, 11, 12, 14], [15, 17, 20, 23, 8, 9, 10, 11, 14], [17, 18, 20, 21, 23, 8, 9, 10, 11, 12, 14, 15], [17, 18, 20, 21, 23, 8, 9, 10, 11, 14, 15], [17, 18, 20, 23, 8, 9, 10, 11, 12, 14, 15], [17, 18, 20, 23, 8, 9, 10, 11, 14, 15], [17, 20, 21, 23, 8, 9, 10, 11, 12, 14, 15], [17, 20, 21, 23, 8, 9, 10, 11, 14, 15], [17, 20, 23, 8, 9, 10, 11, 12, 14, 15], [17, 20, 23, 8, 9, 10, 11, 14, 15], [18, 20, 21, 23, 8, 9, 10, 11, 12, 14, 15, 17], [18, 20, 21, 23, 8, 9, 10, 11, 12, 14, 17], [18, 20, 21, 23, 8, 9, 10, 11, 14, 15, 17], [18, 20, 21, 23, 8, 9, 10, 11, 14, 17], [18, 20, 23, 8, 9, 10, 11, 12, 14, 15, 17], [18, 20, 23, 8, 9, 10, 11, 12, 14, 17], [18, 20, 23, 8, 9, 10, 11, 14, 15, 17], [18, 20, 23, 8, 9, 10, 11, 14, 17], [20, 21, 23, 8, 9, 10, 11, 12, 14, 15, 17, 18], [20, 21, 23, 8, 9, 10, 11, 12, 14, 17, 18], [20, 21, 23, 8, 9, 10, 11, 14, 15, 17, 18], [20, 21, 23, 8, 9, 10, 11, 14, 17, 18], [20, 23, 8, 9, 10, 11, 12, 14, 15, 17, 18], [20, 23, 8, 9, 10, 11, 12, 14, 17, 18], [20, 23, 8, 9, 10, 11, 14, 15, 17, 18], [20, 23, 8, 9, 10, 11, 14, 17, 18], [21, 23, 8, 9, 10, 11, 12, 14, 15, 17, 18, 20], [21, 23, 8, 9, 10, 11, 12, 14, 15, 17, 20], [21, 23, 8, 9, 10, 11, 12, 14, 17, 18, 20], [21, 23, 8, 9, 10, 11, 12, 14, 17, 20], [21, 23, 8, 9, 10, 11, 14, 15, 17, 18, 20], [21, 23, 8, 9, 10, 11, 14, 15, 17, 20], [21, 23, 8, 9, 10, 11, 14, 17, 18, 20], [21, 23, 8, 9, 10, 11, 14, 17, 20], [23, 8, 9, 10, 11, 12, 14, 15, 17, 18, 20, 21], [23, 8, 9, 10, 11, 12, 14, 15, 17, 20, 21], [23, 8, 9, 10, 11, 12, 14, 17, 18, 20, 21], [23, 8, 9, 10, 11, 12, 14, 17, 20, 21], [23, 8, 9, 10, 11, 14, 15, 17, 18, 20, 21], [23, 8, 9, 10, 11, 14, 15, 17, 20, 21], [23, 8, 9, 10, 11, 14, 17, 18, 20, 21], [23, 8, 9, 10, 11, 14, 17, 20, 21], [27, 28, 26, 31], [27, 30, 26, 31], [28, 26, 27, 30], [30, 26, 27, 28], [1, 33, 5, 6, 7, 8, 9, 10, 11, 12, 14, 15, 17, 18, 20, 21, 23], [1, 33, 5, 6, 7, 8, 9, 10, 11, 12, 14, 15, 17, 18, 20, 23], [1, 33, 5, 6, 7, 8, 9, 10, 11, 12, 14, 15, 17, 20, 21, 23], [1, 33, 5, 6, 7, 8, 9, 10, 11, 12, 14, 15, 17, 20, 23], [1, 33, 5, 6, 7, 8, 9, 10, 11, 12, 14, 17, 18, 20, 21, 23], [1, 33, 5, 6, 7, 8, 9, 10, 11, 12, 14, 17, 18, 20, 23], [1, 33, 5, 6, 7, 8, 9, 10, 11, 12, 14, 17, 20, 21, 23], [1, 33, 5, 6, 7, 8, 9, 10, 11, 12, 14, 17, 20, 23], [1, 33, 5, 6, 7, 8, 9, 10, 11, 14, 15, 17, 18, 20, 21, 23], [1, 33, 5, 6, 7, 8, 9, 10, 11, 14, 15, 17, 18, 20, 23], [1, 33, 5, 6, 7, 8, 9, 10, 11, 14, 15, 17, 20, 21, 23], [1, 33, 5, 6, 7, 8, 9, 10, 11, 14, 15, 17, 20, 23], [1, 33, 5, 6, 7, 8, 9, 10, 11, 14, 17, 18, 20, 21, 23], [1, 33, 5, 6, 7, 8, 9, 10, 11, 14, 17, 18, 20, 23], [1, 33, 5, 6, 7, 8, 9, 10, 11, 14, 17, 20, 21, 23], [1, 33, 5, 6, 7, 8, 9, 10, 11, 14, 17, 20, 23], [1, 33, 5, 6, 7, 25, 26, 31], [1, 33, 5, 6, 7, 25, 26, 27, 28], [1, 33, 5, 6, 7, 25, 26, 27, 30]], "covered_statements_linenumbers": [1, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 15, 17, 18, 20, 23, 25, 26, 27, 28, 30, 31, 33], "missing_statements_linenumbers": [21], "covered_prime_paths_linenumbers": [[9, 8, 7, 25, 26, 31], [9, 10, 11, 12, 14, 15, 17, 18, 20, 23, 8, 7, 25, 26, 31], [9, 10, 11, 12, 14, 15, 17, 20, 23, 8, 7, 25, 26, 31], [9, 10, 11, 12, 14, 17, 18, 20, 23, 8, 7, 25, 26, 31], [9, 10, 11, 12, 14, 17, 20, 23, 8, 7, 25, 26, 31], [9, 10, 11, 14, 15, 17, 18, 20, 23, 8, 7, 25, 26, 31], [9, 10, 11, 14, 15, 17, 20, 23, 8, 7, 25, 26, 31], [9, 10, 11, 14, 17, 18, 20, 23, 8, 7, 25, 26, 31], [9, 10, 11, 14, 17, 20, 23, 8, 7, 25, 26, 31], [9, 8, 7, 25, 26, 27, 28], [9, 10, 11, 12, 14, 15, 17, 18, 20, 23, 8, 7, 25, 26, 27, 28], [9, 10, 11, 12, 14, 15, 17, 20, 23, 8, 7, 25, 26, 27, 28], [9, 10, 11, 12, 14, 17, 18, 20, 23, 8, 7, 25, 26, 27, 28], [9, 10, 11, 12, 14, 17, 20, 23, 8, 7, 25, 26, 27, 28], [9, 10, 11, 14, 15, 17, 18, 20, 23, 8, 7, 25, 26, 27, 28], [9, 10, 11, 14, 15, 17, 20, 23, 8, 7, 25, 26, 27, 28], [9, 10, 11, 14, 17, 18, 20, 23, 8, 7, 25, 26, 27, 28], [9, 10, 11, 14, 17, 20, 23, 8, 7, 25, 26, 27, 28], [9, 8, 7, 25, 26, 27, 30], [9, 10, 11, 12, 14, 15, 17, 18, 20, 23, 8, 7, 25, 26, 27, 30], [9, 10, 11, 12, 14, 15, 17, 20, 23, 8, 7, 25, 26, 27, 30], [9, 10, 11, 12, 14, 17, 18, 20, 23, 8, 7, 25, 26, 27, 30], [9, 10, 11, 12, 14, 17, 20, 23, 8, 7, 25, 26, 27, 30], [9, 10, 11, 14, 15, 17, 18, 20, 23, 8, 7, 25, 26, 27, 30], [9, 10, 11, 14, 15, 17, 20, 23, 8, 7, 25, 26, 27, 30], [9, 10, 11, 14, 17, 18, 20, 23, 8, 7, 25, 26, 27, 30], [9, 10, 11, 14, 17, 20, 23, 8, 7, 25, 26, 27, 30], [10, 11, 12, 14, 15, 17, 18, 20, 23, 8, 9], [10, 11, 12, 14, 15, 17, 20, 23, 8, 9], [10, 11, 12, 14, 17, 18, 20, 23, 8, 9], [10, 11, 12, 14, 17, 20, 23, 8, 9], [10, 11, 14, 15, 17, 18, 20, 23, 8, 9], [10, 11, 14, 15, 17, 20, 23, 8, 9], [10, 11, 14, 17, 18, 20, 23, 8, 9], [10, 11, 14, 17, 20, 23, 8, 9], [11, 12, 14, 15, 17, 18, 20, 23, 8, 9, 10], [11, 12, 14, 15, 17, 20, 23, 8, 9, 10], [11, 12, 14, 17, 18, 20, 23, 8, 9, 10], [11, 12, 14, 17, 20, 23, 8, 9, 10], [11, 14, 15, 17, 18, 20, 23, 8, 9, 10], [11, 14, 15, 17, 20, 23, 8, 9, 10], [11, 14, 17, 18, 20, 23, 8, 9, 10], [11, 14, 17, 20, 23, 8, 9, 10], [12, 14, 15, 17, 18, 20, 23, 8, 9, 10, 11], [12, 14, 15, 17, 20, 23, 8, 9, 10, 11], [12, 14, 17, 18, 20, 23, 8, 9, 10, 11], [12, 14, 17, 20, 23, 8, 9, 10, 11], [14, 15, 17, 18, 20, 23, 8, 9, 10, 11, 12], [14, 15, 17, 20, 23, 8, 9, 10, 11, 12], [14, 17, 18, 20, 23, 8, 9, 10, 11, 12], [14, 17, 20, 23, 8, 9, 10, 11, 12], [15, 17, 18, 20, 23, 8, 9, 10, 11, 12, 14], [15, 17, 18, 20, 23, 8, 9, 10, 11, 14], [15, 17, 20, 23, 8, 9, 10, 11, 12, 14], [15, 17, 20, 23, 8, 9, 10, 11, 14], [17, 18, 20, 23, 8, 9, 10, 11, 12, 14, 15], [17, 18, 20, 23, 8, 9, 10, 11, 14, 15], [17, 20, 23, 8, 9, 10, 11, 12, 14, 15], [17, 20, 23, 8, 9, 10, 11, 14, 15], [18, 20, 23, 8, 9, 10, 11, 12, 14, 15, 17], [18, 20, 23, 8, 9, 10, 11, 12, 14, 17], [18, 20, 23, 8, 9, 10, 11, 14, 15, 17], [18, 20, 23, 8, 9, 10, 11, 14, 17], [20, 23, 8, 9, 10, 11, 12, 14, 15, 17, 18], [20, 23, 8, 9, 10, 11, 12, 14, 17, 18], [20, 23, 8, 9, 10, 11, 14, 15, 17, 18], [20, 23, 8, 9, 10, 11, 14, 17, 18], [27, 28, 26, 31], [27, 30, 26, 31], [28, 26, 27, 30], [30, 26, 27, 28], [1, 33, 5, 6, 7, 8, 9, 10, 11, 12, 14, 15, 17, 18, 20, 23], [1, 33, 5, 6, 7, 8, 9, 10, 11, 12, 14, 15, 17, 20, 23], [1, 33, 5, 6, 7, 8, 9, 10, 11, 12, 14, 17, 18, 20, 23], [1, 33, 5, 6, 7, 8, 9, 10, 11, 12, 14, 17, 20, 23], [1, 33, 5, 6, 7, 8, 9, 10, 11, 14, 15, 17, 18, 20, 23], [1, 33, 5, 6, 7, 8, 9, 10, 11, 14, 15, 17, 20, 23], [1, 33, 5, 6, 7, 8, 9, 10, 11, 14, 17, 18, 20, 23], [1, 33, 5, 6, 7, 8, 9, 10, 11, 14, 17, 20, 23], [1, 33, 5, 6, 7, 25, 26, 31], [1, 33, 5, 6, 7, 25, 26, 27, 28], [1, 33, 5, 6, 7, 25, 26, 27, 30]], "missing_prime_paths_linenumbers": [[9, 10, 11, 12, 14, 15, 17, 18, 20, 21, 23, 8, 7, 25, 26, 31], [9, 10, 11, 12, 14, 15, 17, 20, 21, 23, 8, 7, 25, 26, 31], [9, 10, 11, 12, 14, 17, 18, 20, 21, 23, 8, 7, 25, 26, 31], [9, 10, 11, 12, 14, 17, 20, 21, 23, 8, 7, 25, 26, 31], [9, 10, 11, 14, 15, 17, 18, 20, 21, 23, 8, 7, 25, 26, 31], [9, 10, 11, 14, 15, 17, 20, 21, 23, 8, 7, 25, 26, 31], [9, 10, 11, 14, 17, 18, 20, 21, 23, 8, 7, 25, 26, 31], [9, 10, 11, 14, 17, 20, 21, 23, 8, 7, 25, 26, 31], [9, 10, 11, 12, 14, 15, 17, 18, 20, 21, 23, 8, 7, 25, 26, 27, 28], [9, 10, 11, 12, 14, 15, 17, 20, 21, 23, 8, 7, 25, 26, 27, 28], [9, 10, 11, 12, 14, 17, 18, 20, 21, 23, 8, 7, 25, 26, 27, 28], [9, 10, 11, 12, 14, 17, 20, 21, 23, 8, 7, 25, 26, 27, 28], [9, 10, 11, 14, 15, 17, 18, 20, 21, 23, 8, 7, 25, 26, 27, 28], [9, 10, 11, 14, 15, 17, 20, 21, 23, 8, 7, 25, 26, 27, 28], [9, 10, 11, 14, 17, 18, 20, 21, 23, 8, 7, 25, 26, 27, 28], [9, 10, 11, 14, 17, 20, 21, 23, 8, 7, 25, 26, 27, 28], [9, 10, 11, 12, 14, 15, 17, 18, 20, 21, 23, 8, 7, 25, 26, 27, 30], [9, 10, 11, 12, 14, 15, 17, 20, 21, 23, 8, 7, 25, 26, 27, 30], [9, 10, 11, 12, 14, 17, 18, 20, 21, 23, 8, 7, 25, 26, 27, 30], [9, 10, 11, 12, 14, 17, 20, 21, 23, 8, 7, 25, 26, 27, 30], [9, 10, 11, 14, 15, 17, 18, 20, 21, 23, 8, 7, 25, 26, 27, 30], [9, 10, 11, 14, 15, 17, 20, 21, 23, 8, 7, 25, 26, 27, 30], [9, 10, 11, 14, 17, 18, 20, 21, 23, 8, 7, 25, 26, 27, 30], [9, 10, 11, 14, 17, 20, 21, 23, 8, 7, 25, 26, 27, 30], [10, 11, 12, 14, 15, 17, 18, 20, 21, 23, 8, 9], [10, 11, 12, 14, 15, 17, 20, 21, 23, 8, 9], [10, 11, 12, 14, 17, 18, 20, 21, 23, 8, 9], [10, 11, 12, 14, 17, 20, 21, 23, 8, 9], [10, 11, 14, 15, 17, 18, 20, 21, 23, 8, 9], [10, 11, 14, 15, 17, 20, 21, 23, 8, 9], [10, 11, 14, 17, 18, 20, 21, 23, 8, 9], [10, 11, 14, 17, 20, 21, 23, 8, 9], [11, 12, 14, 15, 17, 18, 20, 21, 23, 8, 9, 10], [11, 12, 14, 15, 17, 20, 21, 23, 8, 9, 10], [11, 12, 14, 17, 18, 20, 21, 23, 8, 9, 10], [11, 12, 14, 17, 20, 21, 23, 8, 9, 10], [11, 14, 15, 17, 18, 20, 21, 23, 8, 9, 10], [11, 14, 15, 17, 20, 21, 23, 8, 9, 10], [11, 14, 17, 18, 20, 21, 23, 8, 9, 10], [11, 14, 17, 20, 21, 23, 8, 9, 10], [12, 14, 15, 17, 18, 20, 21, 23, 8, 9, 10, 11], [12, 14, 15, 17, 20, 21, 23, 8, 9, 10, 11], [12, 14, 17, 18, 20, 21, 23, 8, 9, 10, 11], [12, 14, 17, 20, 21, 23, 8, 9, 10, 11], [14, 15, 17, 18, 20, 21, 23, 8, 9, 10, 11, 12], [14, 15, 17, 20, 21, 23, 8, 9, 10, 11, 12], [14, 17, 18, 20, 21, 23, 8, 9, 10, 11, 12], [14, 17, 20, 21, 23, 8, 9, 10, 11, 12], [15, 17, 18, 20, 21, 23, 8, 9, 10, 11, 12, 14], [15, 17, 18, 20, 21, 23, 8, 9, 10, 11, 14], [15, 17, 20, 21, 23, 8, 9, 10, 11, 12, 14], [15, 17, 20, 21, 23, 8, 9, 10, 11, 14], [17, 18, 20, 21, 23, 8, 9, 10, 11, 12, 14, 15], [17, 18, 20, 21, 23, 8, 9, 10, 11, 14, 15], [17, 20, 21, 23, 8, 9, 10, 11, 12, 14, 15], [17, 20, 21, 23, 8, 9, 10, 11, 14, 15], [18, 20, 21, 23, 8, 9, 10, 11, 12, 14, 15, 17], [18, 20, 21, 23, 8, 9, 10, 11, 12, 14, 17], [18, 20, 21, 23, 8, 9, 10, 11, 14, 15, 17], [18, 20, 21, 23, 8, 9, 10, 11, 14, 17], [20, 21, 23, 8, 9, 10, 11, 12, 14, 15, 17, 18], [20, 21, 23, 8, 9, 10, 11, 12, 14, 17, 18], [20, 21, 23, 8, 9, 10, 11, 14, 15, 17, 18], [20, 21, 23, 8, 9, 10, 11, 14, 17, 18], [21, 23, 8, 9, 10, 11, 12, 14, 15, 17, 18, 20], [21, 23, 8, 9, 10, 11, 12, 14, 15, 17, 20], [21, 23, 8, 9, 10, 11, 12, 14, 17, 18, 20], [21, 23, 8, 9, 10, 11, 12, 14, 17, 20], [21, 23, 8, 9, 10, 11, 14, 15, 17, 18, 20], [21, 23, 8, 9, 10, 11, 14, 15, 17, 20], [21, 23, 8, 9, 10, 11, 14, 17, 18, 20], [21, 23, 8, 9, 10, 11, 14, 17, 20], [23, 8, 9, 10, 11, 12, 14, 15, 17, 18, 20, 21], [23, 8, 9, 10, 11, 12, 14, 15, 17, 20, 21], [23, 8, 9, 10, 11, 12, 14, 17, 18, 20, 21], [23, 8, 9, 10, 11, 12, 14, 17, 20, 21], [23, 8, 9, 10, 11, 14, 15, 17, 18, 20, 21], [23, 8, 9, 10, 11, 14, 15, 17, 20, 21], [23, 8, 9, 10, 11, 14, 17, 18, 20, 21], [23, 8, 9, 10, 11, 14, 17, 20, 21], [1, 33, 5, 6, 7, 8, 9, 10, 11, 12, 14, 15, 17, 18, 20, 21, 23], [1, 33, 5, 6, 7, 8, 9, 10, 11, 12, 14, 15, 17, 20, 21, 23], [1, 33, 5, 6, 7, 8, 9, 10, 11, 12, 14, 17, 18, 20, 21, 23], [1, 33, 5, 6, 7, 8, 9, 10, 11, 12, 14, 17, 20, 21, 23], [1, 33, 5, 6, 7, 8, 9, 10, 11, 14, 15, 17, 18, 20, 21, 23], [1, 33, 5, 6, 7, 8, 9, 10, 11, 14, 15, 17, 20, 21, 23], [1, 33, 5, 6, 7, 8, 9, 10, 11, 14, 17, 18, 20, 21, 23], [1, 33, 5, 6, 7, 8, 9, 10, 11, 14, 17, 20, 21, 23]], "num_total_prime_paths": 170, "num_covered_paths": 82, "prime_path_coverage": 0.48, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_129__0_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_129__0_CFG.dot"}
{"humaneval_id": "HumanEval_143__0", "python_file": "HumanEval_143__0/main.py", "input_file": "HumanEval_143__0/input.txt", "prime_paths_nodes": [["6", "8", "10", "11", "15", "4", "7"], ["6", "8", "10", "11", "15", "19", "4", "7"], ["6", "8", "11", "15", "4", "7"], ["6", "8", "11", "15", "19", "4", "7"], ["8", "10", "11", "15", "4", "6"], ["8", "10", "11", "15", "19", "4", "6"], ["8", "11", "15", "4", "6"], ["8", "11", "15", "19", "4", "6"], ["10", "11", "15", "4", "6", "8"], ["10", "11", "15", "19", "4", "6", "8"], ["14", "11", "15", "4", "7"], ["14", "11", "15", "19", "4", "7"], ["14", "17", "11", "15", "4", "7"], ["14", "17", "11", "15", "19", "4", "7"], ["14", "11", "15", "4", "6", "8", "10"], ["14", "11", "15", "19", "4", "6", "8", "10"], ["14", "17", "11", "15", "4", "6", "8", "10"], ["14", "17", "11", "15", "19", "4", "6", "8", "10"], ["15", "4", "6", "8", "10", "11", "14", "17"], ["15", "4", "6", "8", "11", "14", "17"], ["15", "19", "4", "6", "8", "10", "11", "14", "17"], ["15", "19", "4", "6", "8", "11", "14", "17"], ["17", "11", "14"], ["19", "4", "6", "8", "10", "11", "15"], ["19", "4", "6", "8", "11", "15"], ["1", "24", "3", "4", "7"], ["1", "24", "3", "4", "6", "8", "10", "11", "14", "17"], ["1", "24", "3", "4", "6", "8", "11", "14", "17"], ["1", "24", "3", "4", "6", "8", "10", "11", "15", "19"], ["1", "24", "3", "4", "6", "8", "11", "15", "19"]], "prime_paths_statements": [["flg = 0\\l", "if len(word) == 1:\\l", "flg = 1\\l", "for i in range(2, len(word)):\\l", "if flg == 0 or len(word) == 2:\\l", "for word in sentence.split():\\l", "return ' '.join(new_lst)\\l"], ["flg = 0\\l", "if len(word) == 1:\\l", "flg = 1\\l", "for i in range(2, len(word)):\\l", "if flg == 0 or len(word) == 2:\\l", "new_lst.append(word)\\l", "for word in sentence.split():\\l", "return ' '.join(new_lst)\\l"], ["flg = 0\\l", "if len(word) == 1:\\l", "for i in range(2, len(word)):\\l", "if flg == 0 or len(word) == 2:\\l", "for word in sentence.split():\\l", "return ' '.join(new_lst)\\l"], ["flg = 0\\l", "if len(word) == 1:\\l", "for i in range(2, len(word)):\\l", "if flg == 0 or len(word) == 2:\\l", "new_lst.append(word)\\l", "for word in sentence.split():\\l", "return ' '.join(new_lst)\\l"], ["if len(word) == 1:\\l", "flg = 1\\l", "for i in range(2, len(word)):\\l", "if flg == 0 or len(word) == 2:\\l", "for word in sentence.split():\\l", "flg = 0\\l"], ["if len(word) == 1:\\l", "flg = 1\\l", "for i in range(2, len(word)):\\l", "if flg == 0 or len(word) == 2:\\l", "new_lst.append(word)\\l", "for word in sentence.split():\\l", "flg = 0\\l"], ["if len(word) == 1:\\l", "for i in range(2, len(word)):\\l", "if flg == 0 or len(word) == 2:\\l", "for word in sentence.split():\\l", "flg = 0\\l"], ["if len(word) == 1:\\l", "for i in range(2, len(word)):\\l", "if flg == 0 or len(word) == 2:\\l", "new_lst.append(word)\\l", "for word in sentence.split():\\l", "flg = 0\\l"], ["flg = 1\\l", "for i in range(2, len(word)):\\l", "if flg == 0 or len(word) == 2:\\l", "for word in sentence.split():\\l", "flg = 0\\l", "if len(word) == 1:\\l"], ["flg = 1\\l", "for i in range(2, len(word)):\\l", "if flg == 0 or len(word) == 2:\\l", "new_lst.append(word)\\l", "for word in sentence.split():\\l", "flg = 0\\l", "if len(word) == 1:\\l"], ["if len(word) % i == 0:\\l", "for i in range(2, len(word)):\\l", "if flg == 0 or len(word) == 2:\\l", "for word in sentence.split():\\l", "return ' '.join(new_lst)\\l"], ["if len(word) % i == 0:\\l", "for i in range(2, len(word)):\\l", "if flg == 0 or len(word) == 2:\\l", "new_lst.append(word)\\l", "for word in sentence.split():\\l", "return ' '.join(new_lst)\\l"], ["if len(word) % i == 0:\\l", "flg = 1\\l", "for i in range(2, len(word)):\\l", "if flg == 0 or len(word) == 2:\\l", "for word in sentence.split():\\l", "return ' '.join(new_lst)\\l"], ["if len(word) % i == 0:\\l", "flg = 1\\l", "for i in range(2, len(word)):\\l", "if flg == 0 or len(word) == 2:\\l", "new_lst.append(word)\\l", "for word in sentence.split():\\l", "return ' '.join(new_lst)\\l"], ["if len(word) % i == 0:\\l", "for i in range(2, len(word)):\\l", "if flg == 0 or len(word) == 2:\\l", "for word in sentence.split():\\l", "flg = 0\\l", "if len(word) == 1:\\l", "flg = 1\\l"], ["if len(word) % i == 0:\\l", "for i in range(2, len(word)):\\l", "if flg == 0 or len(word) == 2:\\l", "new_lst.append(word)\\l", "for word in sentence.split():\\l", "flg = 0\\l", "if len(word) == 1:\\l", "flg = 1\\l"], ["if len(word) % i == 0:\\l", "flg = 1\\l", "for i in range(2, len(word)):\\l", "if flg == 0 or len(word) == 2:\\l", "for word in sentence.split():\\l", "flg = 0\\l", "if len(word) == 1:\\l", "flg = 1\\l"], ["if len(word) % i == 0:\\l", "flg = 1\\l", "for i in range(2, len(word)):\\l", "if flg == 0 or len(word) == 2:\\l", "new_lst.append(word)\\l", "for word in sentence.split():\\l", "flg = 0\\l", "if len(word) == 1:\\l", "flg = 1\\l"], ["if flg == 0 or len(word) == 2:\\l", "for word in sentence.split():\\l", "flg = 0\\l", "if len(word) == 1:\\l", "flg = 1\\l", "for i in range(2, len(word)):\\l", "if len(word) % i == 0:\\l", "flg = 1\\l"], ["if flg == 0 or len(word) == 2:\\l", "for word in sentence.split():\\l", "flg = 0\\l", "if len(word) == 1:\\l", "for i in range(2, len(word)):\\l", "if len(word) % i == 0:\\l", "flg = 1\\l"], ["if flg == 0 or len(word) == 2:\\l", "new_lst.append(word)\\l", "for word in sentence.split():\\l", "flg = 0\\l", "if len(word) == 1:\\l", "flg = 1\\l", "for i in range(2, len(word)):\\l", "if len(word) % i == 0:\\l", "flg = 1\\l"], ["if flg == 0 or len(word) == 2:\\l", "new_lst.append(word)\\l", "for word in sentence.split():\\l", "flg = 0\\l", "if len(word) == 1:\\l", "for i in range(2, len(word)):\\l", "if len(word) % i == 0:\\l", "flg = 1\\l"], ["flg = 1\\l", "for i in range(2, len(word)):\\l", "if len(word) % i == 0:\\l"], ["new_lst.append(word)\\l", "for word in sentence.split():\\l", "flg = 0\\l", "if len(word) == 1:\\l", "flg = 1\\l", "for i in range(2, len(word)):\\l", "if flg == 0 or len(word) == 2:\\l"], ["new_lst.append(word)\\l", "for word in sentence.split():\\l", "flg = 0\\l", "if len(word) == 1:\\l", "for i in range(2, len(word)):\\l", "if flg == 0 or len(word) == 2:\\l"], ["from typing import *\\ldef words_in_sentence(sentence):...\\lwords_in_sentence('there is no place av...')\\l", "words_in_sentence", "new_lst = []\\l", "for word in sentence.split():\\l", "return ' '.join(new_lst)\\l"], ["from typing import *\\ldef words_in_sentence(sentence):...\\lwords_in_sentence('there is no place av...')\\l", "words_in_sentence", "new_lst = []\\l", "for word in sentence.split():\\l", "flg = 0\\l", "if len(word) == 1:\\l", "flg = 1\\l", "for i in range(2, len(word)):\\l", "if len(word) % i == 0:\\l", "flg = 1\\l"], ["from typing import *\\ldef words_in_sentence(sentence):...\\lwords_in_sentence('there is no place av...')\\l", "words_in_sentence", "new_lst = []\\l", "for word in sentence.split():\\l", "flg = 0\\l", "if len(word) == 1:\\l", "for i in range(2, len(word)):\\l", "if len(word) % i == 0:\\l", "flg = 1\\l"], ["from typing import *\\ldef words_in_sentence(sentence):...\\lwords_in_sentence('there is no place av...')\\l", "words_in_sentence", "new_lst = []\\l", "for word in sentence.split():\\l", "flg = 0\\l", "if len(word) == 1:\\l", "flg = 1\\l", "for i in range(2, len(word)):\\l", "if flg == 0 or len(word) == 2:\\l", "new_lst.append(word)\\l"], ["from typing import *\\ldef words_in_sentence(sentence):...\\lwords_in_sentence('there is no place av...')\\l", "words_in_sentence", "new_lst = []\\l", "for word in sentence.split():\\l", "flg = 0\\l", "if len(word) == 1:\\l", "for i in range(2, len(word)):\\l", "if flg == 0 or len(word) == 2:\\l", "new_lst.append(word)\\l"]], "prime_paths_linenumbers": [[7, 8, 9, 10, 13, 6, 15], [7, 8, 9, 10, 13, 14, 6, 15], [7, 8, 10, 13, 6, 15], [7, 8, 10, 13, 14, 6, 15], [8, 9, 10, 13, 6, 7], [8, 9, 10, 13, 14, 6, 7], [8, 10, 13, 6, 7], [8, 10, 13, 14, 6, 7], [9, 10, 13, 6, 7, 8], [9, 10, 13, 14, 6, 7, 8], [11, 10, 13, 6, 15], [11, 10, 13, 14, 6, 15], [11, 12, 10, 13, 6, 15], [11, 12, 10, 13, 14, 6, 15], [11, 10, 13, 6, 7, 8, 9], [11, 10, 13, 14, 6, 7, 8, 9], [11, 12, 10, 13, 6, 7, 8, 9], [11, 12, 10, 13, 14, 6, 7, 8, 9], [13, 6, 7, 8, 9, 10, 11, 12], [13, 6, 7, 8, 10, 11, 12], [13, 14, 6, 7, 8, 9, 10, 11, 12], [13, 14, 6, 7, 8, 10, 11, 12], [12, 10, 11], [14, 6, 7, 8, 9, 10, 13], [14, 6, 7, 8, 10, 13], [1, 17, 5, 6, 15], [1, 17, 5, 6, 7, 8, 9, 10, 11, 12], [1, 17, 5, 6, 7, 8, 10, 11, 12], [1, 17, 5, 6, 7, 8, 9, 10, 13, 14], [1, 17, 5, 6, 7, 8, 10, 13, 14]], "covered_statements_linenumbers": [1, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 17], "missing_statements_linenumbers": [9], "covered_prime_paths_linenumbers": [[7, 8, 10, 13, 6, 15], [7, 8, 10, 13, 14, 6, 15], [8, 10, 13, 6, 7], [8, 10, 13, 14, 6, 7], [11, 10, 13, 6, 15], [11, 10, 13, 14, 6, 15], [11, 12, 10, 13, 6, 15], [11, 12, 10, 13, 14, 6, 15], [13, 6, 7, 8, 10, 11, 12], [13, 14, 6, 7, 8, 10, 11, 12], [12, 10, 11], [14, 6, 7, 8, 10, 13], [1, 17, 5, 6, 15], [1, 17, 5, 6, 7, 8, 10, 11, 12], [1, 17, 5, 6, 7, 8, 10, 13, 14]], "missing_prime_paths_linenumbers": [[7, 8, 9, 10, 13, 6, 15], [7, 8, 9, 10, 13, 14, 6, 15], [8, 9, 10, 13, 6, 7], [8, 9, 10, 13, 14, 6, 7], [9, 10, 13, 6, 7, 8], [9, 10, 13, 14, 6, 7, 8], [11, 10, 13, 6, 7, 8, 9], [11, 10, 13, 14, 6, 7, 8, 9], [11, 12, 10, 13, 6, 7, 8, 9], [11, 12, 10, 13, 14, 6, 7, 8, 9], [13, 6, 7, 8, 9, 10, 11, 12], [13, 14, 6, 7, 8, 9, 10, 11, 12], [14, 6, 7, 8, 9, 10, 13], [1, 17, 5, 6, 7, 8, 9, 10, 11, 12], [1, 17, 5, 6, 7, 8, 9, 10, 13, 14]], "num_total_prime_paths": 30, "num_covered_paths": 15, "prime_path_coverage": 0.5, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_143__0_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_143__0_CFG.dot"}
{"humaneval_id": "HumanEval_120", "python_file": "HumanEval_120/main.py", "input_file": "HumanEval_120/input.txt", "prime_paths_nodes": [["1", "11", "3", "4"], ["1", "11", "3", "5", "8"]], "prime_paths_statements": [["from typing import *\\ldef maximum(arr, k):...\\lmaximum([-3, -4, 5], 3)\\l", "maximum", "if k == 0:\\l", "return []\\l"], ["from typing import *\\ldef maximum(arr, k):...\\lmaximum([-3, -4, 5], 3)\\l", "maximum", "if k == 0:\\l", "arr.sort()\\lans = arr[-k:]\\l", "return ans\\l"]], "prime_paths_linenumbers": [[1, 9, 3, 4], [1, 9, 3, 5, 6, 7]], "covered_statements_linenumbers": [1, 2, 3, 5, 6, 7, 9], "missing_statements_linenumbers": [4], "covered_prime_paths_linenumbers": [[1, 9, 3, 5, 6, 7]], "missing_prime_paths_linenumbers": [[1, 9, 3, 4]], "num_total_prime_paths": 2, "num_covered_paths": 1, "prime_path_coverage": 0.5, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_120_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_120_CFG.dot"}
{"humaneval_id": "HumanEval_24__0", "python_file": "HumanEval_24__0/main.py", "input_file": "HumanEval_24__0/input.txt", "prime_paths_nodes": [["6", "3"], ["1", "12", "3", "6", "8"]], "prime_paths_statements": [["if n % i == 0:\\l", "for i in reversed(range(n)):\\l"], ["from typing import *\\ldef largest_divisor(n: int) ->int:...\\llargest_divisor(49)\\l", "largest_divisor", "for i in reversed(range(n)):\\l", "if n % i == 0:\\l", "return i\\l"]], "prime_paths_linenumbers": [[6, 5], [1, 9, 5, 6, 7]], "covered_statements_linenumbers": [1, 4, 5, 6, 7, 9], "missing_statements_linenumbers": [], "covered_prime_paths_linenumbers": [[6, 5], [1, 9, 5, 6, 7]], "missing_prime_paths_linenumbers": [], "num_total_prime_paths": 2, "num_covered_paths": 2, "prime_path_coverage": 1.0, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_24__0_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_24__0_CFG.dot"}
{"humaneval_id": "HumanEval_36__1", "python_file": "HumanEval_36__1/main.py", "input_file": "HumanEval_36__1/input.txt", "prime_paths_nodes": [["6", "4", "7", "14", "15"], ["6", "8", "4", "7", "14", "15"], ["6", "4", "7", "14", "16"], ["6", "8", "4", "7", "14", "16"], ["8", "4", "6"], ["15", "14", "16"], ["1", "19", "3", "4", "6", "8"], ["1", "19", "3", "4", "7", "14", "15"], ["1", "19", "3", "4", "7", "14", "16"]], "prime_paths_statements": [["if i % 11 == 0 or i % 13 == 0:\\l", "for i in range(n):\\l", "s = ''.join(list(map(str, ns)))\\lans = 0\\l", "for c in s:\\l", "ans += c == '7'\\l"], ["if i % 11 == 0 or i % 13 == 0:\\l", "ns.append(i)\\l", "for i in range(n):\\l", "s = ''.join(list(map(str, ns)))\\lans = 0\\l", "for c in s:\\l", "ans += c == '7'\\l"], ["if i % 11 == 0 or i % 13 == 0:\\l", "for i in range(n):\\l", "s = ''.join(list(map(str, ns)))\\lans = 0\\l", "for c in s:\\l", "return ans\\l"], ["if i % 11 == 0 or i % 13 == 0:\\l", "ns.append(i)\\l", "for i in range(n):\\l", "s = ''.join(list(map(str, ns)))\\lans = 0\\l", "for c in s:\\l", "return ans\\l"], ["ns.append(i)\\l", "for i in range(n):\\l", "if i % 11 == 0 or i % 13 == 0:\\l"], ["ans += c == '7'\\l", "for c in s:\\l", "return ans\\l"], ["from typing import *\\ldef fizz_buzz(n: int):...\\lfizz_buzz(200)\\l", "fizz_buzz", "ns = []\\l", "for i in range(n):\\l", "if i % 11 == 0 or i % 13 == 0:\\l", "ns.append(i)\\l"], ["from typing import *\\ldef fizz_buzz(n: int):...\\lfizz_buzz(200)\\l", "fizz_buzz", "ns = []\\l", "for i in range(n):\\l", "s = ''.join(list(map(str, ns)))\\lans = 0\\l", "for c in s:\\l", "ans += c == '7'\\l"], ["from typing import *\\ldef fizz_buzz(n: int):...\\lfizz_buzz(200)\\l", "fizz_buzz", "ns = []\\l", "for i in range(n):\\l", "s = ''.join(list(map(str, ns)))\\lans = 0\\l", "for c in s:\\l", "return ans\\l"]], "prime_paths_linenumbers": [[7, 6, 9, 10, 11, 12], [7, 8, 6, 9, 10, 11, 12], [7, 6, 9, 10, 11, 13], [7, 8, 6, 9, 10, 11, 13], [8, 6, 7], [12, 11, 13], [1, 15, 5, 6, 7, 8], [1, 15, 5, 6, 9, 10, 11, 12], [1, 15, 5, 6, 9, 10, 11, 13]], "covered_statements_linenumbers": [1, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15], "missing_statements_linenumbers": [], "covered_prime_paths_linenumbers": [[7, 6, 9, 10, 11, 12], [7, 8, 6, 9, 10, 11, 12], [7, 6, 9, 10, 11, 13], [7, 8, 6, 9, 10, 11, 13], [8, 6, 7], [12, 11, 13], [1, 15, 5, 6, 7, 8], [1, 15, 5, 6, 9, 10, 11, 12], [1, 15, 5, 6, 9, 10, 11, 13]], "missing_prime_paths_linenumbers": [], "num_total_prime_paths": 9, "num_covered_paths": 9, "prime_path_coverage": 1.0, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_36__1_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_36__1_CFG.dot"}
{"humaneval_id": "HumanEval_133", "python_file": "HumanEval_133/main.py", "input_file": "HumanEval_133/input.txt", "prime_paths_nodes": [["5", "4", "6"], ["1", "10", "3", "4", "5"], ["1", "10", "3", "4", "6"]], "prime_paths_statements": [["squared += math.ceil(i) ** 2\\l", "for i in lst:\\l", "return squared\\l"], ["from typing import *\\ldef sum_squares(lst):...\\lsum_squares([1, 2, 3])\\l", "sum_squares", "import math\\lsquared = 0\\l", "for i in lst:\\l", "squared += math.ceil(i) ** 2\\l"], ["from typing import *\\ldef sum_squares(lst):...\\lsum_squares([1, 2, 3])\\l", "sum_squares", "import math\\lsquared = 0\\l", "for i in lst:\\l", "return squared\\l"]], "prime_paths_linenumbers": [[6, 5, 7], [1, 9, 3, 4, 5, 6], [1, 9, 3, 4, 5, 7]], "covered_statements_linenumbers": [1, 2, 3, 4, 5, 6, 7, 9], "missing_statements_linenumbers": [], "covered_prime_paths_linenumbers": [[6, 5, 7], [1, 9, 3, 4, 5, 6], [1, 9, 3, 4, 5, 7]], "missing_prime_paths_linenumbers": [], "num_total_prime_paths": 3, "num_covered_paths": 3, "prime_path_coverage": 1.0, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_133_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_133_CFG.dot"}
{"humaneval_id": "HumanEval_102", "python_file": "HumanEval_102/main.py", "input_file": "HumanEval_102/input.txt", "prime_paths_nodes": [["1", "15", "3", "4"], ["1", "15", "3", "5", "7"], ["1", "15", "3", "5", "8", "10"], ["1", "15", "3", "5", "8", "11"]], "prime_paths_statements": [["from typing import *\\ldef choose_num(x, y):...\\lchoose_num(12, 15)\\l", "choose_num", "if x > y:\\l", "return -1\\l"], ["from typing import *\\ldef choose_num(x, y):...\\lchoose_num(12, 15)\\l", "choose_num", "if x > y:\\l", "if y % 2 == 0:\\l", "return y\\l"], ["from typing import *\\ldef choose_num(x, y):...\\lchoose_num(12, 15)\\l", "choose_num", "if x > y:\\l", "if y % 2 == 0:\\l", "if x == y:\\l", "return -1\\l"], ["from typing import *\\ldef choose_num(x, y):...\\lchoose_num(12, 15)\\l", "choose_num", "if x > y:\\l", "if y % 2 == 0:\\l", "if x == y:\\l", "return y - 1\\l"]], "prime_paths_linenumbers": [[1, 11, 3, 4], [1, 11, 3, 5, 6], [1, 11, 3, 5, 7, 8], [1, 11, 3, 5, 7, 9]], "covered_statements_linenumbers": [1, 2, 3, 5, 7, 9, 11], "missing_statements_linenumbers": [4, 6, 8], "covered_prime_paths_linenumbers": [[1, 11, 3, 5, 7, 9]], "missing_prime_paths_linenumbers": [[1, 11, 3, 4], [1, 11, 3, 5, 6], [1, 11, 3, 5, 7, 8]], "num_total_prime_paths": 4, "num_covered_paths": 1, "prime_path_coverage": 0.25, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_102_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_102_CFG.dot"}
{"humaneval_id": "HumanEval_130__0", "python_file": "HumanEval_130__0/main.py", "input_file": "HumanEval_130__0/input.txt", "prime_paths_nodes": [["9", "11", "7", "10"], ["9", "13", "7", "10"], ["11", "7", "9", "13"], ["13", "7", "9", "11"], ["1", "18", "3", "4"], ["1", "18", "3", "5", "7", "10"], ["1", "18", "3", "5", "7", "9", "11"], ["1", "18", "3", "5", "7", "9", "13"]], "prime_paths_statements": [["if i % 2 == 0:\\l", "my_tri.append(i / 2 + 1)\\l", "for i in range(2, n + 1):\\l", "return my_tri\\l"], ["if i % 2 == 0:\\l", "my_tri.append(my_tri[i - 1] + my_tri[i - 2] + (i + 3) / 2)\\l", "for i in range(2, n + 1):\\l", "return my_tri\\l"], ["my_tri.append(i / 2 + 1)\\l", "for i in range(2, n + 1):\\l", "if i % 2 == 0:\\l", "my_tri.append(my_tri[i - 1] + my_tri[i - 2] + (i + 3) / 2)\\l"], ["my_tri.append(my_tri[i - 1] + my_tri[i - 2] + (i + 3) / 2)\\l", "for i in range(2, n + 1):\\l", "if i % 2 == 0:\\l", "my_tri.append(i / 2 + 1)\\l"], ["from typing import *\\ldef tri(n):...\\ltri(20)\\l", "tri", "if n == 0:\\l", "return [1]\\l"], ["from typing import *\\ldef tri(n):...\\ltri(20)\\l", "tri", "if n == 0:\\l", "my_tri = [1, 3]\\l", "for i in range(2, n + 1):\\l", "return my_tri\\l"], ["from typing import *\\ldef tri(n):...\\ltri(20)\\l", "tri", "if n == 0:\\l", "my_tri = [1, 3]\\l", "for i in range(2, n + 1):\\l", "if i % 2 == 0:\\l", "my_tri.append(i / 2 + 1)\\l"], ["from typing import *\\ldef tri(n):...\\ltri(20)\\l", "tri", "if n == 0:\\l", "my_tri = [1, 3]\\l", "for i in range(2, n + 1):\\l", "if i % 2 == 0:\\l", "my_tri.append(my_tri[i - 1] + my_tri[i - 2] + (i + 3) / 2)\\l"]], "prime_paths_linenumbers": [[9, 10, 8, 13], [9, 12, 8, 13], [10, 8, 9, 12], [12, 8, 9, 10], [1, 15, 5, 6], [1, 15, 5, 7, 8, 13], [1, 15, 5, 7, 8, 9, 10], [1, 15, 5, 7, 8, 9, 12]], "covered_statements_linenumbers": [1, 4, 5, 7, 8, 9, 10, 12, 13, 15], "missing_statements_linenumbers": [6], "covered_prime_paths_linenumbers": [[9, 10, 8, 13], [9, 12, 8, 13], [10, 8, 9, 12], [12, 8, 9, 10], [1, 15, 5, 7, 8, 13], [1, 15, 5, 7, 8, 9, 10], [1, 15, 5, 7, 8, 9, 12]], "missing_prime_paths_linenumbers": [[1, 15, 5, 6]], "num_total_prime_paths": 8, "num_covered_paths": 7, "prime_path_coverage": 0.88, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_130__0_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_130__0_CFG.dot"}
{"humaneval_id": "HumanEval_44", "python_file": "HumanEval_44/main.py", "input_file": "HumanEval_44/input.txt", "prime_paths_nodes": [["5", "4", "6"], ["1", "10", "3", "4", "5"], ["1", "10", "3", "4", "6"]], "prime_paths_statements": [["ret = str(x % base) + ret\\lx //= base\\l", "while x > 0:\\l", "return ret\\l"], ["from typing import *\\ldef change_base(x: int, base: int):...\\lchange_base(8, 3)\\l", "change_base", "ret = ''\\l", "while x > 0:\\l", "ret = str(x % base) + ret\\lx //= base\\l"], ["from typing import *\\ldef change_base(x: int, base: int):...\\lchange_base(8, 3)\\l", "change_base", "ret = ''\\l", "while x > 0:\\l", "return ret\\l"]], "prime_paths_linenumbers": [[5, 6, 4, 7], [1, 9, 3, 4, 5, 6], [1, 9, 3, 4, 7]], "covered_statements_linenumbers": [1, 2, 3, 4, 5, 6, 7, 9], "missing_statements_linenumbers": [], "covered_prime_paths_linenumbers": [[5, 6, 4, 7], [1, 9, 3, 4, 5, 6], [1, 9, 3, 4, 7]], "missing_prime_paths_linenumbers": [], "num_total_prime_paths": 3, "num_covered_paths": 3, "prime_path_coverage": 1.0, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_44_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_44_CFG.dot"}
{"humaneval_id": "HumanEval_14__0", "python_file": "HumanEval_14__0/main.py", "input_file": "HumanEval_14__0/input.txt", "prime_paths_nodes": [["7", "4", "8"], ["1", "12", "3", "4", "7"], ["1", "12", "3", "4", "8"]], "prime_paths_statements": [["result.append(string[:i + 1])\\l", "for i in range(len(string)):\\l", "return result\\l"], ["from typing import *\\ldef all_prefixes(string: str) ->List[str]:...\\lall_prefixes('WWW')\\l", "all_prefixes", "result = []\\l", "for i in range(len(string)):\\l", "result.append(string[:i + 1])\\l"], ["from typing import *\\ldef all_prefixes(string: str) ->List[str]:...\\lall_prefixes('WWW')\\l", "all_prefixes", "result = []\\l", "for i in range(len(string)):\\l", "return result\\l"]], "prime_paths_linenumbers": [[8, 7, 9], [1, 11, 5, 7, 8], [1, 11, 5, 7, 9]], "covered_statements_linenumbers": [1, 4, 5, 7, 8, 9, 11], "missing_statements_linenumbers": [], "covered_prime_paths_linenumbers": [[8, 7, 9], [1, 11, 5, 7, 8], [1, 11, 5, 7, 9]], "missing_prime_paths_linenumbers": [], "num_total_prime_paths": 3, "num_covered_paths": 3, "prime_path_coverage": 1.0, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_14__0_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_14__0_CFG.dot"}
{"humaneval_id": "HumanEval_95__1", "python_file": "HumanEval_95__1/main.py", "input_file": "HumanEval_95__1/input.txt", "prime_paths_nodes": [["11", "15", "17", "26", "9", "12"], ["11", "15", "17", "28", "30", "9", "12"], ["15", "17", "26", "9", "11", "14", "12"], ["15", "17", "28", "30", "9", "11", "14", "12"], ["17", "26", "9", "11", "15", "19", "20", "12"], ["17", "26", "9", "11", "15", "19", "22", "12"], ["17", "28", "30", "9", "11", "15", "19", "20", "12"], ["17", "28", "30", "9", "11", "15", "19", "22", "12"], ["26", "9", "11", "15", "17", "28", "32", "12"], ["26", "9", "11", "15", "17", "28", "30"], ["28", "30", "9", "11", "15", "17", "26"], ["30", "9", "11", "15", "17", "28", "32", "12"], ["1", "37", "3", "6"], ["1", "37", "3", "8", "9", "11", "14", "12"], ["1", "37", "3", "8", "9", "11", "15", "17", "28", "32", "12"], ["1", "37", "3", "8", "9", "11", "15", "19", "20", "12"], ["1", "37", "3", "8", "9", "11", "15", "19", "22", "12"], ["1", "37", "3", "8", "9", "12"], ["1", "37", "3", "8", "9", "11", "15", "17", "26"], ["1", "37", "3", "8", "9", "11", "15", "17", "28", "30"]], "prime_paths_statements": [["if isinstance(key, str) == False:\\l", "if state == 'start':\\l", "if key.isupper():\\l", "state = 'upper'\\l", "for key in dict.keys():\\l", "return state == 'upper' or state == 'lower'\\l"], ["if isinstance(key, str) == False:\\l", "if state == 'start':\\l", "if key.isupper():\\l", "if key.islower():\\l", "state = 'lower'\\l", "for key in dict.keys():\\l", "return state == 'upper' or state == 'lower'\\l"], ["if state == 'start':\\l", "if key.isupper():\\l", "state = 'upper'\\l", "for key in dict.keys():\\l", "if isinstance(key, str) == False:\\l", "state = 'mixed'\\lbreak\\l", "return state == 'upper' or state == 'lower'\\l"], ["if state == 'start':\\l", "if key.isupper():\\l", "if key.islower():\\l", "state = 'lower'\\l", "for key in dict.keys():\\l", "if isinstance(key, str) == False:\\l", "state = 'mixed'\\lbreak\\l", "return state == 'upper' or state == 'lower'\\l"], ["if key.isupper():\\l", "state = 'upper'\\l", "for key in dict.keys():\\l", "if isinstance(key, str) == False:\\l", "if state == 'start':\\l", "if state == 'upper' and not key.isupper(\\l", "state = 'mixed'\\lbreak\\l", "return state == 'upper' or state == 'lower'\\l"], ["if key.isupper():\\l", "state = 'upper'\\l", "for key in dict.keys():\\l", "if isinstance(key, str) == False:\\l", "if state == 'start':\\l", "if state == 'upper' and not key.isupper(\\l", "break\\l", "return state == 'upper' or state == 'lower'\\l"], ["if key.isupper():\\l", "if key.islower():\\l", "state = 'lower'\\l", "for key in dict.keys():\\l", "if isinstance(key, str) == False:\\l", "if state == 'start':\\l", "if state == 'upper' and not key.isupper(\\l", "state = 'mixed'\\lbreak\\l", "return state == 'upper' or state == 'lower'\\l"], ["if key.isupper():\\l", "if key.islower():\\l", "state = 'lower'\\l", "for key in dict.keys():\\l", "if isinstance(key, str) == False:\\l", "if state == 'start':\\l", "if state == 'upper' and not key.isupper(\\l", "break\\l", "return state == 'upper' or state == 'lower'\\l"], ["state = 'upper'\\l", "for key in dict.keys():\\l", "if isinstance(key, str) == False:\\l", "if state == 'start':\\l", "if key.isupper():\\l", "if key.islower():\\l", "break\\l", "return state == 'upper' or state == 'lower'\\l"], ["state = 'upper'\\l", "for key in dict.keys():\\l", "if isinstance(key, str) == False:\\l", "if state == 'start':\\l", "if key.isupper():\\l", "if key.islower():\\l", "state = 'lower'\\l"], ["if key.islower():\\l", "state = 'lower'\\l", "for key in dict.keys():\\l", "if isinstance(key, str) == False:\\l", "if state == 'start':\\l", "if key.isupper():\\l", "state = 'upper'\\l"], ["state = 'lower'\\l", "for key in dict.keys():\\l", "if isinstance(key, str) == False:\\l", "if state == 'start':\\l", "if key.isupper():\\l", "if key.islower():\\l", "break\\l", "return state == 'upper' or state == 'lower'\\l"], ["from typing import *\\ldef check_dict_case(dict):...\\lcheck_dict_case({'Name': 'John', 'Age': '36', 'City': 'Houston'})\\l", "check_dict_case", "if len(dict.keys()) == 0:\\l", "return False\\l"], ["from typing import *\\ldef check_dict_case(dict):...\\lcheck_dict_case({'Name': 'John', 'Age': '36', 'City': 'Houston'})\\l", "check_dict_case", "if len(dict.keys()) == 0:\\l", "state = 'start'\\l", "for key in dict.keys():\\l", "if isinstance(key, str) == False:\\l", "state = 'mixed'\\lbreak\\l", "return state == 'upper' or state == 'lower'\\l"], ["from typing import *\\ldef check_dict_case(dict):...\\lcheck_dict_case({'Name': 'John', 'Age': '36', 'City': 'Houston'})\\l", "check_dict_case", "if len(dict.keys()) == 0:\\l", "state = 'start'\\l", "for key in dict.keys():\\l", "if isinstance(key, str) == False:\\l", "if state == 'start':\\l", "if key.isupper():\\l", "if key.islower():\\l", "break\\l", "return state == 'upper' or state == 'lower'\\l"], ["from typing import *\\ldef check_dict_case(dict):...\\lcheck_dict_case({'Name': 'John', 'Age': '36', 'City': 'Houston'})\\l", "check_dict_case", "if len(dict.keys()) == 0:\\l", "state = 'start'\\l", "for key in dict.keys():\\l", "if isinstance(key, str) == False:\\l", "if state == 'start':\\l", "if state == 'upper' and not key.isupper(\\l", "state = 'mixed'\\lbreak\\l", "return state == 'upper' or state == 'lower'\\l"], ["from typing import *\\ldef check_dict_case(dict):...\\lcheck_dict_case({'Name': 'John', 'Age': '36', 'City': 'Houston'})\\l", "check_dict_case", "if len(dict.keys()) == 0:\\l", "state = 'start'\\l", "for key in dict.keys():\\l", "if isinstance(key, str) == False:\\l", "if state == 'start':\\l", "if state == 'upper' and not key.isupper(\\l", "break\\l", "return state == 'upper' or state == 'lower'\\l"], ["from typing import *\\ldef check_dict_case(dict):...\\lcheck_dict_case({'Name': 'John', 'Age': '36', 'City': 'Houston'})\\l", "check_dict_case", "if len(dict.keys()) == 0:\\l", "state = 'start'\\l", "for key in dict.keys():\\l", "return state == 'upper' or state == 'lower'\\l"], ["from typing import *\\ldef check_dict_case(dict):...\\lcheck_dict_case({'Name': 'John', 'Age': '36', 'City': 'Houston'})\\l", "check_dict_case", "if len(dict.keys()) == 0:\\l", "state = 'start'\\l", "for key in dict.keys():\\l", "if isinstance(key, str) == False:\\l", "if state == 'start':\\l", "if key.isupper():\\l", "state = 'upper'\\l"], ["from typing import *\\ldef check_dict_case(dict):...\\lcheck_dict_case({'Name': 'John', 'Age': '36', 'City': 'Houston'})\\l", "check_dict_case", "if len(dict.keys()) == 0:\\l", "state = 'start'\\l", "for key in dict.keys():\\l", "if isinstance(key, str) == False:\\l", "if state == 'start':\\l", "if key.isupper():\\l", "if key.islower():\\l", "state = 'lower'\\l"]], "prime_paths_linenumbers": [[11, 14, 15, 16, 9, 26], [11, 14, 15, 17, 18, 9, 26], [14, 15, 16, 9, 11, 12, 13, 26], [14, 15, 17, 18, 9, 11, 12, 13, 26], [15, 16, 9, 11, 14, 21, 22, 23, 26], [15, 16, 9, 11, 14, 21, 25, 26], [15, 17, 18, 9, 11, 14, 21, 22, 23, 26], [15, 17, 18, 9, 11, 14, 21, 25, 26], [16, 9, 11, 14, 15, 17, 20, 26], [16, 9, 11, 14, 15, 17, 18], [17, 18, 9, 11, 14, 15, 16], [18, 9, 11, 14, 15, 17, 20, 26], [1, 28, 5, 6], [1, 28, 5, 8, 9, 11, 12, 13, 26], [1, 28, 5, 8, 9, 11, 14, 15, 17, 20, 26], [1, 28, 5, 8, 9, 11, 14, 21, 22, 23, 26], [1, 28, 5, 8, 9, 11, 14, 21, 25, 26], [1, 28, 5, 8, 9, 26], [1, 28, 5, 8, 9, 11, 14, 15, 16], [1, 28, 5, 8, 9, 11, 14, 15, 17, 18]], "covered_statements_linenumbers": [1, 4, 5, 8, 9, 11, 14, 15, 17, 20, 26, 28], "missing_statements_linenumbers": [6, 12, 13, 16, 18, 21, 22, 23, 25], "covered_prime_paths_linenumbers": [[1, 28, 5, 8, 9, 11, 14, 15, 17, 20, 26], [1, 28, 5, 8, 9, 26]], "missing_prime_paths_linenumbers": [[11, 14, 15, 16, 9, 26], [11, 14, 15, 17, 18, 9, 26], [14, 15, 16, 9, 11, 12, 13, 26], [14, 15, 17, 18, 9, 11, 12, 13, 26], [15, 16, 9, 11, 14, 21, 22, 23, 26], [15, 16, 9, 11, 14, 21, 25, 26], [15, 17, 18, 9, 11, 14, 21, 22, 23, 26], [15, 17, 18, 9, 11, 14, 21, 25, 26], [16, 9, 11, 14, 15, 17, 20, 26], [16, 9, 11, 14, 15, 17, 18], [17, 18, 9, 11, 14, 15, 16], [18, 9, 11, 14, 15, 17, 20, 26], [1, 28, 5, 6], [1, 28, 5, 8, 9, 11, 12, 13, 26], [1, 28, 5, 8, 9, 11, 14, 21, 22, 23, 26], [1, 28, 5, 8, 9, 11, 14, 21, 25, 26], [1, 28, 5, 8, 9, 11, 14, 15, 16], [1, 28, 5, 8, 9, 11, 14, 15, 17, 18]], "num_total_prime_paths": 20, "num_covered_paths": 2, "prime_path_coverage": 0.1, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_95__1_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_95__1_CFG.dot"}
{"humaneval_id": "HumanEval_79__0", "python_file": "HumanEval_79__0/main.py", "input_file": "HumanEval_79__0/input.txt", "prime_paths_nodes": [["1", "6", "3"]], "prime_paths_statements": [["from typing import *\\ldef decimal_to_binary(decimal):...\\ldecimal_to_binary(32)\\l", "decimal_to_binary", "return 'db' + bin(decimal)[2:] ...'db'\\l"]], "prime_paths_linenumbers": [[1, 7, 5]], "covered_statements_linenumbers": [1, 4, 5, 7], "missing_statements_linenumbers": [], "covered_prime_paths_linenumbers": [[1, 7, 5]], "missing_prime_paths_linenumbers": [], "num_total_prime_paths": 1, "num_covered_paths": 1, "prime_path_coverage": 1.0, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_79__0_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_79__0_CFG.dot"}
{"humaneval_id": "HumanEval_100", "python_file": "HumanEval_100/main.py", "input_file": "HumanEval_100/input.txt", "prime_paths_nodes": [["1", "6", "3"]], "prime_paths_statements": [["from typing import *\\ldef make_a_pile(n):...\\lmake_a_pile(3)\\l", "make_a_pile", "return [(n + 2 * i) for i in range(n)]\\l"]], "prime_paths_linenumbers": [[1, 5, 3]], "covered_statements_linenumbers": [1, 2, 3, 5], "missing_statements_linenumbers": [], "covered_prime_paths_linenumbers": [[1, 5, 3]], "missing_prime_paths_linenumbers": [], "num_total_prime_paths": 1, "num_covered_paths": 1, "prime_path_coverage": 1.0, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_100_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_100_CFG.dot"}
{"humaneval_id": "HumanEval_74__1", "python_file": "HumanEval_74__1/main.py", "input_file": "HumanEval_74__1/input.txt", "prime_paths_nodes": [["5", "4", "6", "8", "9"], ["5", "4", "6", "8", "10", "12"], ["5", "4", "6", "8", "10", "14"], ["9", "8", "10", "12"], ["9", "8", "10", "14"], ["1", "18", "3", "4", "5"], ["1", "18", "3", "4", "6", "8", "9"], ["1", "18", "3", "4", "6", "8", "10", "12"], ["1", "18", "3", "4", "6", "8", "10", "14"]], "prime_paths_statements": [["l1 += len(st)\\l", "for st in lst1:\\l", "l2 = 0\\l", "for st in lst2:\\l", "l2 += len(st)\\l"], ["l1 += len(st)\\l", "for st in lst1:\\l", "l2 = 0\\l", "for st in lst2:\\l", "if l1 <= l2:\\l", "return lst1\\l"], ["l1 += len(st)\\l", "for st in lst1:\\l", "l2 = 0\\l", "for st in lst2:\\l", "if l1 <= l2:\\l", "return lst2\\l"], ["l2 += len(st)\\l", "for st in lst2:\\l", "if l1 <= l2:\\l", "return lst1\\l"], ["l2 += len(st)\\l", "for st in lst2:\\l", "if l1 <= l2:\\l", "return lst2\\l"], ["from typing import *\\ldef total_match(lst1, lst2):...\\ltotal_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\\l", "total_match", "l1 = 0\\l", "for st in lst1:\\l", "l1 += len(st)\\l"], ["from typing import *\\ldef total_match(lst1, lst2):...\\ltotal_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\\l", "total_match", "l1 = 0\\l", "for st in lst1:\\l", "l2 = 0\\l", "for st in lst2:\\l", "l2 += len(st)\\l"], ["from typing import *\\ldef total_match(lst1, lst2):...\\ltotal_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\\l", "total_match", "l1 = 0\\l", "for st in lst1:\\l", "l2 = 0\\l", "for st in lst2:\\l", "if l1 <= l2:\\l", "return lst1\\l"], ["from typing import *\\ldef total_match(lst1, lst2):...\\ltotal_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\\l", "total_match", "l1 = 0\\l", "for st in lst1:\\l", "l2 = 0\\l", "for st in lst2:\\l", "if l1 <= l2:\\l", "return lst2\\l"]], "prime_paths_linenumbers": [[7, 6, 9, 10, 11], [7, 6, 9, 10, 13, 14], [7, 6, 9, 10, 13, 16], [11, 10, 13, 14], [11, 10, 13, 16], [1, 18, 5, 6, 7], [1, 18, 5, 6, 9, 10, 11], [1, 18, 5, 6, 9, 10, 13, 14], [1, 18, 5, 6, 9, 10, 13, 16]], "covered_statements_linenumbers": [1, 4, 5, 6, 7, 9, 10, 11, 13, 14, 18], "missing_statements_linenumbers": [16], "covered_prime_paths_linenumbers": [[7, 6, 9, 10, 11], [7, 6, 9, 10, 13, 14], [11, 10, 13, 14], [1, 18, 5, 6, 7], [1, 18, 5, 6, 9, 10, 11], [1, 18, 5, 6, 9, 10, 13, 14]], "missing_prime_paths_linenumbers": [[7, 6, 9, 10, 13, 16], [11, 10, 13, 16], [1, 18, 5, 6, 9, 10, 13, 16]], "num_total_prime_paths": 9, "num_covered_paths": 6, "prime_path_coverage": 0.67, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_74__1_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_74__1_CFG.dot"}
{"humaneval_id": "HumanEval_49__1", "python_file": "HumanEval_49__1/main.py", "input_file": "HumanEval_49__1/input.txt", "prime_paths_nodes": [["6", "4", "7"], ["1", "10", "3", "4", "6"], ["1", "10", "3", "4", "7"]], "prime_paths_statements": [["ret = 2 * ret % p\\l", "for i in range(n):\\l", "return ret\\l"], ["from typing import *\\ldef modp(n: int, p: int):...\\lmodp(0, 101)\\l", "modp", "ret = 1\\l", "for i in range(n):\\l", "ret = 2 * ret % p\\l"], ["from typing import *\\ldef modp(n: int, p: int):...\\lmodp(0, 101)\\l", "modp", "ret = 1\\l", "for i in range(n):\\l", "return ret\\l"]], "prime_paths_linenumbers": [[7, 6, 8], [1, 10, 5, 6, 7], [1, 10, 5, 6, 8]], "covered_statements_linenumbers": [1, 4, 5, 6, 8, 10], "missing_statements_linenumbers": [7], "covered_prime_paths_linenumbers": [[1, 10, 5, 6, 8]], "missing_prime_paths_linenumbers": [[7, 6, 8], [1, 10, 5, 6, 7]], "num_total_prime_paths": 3, "num_covered_paths": 1, "prime_path_coverage": 0.33, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_49__1_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_49__1_CFG.dot"}
{"humaneval_id": "HumanEval_14__1", "python_file": "HumanEval_14__1/main.py", "input_file": "HumanEval_14__1/input.txt", "prime_paths_nodes": [["7", "4", "8"], ["1", "12", "3", "4", "7"], ["1", "12", "3", "4", "8"]], "prime_paths_statements": [["result.append(string[:i + 1])\\l", "for i in range(len(string)):\\l", "return result\\l"], ["from typing import *\\ldef all_prefixes(string: str) ->List[str]:...\\lall_prefixes('')\\l", "all_prefixes", "result = []\\l", "for i in range(len(string)):\\l", "result.append(string[:i + 1])\\l"], ["from typing import *\\ldef all_prefixes(string: str) ->List[str]:...\\lall_prefixes('')\\l", "all_prefixes", "result = []\\l", "for i in range(len(string)):\\l", "return result\\l"]], "prime_paths_linenumbers": [[8, 7, 9], [1, 11, 5, 7, 8], [1, 11, 5, 7, 9]], "covered_statements_linenumbers": [1, 4, 5, 7, 9, 11], "missing_statements_linenumbers": [8], "covered_prime_paths_linenumbers": [[1, 11, 5, 7, 9]], "missing_prime_paths_linenumbers": [[8, 7, 9], [1, 11, 5, 7, 8]], "num_total_prime_paths": 3, "num_covered_paths": 1, "prime_path_coverage": 0.33, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_14__1_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_14__1_CFG.dot"}
{"humaneval_id": "HumanEval_108", "python_file": "HumanEval_108/main.py", "input_file": "HumanEval_108/input.txt", "prime_paths_nodes": [["5", "6", "7", "8", "11"], ["5", "6", "8", "11"], ["1", "17", "3", "14"]], "prime_paths_statements": [["neg = 1\\l", "if n < 0:\\l", "n, neg = -1 * n, -1\\l", "n = [int(i) for i in str(n)]\\ln[0] = n[0] * neg\\l", "return sum(n)\\l"], ["neg = 1\\l", "if n < 0:\\l", "n = [int(i) for i in str(n)]\\ln[0] = n[0] * neg\\l", "return sum(n)\\l"], ["from typing import *\\ldef count_nums(arr):...\\lcount_nums([1, 1, 2, -2, 3, 4, 5])\\l", "count_nums", "def digits_sum(n):...\\l", "return len(list(filter(lambda x: x > 0, [digits_sum(i) for i in arr])))\\l"]], "prime_paths_linenumbers": [[4, 5, 5, 6, 7, 8], [4, 5, 6, 7, 8], [1, 11, 3, 9]], "covered_statements_linenumbers": [1, 2, 3, 4, 5, 6, 7, 8, 9, 11], "missing_statements_linenumbers": [], "covered_prime_paths_linenumbers": [[4, 5, 5, 6, 7, 8], [4, 5, 6, 7, 8], [1, 11, 3, 9]], "missing_prime_paths_linenumbers": [], "num_total_prime_paths": 3, "num_covered_paths": 3, "prime_path_coverage": 1.0, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_108_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_108_CFG.dot"}
{"humaneval_id": "HumanEval_141", "python_file": "HumanEval_141/main.py", "input_file": "HumanEval_141/input.txt", "prime_paths_nodes": [["1", "28", "3", "5", "7"], ["1", "28", "3", "5", "8", "10"], ["1", "28", "3", "5", "8", "11", "14"], ["1", "28", "3", "5", "8", "11", "15", "17"], ["1", "28", "3", "5", "8", "11", "15", "18", "22", "23"], ["1", "28", "3", "5", "8", "11", "15", "18", "22", "24"]], "prime_paths_statements": [["from typing import *\\ldef file_name_check(file_name):...\\lfile_name_check('example.txt')\\l", "file_name_check", "suf = ['txt', 'exe', 'dll']\\llst = file_name.split(sep='.')\\l", "if len(lst) != 2:\\l", "return 'No'\\l"], ["from typing import *\\ldef file_name_check(file_name):...\\lfile_name_check('example.txt')\\l", "file_name_check", "suf = ['txt', 'exe', 'dll']\\llst = file_name.split(sep='.')\\l", "if len(lst) != 2:\\l", "if not lst[1] in suf:\\l", "return 'No'\\l"], ["from typing import *\\ldef file_name_check(file_name):...\\lfile_name_check('example.txt')\\l", "file_name_check", "suf = ['txt', 'exe', 'dll']\\llst = file_name.split(sep='.')\\l", "if len(lst) != 2:\\l", "if not lst[1] in suf:\\l", "if len(lst[0]) == 0:\\l", "return 'No'\\l"], ["from typing import *\\ldef file_name_check(file_name):...\\lfile_name_check('example.txt')\\l", "file_name_check", "suf = ['txt', 'exe', 'dll']\\llst = file_name.split(sep='.')\\l", "if len(lst) != 2:\\l", "if not lst[1] in suf:\\l", "if len(lst[0]) == 0:\\l", "if not lst[0][0].isalpha():\\l", "return 'No'\\l"], ["from typing import *\\ldef file_name_check(file_name):...\\lfile_name_check('example.txt')\\l", "file_name_check", "suf = ['txt', 'exe', 'dll']\\llst = file_name.split(sep='.')\\l", "if len(lst) != 2:\\l", "if not lst[1] in suf:\\l", "if len(lst[0]) == 0:\\l", "if not lst[0][0].isalpha():\\l", "t = len([x for x in lst[0] if x.isdigit()])\\l", "if t > 3:\\l", "return 'No'\\l"], ["from typing import *\\ldef file_name_check(file_name):...\\lfile_name_check('example.txt')\\l", "file_name_check", "suf = ['txt', 'exe', 'dll']\\llst = file_name.split(sep='.')\\l", "if len(lst) != 2:\\l", "if not lst[1] in suf:\\l", "if len(lst[0]) == 0:\\l", "if not lst[0][0].isalpha():\\l", "t = len([x for x in lst[0] if x.isdigit()])\\l", "if t > 3:\\l", "return 'Yes'\\l"]], "prime_paths_linenumbers": [[1, 18, 3, 4, 5, 6], [1, 18, 3, 4, 5, 7, 8], [1, 18, 3, 4, 5, 7, 9, 10], [1, 18, 3, 4, 5, 7, 9, 11, 12], [1, 18, 3, 4, 5, 7, 9, 11, 13, 14, 15], [1, 18, 3, 4, 5, 7, 9, 11, 13, 14, 16]], "covered_statements_linenumbers": [1, 2, 3, 4, 5, 7, 9, 11, 13, 14, 16, 18], "missing_statements_linenumbers": [6, 8, 10, 12, 15], "covered_prime_paths_linenumbers": [[1, 18, 3, 4, 5, 7, 9, 11, 13, 14, 16]], "missing_prime_paths_linenumbers": [[1, 18, 3, 4, 5, 6], [1, 18, 3, 4, 5, 7, 8], [1, 18, 3, 4, 5, 7, 9, 10], [1, 18, 3, 4, 5, 7, 9, 11, 12], [1, 18, 3, 4, 5, 7, 9, 11, 13, 14, 15]], "num_total_prime_paths": 6, "num_covered_paths": 1, "prime_path_coverage": 0.17, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_141_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_141_CFG.dot"}
{"humaneval_id": "HumanEval_94__0", "python_file": "HumanEval_94__0/main.py", "input_file": "HumanEval_94__0/input.txt", "prime_paths_nodes": [["5", "8", "10"], ["8", "5", "9"], ["16", "18", "19", "15", "17", "23"], ["16", "19", "15", "17", "23"], ["18", "19", "15", "16"], ["19", "15", "16", "18"], ["1", "26", "3", "15", "16", "18", "19"], ["1", "26", "3", "15", "16", "19"], ["1", "26", "3", "15", "17", "23"]], "prime_paths_statements": [["for i in range(2, int(n ** 0.5) + 1):\\l", "if n % i == 0:\\l", "return False\\l"], ["if n % i == 0:\\l", "for i in range(2, int(n ** 0.5) + 1):\\l", "return True\\l"], ["if lst[i] > maxx and isPrime(lst[i]):\\l", "maxx = lst[i]\\l", "i += 1\\l", "while i < len(lst):\\l", "result = sum(int(digit) for digit in str(maxx))\\l", "return result\\l"], ["if lst[i] > maxx and isPrime(lst[i]):\\l", "i += 1\\l", "while i < len(lst):\\l", "result = sum(int(digit) for digit in str(maxx))\\l", "return result\\l"], ["maxx = lst[i]\\l", "i += 1\\l", "while i < len(lst):\\l", "if lst[i] > maxx and isPrime(lst[i]):\\l"], ["i += 1\\l", "while i < len(lst):\\l", "if lst[i] > maxx and isPrime(lst[i]):\\l", "maxx = lst[i]\\l"], ["from typing import *\\ldef skjkasdkd(lst):...\\lskjkasdkd([127, 97, 8192])\\l", "skjkasdkd", "def isPrime(n):...\\lmaxx = 0\\li = 0\\l", "while i < len(lst):\\l", "if lst[i] > maxx and isPrime(lst[i]):\\l", "maxx = lst[i]\\l", "i += 1\\l"], ["from typing import *\\ldef skjkasdkd(lst):...\\lskjkasdkd([127, 97, 8192])\\l", "skjkasdkd", "def isPrime(n):...\\lmaxx = 0\\li = 0\\l", "while i < len(lst):\\l", "if lst[i] > maxx and isPrime(lst[i]):\\l", "i += 1\\l"], ["from typing import *\\ldef skjkasdkd(lst):...\\lskjkasdkd([127, 97, 8192])\\l", "skjkasdkd", "def isPrime(n):...\\lmaxx = 0\\li = 0\\l", "while i < len(lst):\\l", "result = sum(int(digit) for digit in str(maxx))\\l", "return result\\l"]], "prime_paths_linenumbers": [[6, 7, 8], [7, 6, 10], [14, 15, 16, 13, 17, 18], [14, 16, 13, 17, 18], [15, 16, 13, 14], [16, 13, 14, 15], [1, 20, 5, 11, 12, 13, 14, 15, 16], [1, 20, 5, 11, 12, 13, 14, 16], [1, 20, 5, 11, 12, 13, 17, 18]], "covered_statements_linenumbers": [1, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 20], "missing_statements_linenumbers": [], "covered_prime_paths_linenumbers": [[6, 7, 8], [7, 6, 10], [14, 15, 16, 13, 17, 18], [14, 16, 13, 17, 18], [15, 16, 13, 14], [16, 13, 14, 15], [1, 20, 5, 11, 12, 13, 14, 15, 16], [1, 20, 5, 11, 12, 13, 14, 16], [1, 20, 5, 11, 12, 13, 17, 18]], "missing_prime_paths_linenumbers": [], "num_total_prime_paths": 9, "num_covered_paths": 9, "prime_path_coverage": 1.0, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_94__0_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_94__0_CFG.dot"}
{"humaneval_id": "HumanEval_32", "python_file": "HumanEval_32/main.py", "input_file": "HumanEval_32/input.txt", "prime_paths_nodes": [["9", "8", "10", "11", "13", "14", "3"], ["9", "8", "10", "11", "13", "15", "3"], ["9", "8", "10", "12"], ["9", "8", "10", "11", "13", "16"], ["9", "8", "10", "11", "13", "18"], ["11", "13", "16", "10", "12"], ["11", "13", "18", "10", "12"], ["13", "16", "10", "11"], ["13", "18", "10", "11"], ["16", "10", "11", "13", "14", "3"], ["16", "10", "11", "13", "15", "3"], ["16", "10", "11", "13", "18"], ["18", "10", "11", "13", "14", "3"], ["18", "10", "11", "13", "15", "3"], ["18", "10", "11", "13", "16"], ["1", "21", "7", "8", "10", "11", "13", "14", "3"], ["1", "21", "7", "8", "10", "11", "13", "15", "3"], ["1", "21", "7", "8", "9"], ["1", "21", "7", "8", "10", "12"], ["1", "21", "7", "8", "10", "11", "13", "16"], ["1", "21", "7", "8", "10", "11", "13", "18"]], "prime_paths_statements": [["begin *= 2.0\\lend *= 2.0\\l", "while poly(xs, begin) * poly(xs, end) > 0:\\l", "while end - begin > 1e-10:\\l", "center = (begin + end) / 2.0\\l", "if poly(xs, center) * poly(xs, begin) > 0:\\l", "poly", "return sum([(coeff * math.pow(x, i)) for i, coeff in enumerate(xs)])\\l"], ["begin *= 2.0\\lend *= 2.0\\l", "while poly(xs, begin) * poly(xs, end) > 0:\\l", "while end - begin > 1e-10:\\l", "center = (begin + end) / 2.0\\l", "if poly(xs, center) * poly(xs, begin) > 0:\\l", "poly", "return sum([(coeff * math.pow(x, i)) for i, coeff in enumerate(xs)])\\l"], ["begin *= 2.0\\lend *= 2.0\\l", "while poly(xs, begin) * poly(xs, end) > 0:\\l", "while end - begin > 1e-10:\\l", "return begin\\l"], ["begin *= 2.0\\lend *= 2.0\\l", "while poly(xs, begin) * poly(xs, end) > 0:\\l", "while end - begin > 1e-10:\\l", "center = (begin + end) / 2.0\\l", "if poly(xs, center) * poly(xs, begin) > 0:\\l", "begin = center\\l"], ["begin *= 2.0\\lend *= 2.0\\l", "while poly(xs, begin) * poly(xs, end) > 0:\\l", "while end - begin > 1e-10:\\l", "center = (begin + end) / 2.0\\l", "if poly(xs, center) * poly(xs, begin) > 0:\\l", "end = center\\l"], ["center = (begin + end) / 2.0\\l", "if poly(xs, center) * poly(xs, begin) > 0:\\l", "begin = center\\l", "while end - begin > 1e-10:\\l", "return begin\\l"], ["center = (begin + end) / 2.0\\l", "if poly(xs, center) * poly(xs, begin) > 0:\\l", "end = center\\l", "while end - begin > 1e-10:\\l", "return begin\\l"], ["if poly(xs, center) * poly(xs, begin) > 0:\\l", "begin = center\\l", "while end - begin > 1e-10:\\l", "center = (begin + end) / 2.0\\l"], ["if poly(xs, center) * poly(xs, begin) > 0:\\l", "end = center\\l", "while end - begin > 1e-10:\\l", "center = (begin + end) / 2.0\\l"], ["begin = center\\l", "while end - begin > 1e-10:\\l", "center = (begin + end) / 2.0\\l", "if poly(xs, center) * poly(xs, begin) > 0:\\l", "poly", "return sum([(coeff * math.pow(x, i)) for i, coeff in enumerate(xs)])\\l"], ["begin = center\\l", "while end - begin > 1e-10:\\l", "center = (begin + end) / 2.0\\l", "if poly(xs, center) * poly(xs, begin) > 0:\\l", "poly", "return sum([(coeff * math.pow(x, i)) for i, coeff in enumerate(xs)])\\l"], ["begin = center\\l", "while end - begin > 1e-10:\\l", "center = (begin + end) / 2.0\\l", "if poly(xs, center) * poly(xs, begin) > 0:\\l", "end = center\\l"], ["end = center\\l", "while end - begin > 1e-10:\\l", "center = (begin + end) / 2.0\\l", "if poly(xs, center) * poly(xs, begin) > 0:\\l", "poly", "return sum([(coeff * math.pow(x, i)) for i, coeff in enumerate(xs)])\\l"], ["end = center\\l", "while end - begin > 1e-10:\\l", "center = (begin + end) / 2.0\\l", "if poly(xs, center) * poly(xs, begin) > 0:\\l", "poly", "return sum([(coeff * math.pow(x, i)) for i, coeff in enumerate(xs)])\\l"], ["end = center\\l", "while end - begin > 1e-10:\\l", "center = (begin + end) / 2.0\\l", "if poly(xs, center) * poly(xs, begin) > 0:\\l", "begin = center\\l"], ["from typing import *\\limport math\\ldef poly(xs: list, x: float):...\\ldef find_zero(xs: list):...\\lfind_zero([-6, 11, -6, 1])\\l", "find_zero", "begin, end = -1.0, 1.0\\l", "while poly(xs, begin) * poly(xs, end) > 0:\\l", "while end - begin > 1e-10:\\l", "center = (begin + end) / 2.0\\l", "if poly(xs, center) * poly(xs, begin) > 0:\\l", "poly", "return sum([(coeff * math.pow(x, i)) for i, coeff in enumerate(xs)])\\l"], ["from typing import *\\limport math\\ldef poly(xs: list, x: float):...\\ldef find_zero(xs: list):...\\lfind_zero([-6, 11, -6, 1])\\l", "find_zero", "begin, end = -1.0, 1.0\\l", "while poly(xs, begin) * poly(xs, end) > 0:\\l", "while end - begin > 1e-10:\\l", "center = (begin + end) / 2.0\\l", "if poly(xs, center) * poly(xs, begin) > 0:\\l", "poly", "return sum([(coeff * math.pow(x, i)) for i, coeff in enumerate(xs)])\\l"], ["from typing import *\\limport math\\ldef poly(xs: list, x: float):...\\ldef find_zero(xs: list):...\\lfind_zero([-6, 11, -6, 1])\\l", "find_zero", "begin, end = -1.0, 1.0\\l", "while poly(xs, begin) * poly(xs, end) > 0:\\l", "begin *= 2.0\\lend *= 2.0\\l"], ["from typing import *\\limport math\\ldef poly(xs: list, x: float):...\\ldef find_zero(xs: list):...\\lfind_zero([-6, 11, -6, 1])\\l", "find_zero", "begin, end = -1.0, 1.0\\l", "while poly(xs, begin) * poly(xs, end) > 0:\\l", "while end - begin > 1e-10:\\l", "return begin\\l"], ["from typing import *\\limport math\\ldef poly(xs: list, x: float):...\\ldef find_zero(xs: list):...\\lfind_zero([-6, 11, -6, 1])\\l", "find_zero", "begin, end = -1.0, 1.0\\l", "while poly(xs, begin) * poly(xs, end) > 0:\\l", "while end - begin > 1e-10:\\l", "center = (begin + end) / 2.0\\l", "if poly(xs, center) * poly(xs, begin) > 0:\\l", "begin = center\\l"], ["from typing import *\\limport math\\ldef poly(xs: list, x: float):...\\ldef find_zero(xs: list):...\\lfind_zero([-6, 11, -6, 1])\\l", "find_zero", "begin, end = -1.0, 1.0\\l", "while poly(xs, begin) * poly(xs, end) > 0:\\l", "while end - begin > 1e-10:\\l", "center = (begin + end) / 2.0\\l", "if poly(xs, center) * poly(xs, begin) > 0:\\l", "end = center\\l"]], "prime_paths_linenumbers": [[10, 11, 9, 12, 13, 14, 14, 5], [10, 11, 9, 12, 13, 14, 14, 5], [10, 11, 9, 12, 18], [10, 11, 9, 12, 13, 14, 15], [10, 11, 9, 12, 13, 14, 17], [13, 14, 15, 12, 18], [13, 14, 17, 12, 18], [14, 15, 12, 13], [14, 17, 12, 13], [15, 12, 13, 14, 14, 5], [15, 12, 13, 14, 14, 5], [15, 12, 13, 14, 17], [17, 12, 13, 14, 14, 5], [17, 12, 13, 14, 14, 5], [17, 12, 13, 14, 15], [1, 20, 8, 9, 12, 13, 14, 14, 5], [1, 20, 8, 9, 12, 13, 14, 14, 5], [1, 20, 8, 9, 10, 11], [1, 20, 8, 9, 12, 18], [1, 20, 8, 9, 12, 13, 14, 15], [1, 20, 8, 9, 12, 13, 14, 17]], "covered_statements_linenumbers": [1, 2, 4, 5, 7, 8, 9, 12, 13, 14, 15, 18, 20], "missing_statements_linenumbers": [10, 11, 17], "covered_prime_paths_linenumbers": [[13, 14, 15, 12, 18], [14, 15, 12, 13], [15, 12, 13, 14, 14, 5], [15, 12, 13, 14, 14, 5], [1, 20, 8, 9, 12, 13, 14, 14, 5], [1, 20, 8, 9, 12, 13, 14, 14, 5], [1, 20, 8, 9, 12, 18], [1, 20, 8, 9, 12, 13, 14, 15]], "missing_prime_paths_linenumbers": [[10, 11, 9, 12, 13, 14, 14, 5], [10, 11, 9, 12, 13, 14, 14, 5], [10, 11, 9, 12, 18], [10, 11, 9, 12, 13, 14, 15], [10, 11, 9, 12, 13, 14, 17], [13, 14, 17, 12, 18], [14, 17, 12, 13], [15, 12, 13, 14, 17], [17, 12, 13, 14, 14, 5], [17, 12, 13, 14, 14, 5], [17, 12, 13, 14, 15], [1, 20, 8, 9, 10, 11], [1, 20, 8, 9, 12, 13, 14, 17]], "num_total_prime_paths": 21, "num_covered_paths": 8, "prime_path_coverage": 0.38, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_32_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_32_CFG.dot"}
{"humaneval_id": "HumanEval_123", "python_file": "HumanEval_123/main.py", "input_file": "HumanEval_123/input.txt", "prime_paths_nodes": [["7", "9", "10", "5", "8"], ["7", "9", "10", "12", "5", "8"], ["7", "11", "10", "5", "8"], ["7", "11", "10", "12", "5", "8"], ["9", "10", "5", "7", "11"], ["9", "10", "12", "5", "7", "11"], ["11", "10", "5", "7", "9"], ["11", "10", "12", "5", "7", "9"], ["12", "5", "7", "9", "10"], ["12", "5", "7", "11", "10"], ["1", "18", "3", "4", "5", "8"], ["1", "18", "3", "6", "5", "8"], ["1", "18", "3", "4", "5", "7", "9", "10", "12"], ["1", "18", "3", "4", "5", "7", "11", "10", "12"], ["1", "18", "3", "6", "5", "7", "9", "10", "12"], ["1", "18", "3", "6", "5", "7", "11", "10", "12"]], "prime_paths_statements": [["if n % 2 == 0:\\l", "n = n / 2\\l", "if n % 2 == 1:\\l", "while n > 1:\\l", "return sorted(odd_collatz)\\l"], ["if n % 2 == 0:\\l", "n = n / 2\\l", "if n % 2 == 1:\\l", "odd_collatz.append(int(n))\\l", "while n > 1:\\l", "return sorted(odd_collatz)\\l"], ["if n % 2 == 0:\\l", "n = n * 3 + 1\\l", "if n % 2 == 1:\\l", "while n > 1:\\l", "return sorted(odd_collatz)\\l"], ["if n % 2 == 0:\\l", "n = n * 3 + 1\\l", "if n % 2 == 1:\\l", "odd_collatz.append(int(n))\\l", "while n > 1:\\l", "return sorted(odd_collatz)\\l"], ["n = n / 2\\l", "if n % 2 == 1:\\l", "while n > 1:\\l", "if n % 2 == 0:\\l", "n = n * 3 + 1\\l"], ["n = n / 2\\l", "if n % 2 == 1:\\l", "odd_collatz.append(int(n))\\l", "while n > 1:\\l", "if n % 2 == 0:\\l", "n = n * 3 + 1\\l"], ["n = n * 3 + 1\\l", "if n % 2 == 1:\\l", "while n > 1:\\l", "if n % 2 == 0:\\l", "n = n / 2\\l"], ["n = n * 3 + 1\\l", "if n % 2 == 1:\\l", "odd_collatz.append(int(n))\\l", "while n > 1:\\l", "if n % 2 == 0:\\l", "n = n / 2\\l"], ["odd_collatz.append(int(n))\\l", "while n > 1:\\l", "if n % 2 == 0:\\l", "n = n / 2\\l", "if n % 2 == 1:\\l"], ["odd_collatz.append(int(n))\\l", "while n > 1:\\l", "if n % 2 == 0:\\l", "n = n * 3 + 1\\l", "if n % 2 == 1:\\l"], ["from typing import *\\ldef get_odd_collatz(n):...\\lget_odd_collatz(14)\\l", "get_odd_collatz", "if n % 2 == 0:\\l", "odd_collatz = []\\l", "while n > 1:\\l", "return sorted(odd_collatz)\\l"], ["from typing import *\\ldef get_odd_collatz(n):...\\lget_odd_collatz(14)\\l", "get_odd_collatz", "if n % 2 == 0:\\l", "odd_collatz = [n]\\l", "while n > 1:\\l", "return sorted(odd_collatz)\\l"], ["from typing import *\\ldef get_odd_collatz(n):...\\lget_odd_collatz(14)\\l", "get_odd_collatz", "if n % 2 == 0:\\l", "odd_collatz = []\\l", "while n > 1:\\l", "if n % 2 == 0:\\l", "n = n / 2\\l", "if n % 2 == 1:\\l", "odd_collatz.append(int(n))\\l"], ["from typing import *\\ldef get_odd_collatz(n):...\\lget_odd_collatz(14)\\l", "get_odd_collatz", "if n % 2 == 0:\\l", "odd_collatz = []\\l", "while n > 1:\\l", "if n % 2 == 0:\\l", "n = n * 3 + 1\\l", "if n % 2 == 1:\\l", "odd_collatz.append(int(n))\\l"], ["from typing import *\\ldef get_odd_collatz(n):...\\lget_odd_collatz(14)\\l", "get_odd_collatz", "if n % 2 == 0:\\l", "odd_collatz = [n]\\l", "while n > 1:\\l", "if n % 2 == 0:\\l", "n = n / 2\\l", "if n % 2 == 1:\\l", "odd_collatz.append(int(n))\\l"], ["from typing import *\\ldef get_odd_collatz(n):...\\lget_odd_collatz(14)\\l", "get_odd_collatz", "if n % 2 == 0:\\l", "odd_collatz = [n]\\l", "while n > 1:\\l", "if n % 2 == 0:\\l", "n = n * 3 + 1\\l", "if n % 2 == 1:\\l", "odd_collatz.append(int(n))\\l"]], "prime_paths_linenumbers": [[8, 9, 13, 7, 16], [8, 9, 13, 14, 7, 16], [8, 11, 13, 7, 16], [8, 11, 13, 14, 7, 16], [9, 13, 7, 8, 11], [9, 13, 14, 7, 8, 11], [11, 13, 7, 8, 9], [11, 13, 14, 7, 8, 9], [14, 7, 8, 9, 13], [14, 7, 8, 11, 13], [1, 18, 3, 4, 7, 16], [1, 18, 3, 6, 7, 16], [1, 18, 3, 4, 7, 8, 9, 13, 14], [1, 18, 3, 4, 7, 8, 11, 13, 14], [1, 18, 3, 6, 7, 8, 9, 13, 14], [1, 18, 3, 6, 7, 8, 11, 13, 14]], "covered_statements_linenumbers": [1, 2, 3, 4, 7, 8, 9, 11, 13, 14, 16, 18], "missing_statements_linenumbers": [6], "covered_prime_paths_linenumbers": [[8, 9, 13, 7, 16], [8, 9, 13, 14, 7, 16], [8, 11, 13, 7, 16], [8, 11, 13, 14, 7, 16], [9, 13, 7, 8, 11], [9, 13, 14, 7, 8, 11], [11, 13, 7, 8, 9], [11, 13, 14, 7, 8, 9], [14, 7, 8, 9, 13], [14, 7, 8, 11, 13], [1, 18, 3, 4, 7, 16], [1, 18, 3, 4, 7, 8, 9, 13, 14], [1, 18, 3, 4, 7, 8, 11, 13, 14]], "missing_prime_paths_linenumbers": [[1, 18, 3, 6, 7, 16], [1, 18, 3, 6, 7, 8, 9, 13, 14], [1, 18, 3, 6, 7, 8, 11, 13, 14]], "num_total_prime_paths": 16, "num_covered_paths": 13, "prime_path_coverage": 0.81, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_123_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_123_CFG.dot"}
{"humaneval_id": "HumanEval_121", "python_file": "HumanEval_121/main.py", "input_file": "HumanEval_121/input.txt", "prime_paths_nodes": [["1", "6", "3"]], "prime_paths_statements": [["from typing import *\\ldef solution(lst):...\\lsolution([5, 8, 7, 1])\\l", "solution", "return sum([x for idx, x in enumerate(lst) if idx % 2 == 0 and x % 2 == 1])\\l"]], "prime_paths_linenumbers": [[1, 5, 3]], "covered_statements_linenumbers": [1, 2, 3, 5], "missing_statements_linenumbers": [], "covered_prime_paths_linenumbers": [[1, 5, 3]], "missing_prime_paths_linenumbers": [], "num_total_prime_paths": 1, "num_covered_paths": 1, "prime_path_coverage": 1.0, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_121_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_121_CFG.dot"}
{"humaneval_id": "HumanEval_92__1", "python_file": "HumanEval_92__1/main.py", "input_file": "HumanEval_92__1/input.txt", "prime_paths_nodes": [["1", "12", "3", "5"], ["1", "12", "3", "4", "6"], ["1", "12", "3", "4", "7"]], "prime_paths_statements": [["from typing import *\\ldef any_int(x, y, z):...\\lany_int(3, 4, 7)\\l", "any_int", "if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\\l", "return False\\l"], ["from typing import *\\ldef any_int(x, y, z):...\\lany_int(3, 4, 7)\\l", "any_int", "if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\\l", "if x + y == z or x + z == y or y + z == x:\\l", "return True\\l"], ["from typing import *\\ldef any_int(x, y, z):...\\lany_int(3, 4, 7)\\l", "any_int", "if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\\l", "if x + y == z or x + z == y or y + z == x:\\l", "return False\\l"]], "prime_paths_linenumbers": [[1, 12, 6, 10], [1, 12, 6, 7, 8], [1, 12, 6, 7, 9]], "covered_statements_linenumbers": [1, 4, 6, 7, 8, 12], "missing_statements_linenumbers": [9, 10], "covered_prime_paths_linenumbers": [[1, 12, 6, 7, 8]], "missing_prime_paths_linenumbers": [[1, 12, 6, 10], [1, 12, 6, 7, 9]], "num_total_prime_paths": 3, "num_covered_paths": 1, "prime_path_coverage": 0.33, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_92__1_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_92__1_CFG.dot"}
{"humaneval_id": "HumanEval_123__0", "python_file": "HumanEval_123__0/main.py", "input_file": "HumanEval_123__0/input.txt", "prime_paths_nodes": [["7", "9", "10", "5", "8"], ["7", "9", "10", "12", "5", "8"], ["7", "11", "10", "5", "8"], ["7", "11", "10", "12", "5", "8"], ["9", "10", "5", "7", "11"], ["9", "10", "12", "5", "7", "11"], ["11", "10", "5", "7", "9"], ["11", "10", "12", "5", "7", "9"], ["12", "5", "7", "9", "10"], ["12", "5", "7", "11", "10"], ["1", "18", "3", "4", "5", "8"], ["1", "18", "3", "6", "5", "8"], ["1", "18", "3", "4", "5", "7", "9", "10", "12"], ["1", "18", "3", "4", "5", "7", "11", "10", "12"], ["1", "18", "3", "6", "5", "7", "9", "10", "12"], ["1", "18", "3", "6", "5", "7", "11", "10", "12"]], "prime_paths_statements": [["if n % 2 == 0:\\l", "n = n / 2\\l", "if n % 2 == 1:\\l", "while n > 1:\\l", "return sorted(odd_collatz)\\l"], ["if n % 2 == 0:\\l", "n = n / 2\\l", "if n % 2 == 1:\\l", "odd_collatz.append(int(n))\\l", "while n > 1:\\l", "return sorted(odd_collatz)\\l"], ["if n % 2 == 0:\\l", "n = n * 3 + 1\\l", "if n % 2 == 1:\\l", "while n > 1:\\l", "return sorted(odd_collatz)\\l"], ["if n % 2 == 0:\\l", "n = n * 3 + 1\\l", "if n % 2 == 1:\\l", "odd_collatz.append(int(n))\\l", "while n > 1:\\l", "return sorted(odd_collatz)\\l"], ["n = n / 2\\l", "if n % 2 == 1:\\l", "while n > 1:\\l", "if n % 2 == 0:\\l", "n = n * 3 + 1\\l"], ["n = n / 2\\l", "if n % 2 == 1:\\l", "odd_collatz.append(int(n))\\l", "while n > 1:\\l", "if n % 2 == 0:\\l", "n = n * 3 + 1\\l"], ["n = n * 3 + 1\\l", "if n % 2 == 1:\\l", "while n > 1:\\l", "if n % 2 == 0:\\l", "n = n / 2\\l"], ["n = n * 3 + 1\\l", "if n % 2 == 1:\\l", "odd_collatz.append(int(n))\\l", "while n > 1:\\l", "if n % 2 == 0:\\l", "n = n / 2\\l"], ["odd_collatz.append(int(n))\\l", "while n > 1:\\l", "if n % 2 == 0:\\l", "n = n / 2\\l", "if n % 2 == 1:\\l"], ["odd_collatz.append(int(n))\\l", "while n > 1:\\l", "if n % 2 == 0:\\l", "n = n * 3 + 1\\l", "if n % 2 == 1:\\l"], ["from typing import *\\ldef get_odd_collatz(n):...\\lget_odd_collatz(1)\\l", "get_odd_collatz", "if n % 2 == 0:\\l", "odd_collatz = []\\l", "while n > 1:\\l", "return sorted(odd_collatz)\\l"], ["from typing import *\\ldef get_odd_collatz(n):...\\lget_odd_collatz(1)\\l", "get_odd_collatz", "if n % 2 == 0:\\l", "odd_collatz = [n]\\l", "while n > 1:\\l", "return sorted(odd_collatz)\\l"], ["from typing import *\\ldef get_odd_collatz(n):...\\lget_odd_collatz(1)\\l", "get_odd_collatz", "if n % 2 == 0:\\l", "odd_collatz = []\\l", "while n > 1:\\l", "if n % 2 == 0:\\l", "n = n / 2\\l", "if n % 2 == 1:\\l", "odd_collatz.append(int(n))\\l"], ["from typing import *\\ldef get_odd_collatz(n):...\\lget_odd_collatz(1)\\l", "get_odd_collatz", "if n % 2 == 0:\\l", "odd_collatz = []\\l", "while n > 1:\\l", "if n % 2 == 0:\\l", "n = n * 3 + 1\\l", "if n % 2 == 1:\\l", "odd_collatz.append(int(n))\\l"], ["from typing import *\\ldef get_odd_collatz(n):...\\lget_odd_collatz(1)\\l", "get_odd_collatz", "if n % 2 == 0:\\l", "odd_collatz = [n]\\l", "while n > 1:\\l", "if n % 2 == 0:\\l", "n = n / 2\\l", "if n % 2 == 1:\\l", "odd_collatz.append(int(n))\\l"], ["from typing import *\\ldef get_odd_collatz(n):...\\lget_odd_collatz(1)\\l", "get_odd_collatz", "if n % 2 == 0:\\l", "odd_collatz = [n]\\l", "while n > 1:\\l", "if n % 2 == 0:\\l", "n = n * 3 + 1\\l", "if n % 2 == 1:\\l", "odd_collatz.append(int(n))\\l"]], "prime_paths_linenumbers": [[10, 11, 15, 9, 18], [10, 11, 15, 16, 9, 18], [10, 13, 15, 9, 18], [10, 13, 15, 16, 9, 18], [11, 15, 9, 10, 13], [11, 15, 16, 9, 10, 13], [13, 15, 9, 10, 11], [13, 15, 16, 9, 10, 11], [16, 9, 10, 11, 15], [16, 9, 10, 13, 15], [1, 20, 5, 6, 9, 18], [1, 20, 5, 8, 9, 18], [1, 20, 5, 6, 9, 10, 11, 15, 16], [1, 20, 5, 6, 9, 10, 13, 15, 16], [1, 20, 5, 8, 9, 10, 11, 15, 16], [1, 20, 5, 8, 9, 10, 13, 15, 16]], "covered_statements_linenumbers": [1, 4, 5, 8, 9, 18, 20], "missing_statements_linenumbers": [6, 10, 11, 13, 15, 16], "covered_prime_paths_linenumbers": [[1, 20, 5, 8, 9, 18]], "missing_prime_paths_linenumbers": [[10, 11, 15, 9, 18], [10, 11, 15, 16, 9, 18], [10, 13, 15, 9, 18], [10, 13, 15, 16, 9, 18], [11, 15, 9, 10, 13], [11, 15, 16, 9, 10, 13], [13, 15, 9, 10, 11], [13, 15, 16, 9, 10, 11], [16, 9, 10, 11, 15], [16, 9, 10, 13, 15], [1, 20, 5, 6, 9, 18], [1, 20, 5, 6, 9, 10, 11, 15, 16], [1, 20, 5, 6, 9, 10, 13, 15, 16], [1, 20, 5, 8, 9, 10, 11, 15, 16], [1, 20, 5, 8, 9, 10, 13, 15, 16]], "num_total_prime_paths": 16, "num_covered_paths": 1, "prime_path_coverage": 0.06, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_123__0_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_123__0_CFG.dot"}
{"humaneval_id": "HumanEval_110", "python_file": "HumanEval_110/main.py", "input_file": "HumanEval_110/input.txt", "prime_paths_nodes": [["5", "4", "6", "9", "11"], ["5", "7", "4", "6", "9", "11"], ["5", "4", "6", "10", "13"], ["5", "7", "4", "6", "10", "13"], ["5", "4", "6", "10", "14"], ["5", "7", "4", "6", "10", "14"], ["7", "4", "5"], ["9", "6", "10", "13"], ["9", "11", "6", "10", "13"], ["9", "6", "10", "14"], ["9", "11", "6", "10", "14"], ["11", "6", "9"], ["1", "18", "3", "4", "5", "7"], ["1", "18", "3", "4", "6", "9", "11"], ["1", "18", "3", "4", "6", "10", "13"], ["1", "18", "3", "4", "6", "10", "14"]], "prime_paths_statements": [["if i % 2 == 1:\\l", "for i in lst1:\\l", "for i in lst2:\\l", "if i % 2 == 0:\\l", "even += 1\\l"], ["if i % 2 == 1:\\l", "odd += 1\\l", "for i in lst1:\\l", "for i in lst2:\\l", "if i % 2 == 0:\\l", "even += 1\\l"], ["if i % 2 == 1:\\l", "for i in lst1:\\l", "for i in lst2:\\l", "if even >= odd:\\l", "return 'YES'\\l"], ["if i % 2 == 1:\\l", "odd += 1\\l", "for i in lst1:\\l", "for i in lst2:\\l", "if even >= odd:\\l", "return 'YES'\\l"], ["if i % 2 == 1:\\l", "for i in lst1:\\l", "for i in lst2:\\l", "if even >= odd:\\l", "return 'NO'\\l"], ["if i % 2 == 1:\\l", "odd += 1\\l", "for i in lst1:\\l", "for i in lst2:\\l", "if even >= odd:\\l", "return 'NO'\\l"], ["odd += 1\\l", "for i in lst1:\\l", "if i % 2 == 1:\\l"], ["if i % 2 == 0:\\l", "for i in lst2:\\l", "if even >= odd:\\l", "return 'YES'\\l"], ["if i % 2 == 0:\\l", "even += 1\\l", "for i in lst2:\\l", "if even >= odd:\\l", "return 'YES'\\l"], ["if i % 2 == 0:\\l", "for i in lst2:\\l", "if even >= odd:\\l", "return 'NO'\\l"], ["if i % 2 == 0:\\l", "even += 1\\l", "for i in lst2:\\l", "if even >= odd:\\l", "return 'NO'\\l"], ["even += 1\\l", "for i in lst2:\\l", "if i % 2 == 0:\\l"], ["from typing import *\\ldef exchange(lst1, lst2):...\\lexchange([1, 2, 3, 4], [1, 2, 3, 4])\\l", "exchange", "odd = 0\\leven = 0\\l", "for i in lst1:\\l", "if i % 2 == 1:\\l", "odd += 1\\l"], ["from typing import *\\ldef exchange(lst1, lst2):...\\lexchange([1, 2, 3, 4], [1, 2, 3, 4])\\l", "exchange", "odd = 0\\leven = 0\\l", "for i in lst1:\\l", "for i in lst2:\\l", "if i % 2 == 0:\\l", "even += 1\\l"], ["from typing import *\\ldef exchange(lst1, lst2):...\\lexchange([1, 2, 3, 4], [1, 2, 3, 4])\\l", "exchange", "odd = 0\\leven = 0\\l", "for i in lst1:\\l", "for i in lst2:\\l", "if even >= odd:\\l", "return 'YES'\\l"], ["from typing import *\\ldef exchange(lst1, lst2):...\\lexchange([1, 2, 3, 4], [1, 2, 3, 4])\\l", "exchange", "odd = 0\\leven = 0\\l", "for i in lst1:\\l", "for i in lst2:\\l", "if even >= odd:\\l", "return 'NO'\\l"]], "prime_paths_linenumbers": [[6, 5, 8, 9, 10], [6, 7, 5, 8, 9, 10], [6, 5, 8, 11, 12], [6, 7, 5, 8, 11, 12], [6, 5, 8, 11, 13], [6, 7, 5, 8, 11, 13], [7, 5, 6], [9, 8, 11, 12], [9, 10, 8, 11, 12], [9, 8, 11, 13], [9, 10, 8, 11, 13], [10, 8, 9], [1, 16, 3, 4, 5, 6, 7], [1, 16, 3, 4, 5, 8, 9, 10], [1, 16, 3, 4, 5, 8, 11, 12], [1, 16, 3, 4, 5, 8, 11, 13]], "covered_statements_linenumbers": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 16], "missing_statements_linenumbers": [13], "covered_prime_paths_linenumbers": [[6, 5, 8, 9, 10], [6, 7, 5, 8, 9, 10], [6, 5, 8, 11, 12], [6, 7, 5, 8, 11, 12], [7, 5, 6], [9, 8, 11, 12], [9, 10, 8, 11, 12], [10, 8, 9], [1, 16, 3, 4, 5, 6, 7], [1, 16, 3, 4, 5, 8, 9, 10], [1, 16, 3, 4, 5, 8, 11, 12]], "missing_prime_paths_linenumbers": [[6, 5, 8, 11, 13], [6, 7, 5, 8, 11, 13], [9, 8, 11, 13], [9, 10, 8, 11, 13], [1, 16, 3, 4, 5, 8, 11, 13]], "num_total_prime_paths": 16, "num_covered_paths": 11, "prime_path_coverage": 0.69, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_110_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_110_CFG.dot"}
{"humaneval_id": "HumanEval_68__0", "python_file": "HumanEval_68__0/main.py", "input_file": "HumanEval_68__0/input.txt", "prime_paths_nodes": [["1", "16", "3", "5"], ["1", "16", "3", "6", "10", "11"], ["1", "16", "3", "6", "10", "12"]], "prime_paths_statements": [["from typing import *\\ldef pluck(arr):...\\lpluck([])\\l", "pluck", "if len(arr) == 0:\\l", "return []\\l"], ["from typing import *\\ldef pluck(arr):...\\lpluck([])\\l", "pluck", "if len(arr) == 0:\\l", "evens = list(filter(lambda x: x % 2 == 0, arr))\\l", "if evens == []:\\l", "return []\\l"], ["from typing import *\\ldef pluck(arr):...\\lpluck([])\\l", "pluck", "if len(arr) == 0:\\l", "evens = list(filter(lambda x: x % 2 == 0, arr))\\l", "if evens == []:\\l", "return [min(evens), arr.index(min(evens))]\\l"]], "prime_paths_linenumbers": [[1, 12, 5, 6], [1, 12, 5, 7, 8, 9], [1, 12, 5, 7, 8, 10]], "covered_statements_linenumbers": [1, 4, 5, 6, 12], "missing_statements_linenumbers": [7, 8, 9, 10], "covered_prime_paths_linenumbers": [[1, 12, 5, 6]], "missing_prime_paths_linenumbers": [[1, 12, 5, 7, 8, 9], [1, 12, 5, 7, 8, 10]], "num_total_prime_paths": 3, "num_covered_paths": 1, "prime_path_coverage": 0.33, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_68__0_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_68__0_CFG.dot"}
{"humaneval_id": "HumanEval_65__1", "python_file": "HumanEval_65__1/main.py", "input_file": "HumanEval_65__1/input.txt", "prime_paths_nodes": [["1", "13", "3", "5", "7"], ["1", "13", "3", "5", "9"]], "prime_paths_statements": [["from typing import *\\ldef circular_shift(x, shift):...\\lcircular_shift(12, 1)\\l", "circular_shift", "s = str(x)\\l", "if shift > len(s):\\l", "return s[::-1]\\l"], ["from typing import *\\ldef circular_shift(x, shift):...\\lcircular_shift(12, 1)\\l", "circular_shift", "s = str(x)\\l", "if shift > len(s):\\l", "return s[len(s) - shift:] + s[:len(s) - shift]\\l"]], "prime_paths_linenumbers": [[1, 11, 5, 6, 7], [1, 11, 5, 6, 9]], "covered_statements_linenumbers": [1, 4, 5, 6, 9, 11], "missing_statements_linenumbers": [7], "covered_prime_paths_linenumbers": [[1, 11, 5, 6, 9]], "missing_prime_paths_linenumbers": [[1, 11, 5, 6, 7]], "num_total_prime_paths": 2, "num_covered_paths": 1, "prime_path_coverage": 0.5, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_65__1_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_65__1_CFG.dot"}
{"humaneval_id": "HumanEval_4__0", "python_file": "HumanEval_4__0/main.py", "input_file": "HumanEval_4__0/input.txt", "prime_paths_nodes": [["1", "9", "3", "6"]], "prime_paths_statements": [["from typing import *\\ldef mean_absolute_deviation(numbers: List[float]) ->float:...\\lmean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\\l", "mean_absolute_deviation", "mean = sum(numbers) / len(numbers)\\l", "return sum(abs(x - mean) for x in numbers) / len(numbers)\\l"]], "prime_paths_linenumbers": [[1, 8, 5, 6]], "covered_statements_linenumbers": [1, 4, 5, 6, 8], "missing_statements_linenumbers": [], "covered_prime_paths_linenumbers": [[1, 8, 5, 6]], "missing_prime_paths_linenumbers": [], "num_total_prime_paths": 1, "num_covered_paths": 1, "prime_path_coverage": 1.0, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_4__0_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_4__0_CFG.dot"}
{"humaneval_id": "HumanEval_160__1", "python_file": "HumanEval_160__1/main.py", "input_file": "HumanEval_160__1/input.txt", "prime_paths_nodes": [["7", "5", "8"], ["1", "12", "3", "5", "7"], ["1", "12", "3", "5", "8"]], "prime_paths_statements": [["expression += oprt + str(oprn)\\l", "for oprt, oprn in zip(operator, operand[1:]):\\l", "return eval(expression)\\l"], ["from typing import *\\ldef do_algebra(operator, operand):...\\ldo_algebra(['+', '*', '-'], [2, 3, 4, 5])\\l", "do_algebra", "expression = str(operand[0])\\l", "for oprt, oprn in zip(operator, operand[1:]):\\l", "expression += oprt + str(oprn)\\l"], ["from typing import *\\ldef do_algebra(operator, operand):...\\ldo_algebra(['+', '*', '-'], [2, 3, 4, 5])\\l", "do_algebra", "expression = str(operand[0])\\l", "for oprt, oprn in zip(operator, operand[1:]):\\l", "return eval(expression)\\l"]], "prime_paths_linenumbers": [[7, 6, 8], [1, 10, 5, 6, 7], [1, 10, 5, 6, 8]], "covered_statements_linenumbers": [1, 4, 5, 6, 7, 8, 10], "missing_statements_linenumbers": [], "covered_prime_paths_linenumbers": [[7, 6, 8], [1, 10, 5, 6, 7], [1, 10, 5, 6, 8]], "missing_prime_paths_linenumbers": [], "num_total_prime_paths": 3, "num_covered_paths": 3, "prime_path_coverage": 1.0, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_160__1_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_160__1_CFG.dot"}
{"humaneval_id": "HumanEval_162__1", "python_file": "HumanEval_162__1/main.py", "input_file": "HumanEval_162__1/input.txt", "prime_paths_nodes": [["1", "7", "3", "4"]], "prime_paths_statements": [["from typing import *\\ldef string_to_md5(text):...\\lstring_to_md5('A B C')\\l", "string_to_md5", "import hashlib\\l", "return hashlib.md5(text.encode('ascii')).hexdigest() if text else None\\l"]], "prime_paths_linenumbers": [[1, 8, 5, 6]], "covered_statements_linenumbers": [1, 4, 5, 6, 8], "missing_statements_linenumbers": [], "covered_prime_paths_linenumbers": [[1, 8, 5, 6]], "missing_prime_paths_linenumbers": [], "num_total_prime_paths": 1, "num_covered_paths": 1, "prime_path_coverage": 1.0, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_162__1_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_162__1_CFG.dot"}
{"humaneval_id": "HumanEval_83", "python_file": "HumanEval_83/main.py", "input_file": "HumanEval_83/input.txt", "prime_paths_nodes": [["1", "9", "3", "4"], ["1", "9", "3", "5"]], "prime_paths_statements": [["from typing import *\\ldef starts_one_ends(n):...\\lstarts_one_ends(1)\\l", "starts_one_ends", "if n == 1:\\l", "return 1\\l"], ["from typing import *\\ldef starts_one_ends(n):...\\lstarts_one_ends(1)\\l", "starts_one_ends", "if n == 1:\\l", "return 18 * 10 ** (n - 2)\\l"]], "prime_paths_linenumbers": [[1, 6, 3, 3], [1, 6, 3, 4]], "covered_statements_linenumbers": [1, 2, 3, 6], "missing_statements_linenumbers": [4], "covered_prime_paths_linenumbers": [[1, 6, 3, 3]], "missing_prime_paths_linenumbers": [[1, 6, 3, 4]], "num_total_prime_paths": 2, "num_covered_paths": 1, "prime_path_coverage": 0.5, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_83_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_83_CFG.dot"}
{"humaneval_id": "HumanEval_72__0", "python_file": "HumanEval_72__0/main.py", "input_file": "HumanEval_72__0/input.txt", "prime_paths_nodes": [["10", "13", "9", "11"], ["13", "9", "10", "12"], ["1", "17", "3", "5"], ["1", "17", "3", "6", "9", "11"], ["1", "17", "3", "6", "9", "10", "12"], ["1", "17", "3", "6", "9", "10", "13"]], "prime_paths_statements": [["if q[i] != q[j]:\\l", "i += 1\\lj -= 1\\l", "while i < j:\\l", "return True\\l"], ["i += 1\\lj -= 1\\l", "while i < j:\\l", "if q[i] != q[j]:\\l", "return False\\l"], ["from typing import *\\ldef will_it_fly(q, w):...\\lwill_it_fly([3, 2, 3], 1)\\l", "will_it_fly", "if sum(q) > w:\\l", "return False\\l"], ["from typing import *\\ldef will_it_fly(q, w):...\\lwill_it_fly([3, 2, 3], 1)\\l", "will_it_fly", "if sum(q) > w:\\l", "i, j = 0, len(q) - 1\\l", "while i < j:\\l", "return True\\l"], ["from typing import *\\ldef will_it_fly(q, w):...\\lwill_it_fly([3, 2, 3], 1)\\l", "will_it_fly", "if sum(q) > w:\\l", "i, j = 0, len(q) - 1\\l", "while i < j:\\l", "if q[i] != q[j]:\\l", "return False\\l"], ["from typing import *\\ldef will_it_fly(q, w):...\\lwill_it_fly([3, 2, 3], 1)\\l", "will_it_fly", "if sum(q) > w:\\l", "i, j = 0, len(q) - 1\\l", "while i < j:\\l", "if q[i] != q[j]:\\l", "i += 1\\lj -= 1\\l"]], "prime_paths_linenumbers": [[10, 12, 13, 9, 14], [12, 13, 9, 10, 11], [1, 16, 5, 6], [1, 16, 5, 8, 9, 14], [1, 16, 5, 8, 9, 10, 11], [1, 16, 5, 8, 9, 10, 12, 13]], "covered_statements_linenumbers": [1, 4, 5, 6, 16], "missing_statements_linenumbers": [8, 9, 10, 11, 12, 13, 14], "covered_prime_paths_linenumbers": [[1, 16, 5, 6]], "missing_prime_paths_linenumbers": [[10, 12, 13, 9, 14], [12, 13, 9, 10, 11], [1, 16, 5, 8, 9, 14], [1, 16, 5, 8, 9, 10, 11], [1, 16, 5, 8, 9, 10, 12, 13]], "num_total_prime_paths": 6, "num_covered_paths": 1, "prime_path_coverage": 0.17, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_72__0_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_72__0_CFG.dot"}
{"humaneval_id": "HumanEval_86", "python_file": "HumanEval_86/main.py", "input_file": "HumanEval_86/input.txt", "prime_paths_nodes": [["1", "6", "3"]], "prime_paths_statements": [["from typing import *\\ldef anti_shuffle(s):...\\lanti_shuffle('Hi')\\l", "anti_shuffle", "return ' '.join([''.join(sorted(list(i)...' ')])\\l"]], "prime_paths_linenumbers": [[1, 5, 3]], "covered_statements_linenumbers": [1, 2, 3, 5], "missing_statements_linenumbers": [], "covered_prime_paths_linenumbers": [[1, 5, 3]], "missing_prime_paths_linenumbers": [], "num_total_prime_paths": 1, "num_covered_paths": 1, "prime_path_coverage": 1.0, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_86_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_86_CFG.dot"}
{"humaneval_id": "HumanEval_42__0", "python_file": "HumanEval_42__0/main.py", "input_file": "HumanEval_42__0/input.txt", "prime_paths_nodes": [["1", "6", "3"]], "prime_paths_statements": [["from typing import *\\ldef incr_list(l: list):...\\lincr_list([3, 2, 1])\\l", "incr_list", "return [(e + 1) for e in l]\\l"]], "prime_paths_linenumbers": [[1, 7, 5]], "covered_statements_linenumbers": [1, 4, 5, 7], "missing_statements_linenumbers": [], "covered_prime_paths_linenumbers": [[1, 7, 5]], "missing_prime_paths_linenumbers": [], "num_total_prime_paths": 1, "num_covered_paths": 1, "prime_path_coverage": 1.0, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_42__0_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_42__0_CFG.dot"}
{"humaneval_id": "HumanEval_63__0", "python_file": "HumanEval_63__0/main.py", "input_file": "HumanEval_63__0/input.txt", "prime_paths_nodes": [["1", "15", "3", "4"], ["1", "15", "3", "5", "7"], ["1", "15", "3", "5", "8", "10"], ["1", "15", "3", "5", "8", "11"]], "prime_paths_statements": [["from typing import *\\ldef fibfib(n: int):...\\lfibfib(1)\\l", "fibfib", "if n == 0:\\l", "return 0\\l"], ["from typing import *\\ldef fibfib(n: int):...\\lfibfib(1)\\l", "fibfib", "if n == 0:\\l", "if n == 1:\\l", "return 0\\l"], ["from typing import *\\ldef fibfib(n: int):...\\lfibfib(1)\\l", "fibfib", "if n == 0:\\l", "if n == 1:\\l", "if n == 2:\\l", "return 1\\l"], ["from typing import *\\ldef fibfib(n: int):...\\lfibfib(1)\\l", "fibfib", "if n == 0:\\l", "if n == 1:\\l", "if n == 2:\\l", "return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\\l"]], "prime_paths_linenumbers": [[1, 13, 5, 6], [1, 13, 5, 7, 8], [1, 13, 5, 7, 9, 10], [1, 13, 5, 7, 9, 11]], "covered_statements_linenumbers": [1, 4, 5, 7, 8, 13], "missing_statements_linenumbers": [6, 9, 10, 11], "covered_prime_paths_linenumbers": [[1, 13, 5, 7, 8]], "missing_prime_paths_linenumbers": [[1, 13, 5, 6], [1, 13, 5, 7, 9, 10], [1, 13, 5, 7, 9, 11]], "num_total_prime_paths": 4, "num_covered_paths": 1, "prime_path_coverage": 0.25, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_63__0_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_63__0_CFG.dot"}
{"humaneval_id": "HumanEval_128__1", "python_file": "HumanEval_128__1/main.py", "input_file": "HumanEval_128__1/input.txt", "prime_paths_nodes": [["1", "13", "3", "4"], ["1", "13", "3", "5", "10"]], "prime_paths_statements": [["from typing import *\\ldef prod_signs(arr):...\\lprod_signs([1, 1, 1, 2, 3, -1, 1])\\l", "prod_signs", "if not arr:\\l", "return None\\l"], ["from typing import *\\ldef prod_signs(arr):...\\lprod_signs([1, 1, 1, 2, 3, -1, 1])\\l", "prod_signs", "if not arr:\\l", "prod = 0 if 0 in arr else (-1) ** len(list(filter(lambda x: x < 0, arr)))\\l", "return prod * sum([abs(i) for i in arr])\\l"]], "prime_paths_linenumbers": [[1, 10, 5, 6], [1, 10, 5, 7, 8]], "covered_statements_linenumbers": [1, 4, 5, 7, 8, 10], "missing_statements_linenumbers": [6], "covered_prime_paths_linenumbers": [[1, 10, 5, 7, 8]], "missing_prime_paths_linenumbers": [[1, 10, 5, 6]], "num_total_prime_paths": 2, "num_covered_paths": 1, "prime_path_coverage": 0.5, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_128__1_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_128__1_CFG.dot"}
{"humaneval_id": "HumanEval_78", "python_file": "HumanEval_78/main.py", "input_file": "HumanEval_78/input.txt", "prime_paths_nodes": [["7", "4", "8"], ["7", "9", "4", "8"], ["9", "4", "7"], ["1", "13", "3", "4", "8"], ["1", "13", "3", "4", "7", "9"]], "prime_paths_statements": [["if num[i] in primes:\\l", "for i in range(0, len(num)):\\l", "return total\\l"], ["if num[i] in primes:\\l", "total += 1\\l", "for i in range(0, len(num)):\\l", "return total\\l"], ["total += 1\\l", "for i in range(0, len(num)):\\l", "if num[i] in primes:\\l"], ["from typing import *\\ldef hex_key(num):...\\lhex_key('AB')\\l", "hex_key", "primes = '2', '3', '5', '7', 'B', 'D'\\ltotal = 0\\l", "for i in range(0, len(num)):\\l", "return total\\l"], ["from typing import *\\ldef hex_key(num):...\\lhex_key('AB')\\l", "hex_key", "primes = '2', '3', '5', '7', 'B', 'D'\\ltotal = 0\\l", "for i in range(0, len(num)):\\l", "if num[i] in primes:\\l", "total += 1\\l"]], "prime_paths_linenumbers": [[6, 5, 8], [6, 7, 5, 8], [7, 5, 6], [1, 10, 3, 4, 5, 8], [1, 10, 3, 4, 5, 6, 7]], "covered_statements_linenumbers": [1, 2, 3, 4, 5, 6, 7, 8, 10], "missing_statements_linenumbers": [], "covered_prime_paths_linenumbers": [[6, 5, 8], [6, 7, 5, 8], [7, 5, 6], [1, 10, 3, 4, 5, 8], [1, 10, 3, 4, 5, 6, 7]], "missing_prime_paths_linenumbers": [], "num_total_prime_paths": 5, "num_covered_paths": 5, "prime_path_coverage": 1.0, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_78_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_78_CFG.dot"}
{"humaneval_id": "HumanEval_89", "python_file": "HumanEval_89/main.py", "input_file": "HumanEval_89/input.txt", "prime_paths_nodes": [["5", "7", "4", "6"], ["5", "9", "4", "6"], ["7", "4", "5", "9"], ["9", "4", "5", "7"], ["1", "13", "3", "4", "6"], ["1", "13", "3", "4", "5", "7"], ["1", "13", "3", "4", "5", "9"]], "prime_paths_statements": [["if c in d:\\l", "out += d[(d.index(c) + 2 * 2) % 26]\\l", "for c in s:\\l", "return out\\l"], ["if c in d:\\l", "out += c\\l", "for c in s:\\l", "return out\\l"], ["out += d[(d.index(c) + 2 * 2) % 26]\\l", "for c in s:\\l", "if c in d:\\l", "out += c\\l"], ["out += c\\l", "for c in s:\\l", "if c in d:\\l", "out += d[(d.index(c) + 2 * 2) % 26]\\l"], ["from typing import *\\ldef encrypt(s):...\\lencrypt('hi')\\l", "encrypt", "d = 'abcdefghijklmnopqrst...'\\lout = ''\\l", "for c in s:\\l", "return out\\l"], ["from typing import *\\ldef encrypt(s):...\\lencrypt('hi')\\l", "encrypt", "d = 'abcdefghijklmnopqrst...'\\lout = ''\\l", "for c in s:\\l", "if c in d:\\l", "out += d[(d.index(c) + 2 * 2) % 26]\\l"], ["from typing import *\\ldef encrypt(s):...\\lencrypt('hi')\\l", "encrypt", "d = 'abcdefghijklmnopqrst...'\\lout = ''\\l", "for c in s:\\l", "if c in d:\\l", "out += c\\l"]], "prime_paths_linenumbers": [[6, 7, 5, 10], [6, 9, 5, 10], [7, 5, 6, 9], [9, 5, 6, 7], [1, 12, 3, 4, 5, 10], [1, 12, 3, 4, 5, 6, 7], [1, 12, 3, 4, 5, 6, 9]], "covered_statements_linenumbers": [1, 2, 3, 4, 5, 6, 7, 10, 12], "missing_statements_linenumbers": [9], "covered_prime_paths_linenumbers": [[6, 7, 5, 10], [1, 12, 3, 4, 5, 10], [1, 12, 3, 4, 5, 6, 7]], "missing_prime_paths_linenumbers": [[6, 9, 5, 10], [7, 5, 6, 9], [9, 5, 6, 7], [1, 12, 3, 4, 5, 6, 9]], "num_total_prime_paths": 7, "num_covered_paths": 3, "prime_path_coverage": 0.43, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_89_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_89_CFG.dot"}
{"humaneval_id": "HumanEval_76__1", "python_file": "HumanEval_76__1/main.py", "input_file": "HumanEval_76__1/input.txt", "prime_paths_nodes": [["8", "7", "9"], ["1", "12", "3", "4"], ["1", "12", "3", "5", "7", "8"], ["1", "12", "3", "5", "7", "9"]], "prime_paths_statements": [["power = power * n\\l", "while power < x:\\l", "return power == x\\l"], ["from typing import *\\ldef is_simple_power(x, n):...\\lis_simple_power(128, 4)\\l", "is_simple_power", "if n == 1:\\l", "return x == 1\\l"], ["from typing import *\\ldef is_simple_power(x, n):...\\lis_simple_power(128, 4)\\l", "is_simple_power", "if n == 1:\\l", "power = 1\\l", "while power < x:\\l", "power = power * n\\l"], ["from typing import *\\ldef is_simple_power(x, n):...\\lis_simple_power(128, 4)\\l", "is_simple_power", "if n == 1:\\l", "power = 1\\l", "while power < x:\\l", "return power == x\\l"]], "prime_paths_linenumbers": [[9, 8, 10], [1, 12, 5, 6], [1, 12, 5, 7, 8, 9], [1, 12, 5, 7, 8, 10]], "covered_statements_linenumbers": [1, 4, 5, 7, 8, 9, 10, 12], "missing_statements_linenumbers": [6], "covered_prime_paths_linenumbers": [[9, 8, 10], [1, 12, 5, 7, 8, 9], [1, 12, 5, 7, 8, 10]], "missing_prime_paths_linenumbers": [[1, 12, 5, 6]], "num_total_prime_paths": 4, "num_covered_paths": 3, "prime_path_coverage": 0.75, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_76__1_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_76__1_CFG.dot"}
{"humaneval_id": "HumanEval_69", "python_file": "HumanEval_69/main.py", "input_file": "HumanEval_69/input.txt", "prime_paths_nodes": [["6", "5", "7", "8", "12"], ["6", "5", "7", "8", "11", "13"], ["11", "8", "12"], ["11", "13", "8", "12"], ["13", "8", "11"], ["1", "17", "3", "5", "6"], ["1", "17", "3", "5", "7", "8", "12"], ["1", "17", "3", "5", "7", "8", "11", "13"]], "prime_paths_statements": [["frq[i] += 1\\l", "for i in lst:\\l", "ans = -1\\l", "for i in range(1, len(frq)):\\l", "return ans\\l"], ["frq[i] += 1\\l", "for i in lst:\\l", "ans = -1\\l", "for i in range(1, len(frq)):\\l", "if frq[i] >= i:\\l", "ans = i\\l"], ["if frq[i] >= i:\\l", "for i in range(1, len(frq)):\\l", "return ans\\l"], ["if frq[i] >= i:\\l", "ans = i\\l", "for i in range(1, len(frq)):\\l", "return ans\\l"], ["ans = i\\l", "for i in range(1, len(frq)):\\l", "if frq[i] >= i:\\l"], ["from typing import *\\ldef search(lst):...\\lsearch([5, 5, 5, 5, 1])\\l", "search", "frq = [0] * (max(lst) + 1)\\l", "for i in lst:\\l", "frq[i] += 1\\l"], ["from typing import *\\ldef search(lst):...\\lsearch([5, 5, 5, 5, 1])\\l", "search", "frq = [0] * (max(lst) + 1)\\l", "for i in lst:\\l", "ans = -1\\l", "for i in range(1, len(frq)):\\l", "return ans\\l"], ["from typing import *\\ldef search(lst):...\\lsearch([5, 5, 5, 5, 1])\\l", "search", "frq = [0] * (max(lst) + 1)\\l", "for i in lst:\\l", "ans = -1\\l", "for i in range(1, len(frq)):\\l", "if frq[i] >= i:\\l", "ans = i\\l"]], "prime_paths_linenumbers": [[5, 4, 7, 8, 12], [5, 4, 7, 8, 9, 10], [9, 8, 12], [9, 10, 8, 12], [10, 8, 9], [1, 14, 3, 4, 5], [1, 14, 3, 4, 7, 8, 12], [1, 14, 3, 4, 7, 8, 9, 10]], "covered_statements_linenumbers": [1, 2, 3, 4, 5, 7, 8, 9, 10, 12, 14], "missing_statements_linenumbers": [], "covered_prime_paths_linenumbers": [[5, 4, 7, 8, 12], [5, 4, 7, 8, 9, 10], [9, 8, 12], [9, 10, 8, 12], [10, 8, 9], [1, 14, 3, 4, 5], [1, 14, 3, 4, 7, 8, 12], [1, 14, 3, 4, 7, 8, 9, 10]], "missing_prime_paths_linenumbers": [], "num_total_prime_paths": 8, "num_covered_paths": 8, "prime_path_coverage": 1.0, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_69_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_69_CFG.dot"}
{"humaneval_id": "HumanEval_53__0", "python_file": "HumanEval_53__0/main.py", "input_file": "HumanEval_53__0/input.txt", "prime_paths_nodes": [["1", "6", "3"]], "prime_paths_statements": [["from typing import *\\ldef add(x: int, y: int):...\\ladd(7, 5)\\l", "add", "return x + y\\l"]], "prime_paths_linenumbers": [[1, 7, 5]], "covered_statements_linenumbers": [1, 4, 5, 7], "missing_statements_linenumbers": [], "covered_prime_paths_linenumbers": [[1, 7, 5]], "missing_prime_paths_linenumbers": [], "num_total_prime_paths": 1, "num_covered_paths": 1, "prime_path_coverage": 1.0, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_53__0_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_53__0_CFG.dot"}
{"humaneval_id": "HumanEval_45__0", "python_file": "HumanEval_45__0/main.py", "input_file": "HumanEval_45__0/input.txt", "prime_paths_nodes": [["1", "6", "3"]], "prime_paths_statements": [["from typing import *\\ldef triangle_area(a, h):...\\ltriangle_area(10, 8)\\l", "triangle_area", "return a * h / 2.0\\l"]], "prime_paths_linenumbers": [[1, 7, 5]], "covered_statements_linenumbers": [1, 4, 5, 7], "missing_statements_linenumbers": [], "covered_prime_paths_linenumbers": [[1, 7, 5]], "missing_prime_paths_linenumbers": [], "num_total_prime_paths": 1, "num_covered_paths": 1, "prime_path_coverage": 1.0, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_45__0_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_45__0_CFG.dot"}
{"humaneval_id": "HumanEval_121__1", "python_file": "HumanEval_121__1/main.py", "input_file": "HumanEval_121__1/input.txt", "prime_paths_nodes": [["1", "6", "3"]], "prime_paths_statements": [["from typing import *\\ldef solution(lst):...\\lsolution([30, 13, 23, 32])\\l", "solution", "return sum([x for idx, x in enumerate(lst) if idx % 2 == 0 and x % 2 == 1])\\l"]], "prime_paths_linenumbers": [[1, 7, 5]], "covered_statements_linenumbers": [1, 4, 5, 7], "missing_statements_linenumbers": [], "covered_prime_paths_linenumbers": [[1, 7, 5]], "missing_prime_paths_linenumbers": [], "num_total_prime_paths": 1, "num_covered_paths": 1, "prime_path_coverage": 1.0, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_121__1_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_121__1_CFG.dot"}
{"humaneval_id": "HumanEval_55", "python_file": "HumanEval_55/main.py", "input_file": "HumanEval_55/input.txt", "prime_paths_nodes": [["1", "12", "3", "4"], ["1", "12", "3", "5", "7"], ["1", "12", "3", "5", "8"]], "prime_paths_statements": [["from typing import *\\ldef fib(n: int):...\\lfib(10)\\l", "fib", "if n == 0:\\l", "return 0\\l"], ["from typing import *\\ldef fib(n: int):...\\lfib(10)\\l", "fib", "if n == 0:\\l", "if n == 1:\\l", "return 1\\l"], ["from typing import *\\ldef fib(n: int):...\\lfib(10)\\l", "fib", "if n == 0:\\l", "if n == 1:\\l", "return fib(n - 1) + fib(n - 2)\\l"]], "prime_paths_linenumbers": [[1, 9, 3, 4], [1, 9, 3, 5, 6], [1, 9, 3, 5, 7]], "covered_statements_linenumbers": [1, 2, 3, 4, 5, 6, 7, 9], "missing_statements_linenumbers": [], "covered_prime_paths_linenumbers": [[1, 9, 3, 4], [1, 9, 3, 5, 6], [1, 9, 3, 5, 7]], "missing_prime_paths_linenumbers": [], "num_total_prime_paths": 3, "num_covered_paths": 3, "prime_path_coverage": 1.0, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_55_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_55_CFG.dot"}
{"humaneval_id": "HumanEval_67__1", "python_file": "HumanEval_67__1/main.py", "input_file": "HumanEval_67__1/input.txt", "prime_paths_nodes": [["7", "5", "8"], ["7", "10", "5", "8"], ["10", "5", "7"], ["1", "16", "3", "5", "8"], ["1", "16", "3", "5", "7", "10"]], "prime_paths_statements": [["if i.isdigit():\\l", "for i in s.split(' '):\\l", "return n - sum(lis)\\l"], ["if i.isdigit():\\l", "lis.append(int(i))\\l", "for i in s.split(' '):\\l", "return n - sum(lis)\\l"], ["lis.append(int(i))\\l", "for i in s.split(' '):\\l", "if i.isdigit():\\l"], ["from typing import *\\ldef fruit_distribution(s, n):...\\lfruit_distribution('5 apples and 6 orang...', 21)\\l", "fruit_distribution", "lis = list()\\l", "for i in s.split(' '):\\l", "return n - sum(lis)\\l"], ["from typing import *\\ldef fruit_distribution(s, n):...\\lfruit_distribution('5 apples and 6 orang...', 21)\\l", "fruit_distribution", "lis = list()\\l", "for i in s.split(' '):\\l", "if i.isdigit():\\l", "lis.append(int(i))\\l"]], "prime_paths_linenumbers": [[7, 6, 9], [7, 8, 6, 9], [8, 6, 7], [1, 11, 5, 6, 9], [1, 11, 5, 6, 7, 8]], "covered_statements_linenumbers": [1, 4, 5, 6, 7, 8, 9, 11], "missing_statements_linenumbers": [], "covered_prime_paths_linenumbers": [[7, 6, 9], [7, 8, 6, 9], [8, 6, 7], [1, 11, 5, 6, 9], [1, 11, 5, 6, 7, 8]], "missing_prime_paths_linenumbers": [], "num_total_prime_paths": 5, "num_covered_paths": 5, "prime_path_coverage": 1.0, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_67__1_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_67__1_CFG.dot"}
{"humaneval_id": "HumanEval_144__1", "python_file": "HumanEval_144__1/main.py", "input_file": "HumanEval_144__1/input.txt", "prime_paths_nodes": [["1", "17", "3", "10", "12"], ["1", "17", "3", "10", "13"]], "prime_paths_statements": [["from typing import *\\ldef simplify(x, n):...\\lsimplify('5/1', '3/1')\\l", "simplify", "a, b = x.split('/')\\lc, d = n.split('/')\\lnumerator = int(a) * int(c)\\ldenom = int(b) * int(d)\\l", "if numerator / denom == int(numerator / denom):\\l", "return True\\l"], ["from typing import *\\ldef simplify(x, n):...\\lsimplify('5/1', '3/1')\\l", "simplify", "a, b = x.split('/')\\lc, d = n.split('/')\\lnumerator = int(a) * int(c)\\ldenom = int(b) * int(d)\\l", "if numerator / denom == int(numerator / denom):\\l", "return False\\l"]], "prime_paths_linenumbers": [[1, 13, 5, 6, 7, 8, 9, 10], [1, 13, 5, 6, 7, 8, 9, 11]], "covered_statements_linenumbers": [1, 4, 5, 6, 7, 8, 9, 10, 13], "missing_statements_linenumbers": [11], "covered_prime_paths_linenumbers": [[1, 13, 5, 6, 7, 8, 9, 10]], "missing_prime_paths_linenumbers": [[1, 13, 5, 6, 7, 8, 9, 11]], "num_total_prime_paths": 2, "num_covered_paths": 1, "prime_path_coverage": 0.5, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_144__1_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_144__1_CFG.dot"}
{"humaneval_id": "HumanEval_30__1", "python_file": "HumanEval_30__1/main.py", "input_file": "HumanEval_30__1/input.txt", "prime_paths_nodes": [["1", "6", "3"]], "prime_paths_statements": [["from typing import *\\ldef get_positive(l: list):...\\lget_positive([-1, -2])\\l", "get_positive", "return [e for e in l if e > 0]\\l"]], "prime_paths_linenumbers": [[1, 7, 5]], "covered_statements_linenumbers": [1, 4, 5, 7], "missing_statements_linenumbers": [], "covered_prime_paths_linenumbers": [[1, 7, 5]], "missing_prime_paths_linenumbers": [], "num_total_prime_paths": 1, "num_covered_paths": 1, "prime_path_coverage": 1.0, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_30__1_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_30__1_CFG.dot"}
{"humaneval_id": "HumanEval_106__1", "python_file": "HumanEval_106__1/main.py", "input_file": "HumanEval_106__1/input.txt", "prime_paths_nodes": [["6", "8", "15", "18", "4", "7"], ["6", "10", "11", "14", "4", "7"], ["8", "15", "18", "4", "6", "10", "11", "13"], ["8", "15", "18", "4", "6", "10", "11", "14"], ["10", "11", "14", "4", "6", "8", "15", "17"], ["10", "11", "14", "4", "6", "8", "15", "18"], ["17", "15", "18", "4", "7"], ["17", "15", "18", "4", "6", "8"], ["17", "15", "18", "4", "6", "10", "11", "13"], ["17", "15", "18", "4", "6", "10", "11", "14"], ["18", "4", "6", "8", "15", "17"], ["13", "11", "14", "4", "7"], ["13", "11", "14", "4", "6", "10"], ["13", "11", "14", "4", "6", "8", "15", "17"], ["13", "11", "14", "4", "6", "8", "15", "18"], ["14", "4", "6", "10", "11", "13"], ["1", "21", "3", "4", "7"], ["1", "21", "3", "4", "6", "8", "15", "17"], ["1", "21", "3", "4", "6", "8", "15", "18"], ["1", "21", "3", "4", "6", "10", "11", "13"], ["1", "21", "3", "4", "6", "10", "11", "14"]], "prime_paths_statements": [["if i % 2 == 0:\\l", "x = 1\\l", "for j in range(1, i + 1):\\l", "ret += [x]\\l", "for i in range(1, n + 1):\\l", "return ret\\l"], ["if i % 2 == 0:\\l", "x = 0\\l", "for j in range(1, i + 1):\\l", "ret += [x]\\l", "for i in range(1, n + 1):\\l", "return ret\\l"], ["x = 1\\l", "for j in range(1, i + 1):\\l", "ret += [x]\\l", "for i in range(1, n + 1):\\l", "if i % 2 == 0:\\l", "x = 0\\l", "for j in range(1, i + 1):\\l", "x += j\\l"], ["x = 1\\l", "for j in range(1, i + 1):\\l", "ret += [x]\\l", "for i in range(1, n + 1):\\l", "if i % 2 == 0:\\l", "x = 0\\l", "for j in range(1, i + 1):\\l", "ret += [x]\\l"], ["x = 0\\l", "for j in range(1, i + 1):\\l", "ret += [x]\\l", "for i in range(1, n + 1):\\l", "if i % 2 == 0:\\l", "x = 1\\l", "for j in range(1, i + 1):\\l", "x *= j\\l"], ["x = 0\\l", "for j in range(1, i + 1):\\l", "ret += [x]\\l", "for i in range(1, n + 1):\\l", "if i % 2 == 0:\\l", "x = 1\\l", "for j in range(1, i + 1):\\l", "ret += [x]\\l"], ["x *= j\\l", "for j in range(1, i + 1):\\l", "ret += [x]\\l", "for i in range(1, n + 1):\\l", "return ret\\l"], ["x *= j\\l", "for j in range(1, i + 1):\\l", "ret += [x]\\l", "for i in range(1, n + 1):\\l", "if i % 2 == 0:\\l", "x = 1\\l"], ["x *= j\\l", "for j in range(1, i + 1):\\l", "ret += [x]\\l", "for i in range(1, n + 1):\\l", "if i % 2 == 0:\\l", "x = 0\\l", "for j in range(1, i + 1):\\l", "x += j\\l"], ["x *= j\\l", "for j in range(1, i + 1):\\l", "ret += [x]\\l", "for i in range(1, n + 1):\\l", "if i % 2 == 0:\\l", "x = 0\\l", "for j in range(1, i + 1):\\l", "ret += [x]\\l"], ["ret += [x]\\l", "for i in range(1, n + 1):\\l", "if i % 2 == 0:\\l", "x = 1\\l", "for j in range(1, i + 1):\\l", "x *= j\\l"], ["x += j\\l", "for j in range(1, i + 1):\\l", "ret += [x]\\l", "for i in range(1, n + 1):\\l", "return ret\\l"], ["x += j\\l", "for j in range(1, i + 1):\\l", "ret += [x]\\l", "for i in range(1, n + 1):\\l", "if i % 2 == 0:\\l", "x = 0\\l"], ["x += j\\l", "for j in range(1, i + 1):\\l", "ret += [x]\\l", "for i in range(1, n + 1):\\l", "if i % 2 == 0:\\l", "x = 1\\l", "for j in range(1, i + 1):\\l", "x *= j\\l"], ["x += j\\l", "for j in range(1, i + 1):\\l", "ret += [x]\\l", "for i in range(1, n + 1):\\l", "if i % 2 == 0:\\l", "x = 1\\l", "for j in range(1, i + 1):\\l", "ret += [x]\\l"], ["ret += [x]\\l", "for i in range(1, n + 1):\\l", "if i % 2 == 0:\\l", "x = 0\\l", "for j in range(1, i + 1):\\l", "x += j\\l"], ["from typing import *\\ldef f(n):...\\lf(7)\\l", "f", "ret = []\\l", "for i in range(1, n + 1):\\l", "return ret\\l"], ["from typing import *\\ldef f(n):...\\lf(7)\\l", "f", "ret = []\\l", "for i in range(1, n + 1):\\l", "if i % 2 == 0:\\l", "x = 1\\l", "for j in range(1, i + 1):\\l", "x *= j\\l"], ["from typing import *\\ldef f(n):...\\lf(7)\\l", "f", "ret = []\\l", "for i in range(1, n + 1):\\l", "if i % 2 == 0:\\l", "x = 1\\l", "for j in range(1, i + 1):\\l", "ret += [x]\\l"], ["from typing import *\\ldef f(n):...\\lf(7)\\l", "f", "ret = []\\l", "for i in range(1, n + 1):\\l", "if i % 2 == 0:\\l", "x = 0\\l", "for j in range(1, i + 1):\\l", "x += j\\l"], ["from typing import *\\ldef f(n):...\\lf(7)\\l", "f", "ret = []\\l", "for i in range(1, n + 1):\\l", "if i % 2 == 0:\\l", "x = 0\\l", "for j in range(1, i + 1):\\l", "ret += [x]\\l"]], "prime_paths_linenumbers": [[7, 8, 9, 11, 6, 17], [7, 13, 14, 16, 6, 17], [8, 9, 11, 6, 7, 13, 14, 15], [8, 9, 11, 6, 7, 13, 14, 16], [13, 14, 16, 6, 7, 8, 9, 10], [13, 14, 16, 6, 7, 8, 9, 11], [10, 9, 11, 6, 17], [10, 9, 11, 6, 7, 8], [10, 9, 11, 6, 7, 13, 14, 15], [10, 9, 11, 6, 7, 13, 14, 16], [11, 6, 7, 8, 9, 10], [15, 14, 16, 6, 17], [15, 14, 16, 6, 7, 13], [15, 14, 16, 6, 7, 8, 9, 10], [15, 14, 16, 6, 7, 8, 9, 11], [16, 6, 7, 13, 14, 15], [1, 19, 5, 6, 17], [1, 19, 5, 6, 7, 8, 9, 10], [1, 19, 5, 6, 7, 8, 9, 11], [1, 19, 5, 6, 7, 13, 14, 15], [1, 19, 5, 6, 7, 13, 14, 16]], "covered_statements_linenumbers": [1, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 19], "missing_statements_linenumbers": [], "covered_prime_paths_linenumbers": [[7, 8, 9, 11, 6, 17], [7, 13, 14, 16, 6, 17], [8, 9, 11, 6, 7, 13, 14, 15], [8, 9, 11, 6, 7, 13, 14, 16], [13, 14, 16, 6, 7, 8, 9, 10], [13, 14, 16, 6, 7, 8, 9, 11], [10, 9, 11, 6, 17], [10, 9, 11, 6, 7, 8], [10, 9, 11, 6, 7, 13, 14, 15], [10, 9, 11, 6, 7, 13, 14, 16], [11, 6, 7, 8, 9, 10], [15, 14, 16, 6, 17], [15, 14, 16, 6, 7, 13], [15, 14, 16, 6, 7, 8, 9, 10], [15, 14, 16, 6, 7, 8, 9, 11], [16, 6, 7, 13, 14, 15], [1, 19, 5, 6, 17], [1, 19, 5, 6, 7, 8, 9, 10], [1, 19, 5, 6, 7, 8, 9, 11], [1, 19, 5, 6, 7, 13, 14, 15], [1, 19, 5, 6, 7, 13, 14, 16]], "missing_prime_paths_linenumbers": [], "num_total_prime_paths": 21, "num_covered_paths": 21, "prime_path_coverage": 1.0, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_106__1_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_106__1_CFG.dot"}
{"humaneval_id": "HumanEval_156__1", "python_file": "HumanEval_156__1/main.py", "input_file": "HumanEval_156__1/input.txt", "prime_paths_nodes": [["5", "7", "9", "4", "6"], ["8", "7", "9", "4", "5"], ["8", "7", "9", "4", "6"], ["9", "4", "5", "7", "8"], ["1", "12", "3", "4", "6"], ["1", "13", "3", "4", "6"], ["1", "12", "3", "4", "5", "7", "8"], ["1", "13", "3", "4", "5", "7", "8"], ["1", "12", "3", "4", "5", "7", "9"], ["1", "13", "3", "4", "5", "7", "9"]], "prime_paths_statements": [["div = number // num[i]\\lnumber %= num[i]\\l", "while div:\\l", "i -= 1\\l", "while number:\\l", "return res.lower()\\l"], ["res += sym[i]\\ldiv -= 1\\l", "while div:\\l", "i -= 1\\l", "while number:\\l", "div = number // num[i]\\lnumber %= num[i]\\l"], ["res += sym[i]\\ldiv -= 1\\l", "while div:\\l", "i -= 1\\l", "while number:\\l", "return res.lower()\\l"], ["i -= 1\\l", "while number:\\l", "div = number // num[i]\\lnumber %= num[i]\\l", "while div:\\l", "res += sym[i]\\ldiv -= 1\\l"], ["from typing import *\\ldef int_to_mini_roman(number):...\\lint_to_mini_roman(152)\\lint_to_mini_roman(152)\\l", "int_to_mini_roman", "num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\\lsym = ['I', 'IV', 'V', 'IX', 'X', 'XL', 'L', 'XC', 'C', 'CD', 'D', 'CM', 'M']\\li = 12\\lres = ''\\l", "while number:\\l", "return res.lower()\\l"], ["from typing import *\\ldef int_to_mini_roman(number):...\\lint_to_mini_roman(152)\\lint_to_mini_roman(152)\\l", "int_to_mini_roman", "num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\\lsym = ['I', 'IV', 'V', 'IX', 'X', 'XL', 'L', 'XC', 'C', 'CD', 'D', 'CM', 'M']\\li = 12\\lres = ''\\l", "while number:\\l", "return res.lower()\\l"], ["from typing import *\\ldef int_to_mini_roman(number):...\\lint_to_mini_roman(152)\\lint_to_mini_roman(152)\\l", "int_to_mini_roman", "num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\\lsym = ['I', 'IV', 'V', 'IX', 'X', 'XL', 'L', 'XC', 'C', 'CD', 'D', 'CM', 'M']\\li = 12\\lres = ''\\l", "while number:\\l", "div = number // num[i]\\lnumber %= num[i]\\l", "while div:\\l", "res += sym[i]\\ldiv -= 1\\l"], ["from typing import *\\ldef int_to_mini_roman(number):...\\lint_to_mini_roman(152)\\lint_to_mini_roman(152)\\l", "int_to_mini_roman", "num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\\lsym = ['I', 'IV', 'V', 'IX', 'X', 'XL', 'L', 'XC', 'C', 'CD', 'D', 'CM', 'M']\\li = 12\\lres = ''\\l", "while number:\\l", "div = number // num[i]\\lnumber %= num[i]\\l", "while div:\\l", "res += sym[i]\\ldiv -= 1\\l"], ["from typing import *\\ldef int_to_mini_roman(number):...\\lint_to_mini_roman(152)\\lint_to_mini_roman(152)\\l", "int_to_mini_roman", "num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\\lsym = ['I', 'IV', 'V', 'IX', 'X', 'XL', 'L', 'XC', 'C', 'CD', 'D', 'CM', 'M']\\li = 12\\lres = ''\\l", "while number:\\l", "div = number // num[i]\\lnumber %= num[i]\\l", "while div:\\l", "i -= 1\\l"], ["from typing import *\\ldef int_to_mini_roman(number):...\\lint_to_mini_roman(152)\\lint_to_mini_roman(152)\\l", "int_to_mini_roman", "num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\\lsym = ['I', 'IV', 'V', 'IX', 'X', 'XL', 'L', 'XC', 'C', 'CD', 'D', 'CM', 'M']\\li = 12\\lres = ''\\l", "while number:\\l", "div = number // num[i]\\lnumber %= num[i]\\l", "while div:\\l", "i -= 1\\l"]], "prime_paths_linenumbers": [[12, 13, 14, 17, 11, 18], [15, 16, 14, 17, 11, 12, 13], [15, 16, 14, 17, 11, 18], [17, 11, 12, 13, 14, 15, 16], [1, 19, 5, 7, 9, 10, 11, 18], [1, 20, 5, 7, 9, 10, 11, 18], [1, 19, 5, 7, 9, 10, 11, 12, 13, 14, 15, 16], [1, 20, 5, 7, 9, 10, 11, 12, 13, 14, 15, 16], [1, 19, 5, 7, 9, 10, 11, 12, 13, 14, 17], [1, 20, 5, 7, 9, 10, 11, 12, 13, 14, 17]], "covered_statements_linenumbers": [1, 4, 5, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], "missing_statements_linenumbers": [], "covered_prime_paths_linenumbers": [[12, 13, 14, 17, 11, 18], [15, 16, 14, 17, 11, 12, 13], [15, 16, 14, 17, 11, 18], [17, 11, 12, 13, 14, 15, 16], [1, 19, 5, 7, 9, 10, 11, 18], [1, 20, 5, 7, 9, 10, 11, 18], [1, 19, 5, 7, 9, 10, 11, 12, 13, 14, 15, 16], [1, 20, 5, 7, 9, 10, 11, 12, 13, 14, 15, 16], [1, 19, 5, 7, 9, 10, 11, 12, 13, 14, 17], [1, 20, 5, 7, 9, 10, 11, 12, 13, 14, 17]], "missing_prime_paths_linenumbers": [], "num_total_prime_paths": 10, "num_covered_paths": 10, "prime_path_coverage": 1.0, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_156__1_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_156__1_CFG.dot"}
{"humaneval_id": "HumanEval_104__0", "python_file": "HumanEval_104__0/main.py", "input_file": "HumanEval_104__0/input.txt", "prime_paths_nodes": [["5", "4", "6"], ["5", "10", "4", "6"], ["10", "4", "5"], ["1", "15", "3", "4", "6"], ["1", "15", "3", "4", "5", "10"]], "prime_paths_statements": [["if all(int(c) % 2 == 1 for c in str(i)):\\l", "for i in x:\\l", "return sorted(odd_digit_elements)\\l"], ["if all(int(c) % 2 == 1 for c in str(i)):\\l", "odd_digit_elements.append(i)\\l", "for i in x:\\l", "return sorted(odd_digit_elements)\\l"], ["odd_digit_elements.append(i)\\l", "for i in x:\\l", "if all(int(c) % 2 == 1 for c in str(i)):\\l"], ["from typing import *\\ldef unique_digits(x):...\\lunique_digits([135, 103, 31])\\l", "unique_digits", "odd_digit_elements = []\\l", "for i in x:\\l", "return sorted(odd_digit_elements)\\l"], ["from typing import *\\ldef unique_digits(x):...\\lunique_digits([135, 103, 31])\\l", "unique_digits", "odd_digit_elements = []\\l", "for i in x:\\l", "if all(int(c) % 2 == 1 for c in str(i)):\\l", "odd_digit_elements.append(i)\\l"]], "prime_paths_linenumbers": [[7, 6, 9], [7, 8, 6, 9], [8, 6, 7], [1, 11, 5, 6, 9], [1, 11, 5, 6, 7, 8]], "covered_statements_linenumbers": [1, 4, 5, 6, 7, 8, 9, 11], "missing_statements_linenumbers": [], "covered_prime_paths_linenumbers": [[7, 6, 9], [7, 8, 6, 9], [8, 6, 7], [1, 11, 5, 6, 9], [1, 11, 5, 6, 7, 8]], "missing_prime_paths_linenumbers": [], "num_total_prime_paths": 5, "num_covered_paths": 5, "prime_path_coverage": 1.0, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_104__0_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_104__0_CFG.dot"}
{"humaneval_id": "HumanEval_121__0", "python_file": "HumanEval_121__0/main.py", "input_file": "HumanEval_121__0/input.txt", "prime_paths_nodes": [["1", "6", "3"]], "prime_paths_statements": [["from typing import *\\ldef solution(lst):...\\lsolution([2, 4, 8])\\l", "solution", "return sum([x for idx, x in enumerate(lst) if idx % 2 == 0 and x % 2 == 1])\\l"]], "prime_paths_linenumbers": [[1, 7, 5]], "covered_statements_linenumbers": [1, 4, 5, 7], "missing_statements_linenumbers": [], "covered_prime_paths_linenumbers": [[1, 7, 5]], "missing_prime_paths_linenumbers": [], "num_total_prime_paths": 1, "num_covered_paths": 1, "prime_path_coverage": 1.0, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_121__0_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_121__0_CFG.dot"}
{"humaneval_id": "HumanEval_107", "python_file": "HumanEval_107/main.py", "input_file": "HumanEval_107/input.txt", "prime_paths_nodes": [["10", "12", "8", "11"], ["10", "14", "8", "11"], ["10", "14", "15", "8", "11"], ["12", "8", "10", "14", "15"], ["14", "8", "10", "12"], ["14", "15", "8", "10", "12"], ["15", "8", "10", "14"], ["1", "19", "3", "8", "11"], ["1", "19", "3", "8", "10", "12"], ["1", "19", "3", "8", "10", "14", "15"]], "prime_paths_statements": [["if i % 2 == 1 and is_palindrome(i):\\l", "odd_palindrome_count += 1\\l", "for i in range(1, n + 1):\\l", "return even_palindrome_count, odd_palindrome_count\\l"], ["if i % 2 == 1 and is_palindrome(i):\\l", "if i % 2 == 0 and is_palindrome(i):\\l", "for i in range(1, n + 1):\\l", "return even_palindrome_count, odd_palindrome_count\\l"], ["if i % 2 == 1 and is_palindrome(i):\\l", "if i % 2 == 0 and is_palindrome(i):\\l", "even_palindrome_count += 1\\l", "for i in range(1, n + 1):\\l", "return even_palindrome_count, odd_palindrome_count\\l"], ["odd_palindrome_count += 1\\l", "for i in range(1, n + 1):\\l", "if i % 2 == 1 and is_palindrome(i):\\l", "if i % 2 == 0 and is_palindrome(i):\\l", "even_palindrome_count += 1\\l"], ["if i % 2 == 0 and is_palindrome(i):\\l", "for i in range(1, n + 1):\\l", "if i % 2 == 1 and is_palindrome(i):\\l", "odd_palindrome_count += 1\\l"], ["if i % 2 == 0 and is_palindrome(i):\\l", "even_palindrome_count += 1\\l", "for i in range(1, n + 1):\\l", "if i % 2 == 1 and is_palindrome(i):\\l", "odd_palindrome_count += 1\\l"], ["even_palindrome_count += 1\\l", "for i in range(1, n + 1):\\l", "if i % 2 == 1 and is_palindrome(i):\\l", "if i % 2 == 0 and is_palindrome(i):\\l"], ["from typing import *\\ldef even_odd_palindrome(n):...\\leven_odd_palindrome(123)\\l", "even_odd_palindrome", "def is_palindrome(n):...\\leven_palindrome_count = 0\\lodd_palindrome_count = 0\\l", "for i in range(1, n + 1):\\l", "return even_palindrome_count, odd_palindrome_count\\l"], ["from typing import *\\ldef even_odd_palindrome(n):...\\leven_odd_palindrome(123)\\l", "even_odd_palindrome", "def is_palindrome(n):...\\leven_palindrome_count = 0\\lodd_palindrome_count = 0\\l", "for i in range(1, n + 1):\\l", "if i % 2 == 1 and is_palindrome(i):\\l", "odd_palindrome_count += 1\\l"], ["from typing import *\\ldef even_odd_palindrome(n):...\\leven_odd_palindrome(123)\\l", "even_odd_palindrome", "def is_palindrome(n):...\\leven_palindrome_count = 0\\lodd_palindrome_count = 0\\l", "for i in range(1, n + 1):\\l", "if i % 2 == 1 and is_palindrome(i):\\l", "if i % 2 == 0 and is_palindrome(i):\\l", "even_palindrome_count += 1\\l"]], "prime_paths_linenumbers": [[10, 11, 9, 14], [10, 12, 9, 14], [10, 12, 13, 9, 14], [11, 9, 10, 12, 13], [12, 9, 10, 11], [12, 13, 9, 10, 11], [13, 9, 10, 12], [1, 16, 3, 6, 7, 9, 14], [1, 16, 3, 6, 7, 9, 10, 11], [1, 16, 3, 6, 7, 9, 10, 12, 13]], "covered_statements_linenumbers": [1, 2, 3, 4, 6, 7, 9, 10, 11, 12, 13, 14, 16], "missing_statements_linenumbers": [], "covered_prime_paths_linenumbers": [[10, 11, 9, 14], [10, 12, 9, 14], [10, 12, 13, 9, 14], [11, 9, 10, 12, 13], [12, 9, 10, 11], [12, 13, 9, 10, 11], [13, 9, 10, 12], [1, 16, 3, 6, 7, 9, 14], [1, 16, 3, 6, 7, 9, 10, 11], [1, 16, 3, 6, 7, 9, 10, 12, 13]], "missing_prime_paths_linenumbers": [], "num_total_prime_paths": 10, "num_covered_paths": 10, "prime_path_coverage": 1.0, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_107_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_107_CFG.dot"}
{"humaneval_id": "HumanEval_40__0", "python_file": "HumanEval_40__0/main.py", "input_file": "HumanEval_40__0/input.txt", "prime_paths_nodes": [["14", "10", "6", "3", "7"], ["1", "21", "3", "7"], ["1", "21", "3", "6", "10", "14", "16"]], "prime_paths_statements": [["if l[i] + l[j] + l[k] == 0:\\l", "for k in range(j + 1, len(l)):\\l", "for j in range(i + 1, len(l)):\\l", "for i in range(len(l)):\\l", "return False\\l"], ["from typing import *\\ldef triples_sum_to_zero(l: list):...\\ltriples_sum_to_zero([1, 2, 3, 7])\\l", "triples_sum_to_zero", "for i in range(len(l)):\\l", "return False\\l"], ["from typing import *\\ldef triples_sum_to_zero(l: list):...\\ltriples_sum_to_zero([1, 2, 3, 7])\\l", "triples_sum_to_zero", "for i in range(len(l)):\\l", "for j in range(i + 1, len(l)):\\l", "for k in range(j + 1, len(l)):\\l", "if l[i] + l[j] + l[k] == 0:\\l", "return True\\l"]], "prime_paths_linenumbers": [[8, 7, 6, 5, 10], [1, 12, 5, 10], [1, 12, 5, 6, 7, 8, 9]], "covered_statements_linenumbers": [1, 4, 5, 6, 7, 8, 10, 12], "missing_statements_linenumbers": [9], "covered_prime_paths_linenumbers": [[8, 7, 6, 5, 10], [1, 12, 5, 10]], "missing_prime_paths_linenumbers": [[1, 12, 5, 6, 7, 8, 9]], "num_total_prime_paths": 3, "num_covered_paths": 2, "prime_path_coverage": 0.67, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_40__0_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_40__0_CFG.dot"}
{"humaneval_id": "HumanEval_6", "python_file": "HumanEval_6/main.py", "input_file": "HumanEval_6/input.txt", "prime_paths_nodes": [["5", "6", "8"], ["5", "6", "7", "9"], ["5", "6", "7", "11"], ["7", "9", "6", "8"], ["7", "11", "6", "8"], ["9", "6", "7", "11"], ["11", "6", "7", "9"], ["1", "18", "3", "15"]], "prime_paths_statements": [["depth = 0\\lmax_depth = 0\\l", "for c in s:\\l", "return max_depth\\l"], ["depth = 0\\lmax_depth = 0\\l", "for c in s:\\l", "if c == '(':\\l", "depth += 1\\lmax_depth = max(depth, max_depth)\\l"], ["depth = 0\\lmax_depth = 0\\l", "for c in s:\\l", "if c == '(':\\l", "depth -= 1\\l"], ["if c == '(':\\l", "depth += 1\\lmax_depth = max(depth, max_depth)\\l", "for c in s:\\l", "return max_depth\\l"], ["if c == '(':\\l", "depth -= 1\\l", "for c in s:\\l", "return max_depth\\l"], ["depth += 1\\lmax_depth = max(depth, max_depth)\\l", "for c in s:\\l", "if c == '(':\\l", "depth -= 1\\l"], ["depth -= 1\\l", "for c in s:\\l", "if c == '(':\\l", "depth += 1\\lmax_depth = max(depth, max_depth)\\l"], ["from typing import *\\ldef parse_nested_parens(paren_string: str) ->List[int]:...\\lparse_nested_parens('(()()) ((())) () (((...')\\l", "parse_nested_parens", "def parse_paren_group(s):...\\l", "return [parse_paren_group(x) for x in paren_string.split(' ') if x]\\l"]], "prime_paths_linenumbers": [[4, 5, 6, 13], [4, 5, 6, 7, 8, 9], [4, 5, 6, 7, 11], [7, 8, 9, 6, 13], [7, 11, 6, 13], [8, 9, 6, 7, 11], [11, 6, 7, 8, 9], [1, 17, 3, 15]], "covered_statements_linenumbers": [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 13, 15, 17], "missing_statements_linenumbers": [], "covered_prime_paths_linenumbers": [[4, 5, 6, 13], [4, 5, 6, 7, 8, 9], [4, 5, 6, 7, 11], [7, 8, 9, 6, 13], [7, 11, 6, 13], [8, 9, 6, 7, 11], [11, 6, 7, 8, 9], [1, 17, 3, 15]], "missing_prime_paths_linenumbers": [], "num_total_prime_paths": 8, "num_covered_paths": 8, "prime_path_coverage": 1.0, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_6_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_6_CFG.dot"}
{"humaneval_id": "HumanEval_137", "python_file": "HumanEval_137/main.py", "input_file": "HumanEval_137/input.txt", "prime_paths_nodes": [["1", "20", "3", "4", "6", "7", "10", "11", "15"], ["1", "20", "3", "4", "6", "7", "11", "15"], ["1", "20", "3", "4", "7", "10", "11", "15"], ["1", "20", "3", "4", "7", "11", "15"], ["1", "20", "3", "4", "6", "7", "10", "11", "16"], ["1", "20", "3", "4", "6", "7", "11", "16"], ["1", "20", "3", "4", "7", "10", "11", "16"], ["1", "20", "3", "4", "7", "11", "16"]], "prime_paths_statements": [["from typing import *\\ldef compare_one(a, b):...\\lcompare_one(1, 2)\\l", "compare_one", "temp_a, temp_b = a, b\\l", "if isinstance(temp_a, str):\\l", "temp_a = temp_a.replace(',', '.')\\l", "if isinstance(temp_b, str):\\l", "temp_b = temp_b.replace(',', '.')\\l", "if float(temp_a) == float(temp_b):\\l", "return None\\l"], ["from typing import *\\ldef compare_one(a, b):...\\lcompare_one(1, 2)\\l", "compare_one", "temp_a, temp_b = a, b\\l", "if isinstance(temp_a, str):\\l", "temp_a = temp_a.replace(',', '.')\\l", "if isinstance(temp_b, str):\\l", "if float(temp_a) == float(temp_b):\\l", "return None\\l"], ["from typing import *\\ldef compare_one(a, b):...\\lcompare_one(1, 2)\\l", "compare_one", "temp_a, temp_b = a, b\\l", "if isinstance(temp_a, str):\\l", "if isinstance(temp_b, str):\\l", "temp_b = temp_b.replace(',', '.')\\l", "if float(temp_a) == float(temp_b):\\l", "return None\\l"], ["from typing import *\\ldef compare_one(a, b):...\\lcompare_one(1, 2)\\l", "compare_one", "temp_a, temp_b = a, b\\l", "if isinstance(temp_a, str):\\l", "if isinstance(temp_b, str):\\l", "if float(temp_a) == float(temp_b):\\l", "return None\\l"], ["from typing import *\\ldef compare_one(a, b):...\\lcompare_one(1, 2)\\l", "compare_one", "temp_a, temp_b = a, b\\l", "if isinstance(temp_a, str):\\l", "temp_a = temp_a.replace(',', '.')\\l", "if isinstance(temp_b, str):\\l", "temp_b = temp_b.replace(',', '.')\\l", "if float(temp_a) == float(temp_b):\\l", "return a if float(temp_a) > float(temp_b) else b\\l"], ["from typing import *\\ldef compare_one(a, b):...\\lcompare_one(1, 2)\\l", "compare_one", "temp_a, temp_b = a, b\\l", "if isinstance(temp_a, str):\\l", "temp_a = temp_a.replace(',', '.')\\l", "if isinstance(temp_b, str):\\l", "if float(temp_a) == float(temp_b):\\l", "return a if float(temp_a) > float(temp_b) else b\\l"], ["from typing import *\\ldef compare_one(a, b):...\\lcompare_one(1, 2)\\l", "compare_one", "temp_a, temp_b = a, b\\l", "if isinstance(temp_a, str):\\l", "if isinstance(temp_b, str):\\l", "temp_b = temp_b.replace(',', '.')\\l", "if float(temp_a) == float(temp_b):\\l", "return a if float(temp_a) > float(temp_b) else b\\l"], ["from typing import *\\ldef compare_one(a, b):...\\lcompare_one(1, 2)\\l", "compare_one", "temp_a, temp_b = a, b\\l", "if isinstance(temp_a, str):\\l", "if isinstance(temp_b, str):\\l", "if float(temp_a) == float(temp_b):\\l", "return a if float(temp_a) > float(temp_b) else b\\l"]], "prime_paths_linenumbers": [[1, 9, 3, 4, 4, 5, 5, 6, 6], [1, 9, 3, 4, 4, 5, 6, 6], [1, 9, 3, 4, 5, 5, 6, 6], [1, 9, 3, 4, 5, 6, 6], [1, 9, 3, 4, 4, 5, 5, 6, 7], [1, 9, 3, 4, 4, 5, 6, 7], [1, 9, 3, 4, 5, 5, 6, 7], [1, 9, 3, 4, 5, 6, 7]], "covered_statements_linenumbers": [1, 2, 3, 4, 5, 6, 7, 9], "missing_statements_linenumbers": [], "covered_prime_paths_linenumbers": [[1, 9, 3, 4, 4, 5, 5, 6, 6], [1, 9, 3, 4, 4, 5, 6, 6], [1, 9, 3, 4, 5, 5, 6, 6], [1, 9, 3, 4, 5, 6, 6], [1, 9, 3, 4, 4, 5, 5, 6, 7], [1, 9, 3, 4, 4, 5, 6, 7], [1, 9, 3, 4, 5, 5, 6, 7], [1, 9, 3, 4, 5, 6, 7]], "missing_prime_paths_linenumbers": [], "num_total_prime_paths": 8, "num_covered_paths": 8, "prime_path_coverage": 1.0, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_137_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_137_CFG.dot"}
{"humaneval_id": "HumanEval_123__1", "python_file": "HumanEval_123__1/main.py", "input_file": "HumanEval_123__1/input.txt", "prime_paths_nodes": [["7", "9", "10", "5", "8"], ["7", "9", "10", "12", "5", "8"], ["7", "11", "10", "5", "8"], ["7", "11", "10", "12", "5", "8"], ["9", "10", "5", "7", "11"], ["9", "10", "12", "5", "7", "11"], ["11", "10", "5", "7", "9"], ["11", "10", "12", "5", "7", "9"], ["12", "5", "7", "9", "10"], ["12", "5", "7", "11", "10"], ["1", "18", "3", "4", "5", "8"], ["1", "18", "3", "6", "5", "8"], ["1", "18", "3", "4", "5", "7", "9", "10", "12"], ["1", "18", "3", "4", "5", "7", "11", "10", "12"], ["1", "18", "3", "6", "5", "7", "9", "10", "12"], ["1", "18", "3", "6", "5", "7", "11", "10", "12"]], "prime_paths_statements": [["if n % 2 == 0:\\l", "n = n / 2\\l", "if n % 2 == 1:\\l", "while n > 1:\\l", "return sorted(odd_collatz)\\l"], ["if n % 2 == 0:\\l", "n = n / 2\\l", "if n % 2 == 1:\\l", "odd_collatz.append(int(n))\\l", "while n > 1:\\l", "return sorted(odd_collatz)\\l"], ["if n % 2 == 0:\\l", "n = n * 3 + 1\\l", "if n % 2 == 1:\\l", "while n > 1:\\l", "return sorted(odd_collatz)\\l"], ["if n % 2 == 0:\\l", "n = n * 3 + 1\\l", "if n % 2 == 1:\\l", "odd_collatz.append(int(n))\\l", "while n > 1:\\l", "return sorted(odd_collatz)\\l"], ["n = n / 2\\l", "if n % 2 == 1:\\l", "while n > 1:\\l", "if n % 2 == 0:\\l", "n = n * 3 + 1\\l"], ["n = n / 2\\l", "if n % 2 == 1:\\l", "odd_collatz.append(int(n))\\l", "while n > 1:\\l", "if n % 2 == 0:\\l", "n = n * 3 + 1\\l"], ["n = n * 3 + 1\\l", "if n % 2 == 1:\\l", "while n > 1:\\l", "if n % 2 == 0:\\l", "n = n / 2\\l"], ["n = n * 3 + 1\\l", "if n % 2 == 1:\\l", "odd_collatz.append(int(n))\\l", "while n > 1:\\l", "if n % 2 == 0:\\l", "n = n / 2\\l"], ["odd_collatz.append(int(n))\\l", "while n > 1:\\l", "if n % 2 == 0:\\l", "n = n / 2\\l", "if n % 2 == 1:\\l"], ["odd_collatz.append(int(n))\\l", "while n > 1:\\l", "if n % 2 == 0:\\l", "n = n * 3 + 1\\l", "if n % 2 == 1:\\l"], ["from typing import *\\ldef get_odd_collatz(n):...\\lget_odd_collatz(5)\\l", "get_odd_collatz", "if n % 2 == 0:\\l", "odd_collatz = []\\l", "while n > 1:\\l", "return sorted(odd_collatz)\\l"], ["from typing import *\\ldef get_odd_collatz(n):...\\lget_odd_collatz(5)\\l", "get_odd_collatz", "if n % 2 == 0:\\l", "odd_collatz = [n]\\l", "while n > 1:\\l", "return sorted(odd_collatz)\\l"], ["from typing import *\\ldef get_odd_collatz(n):...\\lget_odd_collatz(5)\\l", "get_odd_collatz", "if n % 2 == 0:\\l", "odd_collatz = []\\l", "while n > 1:\\l", "if n % 2 == 0:\\l", "n = n / 2\\l", "if n % 2 == 1:\\l", "odd_collatz.append(int(n))\\l"], ["from typing import *\\ldef get_odd_collatz(n):...\\lget_odd_collatz(5)\\l", "get_odd_collatz", "if n % 2 == 0:\\l", "odd_collatz = []\\l", "while n > 1:\\l", "if n % 2 == 0:\\l", "n = n * 3 + 1\\l", "if n % 2 == 1:\\l", "odd_collatz.append(int(n))\\l"], ["from typing import *\\ldef get_odd_collatz(n):...\\lget_odd_collatz(5)\\l", "get_odd_collatz", "if n % 2 == 0:\\l", "odd_collatz = [n]\\l", "while n > 1:\\l", "if n % 2 == 0:\\l", "n = n / 2\\l", "if n % 2 == 1:\\l", "odd_collatz.append(int(n))\\l"], ["from typing import *\\ldef get_odd_collatz(n):...\\lget_odd_collatz(5)\\l", "get_odd_collatz", "if n % 2 == 0:\\l", "odd_collatz = [n]\\l", "while n > 1:\\l", "if n % 2 == 0:\\l", "n = n * 3 + 1\\l", "if n % 2 == 1:\\l", "odd_collatz.append(int(n))\\l"]], "prime_paths_linenumbers": [[10, 11, 15, 9, 18], [10, 11, 15, 16, 9, 18], [10, 13, 15, 9, 18], [10, 13, 15, 16, 9, 18], [11, 15, 9, 10, 13], [11, 15, 16, 9, 10, 13], [13, 15, 9, 10, 11], [13, 15, 16, 9, 10, 11], [16, 9, 10, 11, 15], [16, 9, 10, 13, 15], [1, 20, 5, 6, 9, 18], [1, 20, 5, 8, 9, 18], [1, 20, 5, 6, 9, 10, 11, 15, 16], [1, 20, 5, 6, 9, 10, 13, 15, 16], [1, 20, 5, 8, 9, 10, 11, 15, 16], [1, 20, 5, 8, 9, 10, 13, 15, 16]], "covered_statements_linenumbers": [1, 4, 5, 8, 9, 10, 11, 13, 15, 16, 18, 20], "missing_statements_linenumbers": [6], "covered_prime_paths_linenumbers": [[10, 11, 15, 9, 18], [10, 11, 15, 16, 9, 18], [10, 13, 15, 9, 18], [10, 13, 15, 16, 9, 18], [11, 15, 9, 10, 13], [11, 15, 16, 9, 10, 13], [13, 15, 9, 10, 11], [13, 15, 16, 9, 10, 11], [16, 9, 10, 11, 15], [16, 9, 10, 13, 15], [1, 20, 5, 8, 9, 18], [1, 20, 5, 8, 9, 10, 11, 15, 16], [1, 20, 5, 8, 9, 10, 13, 15, 16]], "missing_prime_paths_linenumbers": [[1, 20, 5, 6, 9, 18], [1, 20, 5, 6, 9, 10, 11, 15, 16], [1, 20, 5, 6, 9, 10, 13, 15, 16]], "num_total_prime_paths": 16, "num_covered_paths": 13, "prime_path_coverage": 0.81, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_123__1_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_123__1_CFG.dot"}
{"humaneval_id": "HumanEval_161", "python_file": "HumanEval_161/main.py", "input_file": "HumanEval_161/input.txt", "prime_paths_nodes": [["6", "9", "10", "5", "7", "12", "13"], ["6", "10", "5", "7", "12", "13"], ["6", "9", "10", "5", "7", "12", "14", "15"], ["6", "10", "5", "7", "12", "14", "15"], ["6", "9", "10", "5", "7", "12", "14", "16"], ["6", "10", "5", "7", "12", "14", "16"], ["9", "10", "5", "6"], ["10", "5", "6", "9"], ["13", "12", "14", "15"], ["13", "12", "14", "16"], ["1", "20", "3", "5", "6", "9", "10"], ["1", "20", "3", "5", "6", "10"], ["1", "20", "3", "5", "7", "12", "13"], ["1", "20", "3", "5", "7", "12", "14", "15"], ["1", "20", "3", "5", "7", "12", "14", "16"]], "prime_paths_statements": [["if i.isalpha():\\l", "new_str[idx] = i.swapcase()\\lflg = 1\\l", "idx += 1\\l", "for i in s:\\l", "s = ''\\l", "for i in new_str:\\l", "s += i\\l"], ["if i.isalpha():\\l", "idx += 1\\l", "for i in s:\\l", "s = ''\\l", "for i in new_str:\\l", "s += i\\l"], ["if i.isalpha():\\l", "new_str[idx] = i.swapcase()\\lflg = 1\\l", "idx += 1\\l", "for i in s:\\l", "s = ''\\l", "for i in new_str:\\l", "if flg == 0:\\l", "return s[len(s)::-1]\\l"], ["if i.isalpha():\\l", "idx += 1\\l", "for i in s:\\l", "s = ''\\l", "for i in new_str:\\l", "if flg == 0:\\l", "return s[len(s)::-1]\\l"], ["if i.isalpha():\\l", "new_str[idx] = i.swapcase()\\lflg = 1\\l", "idx += 1\\l", "for i in s:\\l", "s = ''\\l", "for i in new_str:\\l", "if flg == 0:\\l", "return s\\l"], ["if i.isalpha():\\l", "idx += 1\\l", "for i in s:\\l", "s = ''\\l", "for i in new_str:\\l", "if flg == 0:\\l", "return s\\l"], ["new_str[idx] = i.swapcase()\\lflg = 1\\l", "idx += 1\\l", "for i in s:\\l", "if i.isalpha():\\l"], ["idx += 1\\l", "for i in s:\\l", "if i.isalpha():\\l", "new_str[idx] = i.swapcase()\\lflg = 1\\l"], ["s += i\\l", "for i in new_str:\\l", "if flg == 0:\\l", "return s[len(s)::-1]\\l"], ["s += i\\l", "for i in new_str:\\l", "if flg == 0:\\l", "return s\\l"], ["from typing import *\\ldef solve(s):...\\lsolve('AsDf')\\l", "solve", "flg = 0\\lidx = 0\\lnew_str = list(s)\\l", "for i in s:\\l", "if i.isalpha():\\l", "new_str[idx] = i.swapcase()\\lflg = 1\\l", "idx += 1\\l"], ["from typing import *\\ldef solve(s):...\\lsolve('AsDf')\\l", "solve", "flg = 0\\lidx = 0\\lnew_str = list(s)\\l", "for i in s:\\l", "if i.isalpha():\\l", "idx += 1\\l"], ["from typing import *\\ldef solve(s):...\\lsolve('AsDf')\\l", "solve", "flg = 0\\lidx = 0\\lnew_str = list(s)\\l", "for i in s:\\l", "s = ''\\l", "for i in new_str:\\l", "s += i\\l"], ["from typing import *\\ldef solve(s):...\\lsolve('AsDf')\\l", "solve", "flg = 0\\lidx = 0\\lnew_str = list(s)\\l", "for i in s:\\l", "s = ''\\l", "for i in new_str:\\l", "if flg == 0:\\l", "return s[len(s)::-1]\\l"], ["from typing import *\\ldef solve(s):...\\lsolve('AsDf')\\l", "solve", "flg = 0\\lidx = 0\\lnew_str = list(s)\\l", "for i in s:\\l", "s = ''\\l", "for i in new_str:\\l", "if flg == 0:\\l", "return s\\l"]], "prime_paths_linenumbers": [[7, 8, 9, 10, 6, 11, 12, 13], [7, 10, 6, 11, 12, 13], [7, 8, 9, 10, 6, 11, 12, 14, 15], [7, 10, 6, 11, 12, 14, 15], [7, 8, 9, 10, 6, 11, 12, 14, 16], [7, 10, 6, 11, 12, 14, 16], [8, 9, 10, 6, 7], [10, 6, 7, 8, 9], [13, 12, 14, 15], [13, 12, 14, 16], [1, 18, 3, 4, 5, 6, 7, 8, 9, 10], [1, 18, 3, 4, 5, 6, 7, 10], [1, 18, 3, 4, 5, 6, 11, 12, 13], [1, 18, 3, 4, 5, 6, 11, 12, 14, 15], [1, 18, 3, 4, 5, 6, 11, 12, 14, 16]], "covered_statements_linenumbers": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 18], "missing_statements_linenumbers": [15], "covered_prime_paths_linenumbers": [[7, 8, 9, 10, 6, 11, 12, 13], [7, 10, 6, 11, 12, 13], [7, 8, 9, 10, 6, 11, 12, 14, 16], [7, 10, 6, 11, 12, 14, 16], [8, 9, 10, 6, 7], [10, 6, 7, 8, 9], [13, 12, 14, 16], [1, 18, 3, 4, 5, 6, 7, 8, 9, 10], [1, 18, 3, 4, 5, 6, 7, 10], [1, 18, 3, 4, 5, 6, 11, 12, 13], [1, 18, 3, 4, 5, 6, 11, 12, 14, 16]], "missing_prime_paths_linenumbers": [[7, 8, 9, 10, 6, 11, 12, 14, 15], [7, 10, 6, 11, 12, 14, 15], [13, 12, 14, 15], [1, 18, 3, 4, 5, 6, 11, 12, 14, 15]], "num_total_prime_paths": 15, "num_covered_paths": 11, "prime_path_coverage": 0.73, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_161_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_161_CFG.dot"}
{"humaneval_id": "HumanEval_34", "python_file": "HumanEval_34/main.py", "input_file": "HumanEval_34/input.txt", "prime_paths_nodes": [["1", "6", "3"]], "prime_paths_statements": [["from typing import *\\ldef unique(l: list):...\\lunique([5, 3, 5, 2, 3, 3, 9, 0, 123])\\l", "unique", "return sorted(list(set(l)))\\l"]], "prime_paths_linenumbers": [[1, 5, 3]], "covered_statements_linenumbers": [1, 2, 3, 5], "missing_statements_linenumbers": [], "covered_prime_paths_linenumbers": [[1, 5, 3]], "missing_prime_paths_linenumbers": [], "num_total_prime_paths": 1, "num_covered_paths": 1, "prime_path_coverage": 1.0, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_34_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_34_CFG.dot"}
{"humaneval_id": "HumanEval_62", "python_file": "HumanEval_62/main.py", "input_file": "HumanEval_62/input.txt", "prime_paths_nodes": [["1", "6", "3"]], "prime_paths_statements": [["from typing import *\\ldef derivative(xs: list):...\\lderivative([3, 1, 2, 4, 5])\\l", "derivative", "return [(i * x) for i, x in enumerate(xs)][1:]\\l"]], "prime_paths_linenumbers": [[1, 5, 3]], "covered_statements_linenumbers": [1, 2, 3, 5], "missing_statements_linenumbers": [], "covered_prime_paths_linenumbers": [[1, 5, 3]], "missing_prime_paths_linenumbers": [], "num_total_prime_paths": 1, "num_covered_paths": 1, "prime_path_coverage": 1.0, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_62_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_62_CFG.dot"}
{"humaneval_id": "HumanEval_134__0", "python_file": "HumanEval_134__0/main.py", "input_file": "HumanEval_134__0/input.txt", "prime_paths_nodes": [["1", "8", "3", "5"]], "prime_paths_statements": [["from typing import *\\ldef check_if_last_char_is_a_letter(txt):...\\lcheck_if_last_char_is_a_letter('apple pi e ')\\l", "check_if_last_char_is_a_letter", "check = txt.split(' ')[-1]\\l", "return True if len(check) == 1 and 97 <= ord(check.lower()) <= 122 else False\\l"]], "prime_paths_linenumbers": [[1, 10, 6, 7]], "covered_statements_linenumbers": [1, 4, 6, 7, 8, 10], "missing_statements_linenumbers": [], "covered_prime_paths_linenumbers": [[1, 10, 6, 7]], "missing_prime_paths_linenumbers": [], "num_total_prime_paths": 1, "num_covered_paths": 1, "prime_path_coverage": 1.0, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_134__0_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_134__0_CFG.dot"}
{"humaneval_id": "HumanEval_16__0", "python_file": "HumanEval_16__0/main.py", "input_file": "HumanEval_16__0/input.txt", "prime_paths_nodes": [["1", "6", "3"]], "prime_paths_statements": [["from typing import *\\ldef count_distinct_characters(string: str) ->int:...\\lcount_distinct_characters('abcde')\\l", "count_distinct_characters", "return len(set(string.lower()))\\l"]], "prime_paths_linenumbers": [[1, 7, 5]], "covered_statements_linenumbers": [1, 4, 5, 7], "missing_statements_linenumbers": [], "covered_prime_paths_linenumbers": [[1, 7, 5]], "missing_prime_paths_linenumbers": [], "num_total_prime_paths": 1, "num_covered_paths": 1, "prime_path_coverage": 1.0, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_16__0_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_16__0_CFG.dot"}
{"humaneval_id": "HumanEval_142", "python_file": "HumanEval_142/main.py", "input_file": "HumanEval_142/input.txt", "prime_paths_nodes": [["7", "9", "4", "8"], ["7", "11", "12", "4", "8"], ["7", "11", "14", "4", "8"], ["9", "4", "7", "11", "12"], ["9", "4", "7", "11", "14"], ["11", "12", "4", "7", "9"], ["11", "14", "4", "7", "9"], ["12", "4", "7", "11", "14"], ["14", "4", "7", "11", "12"], ["1", "20", "3", "4", "8"], ["1", "20", "3", "4", "7", "9"], ["1", "20", "3", "4", "7", "11", "12"], ["1", "20", "3", "4", "7", "11", "14"]], "prime_paths_statements": [["if i % 3 == 0:\\l", "result.append(lst[i] ** 2)\\l", "for i in range(len(lst)):\\l", "return sum(result)\\l"], ["if i % 3 == 0:\\l", "if i % 4 == 0 and i % 3 != 0:\\l", "result.append(lst[i] ** 3)\\l", "for i in range(len(lst)):\\l", "return sum(result)\\l"], ["if i % 3 == 0:\\l", "if i % 4 == 0 and i % 3 != 0:\\l", "result.append(lst[i])\\l", "for i in range(len(lst)):\\l", "return sum(result)\\l"], ["result.append(lst[i] ** 2)\\l", "for i in range(len(lst)):\\l", "if i % 3 == 0:\\l", "if i % 4 == 0 and i % 3 != 0:\\l", "result.append(lst[i] ** 3)\\l"], ["result.append(lst[i] ** 2)\\l", "for i in range(len(lst)):\\l", "if i % 3 == 0:\\l", "if i % 4 == 0 and i % 3 != 0:\\l", "result.append(lst[i])\\l"], ["if i % 4 == 0 and i % 3 != 0:\\l", "result.append(lst[i] ** 3)\\l", "for i in range(len(lst)):\\l", "if i % 3 == 0:\\l", "result.append(lst[i] ** 2)\\l"], ["if i % 4 == 0 and i % 3 != 0:\\l", "result.append(lst[i])\\l", "for i in range(len(lst)):\\l", "if i % 3 == 0:\\l", "result.append(lst[i] ** 2)\\l"], ["result.append(lst[i] ** 3)\\l", "for i in range(len(lst)):\\l", "if i % 3 == 0:\\l", "if i % 4 == 0 and i % 3 != 0:\\l", "result.append(lst[i])\\l"], ["result.append(lst[i])\\l", "for i in range(len(lst)):\\l", "if i % 3 == 0:\\l", "if i % 4 == 0 and i % 3 != 0:\\l", "result.append(lst[i] ** 3)\\l"], ["from typing import *\\ldef sum_squares(lst):...\\lsum_squares([1, 2, 3])\\l", "sum_squares", "result = []\\l", "for i in range(len(lst)):\\l", "return sum(result)\\l"], ["from typing import *\\ldef sum_squares(lst):...\\lsum_squares([1, 2, 3])\\l", "sum_squares", "result = []\\l", "for i in range(len(lst)):\\l", "if i % 3 == 0:\\l", "result.append(lst[i] ** 2)\\l"], ["from typing import *\\ldef sum_squares(lst):...\\lsum_squares([1, 2, 3])\\l", "sum_squares", "result = []\\l", "for i in range(len(lst)):\\l", "if i % 3 == 0:\\l", "if i % 4 == 0 and i % 3 != 0:\\l", "result.append(lst[i] ** 3)\\l"], ["from typing import *\\ldef sum_squares(lst):...\\lsum_squares([1, 2, 3])\\l", "sum_squares", "result = []\\l", "for i in range(len(lst)):\\l", "if i % 3 == 0:\\l", "if i % 4 == 0 and i % 3 != 0:\\l", "result.append(lst[i])\\l"]], "prime_paths_linenumbers": [[5, 6, 4, 11], [5, 7, 8, 4, 11], [5, 7, 10, 4, 11], [6, 4, 5, 7, 8], [6, 4, 5, 7, 10], [7, 8, 4, 5, 6], [7, 10, 4, 5, 6], [8, 4, 5, 7, 10], [10, 4, 5, 7, 8], [1, 13, 3, 4, 11], [1, 13, 3, 4, 5, 6], [1, 13, 3, 4, 5, 7, 8], [1, 13, 3, 4, 5, 7, 10]], "covered_statements_linenumbers": [1, 2, 3, 4, 5, 6, 7, 10, 11, 13], "missing_statements_linenumbers": [8], "covered_prime_paths_linenumbers": [[5, 6, 4, 11], [5, 7, 10, 4, 11], [6, 4, 5, 7, 10], [7, 10, 4, 5, 6], [1, 13, 3, 4, 11], [1, 13, 3, 4, 5, 6], [1, 13, 3, 4, 5, 7, 10]], "missing_prime_paths_linenumbers": [[5, 7, 8, 4, 11], [6, 4, 5, 7, 8], [7, 8, 4, 5, 6], [8, 4, 5, 7, 10], [10, 4, 5, 7, 8], [1, 13, 3, 4, 5, 7, 8]], "num_total_prime_paths": 13, "num_covered_paths": 7, "prime_path_coverage": 0.54, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_142_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_142_CFG.dot"}
{"humaneval_id": "HumanEval_90__0", "python_file": "HumanEval_90__0/main.py", "input_file": "HumanEval_90__0/input.txt", "prime_paths_nodes": [["1", "9", "3", "6"]], "prime_paths_statements": [["from typing import *\\ldef next_smallest(lst):...\\lnext_smallest([5, 1, 4, 3, 2])\\l", "next_smallest", "lst = sorted(set(lst))\\l", "return None if len(lst) < 2 else lst[1]\\l"]], "prime_paths_linenumbers": [[1, 8, 5, 6]], "covered_statements_linenumbers": [1, 4, 5, 6, 8], "missing_statements_linenumbers": [], "covered_prime_paths_linenumbers": [[1, 8, 5, 6]], "missing_prime_paths_linenumbers": [], "num_total_prime_paths": 1, "num_covered_paths": 1, "prime_path_coverage": 1.0, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_90__0_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_90__0_CFG.dot"}
{"humaneval_id": "HumanEval_115", "python_file": "HumanEval_115/main.py", "input_file": "HumanEval_115/input.txt", "prime_paths_nodes": [["1", "6", "3"]], "prime_paths_statements": [["from typing import *\\limport math\\ldef max_fill(grid, capacity):...\\lmax_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\\l", "max_fill", "return sum([math.ceil(sum(arr) / capacity) for arr in grid])\\l"]], "prime_paths_linenumbers": [[1, 6, 4]], "covered_statements_linenumbers": [1, 2, 3, 4, 6], "missing_statements_linenumbers": [], "covered_prime_paths_linenumbers": [[1, 6, 4]], "missing_prime_paths_linenumbers": [], "num_total_prime_paths": 1, "num_covered_paths": 1, "prime_path_coverage": 1.0, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_115_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_115_CFG.dot"}
{"humaneval_id": "HumanEval_58__1", "python_file": "HumanEval_58__1/main.py", "input_file": "HumanEval_58__1/input.txt", "prime_paths_nodes": [["8", "6", "5", "7"], ["8", "10", "6", "5", "7"], ["10", "6", "8"], ["1", "15", "3", "5", "7"], ["1", "15", "3", "5", "6", "8", "10"]], "prime_paths_statements": [["if e1 == e2:\\l", "for e2 in l2:\\l", "for e1 in l1:\\l", "return sorted(list(ret))\\l"], ["if e1 == e2:\\l", "ret.add(e1)\\l", "for e2 in l2:\\l", "for e1 in l1:\\l", "return sorted(list(ret))\\l"], ["ret.add(e1)\\l", "for e2 in l2:\\l", "if e1 == e2:\\l"], ["from typing import *\\ldef common(l1: list, l2: list):...\\lcommon([5, 3, 2, 8], [3, 2])\\l", "common", "ret = set()\\l", "for e1 in l1:\\l", "return sorted(list(ret))\\l"], ["from typing import *\\ldef common(l1: list, l2: list):...\\lcommon([5, 3, 2, 8], [3, 2])\\l", "common", "ret = set()\\l", "for e1 in l1:\\l", "for e2 in l2:\\l", "if e1 == e2:\\l", "ret.add(e1)\\l"]], "prime_paths_linenumbers": [[8, 7, 6, 10], [8, 9, 7, 6, 10], [9, 7, 8], [1, 12, 5, 6, 10], [1, 12, 5, 6, 7, 8, 9]], "covered_statements_linenumbers": [1, 4, 5, 6, 7, 8, 9, 10, 12], "missing_statements_linenumbers": [], "covered_prime_paths_linenumbers": [[8, 7, 6, 10], [8, 9, 7, 6, 10], [9, 7, 8], [1, 12, 5, 6, 10], [1, 12, 5, 6, 7, 8, 9]], "missing_prime_paths_linenumbers": [], "num_total_prime_paths": 5, "num_covered_paths": 5, "prime_path_coverage": 1.0, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_58__1_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_58__1_CFG.dot"}
{"humaneval_id": "HumanEval_0__0", "python_file": "HumanEval_0__0/main.py", "input_file": "HumanEval_0__0/input.txt", "prime_paths_nodes": [["8", "5", "3", "6"], ["8", "10", "13", "5", "3", "6"], ["10", "13", "5", "8"], ["13", "5", "8", "10"], ["1", "19", "3", "6"], ["1", "19", "3", "5", "8", "10", "13", "14"]], "prime_paths_statements": [["if idx != idx2:\\l", "for idx2, elem2 in enumerate(numbers):\\l", "for idx, elem in enumerate(numbers):\\l", "return False\\l"], ["if idx != idx2:\\l", "distance = abs(elem - elem2)\\l", "if distance < threshold:\\l", "for idx2, elem2 in enumerate(numbers):\\l", "for idx, elem in enumerate(numbers):\\l", "return False\\l"], ["distance = abs(elem - elem2)\\l", "if distance < threshold:\\l", "for idx2, elem2 in enumerate(numbers):\\l", "if idx != idx2:\\l"], ["if distance < threshold:\\l", "for idx2, elem2 in enumerate(numbers):\\l", "if idx != idx2:\\l", "distance = abs(elem - elem2)\\l"], ["from typing import *\\ldef has_close_elements(numbers: List[float], threshold: float) ->bool:...\\lhas_close_elements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95)\\l", "has_close_elements", "for idx, elem in enumerate(numbers):\\l", "return False\\l"], ["from typing import *\\ldef has_close_elements(numbers: List[float], threshold: float) ->bool:...\\lhas_close_elements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95)\\l", "has_close_elements", "for idx, elem in enumerate(numbers):\\l", "for idx2, elem2 in enumerate(numbers):\\l", "if idx != idx2:\\l", "distance = abs(elem - elem2)\\l", "if distance < threshold:\\l", "return True\\l"]], "prime_paths_linenumbers": [[7, 6, 5, 12], [7, 8, 9, 6, 5, 12], [8, 9, 6, 7], [9, 6, 7, 8], [1, 14, 5, 12], [1, 14, 5, 6, 7, 8, 9, 10]], "covered_statements_linenumbers": [1, 4, 5, 6, 7, 8, 9, 10, 14], "missing_statements_linenumbers": [12], "covered_prime_paths_linenumbers": [[8, 9, 6, 7], [9, 6, 7, 8], [1, 14, 5, 6, 7, 8, 9, 10]], "missing_prime_paths_linenumbers": [[7, 6, 5, 12], [7, 8, 9, 6, 5, 12], [1, 14, 5, 12]], "num_total_prime_paths": 6, "num_covered_paths": 3, "prime_path_coverage": 0.5, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_0__0_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_0__0_CFG.dot"}
{"humaneval_id": "HumanEval_126__0", "python_file": "HumanEval_126__0/main.py", "input_file": "HumanEval_126__0/input.txt", "prime_paths_nodes": [["6", "5", "7", "9"], ["6", "5", "7", "10", "15"], ["6", "5", "7", "10", "17"], ["1", "21", "3", "5", "6"], ["1", "21", "3", "5", "7", "9"], ["1", "21", "3", "5", "7", "10", "15"], ["1", "21", "3", "5", "7", "10", "17"]], "prime_paths_statements": [["count_digit[i] += 1\\l", "for i in lst:\\l", "if any(count_digit[i] > 2 for i in lst):\\l", "return False\\l"], ["count_digit[i] += 1\\l", "for i in lst:\\l", "if any(count_digit[i] > 2 for i in lst):\\l", "if all(lst[i - 1] <= lst[i] for i in range(1, len(lst))):\\l", "return True\\l"], ["count_digit[i] += 1\\l", "for i in lst:\\l", "if any(count_digit[i] > 2 for i in lst):\\l", "if all(lst[i - 1] <= lst[i] for i in range(1, len(lst))):\\l", "return False\\l"], ["from typing import *\\ldef is_sorted(lst):...\\lis_sorted([1, 2, 3, 4])\\l", "is_sorted", "count_digit = dict([(i, 0) for i in lst])\\l", "for i in lst:\\l", "count_digit[i] += 1\\l"], ["from typing import *\\ldef is_sorted(lst):...\\lis_sorted([1, 2, 3, 4])\\l", "is_sorted", "count_digit = dict([(i, 0) for i in lst])\\l", "for i in lst:\\l", "if any(count_digit[i] > 2 for i in lst):\\l", "return False\\l"], ["from typing import *\\ldef is_sorted(lst):...\\lis_sorted([1, 2, 3, 4])\\l", "is_sorted", "count_digit = dict([(i, 0) for i in lst])\\l", "for i in lst:\\l", "if any(count_digit[i] > 2 for i in lst):\\l", "if all(lst[i - 1] <= lst[i] for i in range(1, len(lst))):\\l", "return True\\l"], ["from typing import *\\ldef is_sorted(lst):...\\lis_sorted([1, 2, 3, 4])\\l", "is_sorted", "count_digit = dict([(i, 0) for i in lst])\\l", "for i in lst:\\l", "if any(count_digit[i] > 2 for i in lst):\\l", "if all(lst[i - 1] <= lst[i] for i in range(1, len(lst))):\\l", "return False\\l"]], "prime_paths_linenumbers": [[7, 6, 8, 9], [7, 6, 8, 10, 11], [7, 6, 8, 10, 13], [1, 15, 5, 6, 7], [1, 15, 5, 6, 8, 9], [1, 15, 5, 6, 8, 10, 11], [1, 15, 5, 6, 8, 10, 13]], "covered_statements_linenumbers": [1, 4, 5, 6, 7, 8, 10, 11, 15], "missing_statements_linenumbers": [9, 13], "covered_prime_paths_linenumbers": [[7, 6, 8, 10, 11], [1, 15, 5, 6, 7], [1, 15, 5, 6, 8, 10, 11]], "missing_prime_paths_linenumbers": [[7, 6, 8, 9], [7, 6, 8, 10, 13], [1, 15, 5, 6, 8, 9], [1, 15, 5, 6, 8, 10, 13]], "num_total_prime_paths": 7, "num_covered_paths": 3, "prime_path_coverage": 0.43, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_126__0_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_126__0_CFG.dot"}
{"humaneval_id": "HumanEval_101__1", "python_file": "HumanEval_101__1/main.py", "input_file": "HumanEval_101__1/input.txt", "prime_paths_nodes": [["8", "10", "7", "9", "16"], ["8", "12", "7", "9", "16"], ["10", "7", "8", "12"], ["12", "7", "8", "10"], ["1", "19", "3", "4"], ["1", "19", "3", "5", "7", "8", "10"], ["1", "19", "3", "5", "7", "8", "12"], ["1", "19", "3", "5", "7", "9", "16"]], "prime_paths_statements": [["if letter == ',':\\l", "s_list.append(' ')\\l", "for letter in s:\\l", "s_list = ''.join(s_list)\\l", "return s_list.split()\\l"], ["if letter == ',':\\l", "s_list.append(letter)\\l", "for letter in s:\\l", "s_list = ''.join(s_list)\\l", "return s_list.split()\\l"], ["s_list.append(' ')\\l", "for letter in s:\\l", "if letter == ',':\\l", "s_list.append(letter)\\l"], ["s_list.append(letter)\\l", "for letter in s:\\l", "if letter == ',':\\l", "s_list.append(' ')\\l"], ["from typing import *\\ldef words_string(s):...\\lwords_string('One,, two, three, fo...')\\l", "words_string", "if not s:\\l", "return []\\l"], ["from typing import *\\ldef words_string(s):...\\lwords_string('One,, two, three, fo...')\\l", "words_string", "if not s:\\l", "s_list = []\\l", "for letter in s:\\l", "if letter == ',':\\l", "s_list.append(' ')\\l"], ["from typing import *\\ldef words_string(s):...\\lwords_string('One,, two, three, fo...')\\l", "words_string", "if not s:\\l", "s_list = []\\l", "for letter in s:\\l", "if letter == ',':\\l", "s_list.append(letter)\\l"], ["from typing import *\\ldef words_string(s):...\\lwords_string('One,, two, three, fo...')\\l", "words_string", "if not s:\\l", "s_list = []\\l", "for letter in s:\\l", "s_list = ''.join(s_list)\\l", "return s_list.split()\\l"]], "prime_paths_linenumbers": [[11, 12, 10, 16, 17], [11, 14, 10, 16, 17], [12, 10, 11, 14], [14, 10, 11, 12], [1, 19, 5, 6], [1, 19, 5, 8, 10, 11, 12], [1, 19, 5, 8, 10, 11, 14], [1, 19, 5, 8, 10, 16, 17]], "covered_statements_linenumbers": [1, 4, 5, 8, 10, 11, 12, 14, 16, 17, 19], "missing_statements_linenumbers": [6], "covered_prime_paths_linenumbers": [[11, 12, 10, 16, 17], [11, 14, 10, 16, 17], [12, 10, 11, 14], [14, 10, 11, 12], [1, 19, 5, 8, 10, 11, 12], [1, 19, 5, 8, 10, 11, 14], [1, 19, 5, 8, 10, 16, 17]], "missing_prime_paths_linenumbers": [[1, 19, 5, 6]], "num_total_prime_paths": 8, "num_covered_paths": 7, "prime_path_coverage": 0.88, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_101__1_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_101__1_CFG.dot"}
{"humaneval_id": "HumanEval_155__1", "python_file": "HumanEval_155__1/main.py", "input_file": "HumanEval_155__1/input.txt", "prime_paths_nodes": [["7", "10", "4", "8"], ["7", "12", "4", "8"], ["10", "4", "7", "12"], ["12", "4", "7", "10"], ["1", "15", "3", "4", "8"], ["1", "15", "3", "4", "7", "10"], ["1", "15", "3", "4", "7", "12"]], "prime_paths_statements": [["if int(i) % 2 == 0:\\l", "even_count += 1\\l", "for i in str(abs(num)):\\l", "return even_count, odd_count\\l"], ["if int(i) % 2 == 0:\\l", "odd_count += 1\\l", "for i in str(abs(num)):\\l", "return even_count, odd_count\\l"], ["even_count += 1\\l", "for i in str(abs(num)):\\l", "if int(i) % 2 == 0:\\l", "odd_count += 1\\l"], ["odd_count += 1\\l", "for i in str(abs(num)):\\l", "if int(i) % 2 == 0:\\l", "even_count += 1\\l"], ["from typing import *\\ldef even_odd_count(num):...\\leven_odd_count(-78)\\l", "even_odd_count", "even_count = 0\\lodd_count = 0\\l", "for i in str(abs(num)):\\l", "return even_count, odd_count\\l"], ["from typing import *\\ldef even_odd_count(num):...\\leven_odd_count(-78)\\l", "even_odd_count", "even_count = 0\\lodd_count = 0\\l", "for i in str(abs(num)):\\l", "if int(i) % 2 == 0:\\l", "even_count += 1\\l"], ["from typing import *\\ldef even_odd_count(num):...\\leven_odd_count(-78)\\l", "even_odd_count", "even_count = 0\\lodd_count = 0\\l", "for i in str(abs(num)):\\l", "if int(i) % 2 == 0:\\l", "odd_count += 1\\l"]], "prime_paths_linenumbers": [[8, 9, 7, 12], [8, 11, 7, 12], [9, 7, 8, 11], [11, 7, 8, 9], [1, 14, 5, 6, 7, 12], [1, 14, 5, 6, 7, 8, 9], [1, 14, 5, 6, 7, 8, 11]], "covered_statements_linenumbers": [1, 4, 5, 6, 7, 8, 9, 11, 12, 14], "missing_statements_linenumbers": [], "covered_prime_paths_linenumbers": [[8, 9, 7, 12], [8, 11, 7, 12], [9, 7, 8, 11], [11, 7, 8, 9], [1, 14, 5, 6, 7, 12], [1, 14, 5, 6, 7, 8, 9], [1, 14, 5, 6, 7, 8, 11]], "missing_prime_paths_linenumbers": [], "num_total_prime_paths": 7, "num_covered_paths": 7, "prime_path_coverage": 1.0, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_155__1_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_155__1_CFG.dot"}
{"humaneval_id": "HumanEval_135__0", "python_file": "HumanEval_135__0/main.py", "input_file": "HumanEval_135__0/input.txt", "prime_paths_nodes": [["5", "7", "8", "4", "6"], ["5", "8", "4", "6"], ["7", "8", "4", "5"], ["8", "4", "5", "7"], ["1", "11", "3", "4", "6"], ["1", "11", "3", "4", "5", "7", "8"], ["1", "11", "3", "4", "5", "8"]], "prime_paths_statements": [["if arr[i] < arr[i - 1]:\\l", "ind = i\\l", "i += 1\\l", "while i < len(arr):\\l", "return ind\\l"], ["if arr[i] < arr[i - 1]:\\l", "i += 1\\l", "while i < len(arr):\\l", "return ind\\l"], ["ind = i\\l", "i += 1\\l", "while i < len(arr):\\l", "if arr[i] < arr[i - 1]:\\l"], ["i += 1\\l", "while i < len(arr):\\l", "if arr[i] < arr[i - 1]:\\l", "ind = i\\l"], ["from typing import *\\ldef can_arrange(arr):...\\lcan_arrange([1, 2, 4, 5])\\l", "can_arrange", "ind = -1\\li = 1\\l", "while i < len(arr):\\l", "return ind\\l"], ["from typing import *\\ldef can_arrange(arr):...\\lcan_arrange([1, 2, 4, 5])\\l", "can_arrange", "ind = -1\\li = 1\\l", "while i < len(arr):\\l", "if arr[i] < arr[i - 1]:\\l", "ind = i\\l", "i += 1\\l"], ["from typing import *\\ldef can_arrange(arr):...\\lcan_arrange([1, 2, 4, 5])\\l", "can_arrange", "ind = -1\\li = 1\\l", "while i < len(arr):\\l", "if arr[i] < arr[i - 1]:\\l", "i += 1\\l"]], "prime_paths_linenumbers": [[8, 9, 10, 7, 11], [8, 10, 7, 11], [9, 10, 7, 8], [10, 7, 8, 9], [1, 13, 5, 6, 7, 11], [1, 13, 5, 6, 7, 8, 9, 10], [1, 13, 5, 6, 7, 8, 10]], "covered_statements_linenumbers": [1, 4, 5, 6, 7, 8, 10, 11, 13], "missing_statements_linenumbers": [9], "covered_prime_paths_linenumbers": [[8, 10, 7, 11], [1, 13, 5, 6, 7, 11], [1, 13, 5, 6, 7, 8, 10]], "missing_prime_paths_linenumbers": [[8, 9, 10, 7, 11], [9, 10, 7, 8], [10, 7, 8, 9], [1, 13, 5, 6, 7, 8, 9, 10]], "num_total_prime_paths": 7, "num_covered_paths": 3, "prime_path_coverage": 0.43, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_135__0_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_135__0_CFG.dot"}
{"humaneval_id": "HumanEval_67", "python_file": "HumanEval_67/main.py", "input_file": "HumanEval_67/input.txt", "prime_paths_nodes": [["7", "5", "8"], ["7", "10", "5", "8"], ["10", "5", "7"], ["1", "16", "3", "5", "8"], ["1", "16", "3", "5", "7", "10"]], "prime_paths_statements": [["if i.isdigit():\\l", "for i in s.split(' '):\\l", "return n - sum(lis)\\l"], ["if i.isdigit():\\l", "lis.append(int(i))\\l", "for i in s.split(' '):\\l", "return n - sum(lis)\\l"], ["lis.append(int(i))\\l", "for i in s.split(' '):\\l", "if i.isdigit():\\l"], ["from typing import *\\ldef fruit_distribution(s, n):...\\lfruit_distribution('5 apples and 6 orang...', 19)\\l", "fruit_distribution", "lis = list()\\l", "for i in s.split(' '):\\l", "return n - sum(lis)\\l"], ["from typing import *\\ldef fruit_distribution(s, n):...\\lfruit_distribution('5 apples and 6 orang...', 19)\\l", "fruit_distribution", "lis = list()\\l", "for i in s.split(' '):\\l", "if i.isdigit():\\l", "lis.append(int(i))\\l"]], "prime_paths_linenumbers": [[5, 4, 7], [5, 6, 4, 7], [6, 4, 5], [1, 9, 3, 4, 7], [1, 9, 3, 4, 5, 6]], "covered_statements_linenumbers": [1, 2, 3, 4, 5, 6, 7, 9], "missing_statements_linenumbers": [], "covered_prime_paths_linenumbers": [[5, 4, 7], [5, 6, 4, 7], [6, 4, 5], [1, 9, 3, 4, 7], [1, 9, 3, 4, 5, 6]], "missing_prime_paths_linenumbers": [], "num_total_prime_paths": 5, "num_covered_paths": 5, "prime_path_coverage": 1.0, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_67_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_67_CFG.dot"}
{"humaneval_id": "HumanEval_41__0", "python_file": "HumanEval_41__0/main.py", "input_file": "HumanEval_41__0/input.txt", "prime_paths_nodes": [["1", "6", "3"]], "prime_paths_statements": [["from typing import *\\ldef car_race_collision(n: int):...\\lcar_race_collision(4)\\l", "car_race_collision", "return n ** 2\\l"]], "prime_paths_linenumbers": [[1, 7, 5]], "covered_statements_linenumbers": [1, 4, 5, 7], "missing_statements_linenumbers": [], "covered_prime_paths_linenumbers": [[1, 7, 5]], "missing_prime_paths_linenumbers": [], "num_total_prime_paths": 1, "num_covered_paths": 1, "prime_path_coverage": 1.0, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_41__0_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_41__0_CFG.dot"}
{"humaneval_id": "HumanEval_20__0", "python_file": "HumanEval_20__0/main.py", "input_file": "HumanEval_20__0/input.txt", "prime_paths_nodes": [["9", "6", "4", "7"], ["9", "11", "13", "6", "4", "7"], ["9", "11", "15", "17", "6", "4", "7"], ["9", "11", "15", "17", "18", "6", "4", "7"], ["11", "13", "6", "9"], ["11", "15", "17", "6", "9"], ["11", "15", "17", "18", "6", "9"], ["13", "6", "9", "11", "15", "17", "18"], ["15", "17", "6", "9", "11", "13"], ["15", "17", "18", "6", "9", "11", "13"], ["17", "6", "9", "11", "15"], ["17", "18", "6", "9", "11", "15"], ["18", "6", "9", "11", "15", "17"], ["1", "27", "3", "4", "7"], ["1", "27", "3", "4", "6", "9", "11", "13"], ["1", "27", "3", "4", "6", "9", "11", "15", "17", "18"]], "prime_paths_statements": [["if idx != idx2:\\l", "for idx2, elem2 in enumerate(numbers):\\l", "for idx, elem in enumerate(numbers):\\l", "return closest_pair\\l"], ["if idx != idx2:\\l", "if distance is None:\\l", "distance = abs(elem - elem2)\\lclosest_pair = tuple(sorted([elem, elem2]))\\l", "for idx2, elem2 in enumerate(numbers):\\l", "for idx, elem in enumerate(numbers):\\l", "return closest_pair\\l"], ["if idx != idx2:\\l", "if distance is None:\\l", "new_distance = abs(elem - elem2)\\l", "if new_distance < distance:\\l", "for idx2, elem2 in enumerate(numbers):\\l", "for idx, elem in enumerate(numbers):\\l", "return closest_pair\\l"], ["if idx != idx2:\\l", "if distance is None:\\l", "new_distance = abs(elem - elem2)\\l", "if new_distance < distance:\\l", "distance = new_distance\\lclosest_pair = tuple(sorted([elem, elem2]))\\l", "for idx2, elem2 in enumerate(numbers):\\l", "for idx, elem in enumerate(numbers):\\l", "return closest_pair\\l"], ["if distance is None:\\l", "distance = abs(elem - elem2)\\lclosest_pair = tuple(sorted([elem, elem2]))\\l", "for idx2, elem2 in enumerate(numbers):\\l", "if idx != idx2:\\l"], ["if distance is None:\\l", "new_distance = abs(elem - elem2)\\l", "if new_distance < distance:\\l", "for idx2, elem2 in enumerate(numbers):\\l", "if idx != idx2:\\l"], ["if distance is None:\\l", "new_distance = abs(elem - elem2)\\l", "if new_distance < distance:\\l", "distance = new_distance\\lclosest_pair = tuple(sorted([elem, elem2]))\\l", "for idx2, elem2 in enumerate(numbers):\\l", "if idx != idx2:\\l"], ["distance = abs(elem - elem2)\\lclosest_pair = tuple(sorted([elem, elem2]))\\l", "for idx2, elem2 in enumerate(numbers):\\l", "if idx != idx2:\\l", "if distance is None:\\l", "new_distance = abs(elem - elem2)\\l", "if new_distance < distance:\\l", "distance = new_distance\\lclosest_pair = tuple(sorted([elem, elem2]))\\l"], ["new_distance = abs(elem - elem2)\\l", "if new_distance < distance:\\l", "for idx2, elem2 in enumerate(numbers):\\l", "if idx != idx2:\\l", "if distance is None:\\l", "distance = abs(elem - elem2)\\lclosest_pair = tuple(sorted([elem, elem2]))\\l"], ["new_distance = abs(elem - elem2)\\l", "if new_distance < distance:\\l", "distance = new_distance\\lclosest_pair = tuple(sorted([elem, elem2]))\\l", "for idx2, elem2 in enumerate(numbers):\\l", "if idx != idx2:\\l", "if distance is None:\\l", "distance = abs(elem - elem2)\\lclosest_pair = tuple(sorted([elem, elem2]))\\l"], ["if new_distance < distance:\\l", "for idx2, elem2 in enumerate(numbers):\\l", "if idx != idx2:\\l", "if distance is None:\\l", "new_distance = abs(elem - elem2)\\l"], ["if new_distance < distance:\\l", "distance = new_distance\\lclosest_pair = tuple(sorted([elem, elem2]))\\l", "for idx2, elem2 in enumerate(numbers):\\l", "if idx != idx2:\\l", "if distance is None:\\l", "new_distance = abs(elem - elem2)\\l"], ["distance = new_distance\\lclosest_pair = tuple(sorted([elem, elem2]))\\l", "for idx2, elem2 in enumerate(numbers):\\l", "if idx != idx2:\\l", "if distance is None:\\l", "new_distance = abs(elem - elem2)\\l", "if new_distance < distance:\\l"], ["from typing import *\\ldef find_closest_elements(numbers: List[float]) ->Tuple[float, float]:...\\lfind_closest_elements([1.1, 2.2, 3.1, 4.1, 5.1])\\l", "find_closest_elements", "closest_pair = None\\ldistance = None\\l", "for idx, elem in enumerate(numbers):\\l", "return closest_pair\\l"], ["from typing import *\\ldef find_closest_elements(numbers: List[float]) ->Tuple[float, float]:...\\lfind_closest_elements([1.1, 2.2, 3.1, 4.1, 5.1])\\l", "find_closest_elements", "closest_pair = None\\ldistance = None\\l", "for idx, elem in enumerate(numbers):\\l", "for idx2, elem2 in enumerate(numbers):\\l", "if idx != idx2:\\l", "if distance is None:\\l", "distance = abs(elem - elem2)\\lclosest_pair = tuple(sorted([elem, elem2]))\\l"], ["from typing import *\\ldef find_closest_elements(numbers: List[float]) ->Tuple[float, float]:...\\lfind_closest_elements([1.1, 2.2, 3.1, 4.1, 5.1])\\l", "find_closest_elements", "closest_pair = None\\ldistance = None\\l", "for idx, elem in enumerate(numbers):\\l", "for idx2, elem2 in enumerate(numbers):\\l", "if idx != idx2:\\l", "if distance is None:\\l", "new_distance = abs(elem - elem2)\\l", "if new_distance < distance:\\l", "distance = new_distance\\lclosest_pair = tuple(sorted([elem, elem2]))\\l"]], "prime_paths_linenumbers": [[10, 9, 8, 20], [10, 11, 12, 13, 9, 8, 20], [10, 11, 15, 16, 9, 8, 20], [10, 11, 15, 16, 17, 18, 9, 8, 20], [11, 12, 13, 9, 10], [11, 15, 16, 9, 10], [11, 15, 16, 17, 18, 9, 10], [12, 13, 9, 10, 11, 15, 16, 17, 18], [15, 16, 9, 10, 11, 12, 13], [15, 16, 17, 18, 9, 10, 11, 12, 13], [16, 9, 10, 11, 15], [16, 17, 18, 9, 10, 11, 15], [17, 18, 9, 10, 11, 15, 16], [1, 22, 5, 6, 8, 20], [1, 22, 5, 6, 8, 9, 10, 11, 12, 13], [1, 22, 5, 6, 8, 9, 10, 11, 15, 16, 17, 18]], "covered_statements_linenumbers": [1, 4, 5, 6, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 20, 22], "missing_statements_linenumbers": [], "covered_prime_paths_linenumbers": [[10, 9, 8, 20], [10, 11, 12, 13, 9, 8, 20], [10, 11, 15, 16, 9, 8, 20], [10, 11, 15, 16, 17, 18, 9, 8, 20], [11, 12, 13, 9, 10], [11, 15, 16, 9, 10], [11, 15, 16, 17, 18, 9, 10], [12, 13, 9, 10, 11, 15, 16, 17, 18], [15, 16, 9, 10, 11, 12, 13], [15, 16, 17, 18, 9, 10, 11, 12, 13], [16, 9, 10, 11, 15], [16, 17, 18, 9, 10, 11, 15], [17, 18, 9, 10, 11, 15, 16], [1, 22, 5, 6, 8, 20], [1, 22, 5, 6, 8, 9, 10, 11, 12, 13], [1, 22, 5, 6, 8, 9, 10, 11, 15, 16, 17, 18]], "missing_prime_paths_linenumbers": [], "num_total_prime_paths": 16, "num_covered_paths": 16, "prime_path_coverage": 1.0, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_20__0_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_20__0_CFG.dot"}
{"humaneval_id": "HumanEval_4", "python_file": "HumanEval_4/main.py", "input_file": "HumanEval_4/input.txt", "prime_paths_nodes": [["1", "9", "3", "6"]], "prime_paths_statements": [["from typing import *\\ldef mean_absolute_deviation(numbers: List[float]) ->float:...\\lmean_absolute_deviation([1.0, 2.0, 3.0])\\l", "mean_absolute_deviation", "mean = sum(numbers) / len(numbers)\\l", "return sum(abs(x - mean) for x in numbers) / len(numbers)\\l"]], "prime_paths_linenumbers": [[1, 6, 3, 4]], "covered_statements_linenumbers": [1, 2, 3, 4, 6], "missing_statements_linenumbers": [], "covered_prime_paths_linenumbers": [[1, 6, 3, 4]], "missing_prime_paths_linenumbers": [], "num_total_prime_paths": 1, "num_covered_paths": 1, "prime_path_coverage": 1.0, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_4_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_4_CFG.dot"}
{"humaneval_id": "HumanEval_31__1", "python_file": "HumanEval_31__1/main.py", "input_file": "HumanEval_31__1/input.txt", "prime_paths_nodes": [["8", "5", "9"], ["1", "15", "3", "4"], ["1", "15", "3", "5", "9"], ["1", "15", "3", "5", "8", "10"]], "prime_paths_statements": [["if n % k == 0:\\l", "for k in range(2, n - 1):\\l", "return True\\l"], ["from typing import *\\ldef is_prime(n):...\\lis_prime(11 * 7)\\l", "is_prime", "if n < 2:\\l", "return False\\l"], ["from typing import *\\ldef is_prime(n):...\\lis_prime(11 * 7)\\l", "is_prime", "if n < 2:\\l", "for k in range(2, n - 1):\\l", "return True\\l"], ["from typing import *\\ldef is_prime(n):...\\lis_prime(11 * 7)\\l", "is_prime", "if n < 2:\\l", "for k in range(2, n - 1):\\l", "if n % k == 0:\\l", "return False\\l"]], "prime_paths_linenumbers": [[8, 7, 10], [1, 12, 5, 6], [1, 12, 5, 7, 10], [1, 12, 5, 7, 8, 9]], "covered_statements_linenumbers": [1, 4, 5, 7, 8, 9, 12], "missing_statements_linenumbers": [6, 10], "covered_prime_paths_linenumbers": [[1, 12, 5, 7, 8, 9]], "missing_prime_paths_linenumbers": [[8, 7, 10], [1, 12, 5, 6], [1, 12, 5, 7, 10]], "num_total_prime_paths": 4, "num_covered_paths": 1, "prime_path_coverage": 0.25, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_31__1_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_31__1_CFG.dot"}
{"humaneval_id": "HumanEval_157__1", "python_file": "HumanEval_157__1/main.py", "input_file": "HumanEval_157__1/input.txt", "prime_paths_nodes": [["1", "6", "3"]], "prime_paths_statements": [["from typing import *\\ldef right_angle_triangle(a, b, c):...\\lright_angle_triangle(1, 1, 1)\\l", "right_angle_triangle", "return a * a == b * b + c * c or b * b == a * a + c * c or c * c == a * a + b * b\\l"]], "prime_paths_linenumbers": [[1, 7, 5]], "covered_statements_linenumbers": [1, 4, 5, 7], "missing_statements_linenumbers": [], "covered_prime_paths_linenumbers": [[1, 7, 5]], "missing_prime_paths_linenumbers": [], "num_total_prime_paths": 1, "num_covered_paths": 1, "prime_path_coverage": 1.0, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_157__1_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_157__1_CFG.dot"}
{"humaneval_id": "HumanEval_47__1", "python_file": "HumanEval_47__1/main.py", "input_file": "HumanEval_47__1/input.txt", "prime_paths_nodes": [["1", "13", "3", "5", "7"], ["1", "13", "3", "5", "9"]], "prime_paths_statements": [["from typing import *\\ldef median(l: list):...\\lmedian([-10, 4, 6, 1000, 10, 20])\\l", "median", "l = sorted(l)\\l", "if len(l) % 2 == 1:\\l", "return l[len(l) // 2]\\l"], ["from typing import *\\ldef median(l: list):...\\lmedian([-10, 4, 6, 1000, 10, 20])\\l", "median", "l = sorted(l)\\l", "if len(l) % 2 == 1:\\l", "return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2.0\\l"]], "prime_paths_linenumbers": [[1, 11, 5, 6, 7], [1, 11, 5, 6, 9]], "covered_statements_linenumbers": [1, 4, 5, 6, 9, 11], "missing_statements_linenumbers": [7], "covered_prime_paths_linenumbers": [[1, 11, 5, 6, 9]], "missing_prime_paths_linenumbers": [[1, 11, 5, 6, 7]], "num_total_prime_paths": 2, "num_covered_paths": 1, "prime_path_coverage": 0.5, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_47__1_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_47__1_CFG.dot"}
{"humaneval_id": "HumanEval_114__0", "python_file": "HumanEval_114__0/main.py", "input_file": "HumanEval_114__0/input.txt", "prime_paths_nodes": [["5", "7", "8", "9", "4", "6", "11", "12", "14"], ["5", "7", "8", "9", "4", "6", "12", "14"], ["5", "7", "9", "4", "6", "11", "12", "14"], ["5", "7", "9", "4", "6", "12", "14"], ["7", "8", "9", "4", "5"], ["7", "9", "4", "5"], ["8", "9", "4", "5", "7"], ["9", "4", "5", "7", "8"], ["1", "17", "3", "4", "5", "7", "8", "9"], ["1", "17", "3", "4", "5", "7", "9"], ["1", "17", "3", "4", "6", "11", "12", "14"], ["1", "17", "3", "4", "6", "12", "14"]], "prime_paths_statements": [["s += -num\\l", "if s < 0:\\l", "s = 0\\l", "max_sum = max(s, max_sum)\\l", "for num in nums:\\l", "if max_sum == 0:\\l", "max_sum = max(-i for i in nums)\\l", "min_sum = -max_sum\\l", "return min_sum\\l"], ["s += -num\\l", "if s < 0:\\l", "s = 0\\l", "max_sum = max(s, max_sum)\\l", "for num in nums:\\l", "if max_sum == 0:\\l", "min_sum = -max_sum\\l", "return min_sum\\l"], ["s += -num\\l", "if s < 0:\\l", "max_sum = max(s, max_sum)\\l", "for num in nums:\\l", "if max_sum == 0:\\l", "max_sum = max(-i for i in nums)\\l", "min_sum = -max_sum\\l", "return min_sum\\l"], ["s += -num\\l", "if s < 0:\\l", "max_sum = max(s, max_sum)\\l", "for num in nums:\\l", "if max_sum == 0:\\l", "min_sum = -max_sum\\l", "return min_sum\\l"], ["if s < 0:\\l", "s = 0\\l", "max_sum = max(s, max_sum)\\l", "for num in nums:\\l", "s += -num\\l"], ["if s < 0:\\l", "max_sum = max(s, max_sum)\\l", "for num in nums:\\l", "s += -num\\l"], ["s = 0\\l", "max_sum = max(s, max_sum)\\l", "for num in nums:\\l", "s += -num\\l", "if s < 0:\\l"], ["max_sum = max(s, max_sum)\\l", "for num in nums:\\l", "s += -num\\l", "if s < 0:\\l", "s = 0\\l"], ["from typing import *\\ldef minSubArraySum(nums):...\\lminSubArraySum([1, -1])\\l", "minSubArraySum", "max_sum = 0\\ls = 0\\l", "for num in nums:\\l", "s += -num\\l", "if s < 0:\\l", "s = 0\\l", "max_sum = max(s, max_sum)\\l"], ["from typing import *\\ldef minSubArraySum(nums):...\\lminSubArraySum([1, -1])\\l", "minSubArraySum", "max_sum = 0\\ls = 0\\l", "for num in nums:\\l", "s += -num\\l", "if s < 0:\\l", "max_sum = max(s, max_sum)\\l"], ["from typing import *\\ldef minSubArraySum(nums):...\\lminSubArraySum([1, -1])\\l", "minSubArraySum", "max_sum = 0\\ls = 0\\l", "for num in nums:\\l", "if max_sum == 0:\\l", "max_sum = max(-i for i in nums)\\l", "min_sum = -max_sum\\l", "return min_sum\\l"], ["from typing import *\\ldef minSubArraySum(nums):...\\lminSubArraySum([1, -1])\\l", "minSubArraySum", "max_sum = 0\\ls = 0\\l", "for num in nums:\\l", "if max_sum == 0:\\l", "min_sum = -max_sum\\l", "return min_sum\\l"]], "prime_paths_linenumbers": [[8, 9, 10, 11, 7, 12, 13, 14, 15], [8, 9, 10, 11, 7, 12, 14, 15], [8, 9, 11, 7, 12, 13, 14, 15], [8, 9, 11, 7, 12, 14, 15], [9, 10, 11, 7, 8], [9, 11, 7, 8], [10, 11, 7, 8, 9], [11, 7, 8, 9, 10], [1, 17, 5, 6, 7, 8, 9, 10, 11], [1, 17, 5, 6, 7, 8, 9, 11], [1, 17, 5, 6, 7, 12, 13, 14, 15], [1, 17, 5, 6, 7, 12, 14, 15]], "covered_statements_linenumbers": [1, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 15, 17], "missing_statements_linenumbers": [13], "covered_prime_paths_linenumbers": [[8, 9, 10, 11, 7, 12, 14, 15], [8, 9, 11, 7, 12, 14, 15], [9, 10, 11, 7, 8], [9, 11, 7, 8], [10, 11, 7, 8, 9], [11, 7, 8, 9, 10], [1, 17, 5, 6, 7, 8, 9, 10, 11], [1, 17, 5, 6, 7, 8, 9, 11], [1, 17, 5, 6, 7, 12, 14, 15]], "missing_prime_paths_linenumbers": [[8, 9, 10, 11, 7, 12, 13, 14, 15], [8, 9, 11, 7, 12, 13, 14, 15], [1, 17, 5, 6, 7, 12, 13, 14, 15]], "num_total_prime_paths": 12, "num_covered_paths": 9, "prime_path_coverage": 0.75, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_114__0_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_114__0_CFG.dot"}
{"humaneval_id": "HumanEval_20", "python_file": "HumanEval_20/main.py", "input_file": "HumanEval_20/input.txt", "prime_paths_nodes": [["9", "6", "4", "7"], ["9", "11", "13", "6", "4", "7"], ["9", "11", "15", "17", "6", "4", "7"], ["9", "11", "15", "17", "18", "6", "4", "7"], ["11", "13", "6", "9"], ["11", "15", "17", "6", "9"], ["11", "15", "17", "18", "6", "9"], ["13", "6", "9", "11", "15", "17", "18"], ["15", "17", "6", "9", "11", "13"], ["15", "17", "18", "6", "9", "11", "13"], ["17", "6", "9", "11", "15"], ["17", "18", "6", "9", "11", "15"], ["18", "6", "9", "11", "15", "17"], ["1", "27", "3", "4", "7"], ["1", "27", "3", "4", "6", "9", "11", "13"], ["1", "27", "3", "4", "6", "9", "11", "15", "17", "18"]], "prime_paths_statements": [["if idx != idx2:\\l", "for idx2, elem2 in enumerate(numbers):\\l", "for idx, elem in enumerate(numbers):\\l", "return closest_pair\\l"], ["if idx != idx2:\\l", "if distance is None:\\l", "distance = abs(elem - elem2)\\lclosest_pair = tuple(sorted([elem, elem2]))\\l", "for idx2, elem2 in enumerate(numbers):\\l", "for idx, elem in enumerate(numbers):\\l", "return closest_pair\\l"], ["if idx != idx2:\\l", "if distance is None:\\l", "new_distance = abs(elem - elem2)\\l", "if new_distance < distance:\\l", "for idx2, elem2 in enumerate(numbers):\\l", "for idx, elem in enumerate(numbers):\\l", "return closest_pair\\l"], ["if idx != idx2:\\l", "if distance is None:\\l", "new_distance = abs(elem - elem2)\\l", "if new_distance < distance:\\l", "distance = new_distance\\lclosest_pair = tuple(sorted([elem, elem2]))\\l", "for idx2, elem2 in enumerate(numbers):\\l", "for idx, elem in enumerate(numbers):\\l", "return closest_pair\\l"], ["if distance is None:\\l", "distance = abs(elem - elem2)\\lclosest_pair = tuple(sorted([elem, elem2]))\\l", "for idx2, elem2 in enumerate(numbers):\\l", "if idx != idx2:\\l"], ["if distance is None:\\l", "new_distance = abs(elem - elem2)\\l", "if new_distance < distance:\\l", "for idx2, elem2 in enumerate(numbers):\\l", "if idx != idx2:\\l"], ["if distance is None:\\l", "new_distance = abs(elem - elem2)\\l", "if new_distance < distance:\\l", "distance = new_distance\\lclosest_pair = tuple(sorted([elem, elem2]))\\l", "for idx2, elem2 in enumerate(numbers):\\l", "if idx != idx2:\\l"], ["distance = abs(elem - elem2)\\lclosest_pair = tuple(sorted([elem, elem2]))\\l", "for idx2, elem2 in enumerate(numbers):\\l", "if idx != idx2:\\l", "if distance is None:\\l", "new_distance = abs(elem - elem2)\\l", "if new_distance < distance:\\l", "distance = new_distance\\lclosest_pair = tuple(sorted([elem, elem2]))\\l"], ["new_distance = abs(elem - elem2)\\l", "if new_distance < distance:\\l", "for idx2, elem2 in enumerate(numbers):\\l", "if idx != idx2:\\l", "if distance is None:\\l", "distance = abs(elem - elem2)\\lclosest_pair = tuple(sorted([elem, elem2]))\\l"], ["new_distance = abs(elem - elem2)\\l", "if new_distance < distance:\\l", "distance = new_distance\\lclosest_pair = tuple(sorted([elem, elem2]))\\l", "for idx2, elem2 in enumerate(numbers):\\l", "if idx != idx2:\\l", "if distance is None:\\l", "distance = abs(elem - elem2)\\lclosest_pair = tuple(sorted([elem, elem2]))\\l"], ["if new_distance < distance:\\l", "for idx2, elem2 in enumerate(numbers):\\l", "if idx != idx2:\\l", "if distance is None:\\l", "new_distance = abs(elem - elem2)\\l"], ["if new_distance < distance:\\l", "distance = new_distance\\lclosest_pair = tuple(sorted([elem, elem2]))\\l", "for idx2, elem2 in enumerate(numbers):\\l", "if idx != idx2:\\l", "if distance is None:\\l", "new_distance = abs(elem - elem2)\\l"], ["distance = new_distance\\lclosest_pair = tuple(sorted([elem, elem2]))\\l", "for idx2, elem2 in enumerate(numbers):\\l", "if idx != idx2:\\l", "if distance is None:\\l", "new_distance = abs(elem - elem2)\\l", "if new_distance < distance:\\l"], ["from typing import *\\ldef find_closest_elements(numbers: List[float]) ->Tuple[float, float]:...\\lfind_closest_elements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])\\l", "find_closest_elements", "closest_pair = None\\ldistance = None\\l", "for idx, elem in enumerate(numbers):\\l", "return closest_pair\\l"], ["from typing import *\\ldef find_closest_elements(numbers: List[float]) ->Tuple[float, float]:...\\lfind_closest_elements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])\\l", "find_closest_elements", "closest_pair = None\\ldistance = None\\l", "for idx, elem in enumerate(numbers):\\l", "for idx2, elem2 in enumerate(numbers):\\l", "if idx != idx2:\\l", "if distance is None:\\l", "distance = abs(elem - elem2)\\lclosest_pair = tuple(sorted([elem, elem2]))\\l"], ["from typing import *\\ldef find_closest_elements(numbers: List[float]) ->Tuple[float, float]:...\\lfind_closest_elements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])\\l", "find_closest_elements", "closest_pair = None\\ldistance = None\\l", "for idx, elem in enumerate(numbers):\\l", "for idx2, elem2 in enumerate(numbers):\\l", "if idx != idx2:\\l", "if distance is None:\\l", "new_distance = abs(elem - elem2)\\l", "if new_distance < distance:\\l", "distance = new_distance\\lclosest_pair = tuple(sorted([elem, elem2]))\\l"]], "prime_paths_linenumbers": [[8, 7, 6, 18], [8, 9, 10, 11, 7, 6, 18], [8, 9, 13, 14, 7, 6, 18], [8, 9, 13, 14, 15, 16, 7, 6, 18], [9, 10, 11, 7, 8], [9, 13, 14, 7, 8], [9, 13, 14, 15, 16, 7, 8], [10, 11, 7, 8, 9, 13, 14, 15, 16], [13, 14, 7, 8, 9, 10, 11], [13, 14, 15, 16, 7, 8, 9, 10, 11], [14, 7, 8, 9, 13], [14, 15, 16, 7, 8, 9, 13], [15, 16, 7, 8, 9, 13, 14], [1, 20, 3, 4, 6, 18], [1, 20, 3, 4, 6, 7, 8, 9, 10, 11], [1, 20, 3, 4, 6, 7, 8, 9, 13, 14, 15, 16]], "covered_statements_linenumbers": [1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 18, 20], "missing_statements_linenumbers": [], "covered_prime_paths_linenumbers": [[8, 7, 6, 18], [8, 9, 10, 11, 7, 6, 18], [8, 9, 13, 14, 7, 6, 18], [8, 9, 13, 14, 15, 16, 7, 6, 18], [9, 10, 11, 7, 8], [9, 13, 14, 7, 8], [9, 13, 14, 15, 16, 7, 8], [10, 11, 7, 8, 9, 13, 14, 15, 16], [13, 14, 7, 8, 9, 10, 11], [13, 14, 15, 16, 7, 8, 9, 10, 11], [14, 7, 8, 9, 13], [14, 15, 16, 7, 8, 9, 13], [15, 16, 7, 8, 9, 13, 14], [1, 20, 3, 4, 6, 18], [1, 20, 3, 4, 6, 7, 8, 9, 10, 11], [1, 20, 3, 4, 6, 7, 8, 9, 13, 14, 15, 16]], "missing_prime_paths_linenumbers": [], "num_total_prime_paths": 16, "num_covered_paths": 16, "prime_path_coverage": 1.0, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_20_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_20_CFG.dot"}
{"humaneval_id": "HumanEval_10__0", "python_file": "HumanEval_10__0/main.py", "input_file": "HumanEval_10__0/input.txt", "prime_paths_nodes": [["8", "7", "9"], ["1", "12", "3", "4"], ["1", "12", "3", "5", "7", "8"], ["1", "12", "3", "5", "7", "9"]], "prime_paths_statements": [["beginning_of_suffix += 1\\l", "while not is_palindrome(string[beginning_of_suffix:]):\\l", "return string + string[:beginning_of_suffix][::-1]\\l"], ["from typing import *\\ldef is_palindrome(string: str) ->bool:...\\lis_palindrome('xyx')\\l", "is_palindrome", "if not string:\\l", "return ''\\l"], ["from typing import *\\ldef is_palindrome(string: str) ->bool:...\\lis_palindrome('xyx')\\l", "is_palindrome", "if not string:\\l", "beginning_of_suffix = 0\\l", "while not is_palindrome(string[beginning_of_suffix:]):\\l", "beginning_of_suffix += 1\\l"], ["from typing import *\\ldef is_palindrome(string: str) ->bool:...\\lis_palindrome('xyx')\\l", "is_palindrome", "if not string:\\l", "beginning_of_suffix = 0\\l", "while not is_palindrome(string[beginning_of_suffix:]):\\l", "return string + string[:beginning_of_suffix][::-1]\\l"]], "prime_paths_linenumbers": [[11, 10, 13], [1, 15, 5, 6], [1, 15, 5, 8, 10, 11], [1, 15, 5, 8, 10, 13]], "covered_statements_linenumbers": [129, 255, 137, 145, 20, 25, 154, 27, 28, 29, 30, 31, 32, 33, 155, 35, 157, 37, 159, 39, 167, 42, 43, 171, 175, 303, 49, 50, 51, 179, 53, 184, 57, 188, 61, 192, 65, 196, 200, 74, 335, 336, 209, 340, 342, 88, 352, 101, 114, 119, 120, 250, 127, 1, 1163, 12, 13, 268, 15, 16, 145, 18, 19, 20, 21, 22, 23, 274, 537, 660, 1048, 30, 31, 32, 33, 34, 287, 36, 37, 38, 39, 931, 425, 42, 45, 46, 559, 560, 49, 946, 310, 1591, 57, 442, 570, 1209, 1722, 192, 1093, 70, 329, 269, 1226, 460, 719, 208, 81, 1744, 1236, 1367, 219, 1633, 98, 1380, 869, 1005, 1520, 1776, 1777, 117, 247, 760, 1529, 382, 512, 513, 1025, 518, 519, 1030, 1544, 1545, 524, 525, 1039, 1040, 530, 531, 21, 22, 1047, 24, 25, 26, 27, 28, 29, 30, 536, 32, 33, 34, 542, 36, 543, 1054, 1058, 40, 41, 552, 43, 553, 1063, 558, 559, 48, 1067, 50, 1068, 565, 54, 566, 1081, 1082, 571, 572, 63, 64, 577, 578, 67, 68, 1089, 1090, 71, 72, 1603, 74, 75, 1100, 1101, 83, 1116, 1117, 96, 100, 1127, 1128, 105, 109, 1135, 1136, 114, 115, 1531, 631, 120, 121, 632, 1143, 1144, 1149, 640, 129, 130, 641, 649, 650, 537, 143, 144, 655, 656, 1167, 1168, 1173, 1174, 663, 664, 153, 154, 1179, 1180, 673, 1185, 1186, 1191, 1192, 170, 171, 1197, 1198, 179, 180, 1203, 1204, 696, 697, 1209, 1210, 702, 703, 1216, 1217, 708, 709, 201, 202, 714, 715, 1228, 1229, 720, 721, 1235, 1236, 213, 214, 726, 727, 220, 221, 735, 736, 1253, 230, 744, 745, 236, 240, 753, 754, 244, 245, 249, 250, 762, 763, 771, 772, 265, 266, 782, 279, 280, 793, 794, 802, 803, 293, 294, 814, 303, 304, 815, 316, 332, 340, 341, 868, 869, 360, 364, 368, 372, 376, 380, 384, 390, 398, 403, 1427, 1428, 408, 409, 1436, 1437, 417, 1442, 1443, 423, 1448, 1449, 1456, 949, 950, 1463, 453, 457, 969, 1484, 461, 976, 465, 469, 473, 480, 992, 484, 996, 1509, 488, 1000, 493, 494, 1005, 1521, 1015, 503, 504, 1019, 32, 33, 65, 70, 75, 76, 49, 22, 23, 25, 26, 28, 29, 1037, 22, 24, 25, 26, 27, 536, 537, 30, 33, 34, 35, 36, 39, 40, 43, 44, 47, 48, 51, 52, 55, 56, 59, 60, 64, 69, 587, 77, 82, 83, 108, 621, 622, 623, 624, 154, 159, 164, 679, 686, 691, 697, 188, 713, 202, 734, 227, 756, 757, 259, 772, 773, 266, 778, 779, 271, 784, 785, 276, 790, 791, 797, 798, 803, 293, 808, 813, 304, 818, 823, 314, 830, 325, 841, 330, 842, 844, 334, 852, 341, 853, 855, 345, 863, 864, 353, 869, 874, 363, 875, 877, 886, 375, 376, 897, 387, 388, 903, 393, 394, 910, 911, 916, 407, 924, 928, 932, 937, 941, 945, 440, 953, 443, 959, 964, 970, 459, 460, 461, 462, 975, 980, 493, 503, 504, 32, 1, 2, 3, 5, 7, 39, 9, 10, 13, 16, 48, 24, 57, 34, 35, 36, 38, 20, 21, 23, 26, 27, 28, 29, 30, 31, 1, 15, 16, 17, 19, 531, 21, 22, 23, 24, 25, 532, 30, 543, 32, 33, 34, 35, 37, 38, 41, 42, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 1591, 57, 1592, 574, 575, 64, 1601, 1608, 1610, 77, 83, 1621, 1623, 1636, 101, 113, 127, 150, 662, 1180, 670, 160, 1189, 1190, 169, 174, 1202, 186, 196, 708, 709, 710, 711, 1231, 1232, 212, 1251, 237, 1261, 557, 1271, 265, 299, 325, 349, 362, 370, 1417, 1418, 418, 458, 1483, 1484, 477, 478, 26, 19, 28, 31, 24, 25, 26, 27, 28, 160, 161, 47, 49, 54, 55, 57, 62, 65, 66, 68, 69, 71, 72, 75, 76, 86, 87, 3, 652, 14, 15, 16, 17, 18, 19, 20, 273, 22, 660, 661, 27, 28, 31, 32, 34, 291, 298, 299, 684, 685, 47, 308, 309, 55, 319, 65, 705, 706, 81, 209, 89, 95, 96, 485, 110, 503, 504, 638, 1, 1033, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 1050, 30, 1051, 32, 33, 35, 36, 39, 555, 53, 569, 588, 77, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 114, 626, 629, 136, 662, 669, 167, 680, 687, 182, 723, 731, 221, 230, 754, 250, 767, 786, 813, 314, 856, 864, 359, 872, 382, 905, 396, 397, 926, 429, 944, 961, 464, 976, 475, 486, 502, 1018, 263, 136, 264, 266, 17, 18, 145, 20, 21, 22, 23, 277, 25, 26, 155, 284, 29, 30, 33, 36, 170, 45, 46, 48, 53, 71, 72, 77, 83, 92, 101, 102, 104, 239, 112, 248, 125, 1, 4, 5, 8, 10, 15, 1, 516, 391, 12, 13, 14, 15, 141, 17, 18, 271, 20, 527, 26, 28, 30, 31, 32, 158, 34, 36, 42, 298, 44, 556, 174, 48, 307, 181, 54, 440, 443, 320, 577, 66, 194, 455, 207, 591, 340, 471, 93, 487, 238, 366, 495, 625, 121, 253, 1, 131, 12, 13, 14, 15, 142, 271, 18, 273, 20, 22, 29, 159, 36, 166, 41, 48, 58, 186, 193, 194, 195, 68, 196, 76, 83, 88, 98, 99, 240, 114, 245, 121, 255], "missing_statements_linenumbers": [27, 34, 39, 46, 56, 66, 74, 81, 86, 96, 112, 119, 129, 140, 157, 164, 177, 178, 179, 180, 182, 184, 191, 238, 243, 253, 262, 263, 264, 265, 266, 267, 268, 269, 279, 280, 282, 283, 284, 285, 286, 287, 288, 289, 290, 292, 293, 294, 295, 296, 297, 298, 299, 300, 302, 305, 307, 308, 309], "covered_prime_paths_linenumbers": [[11, 10, 13], [1, 15, 5, 6], [1, 15, 5, 8, 10, 11], [1, 15, 5, 8, 10, 13]], "missing_prime_paths_linenumbers": [], "num_total_prime_paths": 4, "num_covered_paths": 4, "prime_path_coverage": 1.0, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_10__0_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_10__0_CFG.dot"}
{"humaneval_id": "HumanEval_37", "python_file": "HumanEval_37/main.py", "input_file": "HumanEval_37/input.txt", "prime_paths_nodes": [["3", "5", "7"], ["3", "5", "8", "12", "13"], ["3", "5", "8", "13"], ["7", "5", "8", "12", "13"], ["7", "5", "8", "13"], ["1", "17", "18"]], "prime_paths_statements": [["evens = l[::2]\\lodds = l[1::2]\\levens.sort()\\lans = []\\l", "for e, o in zip(evens, odds):\\l", "ans.extend([e, o])\\l"], ["evens = l[::2]\\lodds = l[1::2]\\levens.sort()\\lans = []\\l", "for e, o in zip(evens, odds):\\l", "if len(evens) > len(odds):\\l", "ans.append(evens[-1])\\l", "return ans\\l"], ["evens = l[::2]\\lodds = l[1::2]\\levens.sort()\\lans = []\\l", "for e, o in zip(evens, odds):\\l", "if len(evens) > len(odds):\\l", "return ans\\l"], ["ans.extend([e, o])\\l", "for e, o in zip(evens, odds):\\l", "if len(evens) > len(odds):\\l", "ans.append(evens[-1])\\l", "return ans\\l"], ["ans.extend([e, o])\\l", "for e, o in zip(evens, odds):\\l", "if len(evens) > len(odds):\\l", "return ans\\l"], ["from typing import *\\ldef sort_even(l: list):...\\ltuple(sort_even([1, 2, 3]))\\l", "tuple", "sort_even"]], "prime_paths_linenumbers": [[3, 4, 5, 6, 7, 8], [3, 4, 5, 6, 7, 9, 10, 11], [3, 4, 5, 6, 7, 9, 11], [8, 7, 9, 10, 11], [8, 7, 9, 11], [1, 13, 13]], "covered_statements_linenumbers": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13], "missing_statements_linenumbers": [], "covered_prime_paths_linenumbers": [[3, 4, 5, 6, 7, 8], [3, 4, 5, 6, 7, 9, 10, 11], [3, 4, 5, 6, 7, 9, 11], [8, 7, 9, 10, 11], [8, 7, 9, 11], [1, 13, 13]], "missing_prime_paths_linenumbers": [], "num_total_prime_paths": 6, "num_covered_paths": 6, "prime_path_coverage": 1.0, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_37_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_37_CFG.dot"}
{"humaneval_id": "HumanEval_95__0", "python_file": "HumanEval_95__0/main.py", "input_file": "HumanEval_95__0/input.txt", "prime_paths_nodes": [["11", "15", "17", "26", "9", "12"], ["11", "15", "17", "28", "30", "9", "12"], ["15", "17", "26", "9", "11", "14", "12"], ["15", "17", "28", "30", "9", "11", "14", "12"], ["17", "26", "9", "11", "15", "19", "20", "12"], ["17", "26", "9", "11", "15", "19", "22", "12"], ["17", "28", "30", "9", "11", "15", "19", "20", "12"], ["17", "28", "30", "9", "11", "15", "19", "22", "12"], ["26", "9", "11", "15", "17", "28", "32", "12"], ["26", "9", "11", "15", "17", "28", "30"], ["28", "30", "9", "11", "15", "17", "26"], ["30", "9", "11", "15", "17", "28", "32", "12"], ["1", "37", "3", "6"], ["1", "37", "3", "8", "9", "11", "14", "12"], ["1", "37", "3", "8", "9", "11", "15", "17", "28", "32", "12"], ["1", "37", "3", "8", "9", "11", "15", "19", "20", "12"], ["1", "37", "3", "8", "9", "11", "15", "19", "22", "12"], ["1", "37", "3", "8", "9", "12"], ["1", "37", "3", "8", "9", "11", "15", "17", "26"], ["1", "37", "3", "8", "9", "11", "15", "17", "28", "30"]], "prime_paths_statements": [["if isinstance(key, str) == False:\\l", "if state == 'start':\\l", "if key.isupper():\\l", "state = 'upper'\\l", "for key in dict.keys():\\l", "return state == 'upper' or state == 'lower'\\l"], ["if isinstance(key, str) == False:\\l", "if state == 'start':\\l", "if key.isupper():\\l", "if key.islower():\\l", "state = 'lower'\\l", "for key in dict.keys():\\l", "return state == 'upper' or state == 'lower'\\l"], ["if state == 'start':\\l", "if key.isupper():\\l", "state = 'upper'\\l", "for key in dict.keys():\\l", "if isinstance(key, str) == False:\\l", "state = 'mixed'\\lbreak\\l", "return state == 'upper' or state == 'lower'\\l"], ["if state == 'start':\\l", "if key.isupper():\\l", "if key.islower():\\l", "state = 'lower'\\l", "for key in dict.keys():\\l", "if isinstance(key, str) == False:\\l", "state = 'mixed'\\lbreak\\l", "return state == 'upper' or state == 'lower'\\l"], ["if key.isupper():\\l", "state = 'upper'\\l", "for key in dict.keys():\\l", "if isinstance(key, str) == False:\\l", "if state == 'start':\\l", "if state == 'upper' and not key.isupper(\\l", "state = 'mixed'\\lbreak\\l", "return state == 'upper' or state == 'lower'\\l"], ["if key.isupper():\\l", "state = 'upper'\\l", "for key in dict.keys():\\l", "if isinstance(key, str) == False:\\l", "if state == 'start':\\l", "if state == 'upper' and not key.isupper(\\l", "break\\l", "return state == 'upper' or state == 'lower'\\l"], ["if key.isupper():\\l", "if key.islower():\\l", "state = 'lower'\\l", "for key in dict.keys():\\l", "if isinstance(key, str) == False:\\l", "if state == 'start':\\l", "if state == 'upper' and not key.isupper(\\l", "state = 'mixed'\\lbreak\\l", "return state == 'upper' or state == 'lower'\\l"], ["if key.isupper():\\l", "if key.islower():\\l", "state = 'lower'\\l", "for key in dict.keys():\\l", "if isinstance(key, str) == False:\\l", "if state == 'start':\\l", "if state == 'upper' and not key.isupper(\\l", "break\\l", "return state == 'upper' or state == 'lower'\\l"], ["state = 'upper'\\l", "for key in dict.keys():\\l", "if isinstance(key, str) == False:\\l", "if state == 'start':\\l", "if key.isupper():\\l", "if key.islower():\\l", "break\\l", "return state == 'upper' or state == 'lower'\\l"], ["state = 'upper'\\l", "for key in dict.keys():\\l", "if isinstance(key, str) == False:\\l", "if state == 'start':\\l", "if key.isupper():\\l", "if key.islower():\\l", "state = 'lower'\\l"], ["if key.islower():\\l", "state = 'lower'\\l", "for key in dict.keys():\\l", "if isinstance(key, str) == False:\\l", "if state == 'start':\\l", "if key.isupper():\\l", "state = 'upper'\\l"], ["state = 'lower'\\l", "for key in dict.keys():\\l", "if isinstance(key, str) == False:\\l", "if state == 'start':\\l", "if key.isupper():\\l", "if key.islower():\\l", "break\\l", "return state == 'upper' or state == 'lower'\\l"], ["from typing import *\\ldef check_dict_case(dict):...\\lcheck_dict_case({'STATE': 'NC', 'ZIP': '12345'})\\l", "check_dict_case", "if len(dict.keys()) == 0:\\l", "return False\\l"], ["from typing import *\\ldef check_dict_case(dict):...\\lcheck_dict_case({'STATE': 'NC', 'ZIP': '12345'})\\l", "check_dict_case", "if len(dict.keys()) == 0:\\l", "state = 'start'\\l", "for key in dict.keys():\\l", "if isinstance(key, str) == False:\\l", "state = 'mixed'\\lbreak\\l", "return state == 'upper' or state == 'lower'\\l"], ["from typing import *\\ldef check_dict_case(dict):...\\lcheck_dict_case({'STATE': 'NC', 'ZIP': '12345'})\\l", "check_dict_case", "if len(dict.keys()) == 0:\\l", "state = 'start'\\l", "for key in dict.keys():\\l", "if isinstance(key, str) == False:\\l", "if state == 'start':\\l", "if key.isupper():\\l", "if key.islower():\\l", "break\\l", "return state == 'upper' or state == 'lower'\\l"], ["from typing import *\\ldef check_dict_case(dict):...\\lcheck_dict_case({'STATE': 'NC', 'ZIP': '12345'})\\l", "check_dict_case", "if len(dict.keys()) == 0:\\l", "state = 'start'\\l", "for key in dict.keys():\\l", "if isinstance(key, str) == False:\\l", "if state == 'start':\\l", "if state == 'upper' and not key.isupper(\\l", "state = 'mixed'\\lbreak\\l", "return state == 'upper' or state == 'lower'\\l"], ["from typing import *\\ldef check_dict_case(dict):...\\lcheck_dict_case({'STATE': 'NC', 'ZIP': '12345'})\\l", "check_dict_case", "if len(dict.keys()) == 0:\\l", "state = 'start'\\l", "for key in dict.keys():\\l", "if isinstance(key, str) == False:\\l", "if state == 'start':\\l", "if state == 'upper' and not key.isupper(\\l", "break\\l", "return state == 'upper' or state == 'lower'\\l"], ["from typing import *\\ldef check_dict_case(dict):...\\lcheck_dict_case({'STATE': 'NC', 'ZIP': '12345'})\\l", "check_dict_case", "if len(dict.keys()) == 0:\\l", "state = 'start'\\l", "for key in dict.keys():\\l", "return state == 'upper' or state == 'lower'\\l"], ["from typing import *\\ldef check_dict_case(dict):...\\lcheck_dict_case({'STATE': 'NC', 'ZIP': '12345'})\\l", "check_dict_case", "if len(dict.keys()) == 0:\\l", "state = 'start'\\l", "for key in dict.keys():\\l", "if isinstance(key, str) == False:\\l", "if state == 'start':\\l", "if key.isupper():\\l", "state = 'upper'\\l"], ["from typing import *\\ldef check_dict_case(dict):...\\lcheck_dict_case({'STATE': 'NC', 'ZIP': '12345'})\\l", "check_dict_case", "if len(dict.keys()) == 0:\\l", "state = 'start'\\l", "for key in dict.keys():\\l", "if isinstance(key, str) == False:\\l", "if state == 'start':\\l", "if key.isupper():\\l", "if key.islower():\\l", "state = 'lower'\\l"]], "prime_paths_linenumbers": [[11, 14, 15, 16, 9, 26], [11, 14, 15, 17, 18, 9, 26], [14, 15, 16, 9, 11, 12, 13, 26], [14, 15, 17, 18, 9, 11, 12, 13, 26], [15, 16, 9, 11, 14, 21, 22, 23, 26], [15, 16, 9, 11, 14, 21, 25, 26], [15, 17, 18, 9, 11, 14, 21, 22, 23, 26], [15, 17, 18, 9, 11, 14, 21, 25, 26], [16, 9, 11, 14, 15, 17, 20, 26], [16, 9, 11, 14, 15, 17, 18], [17, 18, 9, 11, 14, 15, 16], [18, 9, 11, 14, 15, 17, 20, 26], [1, 28, 5, 6], [1, 28, 5, 8, 9, 11, 12, 13, 26], [1, 28, 5, 8, 9, 11, 14, 15, 17, 20, 26], [1, 28, 5, 8, 9, 11, 14, 21, 22, 23, 26], [1, 28, 5, 8, 9, 11, 14, 21, 25, 26], [1, 28, 5, 8, 9, 26], [1, 28, 5, 8, 9, 11, 14, 15, 16], [1, 28, 5, 8, 9, 11, 14, 15, 17, 18]], "covered_statements_linenumbers": [1, 4, 5, 8, 9, 11, 14, 15, 16, 21, 25, 26, 28], "missing_statements_linenumbers": [6, 12, 13, 17, 18, 20, 22, 23], "covered_prime_paths_linenumbers": [[11, 14, 15, 16, 9, 26], [15, 16, 9, 11, 14, 21, 25, 26], [1, 28, 5, 8, 9, 11, 14, 21, 25, 26], [1, 28, 5, 8, 9, 26], [1, 28, 5, 8, 9, 11, 14, 15, 16]], "missing_prime_paths_linenumbers": [[11, 14, 15, 17, 18, 9, 26], [14, 15, 16, 9, 11, 12, 13, 26], [14, 15, 17, 18, 9, 11, 12, 13, 26], [15, 16, 9, 11, 14, 21, 22, 23, 26], [15, 17, 18, 9, 11, 14, 21, 22, 23, 26], [15, 17, 18, 9, 11, 14, 21, 25, 26], [16, 9, 11, 14, 15, 17, 20, 26], [16, 9, 11, 14, 15, 17, 18], [17, 18, 9, 11, 14, 15, 16], [18, 9, 11, 14, 15, 17, 20, 26], [1, 28, 5, 6], [1, 28, 5, 8, 9, 11, 12, 13, 26], [1, 28, 5, 8, 9, 11, 14, 15, 17, 20, 26], [1, 28, 5, 8, 9, 11, 14, 21, 22, 23, 26], [1, 28, 5, 8, 9, 11, 14, 15, 17, 18]], "num_total_prime_paths": 20, "num_covered_paths": 5, "prime_path_coverage": 0.25, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_95__0_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_95__0_CFG.dot"}
{"humaneval_id": "HumanEval_143", "python_file": "HumanEval_143/main.py", "input_file": "HumanEval_143/input.txt", "prime_paths_nodes": [["6", "8", "10", "11", "15", "4", "7"], ["6", "8", "10", "11", "15", "19", "4", "7"], ["6", "8", "11", "15", "4", "7"], ["6", "8", "11", "15", "19", "4", "7"], ["8", "10", "11", "15", "4", "6"], ["8", "10", "11", "15", "19", "4", "6"], ["8", "11", "15", "4", "6"], ["8", "11", "15", "19", "4", "6"], ["10", "11", "15", "4", "6", "8"], ["10", "11", "15", "19", "4", "6", "8"], ["14", "11", "15", "4", "7"], ["14", "11", "15", "19", "4", "7"], ["14", "17", "11", "15", "4", "7"], ["14", "17", "11", "15", "19", "4", "7"], ["14", "11", "15", "4", "6", "8", "10"], ["14", "11", "15", "19", "4", "6", "8", "10"], ["14", "17", "11", "15", "4", "6", "8", "10"], ["14", "17", "11", "15", "19", "4", "6", "8", "10"], ["15", "4", "6", "8", "10", "11", "14", "17"], ["15", "4", "6", "8", "11", "14", "17"], ["15", "19", "4", "6", "8", "10", "11", "14", "17"], ["15", "19", "4", "6", "8", "11", "14", "17"], ["17", "11", "14"], ["19", "4", "6", "8", "10", "11", "15"], ["19", "4", "6", "8", "11", "15"], ["1", "24", "3", "4", "7"], ["1", "24", "3", "4", "6", "8", "10", "11", "14", "17"], ["1", "24", "3", "4", "6", "8", "11", "14", "17"], ["1", "24", "3", "4", "6", "8", "10", "11", "15", "19"], ["1", "24", "3", "4", "6", "8", "11", "15", "19"]], "prime_paths_statements": [["flg = 0\\l", "if len(word) == 1:\\l", "flg = 1\\l", "for i in range(2, len(word)):\\l", "if flg == 0 or len(word) == 2:\\l", "for word in sentence.split():\\l", "return ' '.join(new_lst)\\l"], ["flg = 0\\l", "if len(word) == 1:\\l", "flg = 1\\l", "for i in range(2, len(word)):\\l", "if flg == 0 or len(word) == 2:\\l", "new_lst.append(word)\\l", "for word in sentence.split():\\l", "return ' '.join(new_lst)\\l"], ["flg = 0\\l", "if len(word) == 1:\\l", "for i in range(2, len(word)):\\l", "if flg == 0 or len(word) == 2:\\l", "for word in sentence.split():\\l", "return ' '.join(new_lst)\\l"], ["flg = 0\\l", "if len(word) == 1:\\l", "for i in range(2, len(word)):\\l", "if flg == 0 or len(word) == 2:\\l", "new_lst.append(word)\\l", "for word in sentence.split():\\l", "return ' '.join(new_lst)\\l"], ["if len(word) == 1:\\l", "flg = 1\\l", "for i in range(2, len(word)):\\l", "if flg == 0 or len(word) == 2:\\l", "for word in sentence.split():\\l", "flg = 0\\l"], ["if len(word) == 1:\\l", "flg = 1\\l", "for i in range(2, len(word)):\\l", "if flg == 0 or len(word) == 2:\\l", "new_lst.append(word)\\l", "for word in sentence.split():\\l", "flg = 0\\l"], ["if len(word) == 1:\\l", "for i in range(2, len(word)):\\l", "if flg == 0 or len(word) == 2:\\l", "for word in sentence.split():\\l", "flg = 0\\l"], ["if len(word) == 1:\\l", "for i in range(2, len(word)):\\l", "if flg == 0 or len(word) == 2:\\l", "new_lst.append(word)\\l", "for word in sentence.split():\\l", "flg = 0\\l"], ["flg = 1\\l", "for i in range(2, len(word)):\\l", "if flg == 0 or len(word) == 2:\\l", "for word in sentence.split():\\l", "flg = 0\\l", "if len(word) == 1:\\l"], ["flg = 1\\l", "for i in range(2, len(word)):\\l", "if flg == 0 or len(word) == 2:\\l", "new_lst.append(word)\\l", "for word in sentence.split():\\l", "flg = 0\\l", "if len(word) == 1:\\l"], ["if len(word) % i == 0:\\l", "for i in range(2, len(word)):\\l", "if flg == 0 or len(word) == 2:\\l", "for word in sentence.split():\\l", "return ' '.join(new_lst)\\l"], ["if len(word) % i == 0:\\l", "for i in range(2, len(word)):\\l", "if flg == 0 or len(word) == 2:\\l", "new_lst.append(word)\\l", "for word in sentence.split():\\l", "return ' '.join(new_lst)\\l"], ["if len(word) % i == 0:\\l", "flg = 1\\l", "for i in range(2, len(word)):\\l", "if flg == 0 or len(word) == 2:\\l", "for word in sentence.split():\\l", "return ' '.join(new_lst)\\l"], ["if len(word) % i == 0:\\l", "flg = 1\\l", "for i in range(2, len(word)):\\l", "if flg == 0 or len(word) == 2:\\l", "new_lst.append(word)\\l", "for word in sentence.split():\\l", "return ' '.join(new_lst)\\l"], ["if len(word) % i == 0:\\l", "for i in range(2, len(word)):\\l", "if flg == 0 or len(word) == 2:\\l", "for word in sentence.split():\\l", "flg = 0\\l", "if len(word) == 1:\\l", "flg = 1\\l"], ["if len(word) % i == 0:\\l", "for i in range(2, len(word)):\\l", "if flg == 0 or len(word) == 2:\\l", "new_lst.append(word)\\l", "for word in sentence.split():\\l", "flg = 0\\l", "if len(word) == 1:\\l", "flg = 1\\l"], ["if len(word) % i == 0:\\l", "flg = 1\\l", "for i in range(2, len(word)):\\l", "if flg == 0 or len(word) == 2:\\l", "for word in sentence.split():\\l", "flg = 0\\l", "if len(word) == 1:\\l", "flg = 1\\l"], ["if len(word) % i == 0:\\l", "flg = 1\\l", "for i in range(2, len(word)):\\l", "if flg == 0 or len(word) == 2:\\l", "new_lst.append(word)\\l", "for word in sentence.split():\\l", "flg = 0\\l", "if len(word) == 1:\\l", "flg = 1\\l"], ["if flg == 0 or len(word) == 2:\\l", "for word in sentence.split():\\l", "flg = 0\\l", "if len(word) == 1:\\l", "flg = 1\\l", "for i in range(2, len(word)):\\l", "if len(word) % i == 0:\\l", "flg = 1\\l"], ["if flg == 0 or len(word) == 2:\\l", "for word in sentence.split():\\l", "flg = 0\\l", "if len(word) == 1:\\l", "for i in range(2, len(word)):\\l", "if len(word) % i == 0:\\l", "flg = 1\\l"], ["if flg == 0 or len(word) == 2:\\l", "new_lst.append(word)\\l", "for word in sentence.split():\\l", "flg = 0\\l", "if len(word) == 1:\\l", "flg = 1\\l", "for i in range(2, len(word)):\\l", "if len(word) % i == 0:\\l", "flg = 1\\l"], ["if flg == 0 or len(word) == 2:\\l", "new_lst.append(word)\\l", "for word in sentence.split():\\l", "flg = 0\\l", "if len(word) == 1:\\l", "for i in range(2, len(word)):\\l", "if len(word) % i == 0:\\l", "flg = 1\\l"], ["flg = 1\\l", "for i in range(2, len(word)):\\l", "if len(word) % i == 0:\\l"], ["new_lst.append(word)\\l", "for word in sentence.split():\\l", "flg = 0\\l", "if len(word) == 1:\\l", "flg = 1\\l", "for i in range(2, len(word)):\\l", "if flg == 0 or len(word) == 2:\\l"], ["new_lst.append(word)\\l", "for word in sentence.split():\\l", "flg = 0\\l", "if len(word) == 1:\\l", "for i in range(2, len(word)):\\l", "if flg == 0 or len(word) == 2:\\l"], ["from typing import *\\ldef words_in_sentence(sentence):...\\lwords_in_sentence('This is a test')\\l", "words_in_sentence", "new_lst = []\\l", "for word in sentence.split():\\l", "return ' '.join(new_lst)\\l"], ["from typing import *\\ldef words_in_sentence(sentence):...\\lwords_in_sentence('This is a test')\\l", "words_in_sentence", "new_lst = []\\l", "for word in sentence.split():\\l", "flg = 0\\l", "if len(word) == 1:\\l", "flg = 1\\l", "for i in range(2, len(word)):\\l", "if len(word) % i == 0:\\l", "flg = 1\\l"], ["from typing import *\\ldef words_in_sentence(sentence):...\\lwords_in_sentence('This is a test')\\l", "words_in_sentence", "new_lst = []\\l", "for word in sentence.split():\\l", "flg = 0\\l", "if len(word) == 1:\\l", "for i in range(2, len(word)):\\l", "if len(word) % i == 0:\\l", "flg = 1\\l"], ["from typing import *\\ldef words_in_sentence(sentence):...\\lwords_in_sentence('This is a test')\\l", "words_in_sentence", "new_lst = []\\l", "for word in sentence.split():\\l", "flg = 0\\l", "if len(word) == 1:\\l", "flg = 1\\l", "for i in range(2, len(word)):\\l", "if flg == 0 or len(word) == 2:\\l", "new_lst.append(word)\\l"], ["from typing import *\\ldef words_in_sentence(sentence):...\\lwords_in_sentence('This is a test')\\l", "words_in_sentence", "new_lst = []\\l", "for word in sentence.split():\\l", "flg = 0\\l", "if len(word) == 1:\\l", "for i in range(2, len(word)):\\l", "if flg == 0 or len(word) == 2:\\l", "new_lst.append(word)\\l"]], "prime_paths_linenumbers": [[5, 6, 7, 8, 11, 4, 13], [5, 6, 7, 8, 11, 12, 4, 13], [5, 6, 8, 11, 4, 13], [5, 6, 8, 11, 12, 4, 13], [6, 7, 8, 11, 4, 5], [6, 7, 8, 11, 12, 4, 5], [6, 8, 11, 4, 5], [6, 8, 11, 12, 4, 5], [7, 8, 11, 4, 5, 6], [7, 8, 11, 12, 4, 5, 6], [9, 8, 11, 4, 13], [9, 8, 11, 12, 4, 13], [9, 10, 8, 11, 4, 13], [9, 10, 8, 11, 12, 4, 13], [9, 8, 11, 4, 5, 6, 7], [9, 8, 11, 12, 4, 5, 6, 7], [9, 10, 8, 11, 4, 5, 6, 7], [9, 10, 8, 11, 12, 4, 5, 6, 7], [11, 4, 5, 6, 7, 8, 9, 10], [11, 4, 5, 6, 8, 9, 10], [11, 12, 4, 5, 6, 7, 8, 9, 10], [11, 12, 4, 5, 6, 8, 9, 10], [10, 8, 9], [12, 4, 5, 6, 7, 8, 11], [12, 4, 5, 6, 8, 11], [1, 15, 3, 4, 13], [1, 15, 3, 4, 5, 6, 7, 8, 9, 10], [1, 15, 3, 4, 5, 6, 8, 9, 10], [1, 15, 3, 4, 5, 6, 7, 8, 11, 12], [1, 15, 3, 4, 5, 6, 8, 11, 12]], "covered_statements_linenumbers": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15], "missing_statements_linenumbers": [], "covered_prime_paths_linenumbers": [[5, 6, 7, 8, 11, 4, 13], [5, 6, 7, 8, 11, 12, 4, 13], [5, 6, 8, 11, 4, 13], [5, 6, 8, 11, 12, 4, 13], [6, 7, 8, 11, 4, 5], [6, 7, 8, 11, 12, 4, 5], [6, 8, 11, 4, 5], [6, 8, 11, 12, 4, 5], [7, 8, 11, 4, 5, 6], [7, 8, 11, 12, 4, 5, 6], [9, 8, 11, 4, 13], [9, 8, 11, 12, 4, 13], [9, 10, 8, 11, 4, 13], [9, 10, 8, 11, 12, 4, 13], [9, 8, 11, 4, 5, 6, 7], [9, 8, 11, 12, 4, 5, 6, 7], [9, 10, 8, 11, 4, 5, 6, 7], [9, 10, 8, 11, 12, 4, 5, 6, 7], [11, 4, 5, 6, 7, 8, 9, 10], [11, 4, 5, 6, 8, 9, 10], [11, 12, 4, 5, 6, 7, 8, 9, 10], [11, 12, 4, 5, 6, 8, 9, 10], [10, 8, 9], [12, 4, 5, 6, 7, 8, 11], [12, 4, 5, 6, 8, 11], [1, 15, 3, 4, 13], [1, 15, 3, 4, 5, 6, 7, 8, 9, 10], [1, 15, 3, 4, 5, 6, 8, 9, 10], [1, 15, 3, 4, 5, 6, 7, 8, 11, 12], [1, 15, 3, 4, 5, 6, 8, 11, 12]], "missing_prime_paths_linenumbers": [], "num_total_prime_paths": 30, "num_covered_paths": 30, "prime_path_coverage": 1.0, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_143_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_143_CFG.dot"}
{"humaneval_id": "HumanEval_33__1", "python_file": "HumanEval_33__1/main.py", "input_file": "HumanEval_33__1/input.txt", "prime_paths_nodes": [["1", "9", "3", "6"]], "prime_paths_statements": [["from typing import *\\ldef sort_third(l: list):...\\lsort_third([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])\\l", "sort_third", "l = list(l)\\ll[::3] = sorted(l[::3])\\l", "return l\\l"]], "prime_paths_linenumbers": [[1, 9, 5, 6, 7]], "covered_statements_linenumbers": [1, 4, 5, 6, 7, 9], "missing_statements_linenumbers": [], "covered_prime_paths_linenumbers": [[1, 9, 5, 6, 7]], "missing_prime_paths_linenumbers": [], "num_total_prime_paths": 1, "num_covered_paths": 1, "prime_path_coverage": 1.0, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_33__1_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_33__1_CFG.dot"}
{"humaneval_id": "HumanEval_90__1", "python_file": "HumanEval_90__1/main.py", "input_file": "HumanEval_90__1/input.txt", "prime_paths_nodes": [["1", "9", "3", "6"]], "prime_paths_statements": [["from typing import *\\ldef next_smallest(lst):...\\lnext_smallest([])\\l", "next_smallest", "lst = sorted(set(lst))\\l", "return None if len(lst) < 2 else lst[1]\\l"]], "prime_paths_linenumbers": [[1, 8, 5, 6]], "covered_statements_linenumbers": [1, 4, 5, 6, 8], "missing_statements_linenumbers": [], "covered_prime_paths_linenumbers": [[1, 8, 5, 6]], "missing_prime_paths_linenumbers": [], "num_total_prime_paths": 1, "num_covered_paths": 1, "prime_path_coverage": 1.0, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_90__1_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_90__1_CFG.dot"}
{"humaneval_id": "HumanEval_120__1", "python_file": "HumanEval_120__1/main.py", "input_file": "HumanEval_120__1/input.txt", "prime_paths_nodes": [["1", "11", "3", "4"], ["1", "11", "3", "5", "8"]], "prime_paths_statements": [["from typing import *\\ldef maximum(arr, k):...\\lmaximum([123, -123, 20, 0, 1, 2, -3], 3)\\l", "maximum", "if k == 0:\\l", "return []\\l"], ["from typing import *\\ldef maximum(arr, k):...\\lmaximum([123, -123, 20, 0, 1, 2, -3], 3)\\l", "maximum", "if k == 0:\\l", "arr.sort()\\lans = arr[-k:]\\l", "return ans\\l"]], "prime_paths_linenumbers": [[1, 11, 5, 6], [1, 11, 5, 7, 8, 9]], "covered_statements_linenumbers": [1, 4, 5, 7, 8, 9, 11], "missing_statements_linenumbers": [6], "covered_prime_paths_linenumbers": [[1, 11, 5, 7, 8, 9]], "missing_prime_paths_linenumbers": [[1, 11, 5, 6]], "num_total_prime_paths": 2, "num_covered_paths": 1, "prime_path_coverage": 0.5, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_120__1_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_120__1_CFG.dot"}
{"humaneval_id": "HumanEval_12", "python_file": "HumanEval_12/main.py", "input_file": "HumanEval_12/input.txt", "prime_paths_nodes": [["10", "9"], ["1", "17", "3", "4"], ["1", "17", "3", "5", "9", "10", "13"]], "prime_paths_statements": [["if len(s) == maxlen:\\l", "for s in strings:\\l"], ["from typing import *\\ldef longest(strings: List[str]) ->Optional[str]:...\\llongest(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc'])\\l", "longest", "if not strings:\\l", "return None\\l"], ["from typing import *\\ldef longest(strings: List[str]) ->Optional[str]:...\\llongest(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc'])\\l", "longest", "if not strings:\\l", "maxlen = max(len(x) for x in strings)\\l", "for s in strings:\\l", "if len(s) == maxlen:\\l", "return s\\l"]], "prime_paths_linenumbers": [[8, 7], [1, 11, 3, 4], [1, 11, 3, 6, 7, 8, 9]], "covered_statements_linenumbers": [1, 2, 3, 6, 7, 8, 9, 11], "missing_statements_linenumbers": [4], "covered_prime_paths_linenumbers": [[8, 7], [1, 11, 3, 6, 7, 8, 9]], "missing_prime_paths_linenumbers": [[1, 11, 3, 4]], "num_total_prime_paths": 3, "num_covered_paths": 2, "prime_path_coverage": 0.67, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_12_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_12_CFG.dot"}
{"humaneval_id": "HumanEval_19", "python_file": "HumanEval_19/main.py", "input_file": "HumanEval_19/input.txt", "prime_paths_nodes": [["1", "7", "3", "4"]], "prime_paths_statements": [["from typing import *\\ldef sort_numbers(numbers: str) ->str:...\\lsort_numbers('five zero four seven...')\\l", "sort_numbers", "value_map = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': \\l    5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\\l", "return ' '.join(sorted([x for ...' ') if x], key=lambda x:\\l    value_map[x]))\\l"]], "prime_paths_linenumbers": [[1, 17, 3, 15]], "covered_statements_linenumbers": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 17], "missing_statements_linenumbers": [], "covered_prime_paths_linenumbers": [[1, 17, 3, 15]], "missing_prime_paths_linenumbers": [], "num_total_prime_paths": 1, "num_covered_paths": 1, "prime_path_coverage": 1.0, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_19_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_19_CFG.dot"}
{"humaneval_id": "HumanEval_26__0", "python_file": "HumanEval_26__0/main.py", "input_file": "HumanEval_26__0/input.txt", "prime_paths_nodes": [["1", "8", "3", "5"]], "prime_paths_statements": [["from typing import *\\ldef remove_duplicates(numbers: List[int]) ->List[int]:...\\lremove_duplicates([1, 2, 3, 4])\\l", "remove_duplicates", "import collections\\lc = collections.Counter(numbers)\\l", "return [n for n in numbers if c[n] <= 1]\\l"]], "prime_paths_linenumbers": [[1, 9, 5, 6, 7]], "covered_statements_linenumbers": [1, 4, 5, 6, 7, 9], "missing_statements_linenumbers": [], "covered_prime_paths_linenumbers": [[1, 9, 5, 6, 7]], "missing_prime_paths_linenumbers": [], "num_total_prime_paths": 1, "num_covered_paths": 1, "prime_path_coverage": 1.0, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_26__0_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_26__0_CFG.dot"}
{"humaneval_id": "HumanEval_131__0", "python_file": "HumanEval_131__0/main.py", "input_file": "HumanEval_131__0/input.txt", "prime_paths_nodes": [["6", "9", "4", "7", "12"], ["6", "9", "10", "4", "7", "12"], ["6", "9", "4", "7", "14"], ["6", "9", "10", "4", "7", "14"], ["9", "4", "6"], ["9", "10", "4", "6"], ["10", "4", "6", "9"], ["1", "18", "3", "4", "6", "9", "10"], ["1", "18", "3", "4", "7", "12"], ["1", "18", "3", "4", "7", "14"]], "prime_paths_statements": [["int_digit = int(digit)\\l", "if int_digit % 2 == 1:\\l", "for digit in str(n):\\l", "if odd_count == 0:\\l", "return 0\\l"], ["int_digit = int(digit)\\l", "if int_digit % 2 == 1:\\l", "product = product * int_digit\\lodd_count += 1\\l", "for digit in str(n):\\l", "if odd_count == 0:\\l", "return 0\\l"], ["int_digit = int(digit)\\l", "if int_digit % 2 == 1:\\l", "for digit in str(n):\\l", "if odd_count == 0:\\l", "return product\\l"], ["int_digit = int(digit)\\l", "if int_digit % 2 == 1:\\l", "product = product * int_digit\\lodd_count += 1\\l", "for digit in str(n):\\l", "if odd_count == 0:\\l", "return product\\l"], ["if int_digit % 2 == 1:\\l", "for digit in str(n):\\l", "int_digit = int(digit)\\l"], ["if int_digit % 2 == 1:\\l", "product = product * int_digit\\lodd_count += 1\\l", "for digit in str(n):\\l", "int_digit = int(digit)\\l"], ["product = product * int_digit\\lodd_count += 1\\l", "for digit in str(n):\\l", "int_digit = int(digit)\\l", "if int_digit % 2 == 1:\\l"], ["from typing import *\\ldef digits(n):...\\ldigits(120)\\l", "digits", "product = 1\\lodd_count = 0\\l", "for digit in str(n):\\l", "int_digit = int(digit)\\l", "if int_digit % 2 == 1:\\l", "product = product * int_digit\\lodd_count += 1\\l"], ["from typing import *\\ldef digits(n):...\\ldigits(120)\\l", "digits", "product = 1\\lodd_count = 0\\l", "for digit in str(n):\\l", "if odd_count == 0:\\l", "return 0\\l"], ["from typing import *\\ldef digits(n):...\\ldigits(120)\\l", "digits", "product = 1\\lodd_count = 0\\l", "for digit in str(n):\\l", "if odd_count == 0:\\l", "return product\\l"]], "prime_paths_linenumbers": [[8, 9, 7, 12, 13], [8, 9, 10, 11, 7, 12, 13], [8, 9, 7, 12, 15], [8, 9, 10, 11, 7, 12, 15], [9, 7, 8], [9, 10, 11, 7, 8], [10, 11, 7, 8, 9], [1, 17, 5, 6, 7, 8, 9, 10, 11], [1, 17, 5, 6, 7, 12, 13], [1, 17, 5, 6, 7, 12, 15]], "covered_statements_linenumbers": [1, 4, 5, 6, 7, 8, 9, 10, 11, 12, 15, 17], "missing_statements_linenumbers": [13], "covered_prime_paths_linenumbers": [[8, 9, 7, 12, 15], [8, 9, 10, 11, 7, 12, 15], [9, 7, 8], [9, 10, 11, 7, 8], [10, 11, 7, 8, 9], [1, 17, 5, 6, 7, 8, 9, 10, 11], [1, 17, 5, 6, 7, 12, 15]], "missing_prime_paths_linenumbers": [[8, 9, 7, 12, 13], [8, 9, 10, 11, 7, 12, 13], [1, 17, 5, 6, 7, 12, 13]], "num_total_prime_paths": 10, "num_covered_paths": 7, "prime_path_coverage": 0.7, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_131__0_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_131__0_CFG.dot"}
{"humaneval_id": "HumanEval_44__1", "python_file": "HumanEval_44__1/main.py", "input_file": "HumanEval_44__1/input.txt", "prime_paths_nodes": [["5", "4", "6"], ["1", "10", "3", "4", "5"], ["1", "10", "3", "4", "6"]], "prime_paths_statements": [["ret = str(x % base) + ret\\lx //= base\\l", "while x > 0:\\l", "return ret\\l"], ["from typing import *\\ldef change_base(x: int, base: int):...\\lchange_base(9, 3)\\l", "change_base", "ret = ''\\l", "while x > 0:\\l", "ret = str(x % base) + ret\\lx //= base\\l"], ["from typing import *\\ldef change_base(x: int, base: int):...\\lchange_base(9, 3)\\l", "change_base", "ret = ''\\l", "while x > 0:\\l", "return ret\\l"]], "prime_paths_linenumbers": [[7, 8, 6, 9], [1, 11, 5, 6, 7, 8], [1, 11, 5, 6, 9]], "covered_statements_linenumbers": [1, 4, 5, 6, 7, 8, 9, 11], "missing_statements_linenumbers": [], "covered_prime_paths_linenumbers": [[7, 8, 6, 9], [1, 11, 5, 6, 7, 8], [1, 11, 5, 6, 9]], "missing_prime_paths_linenumbers": [], "num_total_prime_paths": 3, "num_covered_paths": 3, "prime_path_coverage": 1.0, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_44__1_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_44__1_CFG.dot"}
{"humaneval_id": "HumanEval_146__0", "python_file": "HumanEval_146__0/main.py", "input_file": "HumanEval_146__0/input.txt", "prime_paths_nodes": [["5", "4", "6"], ["5", "7", "10", "4", "6"], ["5", "7", "10", "11", "4", "6"], ["7", "10", "4", "5"], ["7", "10", "11", "4", "5"], ["10", "4", "5", "7"], ["10", "11", "4", "5", "7"], ["11", "4", "5", "7", "10"], ["1", "15", "3", "4", "6"], ["1", "15", "3", "4", "5", "7", "10", "11"]], "prime_paths_statements": [["if num > 10:\\l", "for num in nums:\\l", "return count\\l"], ["if num > 10:\\l", "odd_digits = 1, 3, 5, 7, 9\\lnumber_as_string = str(num)\\l", "if int(number_as_string[0]) in odd_digits and int(number_as_string[-1]\\l", "for num in nums:\\l", "return count\\l"], ["if num > 10:\\l", "odd_digits = 1, 3, 5, 7, 9\\lnumber_as_string = str(num)\\l", "if int(number_as_string[0]) in odd_digits and int(number_as_string[-1]\\l", "count += 1\\l", "for num in nums:\\l", "return count\\l"], ["odd_digits = 1, 3, 5, 7, 9\\lnumber_as_string = str(num)\\l", "if int(number_as_string[0]) in odd_digits and int(number_as_string[-1]\\l", "for num in nums:\\l", "if num > 10:\\l"], ["odd_digits = 1, 3, 5, 7, 9\\lnumber_as_string = str(num)\\l", "if int(number_as_string[0]) in odd_digits and int(number_as_string[-1]\\l", "count += 1\\l", "for num in nums:\\l", "if num > 10:\\l"], ["if int(number_as_string[0]) in odd_digits and int(number_as_string[-1]\\l", "for num in nums:\\l", "if num > 10:\\l", "odd_digits = 1, 3, 5, 7, 9\\lnumber_as_string = str(num)\\l"], ["if int(number_as_string[0]) in odd_digits and int(number_as_string[-1]\\l", "count += 1\\l", "for num in nums:\\l", "if num > 10:\\l", "odd_digits = 1, 3, 5, 7, 9\\lnumber_as_string = str(num)\\l"], ["count += 1\\l", "for num in nums:\\l", "if num > 10:\\l", "odd_digits = 1, 3, 5, 7, 9\\lnumber_as_string = str(num)\\l", "if int(number_as_string[0]) in odd_digits and int(number_as_string[-1]\\l"], ["from typing import *\\ldef specialFilter(nums):...\\lspecialFilter([1])\\l", "specialFilter", "count = 0\\l", "for num in nums:\\l", "return count\\l"], ["from typing import *\\ldef specialFilter(nums):...\\lspecialFilter([1])\\l", "specialFilter", "count = 0\\l", "for num in nums:\\l", "if num > 10:\\l", "odd_digits = 1, 3, 5, 7, 9\\lnumber_as_string = str(num)\\l", "if int(number_as_string[0]) in odd_digits and int(number_as_string[-1]\\l", "count += 1\\l"]], "prime_paths_linenumbers": [[8, 7, 15], [8, 9, 10, 11, 7, 15], [8, 9, 10, 11, 13, 7, 15], [9, 10, 11, 7, 8], [9, 10, 11, 13, 7, 8], [11, 7, 8, 9, 10], [11, 13, 7, 8, 9, 10], [13, 7, 8, 9, 10, 11], [1, 17, 6, 7, 15], [1, 17, 6, 7, 8, 9, 10, 11, 13]], "covered_statements_linenumbers": [1, 4, 6, 7, 8, 15, 17], "missing_statements_linenumbers": [9, 10, 11, 13], "covered_prime_paths_linenumbers": [[8, 7, 15], [1, 17, 6, 7, 15]], "missing_prime_paths_linenumbers": [[8, 9, 10, 11, 7, 15], [8, 9, 10, 11, 13, 7, 15], [9, 10, 11, 7, 8], [9, 10, 11, 13, 7, 8], [11, 7, 8, 9, 10], [11, 13, 7, 8, 9, 10], [13, 7, 8, 9, 10, 11], [1, 17, 6, 7, 8, 9, 10, 11, 13]], "num_total_prime_paths": 10, "num_covered_paths": 2, "prime_path_coverage": 0.2, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_146__0_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_146__0_CFG.dot"}
{"humaneval_id": "HumanEval_117__1", "python_file": "HumanEval_117__1/main.py", "input_file": "HumanEval_117__1/input.txt", "prime_paths_nodes": [["6", "8", "12", "4", "7"], ["6", "8", "12", "16", "4", "7"], ["11", "8", "12", "4", "6"], ["11", "8", "12", "16", "4", "6"], ["11", "14", "8", "12", "4", "6"], ["11", "14", "8", "12", "16", "4", "6"], ["11", "8", "12", "4", "7"], ["11", "8", "12", "16", "4", "7"], ["11", "14", "8", "12", "4", "7"], ["11", "14", "8", "12", "16", "4", "7"], ["12", "4", "6", "8", "11", "14"], ["12", "16", "4", "6", "8", "11", "14"], ["14", "8", "11"], ["16", "4", "6", "8", "12"], ["1", "21", "3", "4", "7"], ["1", "21", "3", "4", "6", "8", "11", "14"], ["1", "21", "3", "4", "6", "8", "12", "16"]], "prime_paths_statements": [["n_consonants = 0\\l", "for i in range(0, len(word)):\\l", "if n_consonants == n:\\l", "for word in s.split():\\l", "return result\\l"], ["n_consonants = 0\\l", "for i in range(0, len(word)):\\l", "if n_consonants == n:\\l", "result.append(word)\\l", "for word in s.split():\\l", "return result\\l"], ["if word[i].lower() not in ['a', 'e', 'i', 'o', 'u']:\\l", "for i in range(0, len(word)):\\l", "if n_consonants == n:\\l", "for word in s.split():\\l", "n_consonants = 0\\l"], ["if word[i].lower() not in ['a', 'e', 'i', 'o', 'u']:\\l", "for i in range(0, len(word)):\\l", "if n_consonants == n:\\l", "result.append(word)\\l", "for word in s.split():\\l", "n_consonants = 0\\l"], ["if word[i].lower() not in ['a', 'e', 'i', 'o', 'u']:\\l", "n_consonants += 1\\l", "for i in range(0, len(word)):\\l", "if n_consonants == n:\\l", "for word in s.split():\\l", "n_consonants = 0\\l"], ["if word[i].lower() not in ['a', 'e', 'i', 'o', 'u']:\\l", "n_consonants += 1\\l", "for i in range(0, len(word)):\\l", "if n_consonants == n:\\l", "result.append(word)\\l", "for word in s.split():\\l", "n_consonants = 0\\l"], ["if word[i].lower() not in ['a', 'e', 'i', 'o', 'u']:\\l", "for i in range(0, len(word)):\\l", "if n_consonants == n:\\l", "for word in s.split():\\l", "return result\\l"], ["if word[i].lower() not in ['a', 'e', 'i', 'o', 'u']:\\l", "for i in range(0, len(word)):\\l", "if n_consonants == n:\\l", "result.append(word)\\l", "for word in s.split():\\l", "return result\\l"], ["if word[i].lower() not in ['a', 'e', 'i', 'o', 'u']:\\l", "n_consonants += 1\\l", "for i in range(0, len(word)):\\l", "if n_consonants == n:\\l", "for word in s.split():\\l", "return result\\l"], ["if word[i].lower() not in ['a', 'e', 'i', 'o', 'u']:\\l", "n_consonants += 1\\l", "for i in range(0, len(word)):\\l", "if n_consonants == n:\\l", "result.append(word)\\l", "for word in s.split():\\l", "return result\\l"], ["if n_consonants == n:\\l", "for word in s.split():\\l", "n_consonants = 0\\l", "for i in range(0, len(word)):\\l", "if word[i].lower() not in ['a', 'e', 'i', 'o', 'u']:\\l", "n_consonants += 1\\l"], ["if n_consonants == n:\\l", "result.append(word)\\l", "for word in s.split():\\l", "n_consonants = 0\\l", "for i in range(0, len(word)):\\l", "if word[i].lower() not in ['a', 'e', 'i', 'o', 'u']:\\l", "n_consonants += 1\\l"], ["n_consonants += 1\\l", "for i in range(0, len(word)):\\l", "if word[i].lower() not in ['a', 'e', 'i', 'o', 'u']:\\l"], ["result.append(word)\\l", "for word in s.split():\\l", "n_consonants = 0\\l", "for i in range(0, len(word)):\\l", "if n_consonants == n:\\l"], ["from typing import *\\ldef select_words(s, n):...\\lselect_words('Mary had a little la...', 3)\\l", "select_words", "result = []\\l", "for word in s.split():\\l", "return result\\l"], ["from typing import *\\ldef select_words(s, n):...\\lselect_words('Mary had a little la...', 3)\\l", "select_words", "result = []\\l", "for word in s.split():\\l", "n_consonants = 0\\l", "for i in range(0, len(word)):\\l", "if word[i].lower() not in ['a', 'e', 'i', 'o', 'u']:\\l", "n_consonants += 1\\l"], ["from typing import *\\ldef select_words(s, n):...\\lselect_words('Mary had a little la...', 3)\\l", "select_words", "result = []\\l", "for word in s.split():\\l", "n_consonants = 0\\l", "for i in range(0, len(word)):\\l", "if n_consonants == n:\\l", "result.append(word)\\l"]], "prime_paths_linenumbers": [[7, 8, 11, 6, 13], [7, 8, 11, 12, 6, 13], [9, 8, 11, 6, 7], [9, 8, 11, 12, 6, 7], [9, 10, 8, 11, 6, 7], [9, 10, 8, 11, 12, 6, 7], [9, 8, 11, 6, 13], [9, 8, 11, 12, 6, 13], [9, 10, 8, 11, 6, 13], [9, 10, 8, 11, 12, 6, 13], [11, 6, 7, 8, 9, 10], [11, 12, 6, 7, 8, 9, 10], [10, 8, 9], [12, 6, 7, 8, 11], [1, 15, 5, 6, 13], [1, 15, 5, 6, 7, 8, 9, 10], [1, 15, 5, 6, 7, 8, 11, 12]], "covered_statements_linenumbers": [1, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15], "missing_statements_linenumbers": [], "covered_prime_paths_linenumbers": [[7, 8, 11, 6, 13], [7, 8, 11, 12, 6, 13], [9, 8, 11, 6, 7], [9, 8, 11, 12, 6, 7], [9, 10, 8, 11, 6, 7], [9, 10, 8, 11, 12, 6, 7], [9, 8, 11, 6, 13], [9, 8, 11, 12, 6, 13], [9, 10, 8, 11, 6, 13], [9, 10, 8, 11, 12, 6, 13], [11, 6, 7, 8, 9, 10], [11, 12, 6, 7, 8, 9, 10], [10, 8, 9], [12, 6, 7, 8, 11], [1, 15, 5, 6, 13], [1, 15, 5, 6, 7, 8, 9, 10], [1, 15, 5, 6, 7, 8, 11, 12]], "missing_prime_paths_linenumbers": [], "num_total_prime_paths": 17, "num_covered_paths": 17, "prime_path_coverage": 1.0, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_117__1_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_117__1_CFG.dot"}
{"humaneval_id": "HumanEval_79", "python_file": "HumanEval_79/main.py", "input_file": "HumanEval_79/input.txt", "prime_paths_nodes": [["1", "6", "3"]], "prime_paths_statements": [["from typing import *\\ldef decimal_to_binary(decimal):...\\ldecimal_to_binary(0)\\l", "decimal_to_binary", "return 'db' + bin(decimal)[2:] ...'db'\\l"]], "prime_paths_linenumbers": [[1, 5, 3]], "covered_statements_linenumbers": [1, 2, 3, 5], "missing_statements_linenumbers": [], "covered_prime_paths_linenumbers": [[1, 5, 3]], "missing_prime_paths_linenumbers": [], "num_total_prime_paths": 1, "num_covered_paths": 1, "prime_path_coverage": 1.0, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_79_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_79_CFG.dot"}
{"humaneval_id": "HumanEval_75__0", "python_file": "HumanEval_75__0/main.py", "input_file": "HumanEval_75__0/input.txt", "prime_paths_nodes": [["5", "7", "9"], ["7", "5", "8"], ["16", "18", "14", "17"], ["16", "19", "14", "17"], ["18", "14", "16", "19", "22", "24"], ["18", "14", "16", "19", "22", "25", "28", "30"], ["18", "14", "16", "19", "22", "25", "28", "31", "33"], ["22", "24", "19", "14", "17"], ["22", "25", "19", "14", "17"], ["22", "24", "19", "14", "16", "18"], ["22", "25", "19", "14", "16", "18"], ["24", "19", "22", "25", "28", "30"], ["24", "19", "22", "25", "28", "31", "33"], ["28", "30", "25", "19", "14", "17"], ["28", "31", "25", "19", "14", "17"], ["28", "30", "25", "19", "14", "16", "18"], ["28", "31", "25", "19", "14", "16", "18"], ["28", "30", "25", "19", "22", "24"], ["28", "31", "25", "19", "22", "24"], ["30", "25", "28", "31", "33"], ["31", "25", "28", "30"], ["1", "38", "3", "14", "17"], ["1", "38", "3", "14", "16", "18"], ["1", "38", "3", "14", "16", "19", "22", "24"], ["1", "38", "3", "14", "16", "19", "22", "25", "28", "30"], ["1", "38", "3", "14", "16", "19", "22", "25", "28", "31", "33"]], "prime_paths_statements": [["for j in range(2, n):\\l", "if n % j == 0:\\l", "return False\\l"], ["if n % j == 0:\\l", "for j in range(2, n):\\l", "return True\\l"], ["if not is_prime(i):\\l", "continue\\l", "for i in range(2, 101):\\l", "return False\\l"], ["if not is_prime(i):\\l", "for j in range(2, 101):\\l", "for i in range(2, 101):\\l", "return False\\l"], ["continue\\l", "for i in range(2, 101):\\l", "if not is_prime(i):\\l", "for j in range(2, 101):\\l", "if not is_prime(j):\\l", "continue\\l"], ["continue\\l", "for i in range(2, 101):\\l", "if not is_prime(i):\\l", "for j in range(2, 101):\\l", "if not is_prime(j):\\l", "for k in range(2, 101):\\l", "if not is_prime(k):\\l", "continue\\l"], ["continue\\l", "for i in range(2, 101):\\l", "if not is_prime(i):\\l", "for j in range(2, 101):\\l", "if not is_prime(j):\\l", "for k in range(2, 101):\\l", "if not is_prime(k):\\l", "if i * j * k == a:\\l", "return True\\l"], ["if not is_prime(j):\\l", "continue\\l", "for j in range(2, 101):\\l", "for i in range(2, 101):\\l", "return False\\l"], ["if not is_prime(j):\\l", "for k in range(2, 101):\\l", "for j in range(2, 101):\\l", "for i in range(2, 101):\\l", "return False\\l"], ["if not is_prime(j):\\l", "continue\\l", "for j in range(2, 101):\\l", "for i in range(2, 101):\\l", "if not is_prime(i):\\l", "continue\\l"], ["if not is_prime(j):\\l", "for k in range(2, 101):\\l", "for j in range(2, 101):\\l", "for i in range(2, 101):\\l", "if not is_prime(i):\\l", "continue\\l"], ["continue\\l", "for j in range(2, 101):\\l", "if not is_prime(j):\\l", "for k in range(2, 101):\\l", "if not is_prime(k):\\l", "continue\\l"], ["continue\\l", "for j in range(2, 101):\\l", "if not is_prime(j):\\l", "for k in range(2, 101):\\l", "if not is_prime(k):\\l", "if i * j * k == a:\\l", "return True\\l"], ["if not is_prime(k):\\l", "continue\\l", "for k in range(2, 101):\\l", "for j in range(2, 101):\\l", "for i in range(2, 101):\\l", "return False\\l"], ["if not is_prime(k):\\l", "if i * j * k == a:\\l", "for k in range(2, 101):\\l", "for j in range(2, 101):\\l", "for i in range(2, 101):\\l", "return False\\l"], ["if not is_prime(k):\\l", "continue\\l", "for k in range(2, 101):\\l", "for j in range(2, 101):\\l", "for i in range(2, 101):\\l", "if not is_prime(i):\\l", "continue\\l"], ["if not is_prime(k):\\l", "if i * j * k == a:\\l", "for k in range(2, 101):\\l", "for j in range(2, 101):\\l", "for i in range(2, 101):\\l", "if not is_prime(i):\\l", "continue\\l"], ["if not is_prime(k):\\l", "continue\\l", "for k in range(2, 101):\\l", "for j in range(2, 101):\\l", "if not is_prime(j):\\l", "continue\\l"], ["if not is_prime(k):\\l", "if i * j * k == a:\\l", "for k in range(2, 101):\\l", "for j in range(2, 101):\\l", "if not is_prime(j):\\l", "continue\\l"], ["continue\\l", "for k in range(2, 101):\\l", "if not is_prime(k):\\l", "if i * j * k == a:\\l", "return True\\l"], ["if i * j * k == a:\\l", "for k in range(2, 101):\\l", "if not is_prime(k):\\l", "continue\\l"], ["from typing import *\\ldef is_multiply_prime(a):...\\lis_multiply_prime(3 * 6 * 7)\\l", "is_multiply_prime", "def is_prime(n):...\\l", "for i in range(2, 101):\\l", "return False\\l"], ["from typing import *\\ldef is_multiply_prime(a):...\\lis_multiply_prime(3 * 6 * 7)\\l", "is_multiply_prime", "def is_prime(n):...\\l", "for i in range(2, 101):\\l", "if not is_prime(i):\\l", "continue\\l"], ["from typing import *\\ldef is_multiply_prime(a):...\\lis_multiply_prime(3 * 6 * 7)\\l", "is_multiply_prime", "def is_prime(n):...\\l", "for i in range(2, 101):\\l", "if not is_prime(i):\\l", "for j in range(2, 101):\\l", "if not is_prime(j):\\l", "continue\\l"], ["from typing import *\\ldef is_multiply_prime(a):...\\lis_multiply_prime(3 * 6 * 7)\\l", "is_multiply_prime", "def is_prime(n):...\\l", "for i in range(2, 101):\\l", "if not is_prime(i):\\l", "for j in range(2, 101):\\l", "if not is_prime(j):\\l", "for k in range(2, 101):\\l", "if not is_prime(k):\\l", "continue\\l"], ["from typing import *\\ldef is_multiply_prime(a):...\\lis_multiply_prime(3 * 6 * 7)\\l", "is_multiply_prime", "def is_prime(n):...\\l", "for i in range(2, 101):\\l", "if not is_prime(i):\\l", "for j in range(2, 101):\\l", "if not is_prime(j):\\l", "for k in range(2, 101):\\l", "if not is_prime(k):\\l", "if i * j * k == a:\\l", "return True\\l"]], "prime_paths_linenumbers": [[6, 7, 8], [7, 6, 9], [12, 13, 11, 22], [12, 14, 11, 22], [13, 11, 12, 14, 15, 16], [13, 11, 12, 14, 15, 17, 18, 19], [13, 11, 12, 14, 15, 17, 18, 20, 21], [15, 16, 14, 11, 22], [15, 17, 14, 11, 22], [15, 16, 14, 11, 12, 13], [15, 17, 14, 11, 12, 13], [16, 14, 15, 17, 18, 19], [16, 14, 15, 17, 18, 20, 21], [18, 19, 17, 14, 11, 22], [18, 20, 17, 14, 11, 22], [18, 19, 17, 14, 11, 12, 13], [18, 20, 17, 14, 11, 12, 13], [18, 19, 17, 14, 15, 16], [18, 20, 17, 14, 15, 16], [19, 17, 18, 20, 21], [20, 17, 18, 19], [1, 24, 5, 11, 22], [1, 24, 5, 11, 12, 13], [1, 24, 5, 11, 12, 14, 15, 16], [1, 24, 5, 11, 12, 14, 15, 17, 18, 19], [1, 24, 5, 11, 12, 14, 15, 17, 18, 20, 21]], "covered_statements_linenumbers": [1, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 24], "missing_statements_linenumbers": [21], "covered_prime_paths_linenumbers": [[6, 7, 8], [7, 6, 9], [12, 13, 11, 22], [12, 14, 11, 22], [13, 11, 12, 14, 15, 16], [13, 11, 12, 14, 15, 17, 18, 19], [15, 16, 14, 11, 22], [15, 17, 14, 11, 22], [15, 16, 14, 11, 12, 13], [15, 17, 14, 11, 12, 13], [16, 14, 15, 17, 18, 19], [18, 19, 17, 14, 11, 22], [18, 20, 17, 14, 11, 22], [18, 19, 17, 14, 11, 12, 13], [18, 20, 17, 14, 11, 12, 13], [18, 19, 17, 14, 15, 16], [18, 20, 17, 14, 15, 16], [20, 17, 18, 19], [1, 24, 5, 11, 22], [1, 24, 5, 11, 12, 13], [1, 24, 5, 11, 12, 14, 15, 16], [1, 24, 5, 11, 12, 14, 15, 17, 18, 19]], "missing_prime_paths_linenumbers": [[13, 11, 12, 14, 15, 17, 18, 20, 21], [16, 14, 15, 17, 18, 20, 21], [19, 17, 18, 20, 21], [1, 24, 5, 11, 12, 14, 15, 17, 18, 20, 21]], "num_total_prime_paths": 26, "num_covered_paths": 22, "prime_path_coverage": 0.85, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_75__0_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_75__0_CFG.dot"}
{"humaneval_id": "HumanEval_57__1", "python_file": "HumanEval_57__1/main.py", "input_file": "HumanEval_57__1/input.txt", "prime_paths_nodes": [["1", "9", "3", "4"], ["1", "9", "3", "5"]], "prime_paths_statements": [["from typing import *\\ldef monotonic(l: list):...\\lmonotonic([1, 2, 4, 20])\\l", "monotonic", "if l == sorted(l) or l == sorted(l, reverse=True):\\l", "return True\\l"], ["from typing import *\\ldef monotonic(l: list):...\\lmonotonic([1, 2, 4, 20])\\l", "monotonic", "if l == sorted(l) or l == sorted(l, reverse=True):\\l", "return False\\l"]], "prime_paths_linenumbers": [[1, 9, 5, 6], [1, 9, 5, 7]], "covered_statements_linenumbers": [1, 4, 5, 6, 9], "missing_statements_linenumbers": [7], "covered_prime_paths_linenumbers": [[1, 9, 5, 6]], "missing_prime_paths_linenumbers": [[1, 9, 5, 7]], "num_total_prime_paths": 2, "num_covered_paths": 1, "prime_path_coverage": 0.5, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_57__1_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_57__1_CFG.dot"}
{"humaneval_id": "HumanEval_118", "python_file": "HumanEval_118/main.py", "input_file": "HumanEval_118/input.txt", "prime_paths_nodes": [["11", "8", "12"], ["11", "13", "8", "12"], ["13", "8", "11"], ["1", "20", "3", "5"], ["1", "20", "3", "6", "8", "12"], ["1", "20", "3", "6", "8", "11", "13", "15"]], "prime_paths_statements": [["if word[i] in vowels:\\l", "for i in range(len(word) - 2, 0, -1):\\l", "return ''\\l"], ["if word[i] in vowels:\\l", "if word[i + 1] not in vowels and word[i - 1] not in vowels:\\l", "for i in range(len(word) - 2, 0, -1):\\l", "return ''\\l"], ["if word[i + 1] not in vowels and word[i - 1] not in vowels:\\l", "for i in range(len(word) - 2, 0, -1):\\l", "if word[i] in vowels:\\l"], ["from typing import *\\ldef get_closest_vowel(word):...\\lget_closest_vowel('yogurt')\\l", "get_closest_vowel", "if len(word) < 3:\\l", "return ''\\l"], ["from typing import *\\ldef get_closest_vowel(word):...\\lget_closest_vowel('yogurt')\\l", "get_closest_vowel", "if len(word) < 3:\\l", "vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'O', 'U', 'I'}\\l", "for i in range(len(word) - 2, 0, -1):\\l", "return ''\\l"], ["from typing import *\\ldef get_closest_vowel(word):...\\lget_closest_vowel('yogurt')\\l", "get_closest_vowel", "if len(word) < 3:\\l", "vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'O', 'U', 'I'}\\l", "for i in range(len(word) - 2, 0, -1):\\l", "if word[i] in vowels:\\l", "if word[i + 1] not in vowels and word[i - 1] not in vowels:\\l", "return word[i]\\l"]], "prime_paths_linenumbers": [[8, 7, 11], [8, 9, 7, 11], [9, 7, 8], [1, 13, 3, 4], [1, 13, 3, 6, 7, 11], [1, 13, 3, 6, 7, 8, 9, 10]], "covered_statements_linenumbers": [1, 2, 3, 6, 7, 8, 9, 10, 13], "missing_statements_linenumbers": [4, 11], "covered_prime_paths_linenumbers": [[9, 7, 8], [1, 13, 3, 6, 7, 8, 9, 10]], "missing_prime_paths_linenumbers": [[8, 7, 11], [8, 9, 7, 11], [1, 13, 3, 4], [1, 13, 3, 6, 7, 11]], "num_total_prime_paths": 6, "num_covered_paths": 2, "prime_path_coverage": 0.33, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_118_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_118_CFG.dot"}
{"humaneval_id": "HumanEval_0", "python_file": "HumanEval_0/main.py", "input_file": "HumanEval_0/input.txt", "prime_paths_nodes": [["8", "5", "3", "6"], ["8", "10", "13", "5", "3", "6"], ["10", "13", "5", "8"], ["13", "5", "8", "10"], ["1", "19", "3", "6"], ["1", "19", "3", "5", "8", "10", "13", "14"]], "prime_paths_statements": [["if idx != idx2:\\l", "for idx2, elem2 in enumerate(numbers):\\l", "for idx, elem in enumerate(numbers):\\l", "return False\\l"], ["if idx != idx2:\\l", "distance = abs(elem - elem2)\\l", "if distance < threshold:\\l", "for idx2, elem2 in enumerate(numbers):\\l", "for idx, elem in enumerate(numbers):\\l", "return False\\l"], ["distance = abs(elem - elem2)\\l", "if distance < threshold:\\l", "for idx2, elem2 in enumerate(numbers):\\l", "if idx != idx2:\\l"], ["if distance < threshold:\\l", "for idx2, elem2 in enumerate(numbers):\\l", "if idx != idx2:\\l", "distance = abs(elem - elem2)\\l"], ["from typing import *\\ldef has_close_elements(numbers: List[float], threshold: float) ->bool:...\\lhas_close_elements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3)\\l", "has_close_elements", "for idx, elem in enumerate(numbers):\\l", "return False\\l"], ["from typing import *\\ldef has_close_elements(numbers: List[float], threshold: float) ->bool:...\\lhas_close_elements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3)\\l", "has_close_elements", "for idx, elem in enumerate(numbers):\\l", "for idx2, elem2 in enumerate(numbers):\\l", "if idx != idx2:\\l", "distance = abs(elem - elem2)\\l", "if distance < threshold:\\l", "return True\\l"]], "prime_paths_linenumbers": [[5, 4, 3, 10], [5, 6, 7, 4, 3, 10], [6, 7, 4, 5], [7, 4, 5, 6], [1, 12, 3, 10], [1, 12, 3, 4, 5, 6, 7, 8]], "covered_statements_linenumbers": [1, 2, 3, 4, 5, 6, 7, 8, 12], "missing_statements_linenumbers": [10], "covered_prime_paths_linenumbers": [[6, 7, 4, 5], [7, 4, 5, 6], [1, 12, 3, 4, 5, 6, 7, 8]], "missing_prime_paths_linenumbers": [[5, 4, 3, 10], [5, 6, 7, 4, 3, 10], [1, 12, 3, 10]], "num_total_prime_paths": 6, "num_covered_paths": 3, "prime_path_coverage": 0.5, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_0_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_0_CFG.dot"}
{"humaneval_id": "HumanEval_40__1", "python_file": "HumanEval_40__1/main.py", "input_file": "HumanEval_40__1/input.txt", "prime_paths_nodes": [["14", "10", "6", "3", "7"], ["1", "21", "3", "7"], ["1", "21", "3", "6", "10", "14", "16"]], "prime_paths_statements": [["if l[i] + l[j] + l[k] == 0:\\l", "for k in range(j + 1, len(l)):\\l", "for j in range(i + 1, len(l)):\\l", "for i in range(len(l)):\\l", "return False\\l"], ["from typing import *\\ldef triples_sum_to_zero(l: list):...\\ltriples_sum_to_zero([2, 4, -5, 3, 9, 7])\\l", "triples_sum_to_zero", "for i in range(len(l)):\\l", "return False\\l"], ["from typing import *\\ldef triples_sum_to_zero(l: list):...\\ltriples_sum_to_zero([2, 4, -5, 3, 9, 7])\\l", "triples_sum_to_zero", "for i in range(len(l)):\\l", "for j in range(i + 1, len(l)):\\l", "for k in range(j + 1, len(l)):\\l", "if l[i] + l[j] + l[k] == 0:\\l", "return True\\l"]], "prime_paths_linenumbers": [[8, 7, 6, 5, 10], [1, 12, 5, 10], [1, 12, 5, 6, 7, 8, 9]], "covered_statements_linenumbers": [1, 4, 5, 6, 7, 8, 9, 12], "missing_statements_linenumbers": [10], "covered_prime_paths_linenumbers": [[1, 12, 5, 6, 7, 8, 9]], "missing_prime_paths_linenumbers": [[8, 7, 6, 5, 10], [1, 12, 5, 10]], "num_total_prime_paths": 3, "num_covered_paths": 1, "prime_path_coverage": 0.33, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_40__1_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_40__1_CFG.dot"}
{"humaneval_id": "HumanEval_49", "python_file": "HumanEval_49/main.py", "input_file": "HumanEval_49/input.txt", "prime_paths_nodes": [["6", "4", "7"], ["1", "10", "3", "4", "6"], ["1", "10", "3", "4", "7"]], "prime_paths_statements": [["ret = 2 * ret % p\\l", "for i in range(n):\\l", "return ret\\l"], ["from typing import *\\ldef modp(n: int, p: int):...\\lmodp(3, 5)\\l", "modp", "ret = 1\\l", "for i in range(n):\\l", "ret = 2 * ret % p\\l"], ["from typing import *\\ldef modp(n: int, p: int):...\\lmodp(3, 5)\\l", "modp", "ret = 1\\l", "for i in range(n):\\l", "return ret\\l"]], "prime_paths_linenumbers": [[5, 4, 6], [1, 8, 3, 4, 5], [1, 8, 3, 4, 6]], "covered_statements_linenumbers": [1, 2, 3, 4, 5, 6, 8], "missing_statements_linenumbers": [], "covered_prime_paths_linenumbers": [[5, 4, 6], [1, 8, 3, 4, 5], [1, 8, 3, 4, 6]], "missing_prime_paths_linenumbers": [], "num_total_prime_paths": 3, "num_covered_paths": 3, "prime_path_coverage": 1.0, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_49_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_49_CFG.dot"}
{"humaneval_id": "HumanEval_130", "python_file": "HumanEval_130/main.py", "input_file": "HumanEval_130/input.txt", "prime_paths_nodes": [["9", "11", "7", "10"], ["9", "13", "7", "10"], ["11", "7", "9", "13"], ["13", "7", "9", "11"], ["1", "18", "3", "4"], ["1", "18", "3", "5", "7", "10"], ["1", "18", "3", "5", "7", "9", "11"], ["1", "18", "3", "5", "7", "9", "13"]], "prime_paths_statements": [["if i % 2 == 0:\\l", "my_tri.append(i / 2 + 1)\\l", "for i in range(2, n + 1):\\l", "return my_tri\\l"], ["if i % 2 == 0:\\l", "my_tri.append(my_tri[i - 1] + my_tri[i - 2] + (i + 3) / 2)\\l", "for i in range(2, n + 1):\\l", "return my_tri\\l"], ["my_tri.append(i / 2 + 1)\\l", "for i in range(2, n + 1):\\l", "if i % 2 == 0:\\l", "my_tri.append(my_tri[i - 1] + my_tri[i - 2] + (i + 3) / 2)\\l"], ["my_tri.append(my_tri[i - 1] + my_tri[i - 2] + (i + 3) / 2)\\l", "for i in range(2, n + 1):\\l", "if i % 2 == 0:\\l", "my_tri.append(i / 2 + 1)\\l"], ["from typing import *\\ldef tri(n):...\\ltri(3)\\l", "tri", "if n == 0:\\l", "return [1]\\l"], ["from typing import *\\ldef tri(n):...\\ltri(3)\\l", "tri", "if n == 0:\\l", "my_tri = [1, 3]\\l", "for i in range(2, n + 1):\\l", "return my_tri\\l"], ["from typing import *\\ldef tri(n):...\\ltri(3)\\l", "tri", "if n == 0:\\l", "my_tri = [1, 3]\\l", "for i in range(2, n + 1):\\l", "if i % 2 == 0:\\l", "my_tri.append(i / 2 + 1)\\l"], ["from typing import *\\ldef tri(n):...\\ltri(3)\\l", "tri", "if n == 0:\\l", "my_tri = [1, 3]\\l", "for i in range(2, n + 1):\\l", "if i % 2 == 0:\\l", "my_tri.append(my_tri[i - 1] + my_tri[i - 2] + (i + 3) / 2)\\l"]], "prime_paths_linenumbers": [[7, 8, 6, 11], [7, 10, 6, 11], [8, 6, 7, 10], [10, 6, 7, 8], [1, 13, 3, 4], [1, 13, 3, 5, 6, 11], [1, 13, 3, 5, 6, 7, 8], [1, 13, 3, 5, 6, 7, 10]], "covered_statements_linenumbers": [1, 2, 3, 5, 6, 7, 8, 10, 11, 13], "missing_statements_linenumbers": [4], "covered_prime_paths_linenumbers": [[7, 8, 6, 11], [7, 10, 6, 11], [8, 6, 7, 10], [10, 6, 7, 8], [1, 13, 3, 5, 6, 11], [1, 13, 3, 5, 6, 7, 8], [1, 13, 3, 5, 6, 7, 10]], "missing_prime_paths_linenumbers": [[1, 13, 3, 4]], "num_total_prime_paths": 8, "num_covered_paths": 7, "prime_path_coverage": 0.88, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_130_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_130_CFG.dot"}
{"humaneval_id": "HumanEval_2__0", "python_file": "HumanEval_2__0/main.py", "input_file": "HumanEval_2__0/input.txt", "prime_paths_nodes": [["1", "6", "3"]], "prime_paths_statements": [["from typing import *\\ldef truncate_number(number: float) ->float:...\\ltruncate_number(123.456)\\l", "truncate_number", "return number % 1.0\\l"]], "prime_paths_linenumbers": [[1, 7, 5]], "covered_statements_linenumbers": [1, 4, 5, 7], "missing_statements_linenumbers": [], "covered_prime_paths_linenumbers": [[1, 7, 5]], "missing_prime_paths_linenumbers": [], "num_total_prime_paths": 1, "num_covered_paths": 1, "prime_path_coverage": 1.0, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_2__0_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_2__0_CFG.dot"}
{"humaneval_id": "HumanEval_39__1", "python_file": "HumanEval_39__1/main.py", "input_file": "HumanEval_39__1/input.txt", "prime_paths_nodes": [["5", "6"], ["5", "7", "14"], ["5", "7", "13", "15"], ["13", "7", "14"], ["21", "24", "26", "27", "20"], ["21", "24", "27", "20"], ["24", "26", "27", "20", "21"], ["24", "27", "20", "21"], ["26", "27", "20", "21", "24"], ["27", "20", "21", "24", "26"], ["1", "32", "3", "20", "21", "24", "26", "27", "28"], ["1", "32", "3", "20", "21", "24", "27", "28"]], "prime_paths_statements": [["if p < 2:\\l", "return False\\l"], ["if p < 2:\\l", "for k in range(2, min(int(math.sqrt(p)) + 1, p - 1)):\\l", "return True\\l"], ["if p < 2:\\l", "for k in range(2, min(int(math.sqrt(p)) + 1, p - 1)):\\l", "if p % k == 0:\\l", "return False\\l"], ["if p % k == 0:\\l", "for k in range(2, min(int(math.sqrt(p)) + 1, p - 1)):\\l", "return True\\l"], ["f.append(f[-1] + f[-2])\\l", "if is_prime(f[-1]):\\l", "n -= 1\\l", "if n == 0:\\l", "while True:\\l"], ["f.append(f[-1] + f[-2])\\l", "if is_prime(f[-1]):\\l", "if n == 0:\\l", "while True:\\l"], ["if is_prime(f[-1]):\\l", "n -= 1\\l", "if n == 0:\\l", "while True:\\l", "f.append(f[-1] + f[-2])\\l"], ["if is_prime(f[-1]):\\l", "if n == 0:\\l", "while True:\\l", "f.append(f[-1] + f[-2])\\l"], ["n -= 1\\l", "if n == 0:\\l", "while True:\\l", "f.append(f[-1] + f[-2])\\l", "if is_prime(f[-1]):\\l"], ["if n == 0:\\l", "while True:\\l", "f.append(f[-1] + f[-2])\\l", "if is_prime(f[-1]):\\l", "n -= 1\\l"], ["from typing import *\\ldef prime_fib(n: int):...\\lprime_fib(4)\\l", "prime_fib", "import math\\ldef is_prime(p):...\\lf = [0, 1]\\l", "while True:\\l", "f.append(f[-1] + f[-2])\\l", "if is_prime(f[-1]):\\l", "n -= 1\\l", "if n == 0:\\l", "return f[-1]\\l"], ["from typing import *\\ldef prime_fib(n: int):...\\lprime_fib(4)\\l", "prime_fib", "import math\\ldef is_prime(p):...\\lf = [0, 1]\\l", "while True:\\l", "f.append(f[-1] + f[-2])\\l", "if is_prime(f[-1]):\\l", "if n == 0:\\l", "return f[-1]\\l"]], "prime_paths_linenumbers": [[8, 9], [8, 10, 13], [8, 10, 11, 12], [11, 10, 13], [16, 17, 18, 19, 15], [16, 17, 19, 15], [17, 18, 19, 15, 16], [17, 19, 15, 16], [18, 19, 15, 16, 17], [19, 15, 16, 17, 18], [1, 22, 5, 7, 14, 15, 16, 17, 18, 19, 20], [1, 22, 5, 7, 14, 15, 16, 17, 19, 20]], "covered_statements_linenumbers": [1, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22], "missing_statements_linenumbers": [], "covered_prime_paths_linenumbers": [[8, 9], [8, 10, 13], [8, 10, 11, 12], [11, 10, 13], [16, 17, 18, 19, 15], [16, 17, 19, 15], [17, 18, 19, 15, 16], [17, 19, 15, 16], [18, 19, 15, 16, 17], [19, 15, 16, 17, 18], [1, 22, 5, 7, 14, 15, 16, 17, 18, 19, 20], [1, 22, 5, 7, 14, 15, 16, 17, 19, 20]], "missing_prime_paths_linenumbers": [], "num_total_prime_paths": 12, "num_covered_paths": 12, "prime_path_coverage": 1.0, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_39__1_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_39__1_CFG.dot"}
{"humaneval_id": "HumanEval_135", "python_file": "HumanEval_135/main.py", "input_file": "HumanEval_135/input.txt", "prime_paths_nodes": [["5", "7", "8", "4", "6"], ["5", "8", "4", "6"], ["7", "8", "4", "5"], ["8", "4", "5", "7"], ["1", "11", "3", "4", "6"], ["1", "11", "3", "4", "5", "7", "8"], ["1", "11", "3", "4", "5", "8"]], "prime_paths_statements": [["if arr[i] < arr[i - 1]:\\l", "ind = i\\l", "i += 1\\l", "while i < len(arr):\\l", "return ind\\l"], ["if arr[i] < arr[i - 1]:\\l", "i += 1\\l", "while i < len(arr):\\l", "return ind\\l"], ["ind = i\\l", "i += 1\\l", "while i < len(arr):\\l", "if arr[i] < arr[i - 1]:\\l"], ["i += 1\\l", "while i < len(arr):\\l", "if arr[i] < arr[i - 1]:\\l", "ind = i\\l"], ["from typing import *\\ldef can_arrange(arr):...\\lcan_arrange([1, 2, 4, 3, 5])\\l", "can_arrange", "ind = -1\\li = 1\\l", "while i < len(arr):\\l", "return ind\\l"], ["from typing import *\\ldef can_arrange(arr):...\\lcan_arrange([1, 2, 4, 3, 5])\\l", "can_arrange", "ind = -1\\li = 1\\l", "while i < len(arr):\\l", "if arr[i] < arr[i - 1]:\\l", "ind = i\\l", "i += 1\\l"], ["from typing import *\\ldef can_arrange(arr):...\\lcan_arrange([1, 2, 4, 3, 5])\\l", "can_arrange", "ind = -1\\li = 1\\l", "while i < len(arr):\\l", "if arr[i] < arr[i - 1]:\\l", "i += 1\\l"]], "prime_paths_linenumbers": [[6, 7, 8, 5, 9], [6, 8, 5, 9], [7, 8, 5, 6], [8, 5, 6, 7], [1, 11, 3, 4, 5, 9], [1, 11, 3, 4, 5, 6, 7, 8], [1, 11, 3, 4, 5, 6, 8]], "covered_statements_linenumbers": [1, 2, 3, 4, 5, 6, 7, 8, 9, 11], "missing_statements_linenumbers": [], "covered_prime_paths_linenumbers": [[6, 7, 8, 5, 9], [6, 8, 5, 9], [7, 8, 5, 6], [8, 5, 6, 7], [1, 11, 3, 4, 5, 9], [1, 11, 3, 4, 5, 6, 7, 8], [1, 11, 3, 4, 5, 6, 8]], "missing_prime_paths_linenumbers": [], "num_total_prime_paths": 7, "num_covered_paths": 7, "prime_path_coverage": 1.0, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_135_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_135_CFG.dot"}
{"humaneval_id": "HumanEval_15__1", "python_file": "HumanEval_15__1/main.py", "input_file": "HumanEval_15__1/input.txt", "prime_paths_nodes": [["1", "6", "3"]], "prime_paths_statements": [["from typing import *\\ldef string_sequence(n: int) ->str:...\\lstring_sequence(10)\\l", "string_sequence", "return ' '.join([str(x) for x in range(n + 1)])\\l"]], "prime_paths_linenumbers": [[1, 7, 5]], "covered_statements_linenumbers": [1, 4, 5, 7], "missing_statements_linenumbers": [], "covered_prime_paths_linenumbers": [[1, 7, 5]], "missing_prime_paths_linenumbers": [], "num_total_prime_paths": 1, "num_covered_paths": 1, "prime_path_coverage": 1.0, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_15__1_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_15__1_CFG.dot"}
{"humaneval_id": "HumanEval_17", "python_file": "HumanEval_17/main.py", "input_file": "HumanEval_17/input.txt", "prime_paths_nodes": [["1", "7", "3", "4"]], "prime_paths_statements": [["from typing import *\\ldef parse_music(music_string: str) ->List[int]:...\\lparse_music('')\\l", "parse_music", "note_map = {'o': 4, 'o|': 2, '.|': 1}\\l", "return [note_map[x] for x in music_string.split(' ') if x]\\l"]], "prime_paths_linenumbers": [[1, 6, 3, 4]], "covered_statements_linenumbers": [1, 2, 3, 4, 6], "missing_statements_linenumbers": [], "covered_prime_paths_linenumbers": [[1, 6, 3, 4]], "missing_prime_paths_linenumbers": [], "num_total_prime_paths": 1, "num_covered_paths": 1, "prime_path_coverage": 1.0, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_17_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_17_CFG.dot"}
{"humaneval_id": "HumanEval_145__1", "python_file": "HumanEval_145__1/main.py", "input_file": "HumanEval_145__1/input.txt", "prime_paths_nodes": [["5", "6", "7", "8", "11"], ["5", "6", "8", "11"], ["1", "17", "3", "14"]], "prime_paths_statements": [["neg = 1\\l", "if n < 0:\\l", "n, neg = -1 * n, -1\\l", "n = [int(i) for i in str(n)]\\ln[0] = n[0] * neg\\l", "return sum(n)\\l"], ["neg = 1\\l", "if n < 0:\\l", "n = [int(i) for i in str(n)]\\ln[0] = n[0] * neg\\l", "return sum(n)\\l"], ["from typing import *\\ldef order_by_points(nums):...\\lorder_by_points([])\\l", "order_by_points", "def digits_sum(n):...\\l", "return sorted(nums, key=digits_sum)\\l"]], "prime_paths_linenumbers": [[6, 7, 8, 9, 10, 11], [6, 7, 9, 10, 11], [1, 14, 5, 12]], "covered_statements_linenumbers": [1, 4, 5, 12, 14], "missing_statements_linenumbers": [6, 7, 8, 9, 10, 11], "covered_prime_paths_linenumbers": [[1, 14, 5, 12]], "missing_prime_paths_linenumbers": [[6, 7, 8, 9, 10, 11], [6, 7, 9, 10, 11]], "num_total_prime_paths": 3, "num_covered_paths": 1, "prime_path_coverage": 0.33, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_145__1_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_145__1_CFG.dot"}
{"humaneval_id": "HumanEval_137__1", "python_file": "HumanEval_137__1/main.py", "input_file": "HumanEval_137__1/input.txt", "prime_paths_nodes": [["1", "20", "3", "4", "6", "7", "10", "11", "15"], ["1", "20", "3", "4", "6", "7", "11", "15"], ["1", "20", "3", "4", "7", "10", "11", "15"], ["1", "20", "3", "4", "7", "11", "15"], ["1", "20", "3", "4", "6", "7", "10", "11", "16"], ["1", "20", "3", "4", "6", "7", "11", "16"], ["1", "20", "3", "4", "7", "10", "11", "16"], ["1", "20", "3", "4", "7", "11", "16"]], "prime_paths_statements": [["from typing import *\\ldef compare_one(a, b):...\\lcompare_one('1', '2')\\l", "compare_one", "temp_a, temp_b = a, b\\l", "if isinstance(temp_a, str):\\l", "temp_a = temp_a.replace(',', '.')\\l", "if isinstance(temp_b, str):\\l", "temp_b = temp_b.replace(',', '.')\\l", "if float(temp_a) == float(temp_b):\\l", "return None\\l"], ["from typing import *\\ldef compare_one(a, b):...\\lcompare_one('1', '2')\\l", "compare_one", "temp_a, temp_b = a, b\\l", "if isinstance(temp_a, str):\\l", "temp_a = temp_a.replace(',', '.')\\l", "if isinstance(temp_b, str):\\l", "if float(temp_a) == float(temp_b):\\l", "return None\\l"], ["from typing import *\\ldef compare_one(a, b):...\\lcompare_one('1', '2')\\l", "compare_one", "temp_a, temp_b = a, b\\l", "if isinstance(temp_a, str):\\l", "if isinstance(temp_b, str):\\l", "temp_b = temp_b.replace(',', '.')\\l", "if float(temp_a) == float(temp_b):\\l", "return None\\l"], ["from typing import *\\ldef compare_one(a, b):...\\lcompare_one('1', '2')\\l", "compare_one", "temp_a, temp_b = a, b\\l", "if isinstance(temp_a, str):\\l", "if isinstance(temp_b, str):\\l", "if float(temp_a) == float(temp_b):\\l", "return None\\l"], ["from typing import *\\ldef compare_one(a, b):...\\lcompare_one('1', '2')\\l", "compare_one", "temp_a, temp_b = a, b\\l", "if isinstance(temp_a, str):\\l", "temp_a = temp_a.replace(',', '.')\\l", "if isinstance(temp_b, str):\\l", "temp_b = temp_b.replace(',', '.')\\l", "if float(temp_a) == float(temp_b):\\l", "return a if float(temp_a) > float(temp_b) else b\\l"], ["from typing import *\\ldef compare_one(a, b):...\\lcompare_one('1', '2')\\l", "compare_one", "temp_a, temp_b = a, b\\l", "if isinstance(temp_a, str):\\l", "temp_a = temp_a.replace(',', '.')\\l", "if isinstance(temp_b, str):\\l", "if float(temp_a) == float(temp_b):\\l", "return a if float(temp_a) > float(temp_b) else b\\l"], ["from typing import *\\ldef compare_one(a, b):...\\lcompare_one('1', '2')\\l", "compare_one", "temp_a, temp_b = a, b\\l", "if isinstance(temp_a, str):\\l", "if isinstance(temp_b, str):\\l", "temp_b = temp_b.replace(',', '.')\\l", "if float(temp_a) == float(temp_b):\\l", "return a if float(temp_a) > float(temp_b) else b\\l"], ["from typing import *\\ldef compare_one(a, b):...\\lcompare_one('1', '2')\\l", "compare_one", "temp_a, temp_b = a, b\\l", "if isinstance(temp_a, str):\\l", "if isinstance(temp_b, str):\\l", "if float(temp_a) == float(temp_b):\\l", "return a if float(temp_a) > float(temp_b) else b\\l"]], "prime_paths_linenumbers": [[1, 14, 5, 6, 7, 8, 9, 10, 11], [1, 14, 5, 6, 7, 8, 10, 11], [1, 14, 5, 6, 8, 9, 10, 11], [1, 14, 5, 6, 8, 10, 11], [1, 14, 5, 6, 7, 8, 9, 10, 12], [1, 14, 5, 6, 7, 8, 10, 12], [1, 14, 5, 6, 8, 9, 10, 12], [1, 14, 5, 6, 8, 10, 12]], "covered_statements_linenumbers": [1, 4, 5, 6, 7, 8, 9, 10, 12, 14], "missing_statements_linenumbers": [11], "covered_prime_paths_linenumbers": [[1, 14, 5, 6, 7, 8, 9, 10, 12], [1, 14, 5, 6, 7, 8, 10, 12], [1, 14, 5, 6, 8, 9, 10, 12], [1, 14, 5, 6, 8, 10, 12]], "missing_prime_paths_linenumbers": [[1, 14, 5, 6, 7, 8, 9, 10, 11], [1, 14, 5, 6, 7, 8, 10, 11], [1, 14, 5, 6, 8, 9, 10, 11], [1, 14, 5, 6, 8, 10, 11]], "num_total_prime_paths": 8, "num_covered_paths": 4, "prime_path_coverage": 0.5, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_137__1_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_137__1_CFG.dot"}
{"humaneval_id": "HumanEval_151__0", "python_file": "HumanEval_151__0/main.py", "input_file": "HumanEval_151__0/input.txt", "prime_paths_nodes": [["1", "6", "3"]], "prime_paths_statements": [["from typing import *\\ldef double_the_difference(lst):...\\ldouble_the_difference([-10, -20, -30])\\l", "double_the_difference", "return sum([(i ** 2) for i in lst if i > 0 and i % 2 != 0 and '.' not in\\l    str(i)])\\l"]], "prime_paths_linenumbers": [[1, 8, 5]], "covered_statements_linenumbers": [1, 4, 5, 6, 8], "missing_statements_linenumbers": [], "covered_prime_paths_linenumbers": [[1, 8, 5]], "missing_prime_paths_linenumbers": [], "num_total_prime_paths": 1, "num_covered_paths": 1, "prime_path_coverage": 1.0, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_151__0_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_151__0_CFG.dot"}
{"humaneval_id": "HumanEval_48__0", "python_file": "HumanEval_48__0/main.py", "input_file": "HumanEval_48__0/input.txt", "prime_paths_nodes": [["6", "3", "7"], ["1", "14", "3", "7"], ["1", "14", "3", "6", "9"]], "prime_paths_statements": [["if text[i] != text[len(text) - 1 - i]:\\l", "for i in range(len(text)):\\l", "return True\\l"], ["from typing import *\\ldef is_palindrome(text: str):...\\lis_palindrome('xywzx')\\l", "is_palindrome", "for i in range(len(text)):\\l", "return True\\l"], ["from typing import *\\ldef is_palindrome(text: str):...\\lis_palindrome('xywzx')\\l", "is_palindrome", "for i in range(len(text)):\\l", "if text[i] != text[len(text) - 1 - i]:\\l", "return False\\l"]], "prime_paths_linenumbers": [[6, 5, 8], [1, 10, 5, 8], [1, 10, 5, 6, 7]], "covered_statements_linenumbers": [1, 4, 5, 6, 7, 10], "missing_statements_linenumbers": [8], "covered_prime_paths_linenumbers": [[1, 10, 5, 6, 7]], "missing_prime_paths_linenumbers": [[6, 5, 8], [1, 10, 5, 8]], "num_total_prime_paths": 3, "num_covered_paths": 1, "prime_path_coverage": 0.33, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_48__0_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_48__0_CFG.dot"}
{"humaneval_id": "HumanEval_75", "python_file": "HumanEval_75/main.py", "input_file": "HumanEval_75/input.txt", "prime_paths_nodes": [["5", "7", "9"], ["7", "5", "8"], ["16", "18", "14", "17"], ["16", "19", "14", "17"], ["18", "14", "16", "19", "22", "24"], ["18", "14", "16", "19", "22", "25", "28", "30"], ["18", "14", "16", "19", "22", "25", "28", "31", "33"], ["22", "24", "19", "14", "17"], ["22", "25", "19", "14", "17"], ["22", "24", "19", "14", "16", "18"], ["22", "25", "19", "14", "16", "18"], ["24", "19", "22", "25", "28", "30"], ["24", "19", "22", "25", "28", "31", "33"], ["28", "30", "25", "19", "14", "17"], ["28", "31", "25", "19", "14", "17"], ["28", "30", "25", "19", "14", "16", "18"], ["28", "31", "25", "19", "14", "16", "18"], ["28", "30", "25", "19", "22", "24"], ["28", "31", "25", "19", "22", "24"], ["30", "25", "28", "31", "33"], ["31", "25", "28", "30"], ["1", "38", "3", "14", "17"], ["1", "38", "3", "14", "16", "18"], ["1", "38", "3", "14", "16", "19", "22", "24"], ["1", "38", "3", "14", "16", "19", "22", "25", "28", "30"], ["1", "38", "3", "14", "16", "19", "22", "25", "28", "31", "33"]], "prime_paths_statements": [["for j in range(2, n):\\l", "if n % j == 0:\\l", "return False\\l"], ["if n % j == 0:\\l", "for j in range(2, n):\\l", "return True\\l"], ["if not is_prime(i):\\l", "continue\\l", "for i in range(2, 101):\\l", "return False\\l"], ["if not is_prime(i):\\l", "for j in range(2, 101):\\l", "for i in range(2, 101):\\l", "return False\\l"], ["continue\\l", "for i in range(2, 101):\\l", "if not is_prime(i):\\l", "for j in range(2, 101):\\l", "if not is_prime(j):\\l", "continue\\l"], ["continue\\l", "for i in range(2, 101):\\l", "if not is_prime(i):\\l", "for j in range(2, 101):\\l", "if not is_prime(j):\\l", "for k in range(2, 101):\\l", "if not is_prime(k):\\l", "continue\\l"], ["continue\\l", "for i in range(2, 101):\\l", "if not is_prime(i):\\l", "for j in range(2, 101):\\l", "if not is_prime(j):\\l", "for k in range(2, 101):\\l", "if not is_prime(k):\\l", "if i * j * k == a:\\l", "return True\\l"], ["if not is_prime(j):\\l", "continue\\l", "for j in range(2, 101):\\l", "for i in range(2, 101):\\l", "return False\\l"], ["if not is_prime(j):\\l", "for k in range(2, 101):\\l", "for j in range(2, 101):\\l", "for i in range(2, 101):\\l", "return False\\l"], ["if not is_prime(j):\\l", "continue\\l", "for j in range(2, 101):\\l", "for i in range(2, 101):\\l", "if not is_prime(i):\\l", "continue\\l"], ["if not is_prime(j):\\l", "for k in range(2, 101):\\l", "for j in range(2, 101):\\l", "for i in range(2, 101):\\l", "if not is_prime(i):\\l", "continue\\l"], ["continue\\l", "for j in range(2, 101):\\l", "if not is_prime(j):\\l", "for k in range(2, 101):\\l", "if not is_prime(k):\\l", "continue\\l"], ["continue\\l", "for j in range(2, 101):\\l", "if not is_prime(j):\\l", "for k in range(2, 101):\\l", "if not is_prime(k):\\l", "if i * j * k == a:\\l", "return True\\l"], ["if not is_prime(k):\\l", "continue\\l", "for k in range(2, 101):\\l", "for j in range(2, 101):\\l", "for i in range(2, 101):\\l", "return False\\l"], ["if not is_prime(k):\\l", "if i * j * k == a:\\l", "for k in range(2, 101):\\l", "for j in range(2, 101):\\l", "for i in range(2, 101):\\l", "return False\\l"], ["if not is_prime(k):\\l", "continue\\l", "for k in range(2, 101):\\l", "for j in range(2, 101):\\l", "for i in range(2, 101):\\l", "if not is_prime(i):\\l", "continue\\l"], ["if not is_prime(k):\\l", "if i * j * k == a:\\l", "for k in range(2, 101):\\l", "for j in range(2, 101):\\l", "for i in range(2, 101):\\l", "if not is_prime(i):\\l", "continue\\l"], ["if not is_prime(k):\\l", "continue\\l", "for k in range(2, 101):\\l", "for j in range(2, 101):\\l", "if not is_prime(j):\\l", "continue\\l"], ["if not is_prime(k):\\l", "if i * j * k == a:\\l", "for k in range(2, 101):\\l", "for j in range(2, 101):\\l", "if not is_prime(j):\\l", "continue\\l"], ["continue\\l", "for k in range(2, 101):\\l", "if not is_prime(k):\\l", "if i * j * k == a:\\l", "return True\\l"], ["if i * j * k == a:\\l", "for k in range(2, 101):\\l", "if not is_prime(k):\\l", "continue\\l"], ["from typing import *\\ldef is_multiply_prime(a):...\\lis_multiply_prime(5)\\l", "is_multiply_prime", "def is_prime(n):...\\l", "for i in range(2, 101):\\l", "return False\\l"], ["from typing import *\\ldef is_multiply_prime(a):...\\lis_multiply_prime(5)\\l", "is_multiply_prime", "def is_prime(n):...\\l", "for i in range(2, 101):\\l", "if not is_prime(i):\\l", "continue\\l"], ["from typing import *\\ldef is_multiply_prime(a):...\\lis_multiply_prime(5)\\l", "is_multiply_prime", "def is_prime(n):...\\l", "for i in range(2, 101):\\l", "if not is_prime(i):\\l", "for j in range(2, 101):\\l", "if not is_prime(j):\\l", "continue\\l"], ["from typing import *\\ldef is_multiply_prime(a):...\\lis_multiply_prime(5)\\l", "is_multiply_prime", "def is_prime(n):...\\l", "for i in range(2, 101):\\l", "if not is_prime(i):\\l", "for j in range(2, 101):\\l", "if not is_prime(j):\\l", "for k in range(2, 101):\\l", "if not is_prime(k):\\l", "continue\\l"], ["from typing import *\\ldef is_multiply_prime(a):...\\lis_multiply_prime(5)\\l", "is_multiply_prime", "def is_prime(n):...\\l", "for i in range(2, 101):\\l", "if not is_prime(i):\\l", "for j in range(2, 101):\\l", "if not is_prime(j):\\l", "for k in range(2, 101):\\l", "if not is_prime(k):\\l", "if i * j * k == a:\\l", "return True\\l"]], "prime_paths_linenumbers": [[4, 5, 6], [5, 4, 7], [10, 10, 9, 16], [10, 11, 9, 16], [10, 9, 10, 11, 12, 12], [10, 9, 10, 11, 12, 13, 14, 14], [10, 9, 10, 11, 12, 13, 14, 15, 15], [12, 12, 11, 9, 16], [12, 13, 11, 9, 16], [12, 12, 11, 9, 10, 10], [12, 13, 11, 9, 10, 10], [12, 11, 12, 13, 14, 14], [12, 11, 12, 13, 14, 15, 15], [14, 14, 13, 11, 9, 16], [14, 15, 13, 11, 9, 16], [14, 14, 13, 11, 9, 10, 10], [14, 15, 13, 11, 9, 10, 10], [14, 14, 13, 11, 12, 12], [14, 15, 13, 11, 12, 12], [14, 13, 14, 15, 15], [15, 13, 14, 14], [1, 18, 3, 9, 16], [1, 18, 3, 9, 10, 10], [1, 18, 3, 9, 10, 11, 12, 12], [1, 18, 3, 9, 10, 11, 12, 13, 14, 14], [1, 18, 3, 9, 10, 11, 12, 13, 14, 15, 15]], "covered_statements_linenumbers": [1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 18], "missing_statements_linenumbers": [], "covered_prime_paths_linenumbers": [[4, 5, 6], [5, 4, 7], [10, 10, 9, 16], [10, 11, 9, 16], [10, 9, 10, 11, 12, 12], [10, 9, 10, 11, 12, 13, 14, 14], [10, 9, 10, 11, 12, 13, 14, 15, 15], [12, 12, 11, 9, 16], [12, 13, 11, 9, 16], [12, 12, 11, 9, 10, 10], [12, 13, 11, 9, 10, 10], [12, 11, 12, 13, 14, 14], [12, 11, 12, 13, 14, 15, 15], [14, 14, 13, 11, 9, 16], [14, 15, 13, 11, 9, 16], [14, 14, 13, 11, 9, 10, 10], [14, 15, 13, 11, 9, 10, 10], [14, 14, 13, 11, 12, 12], [14, 15, 13, 11, 12, 12], [14, 13, 14, 15, 15], [15, 13, 14, 14], [1, 18, 3, 9, 16], [1, 18, 3, 9, 10, 10], [1, 18, 3, 9, 10, 11, 12, 12], [1, 18, 3, 9, 10, 11, 12, 13, 14, 14], [1, 18, 3, 9, 10, 11, 12, 13, 14, 15, 15]], "missing_prime_paths_linenumbers": [], "num_total_prime_paths": 26, "num_covered_paths": 26, "prime_path_coverage": 1.0, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_75_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_75_CFG.dot"}
{"humaneval_id": "HumanEval_122__0", "python_file": "HumanEval_122__0/main.py", "input_file": "HumanEval_122__0/input.txt", "prime_paths_nodes": [["1", "6", "3"]], "prime_paths_statements": [["from typing import *\\ldef add_elements(arr, k):...\\ladd_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\\l", "add_elements", "return sum(elem for elem in arr[:k] if len(str(elem)) <= 2)\\l"]], "prime_paths_linenumbers": [[1, 7, 5]], "covered_statements_linenumbers": [1, 4, 5, 7], "missing_statements_linenumbers": [], "covered_prime_paths_linenumbers": [[1, 7, 5]], "missing_prime_paths_linenumbers": [], "num_total_prime_paths": 1, "num_covered_paths": 1, "prime_path_coverage": 1.0, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_122__0_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_122__0_CFG.dot"}
{"humaneval_id": "HumanEval_16__1", "python_file": "HumanEval_16__1/main.py", "input_file": "HumanEval_16__1/input.txt", "prime_paths_nodes": [["1", "6", "3"]], "prime_paths_statements": [["from typing import *\\ldef count_distinct_characters(string: str) ->int:...\\lcount_distinct_characters('aaaaAAAAaaaa')\\l", "count_distinct_characters", "return len(set(string.lower()))\\l"]], "prime_paths_linenumbers": [[1, 7, 5]], "covered_statements_linenumbers": [1, 4, 5, 7], "missing_statements_linenumbers": [], "covered_prime_paths_linenumbers": [[1, 7, 5]], "missing_prime_paths_linenumbers": [], "num_total_prime_paths": 1, "num_covered_paths": 1, "prime_path_coverage": 1.0, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_16__1_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_16__1_CFG.dot"}
{"humaneval_id": "HumanEval_9__0", "python_file": "HumanEval_9__0/main.py", "input_file": "HumanEval_9__0/input.txt", "prime_paths_nodes": [["5", "7", "8", "4", "6"], ["5", "9", "8", "4", "6"], ["7", "8", "4", "5", "9"], ["9", "8", "4", "5", "7"], ["1", "14", "3", "4", "6"], ["1", "14", "3", "4", "5", "7", "8"], ["1", "14", "3", "4", "5", "9", "8"]], "prime_paths_statements": [["if running_max is None:\\l", "running_max = n\\l", "result.append(running_max)\\l", "for n in numbers:\\l", "return result\\l"], ["if running_max is None:\\l", "running_max = max(running_max, n)\\l", "result.append(running_max)\\l", "for n in numbers:\\l", "return result\\l"], ["running_max = n\\l", "result.append(running_max)\\l", "for n in numbers:\\l", "if running_max is None:\\l", "running_max = max(running_max, n)\\l"], ["running_max = max(running_max, n)\\l", "result.append(running_max)\\l", "for n in numbers:\\l", "if running_max is None:\\l", "running_max = n\\l"], ["from typing import *\\ldef rolling_max(numbers: List[int]) ->List[int]:...\\lrolling_max([4, 3, 2, 1])\\l", "rolling_max", "running_max = None\\lresult = []\\l", "for n in numbers:\\l", "return result\\l"], ["from typing import *\\ldef rolling_max(numbers: List[int]) ->List[int]:...\\lrolling_max([4, 3, 2, 1])\\l", "rolling_max", "running_max = None\\lresult = []\\l", "for n in numbers:\\l", "if running_max is None:\\l", "running_max = n\\l", "result.append(running_max)\\l"], ["from typing import *\\ldef rolling_max(numbers: List[int]) ->List[int]:...\\lrolling_max([4, 3, 2, 1])\\l", "rolling_max", "running_max = None\\lresult = []\\l", "for n in numbers:\\l", "if running_max is None:\\l", "running_max = max(running_max, n)\\l", "result.append(running_max)\\l"]], "prime_paths_linenumbers": [[9, 10, 14, 8, 16], [9, 12, 14, 8, 16], [10, 14, 8, 9, 12], [12, 14, 8, 9, 10], [1, 18, 5, 6, 8, 16], [1, 18, 5, 6, 8, 9, 10, 14], [1, 18, 5, 6, 8, 9, 12, 14]], "covered_statements_linenumbers": [1, 4, 5, 6, 8, 9, 10, 12, 14, 16, 18], "missing_statements_linenumbers": [], "covered_prime_paths_linenumbers": [[9, 10, 14, 8, 16], [9, 12, 14, 8, 16], [10, 14, 8, 9, 12], [12, 14, 8, 9, 10], [1, 18, 5, 6, 8, 16], [1, 18, 5, 6, 8, 9, 10, 14], [1, 18, 5, 6, 8, 9, 12, 14]], "missing_prime_paths_linenumbers": [], "num_total_prime_paths": 7, "num_covered_paths": 7, "prime_path_coverage": 1.0, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_9__0_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_9__0_CFG.dot"}
{"humaneval_id": "HumanEval_91__1", "python_file": "HumanEval_91__1/main.py", "input_file": "HumanEval_91__1/input.txt", "prime_paths_nodes": [["1", "8", "3", "5"]], "prime_paths_statements": [["from typing import *\\ldef is_bored(S):...\\lis_bored('I love It !')\\l", "is_bored", "import re\\lsentences = re.split('[.?!]\\\\s*', S)\\l", "return sum(sentence[0:2] == 'I ' for sentence in sentences)\\l"]], "prime_paths_linenumbers": [[1, 9, 5, 6, 7]], "covered_statements_linenumbers": [1, 4, 5, 6, 7, 9], "missing_statements_linenumbers": [], "covered_prime_paths_linenumbers": [[1, 9, 5, 6, 7]], "missing_prime_paths_linenumbers": [], "num_total_prime_paths": 1, "num_covered_paths": 1, "prime_path_coverage": 1.0, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_91__1_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_91__1_CFG.dot"}
{"humaneval_id": "HumanEval_95", "python_file": "HumanEval_95/main.py", "input_file": "HumanEval_95/input.txt", "prime_paths_nodes": [["11", "15", "17", "26", "9", "12"], ["11", "15", "17", "28", "30", "9", "12"], ["15", "17", "26", "9", "11", "14", "12"], ["15", "17", "28", "30", "9", "11", "14", "12"], ["17", "26", "9", "11", "15", "19", "20", "12"], ["17", "26", "9", "11", "15", "19", "22", "12"], ["17", "28", "30", "9", "11", "15", "19", "20", "12"], ["17", "28", "30", "9", "11", "15", "19", "22", "12"], ["26", "9", "11", "15", "17", "28", "32", "12"], ["26", "9", "11", "15", "17", "28", "30"], ["28", "30", "9", "11", "15", "17", "26"], ["30", "9", "11", "15", "17", "28", "32", "12"], ["1", "37", "3", "6"], ["1", "37", "3", "8", "9", "11", "14", "12"], ["1", "37", "3", "8", "9", "11", "15", "17", "28", "32", "12"], ["1", "37", "3", "8", "9", "11", "15", "19", "20", "12"], ["1", "37", "3", "8", "9", "11", "15", "19", "22", "12"], ["1", "37", "3", "8", "9", "12"], ["1", "37", "3", "8", "9", "11", "15", "17", "26"], ["1", "37", "3", "8", "9", "11", "15", "17", "28", "30"]], "prime_paths_statements": [["if isinstance(key, str) == False:\\l", "if state == 'start':\\l", "if key.isupper():\\l", "state = 'upper'\\l", "for key in dict.keys():\\l", "return state == 'upper' or state == 'lower'\\l"], ["if isinstance(key, str) == False:\\l", "if state == 'start':\\l", "if key.isupper():\\l", "if key.islower():\\l", "state = 'lower'\\l", "for key in dict.keys():\\l", "return state == 'upper' or state == 'lower'\\l"], ["if state == 'start':\\l", "if key.isupper():\\l", "state = 'upper'\\l", "for key in dict.keys():\\l", "if isinstance(key, str) == False:\\l", "state = 'mixed'\\lbreak\\l", "return state == 'upper' or state == 'lower'\\l"], ["if state == 'start':\\l", "if key.isupper():\\l", "if key.islower():\\l", "state = 'lower'\\l", "for key in dict.keys():\\l", "if isinstance(key, str) == False:\\l", "state = 'mixed'\\lbreak\\l", "return state == 'upper' or state == 'lower'\\l"], ["if key.isupper():\\l", "state = 'upper'\\l", "for key in dict.keys():\\l", "if isinstance(key, str) == False:\\l", "if state == 'start':\\l", "if state == 'upper' and not key.isupper(\\l", "state = 'mixed'\\lbreak\\l", "return state == 'upper' or state == 'lower'\\l"], ["if key.isupper():\\l", "state = 'upper'\\l", "for key in dict.keys():\\l", "if isinstance(key, str) == False:\\l", "if state == 'start':\\l", "if state == 'upper' and not key.isupper(\\l", "break\\l", "return state == 'upper' or state == 'lower'\\l"], ["if key.isupper():\\l", "if key.islower():\\l", "state = 'lower'\\l", "for key in dict.keys():\\l", "if isinstance(key, str) == False:\\l", "if state == 'start':\\l", "if state == 'upper' and not key.isupper(\\l", "state = 'mixed'\\lbreak\\l", "return state == 'upper' or state == 'lower'\\l"], ["if key.isupper():\\l", "if key.islower():\\l", "state = 'lower'\\l", "for key in dict.keys():\\l", "if isinstance(key, str) == False:\\l", "if state == 'start':\\l", "if state == 'upper' and not key.isupper(\\l", "break\\l", "return state == 'upper' or state == 'lower'\\l"], ["state = 'upper'\\l", "for key in dict.keys():\\l", "if isinstance(key, str) == False:\\l", "if state == 'start':\\l", "if key.isupper():\\l", "if key.islower():\\l", "break\\l", "return state == 'upper' or state == 'lower'\\l"], ["state = 'upper'\\l", "for key in dict.keys():\\l", "if isinstance(key, str) == False:\\l", "if state == 'start':\\l", "if key.isupper():\\l", "if key.islower():\\l", "state = 'lower'\\l"], ["if key.islower():\\l", "state = 'lower'\\l", "for key in dict.keys():\\l", "if isinstance(key, str) == False:\\l", "if state == 'start':\\l", "if key.isupper():\\l", "state = 'upper'\\l"], ["state = 'lower'\\l", "for key in dict.keys():\\l", "if isinstance(key, str) == False:\\l", "if state == 'start':\\l", "if key.isupper():\\l", "if key.islower():\\l", "break\\l", "return state == 'upper' or state == 'lower'\\l"], ["from typing import *\\ldef check_dict_case(dict):...\\lcheck_dict_case({'p': 'pineapple', 'b': 'banana'})\\l", "check_dict_case", "if len(dict.keys()) == 0:\\l", "return False\\l"], ["from typing import *\\ldef check_dict_case(dict):...\\lcheck_dict_case({'p': 'pineapple', 'b': 'banana'})\\l", "check_dict_case", "if len(dict.keys()) == 0:\\l", "state = 'start'\\l", "for key in dict.keys():\\l", "if isinstance(key, str) == False:\\l", "state = 'mixed'\\lbreak\\l", "return state == 'upper' or state == 'lower'\\l"], ["from typing import *\\ldef check_dict_case(dict):...\\lcheck_dict_case({'p': 'pineapple', 'b': 'banana'})\\l", "check_dict_case", "if len(dict.keys()) == 0:\\l", "state = 'start'\\l", "for key in dict.keys():\\l", "if isinstance(key, str) == False:\\l", "if state == 'start':\\l", "if key.isupper():\\l", "if key.islower():\\l", "break\\l", "return state == 'upper' or state == 'lower'\\l"], ["from typing import *\\ldef check_dict_case(dict):...\\lcheck_dict_case({'p': 'pineapple', 'b': 'banana'})\\l", "check_dict_case", "if len(dict.keys()) == 0:\\l", "state = 'start'\\l", "for key in dict.keys():\\l", "if isinstance(key, str) == False:\\l", "if state == 'start':\\l", "if state == 'upper' and not key.isupper(\\l", "state = 'mixed'\\lbreak\\l", "return state == 'upper' or state == 'lower'\\l"], ["from typing import *\\ldef check_dict_case(dict):...\\lcheck_dict_case({'p': 'pineapple', 'b': 'banana'})\\l", "check_dict_case", "if len(dict.keys()) == 0:\\l", "state = 'start'\\l", "for key in dict.keys():\\l", "if isinstance(key, str) == False:\\l", "if state == 'start':\\l", "if state == 'upper' and not key.isupper(\\l", "break\\l", "return state == 'upper' or state == 'lower'\\l"], ["from typing import *\\ldef check_dict_case(dict):...\\lcheck_dict_case({'p': 'pineapple', 'b': 'banana'})\\l", "check_dict_case", "if len(dict.keys()) == 0:\\l", "state = 'start'\\l", "for key in dict.keys():\\l", "return state == 'upper' or state == 'lower'\\l"], ["from typing import *\\ldef check_dict_case(dict):...\\lcheck_dict_case({'p': 'pineapple', 'b': 'banana'})\\l", "check_dict_case", "if len(dict.keys()) == 0:\\l", "state = 'start'\\l", "for key in dict.keys():\\l", "if isinstance(key, str) == False:\\l", "if state == 'start':\\l", "if key.isupper():\\l", "state = 'upper'\\l"], ["from typing import *\\ldef check_dict_case(dict):...\\lcheck_dict_case({'p': 'pineapple', 'b': 'banana'})\\l", "check_dict_case", "if len(dict.keys()) == 0:\\l", "state = 'start'\\l", "for key in dict.keys():\\l", "if isinstance(key, str) == False:\\l", "if state == 'start':\\l", "if key.isupper():\\l", "if key.islower():\\l", "state = 'lower'\\l"]], "prime_paths_linenumbers": [[9, 12, 13, 14, 7, 24], [9, 12, 13, 15, 16, 7, 24], [12, 13, 14, 7, 9, 10, 11, 24], [12, 13, 15, 16, 7, 9, 10, 11, 24], [13, 14, 7, 9, 12, 19, 20, 21, 24], [13, 14, 7, 9, 12, 19, 23, 24], [13, 15, 16, 7, 9, 12, 19, 20, 21, 24], [13, 15, 16, 7, 9, 12, 19, 23, 24], [14, 7, 9, 12, 13, 15, 18, 24], [14, 7, 9, 12, 13, 15, 16], [15, 16, 7, 9, 12, 13, 14], [16, 7, 9, 12, 13, 15, 18, 24], [1, 26, 3, 4], [1, 26, 3, 6, 7, 9, 10, 11, 24], [1, 26, 3, 6, 7, 9, 12, 13, 15, 18, 24], [1, 26, 3, 6, 7, 9, 12, 19, 20, 21, 24], [1, 26, 3, 6, 7, 9, 12, 19, 23, 24], [1, 26, 3, 6, 7, 24], [1, 26, 3, 6, 7, 9, 12, 13, 14], [1, 26, 3, 6, 7, 9, 12, 13, 15, 16]], "covered_statements_linenumbers": [1, 2, 3, 6, 7, 9, 12, 13, 15, 16, 19, 23, 24, 26], "missing_statements_linenumbers": [4, 10, 11, 14, 18, 20, 21], "covered_prime_paths_linenumbers": [[9, 12, 13, 15, 16, 7, 24], [13, 15, 16, 7, 9, 12, 19, 23, 24], [1, 26, 3, 6, 7, 9, 12, 19, 23, 24], [1, 26, 3, 6, 7, 24], [1, 26, 3, 6, 7, 9, 12, 13, 15, 16]], "missing_prime_paths_linenumbers": [[9, 12, 13, 14, 7, 24], [12, 13, 14, 7, 9, 10, 11, 24], [12, 13, 15, 16, 7, 9, 10, 11, 24], [13, 14, 7, 9, 12, 19, 20, 21, 24], [13, 14, 7, 9, 12, 19, 23, 24], [13, 15, 16, 7, 9, 12, 19, 20, 21, 24], [14, 7, 9, 12, 13, 15, 18, 24], [14, 7, 9, 12, 13, 15, 16], [15, 16, 7, 9, 12, 13, 14], [16, 7, 9, 12, 13, 15, 18, 24], [1, 26, 3, 4], [1, 26, 3, 6, 7, 9, 10, 11, 24], [1, 26, 3, 6, 7, 9, 12, 13, 15, 18, 24], [1, 26, 3, 6, 7, 9, 12, 19, 20, 21, 24], [1, 26, 3, 6, 7, 9, 12, 13, 14]], "num_total_prime_paths": 20, "num_covered_paths": 5, "prime_path_coverage": 0.25, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_95_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_95_CFG.dot"}
{"humaneval_id": "HumanEval_37__1", "python_file": "HumanEval_37__1/main.py", "input_file": "HumanEval_37__1/input.txt", "prime_paths_nodes": [["7", "5", "8", "12", "13"], ["7", "5", "8", "13"], ["1", "17", "3", "5", "7"], ["1", "17", "3", "5", "8", "12", "13"], ["1", "17", "3", "5", "8", "13"]], "prime_paths_statements": [["ans.extend([e, o])\\l", "for e, o in zip(evens, odds):\\l", "if len(evens) > len(odds):\\l", "ans.append(evens[-1])\\l", "return ans\\l"], ["ans.extend([e, o])\\l", "for e, o in zip(evens, odds):\\l", "if len(evens) > len(odds):\\l", "return ans\\l"], ["from typing import *\\ldef sort_even(l: list):...\\lsort_even([1, 2, 3])\\l", "sort_even", "evens = l[::2]\\lodds = l[1::2]\\levens.sort()\\lans = []\\l", "for e, o in zip(evens, odds):\\l", "ans.extend([e, o])\\l"], ["from typing import *\\ldef sort_even(l: list):...\\lsort_even([1, 2, 3])\\l", "sort_even", "evens = l[::2]\\lodds = l[1::2]\\levens.sort()\\lans = []\\l", "for e, o in zip(evens, odds):\\l", "if len(evens) > len(odds):\\l", "ans.append(evens[-1])\\l", "return ans\\l"], ["from typing import *\\ldef sort_even(l: list):...\\lsort_even([1, 2, 3])\\l", "sort_even", "evens = l[::2]\\lodds = l[1::2]\\levens.sort()\\lans = []\\l", "for e, o in zip(evens, odds):\\l", "if len(evens) > len(odds):\\l", "return ans\\l"]], "prime_paths_linenumbers": [[10, 9, 11, 12, 13], [10, 9, 11, 13], [1, 15, 5, 6, 7, 8, 9, 10], [1, 15, 5, 6, 7, 8, 9, 11, 12, 13], [1, 15, 5, 6, 7, 8, 9, 11, 13]], "covered_statements_linenumbers": [1, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15], "missing_statements_linenumbers": [], "covered_prime_paths_linenumbers": [[10, 9, 11, 12, 13], [10, 9, 11, 13], [1, 15, 5, 6, 7, 8, 9, 10], [1, 15, 5, 6, 7, 8, 9, 11, 12, 13], [1, 15, 5, 6, 7, 8, 9, 11, 13]], "missing_prime_paths_linenumbers": [], "num_total_prime_paths": 5, "num_covered_paths": 5, "prime_path_coverage": 1.0, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_37__1_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_37__1_CFG.dot"}
{"humaneval_id": "HumanEval_80", "python_file": "HumanEval_80/main.py", "input_file": "HumanEval_80/input.txt", "prime_paths_nodes": [["10", "6", "11"], ["1", "17", "3", "5"], ["1", "17", "3", "6", "11"], ["1", "17", "3", "6", "10", "12"]], "prime_paths_statements": [["if s[i] == s[i + 1] or s[i + 1] == s[i + 2] or s[i] == s[i + 2]:\\l", "for i in range(len(s) - 2):\\l", "return True\\l"], ["from typing import *\\ldef is_happy(s):...\\lis_happy('a')\\l", "is_happy", "if len(s) < 3:\\l", "return False\\l"], ["from typing import *\\ldef is_happy(s):...\\lis_happy('a')\\l", "is_happy", "if len(s) < 3:\\l", "for i in range(len(s) - 2):\\l", "return True\\l"], ["from typing import *\\ldef is_happy(s):...\\lis_happy('a')\\l", "is_happy", "if len(s) < 3:\\l", "for i in range(len(s) - 2):\\l", "if s[i] == s[i + 1] or s[i + 1] == s[i + 2] or s[i] == s[i + 2]:\\l", "return False\\l"]], "prime_paths_linenumbers": [[8, 6, 10], [1, 12, 3, 4], [1, 12, 3, 6, 10], [1, 12, 3, 6, 8, 9]], "covered_statements_linenumbers": [1, 2, 3, 4, 12], "missing_statements_linenumbers": [6, 8, 9, 10], "covered_prime_paths_linenumbers": [[1, 12, 3, 4]], "missing_prime_paths_linenumbers": [[8, 6, 10], [1, 12, 3, 6, 10], [1, 12, 3, 6, 8, 9]], "num_total_prime_paths": 4, "num_covered_paths": 1, "prime_path_coverage": 0.25, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_80_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_80_CFG.dot"}
{"humaneval_id": "HumanEval_150", "python_file": "HumanEval_150/main.py", "input_file": "HumanEval_150/input.txt", "prime_paths_nodes": [["1", "17", "3", "4"], ["1", "17", "3", "5", "8", "10"], ["1", "17", "3", "5", "8", "12"]], "prime_paths_statements": [["from typing import *\\ldef x_or_y(n, x, y):...\\lx_or_y(7, 34, 12)\\l", "x_or_y", "if n == 1:\\l", "return y\\l"], ["from typing import *\\ldef x_or_y(n, x, y):...\\lx_or_y(7, 34, 12)\\l", "x_or_y", "if n == 1:\\l", "for i in range(2, n):\\l", "if n % i == 0:\\l", "return y\\l"], ["from typing import *\\ldef x_or_y(n, x, y):...\\lx_or_y(7, 34, 12)\\l", "x_or_y", "if n == 1:\\l", "for i in range(2, n):\\l", "if n % i == 0:\\l", "return x\\l"]], "prime_paths_linenumbers": [[1, 12, 3, 4], [1, 12, 3, 5, 6, 7], [1, 12, 3, 5, 6, 10]], "covered_statements_linenumbers": [1, 2, 3, 5, 6, 10, 12], "missing_statements_linenumbers": [4, 7], "covered_prime_paths_linenumbers": [[1, 12, 3, 5, 6, 10]], "missing_prime_paths_linenumbers": [[1, 12, 3, 4], [1, 12, 3, 5, 6, 7]], "num_total_prime_paths": 3, "num_covered_paths": 1, "prime_path_coverage": 0.33, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_150_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_150_CFG.dot"}
{"humaneval_id": "HumanEval_71", "python_file": "HumanEval_71/main.py", "input_file": "HumanEval_71/input.txt", "prime_paths_nodes": [["1", "11", "3", "4"], ["1", "11", "3", "5", "8"]], "prime_paths_statements": [["from typing import *\\ldef triangle_area(a, b, c):...\\ltriangle_area(3, 4, 5)\\l", "triangle_area", "if a + b <= c or a + c <= b or b + c <= a:\\l", "return -1\\l"], ["from typing import *\\ldef triangle_area(a, b, c):...\\ltriangle_area(3, 4, 5)\\l", "triangle_area", "if a + b <= c or a + c <= b or b + c <= a:\\l", "s = (a + b + c) / 2\\larea = (s * (s - a) * (s - b) * (s - c)) ** 0.5\\larea = round(area, 2)\\l", "return area\\l"]], "prime_paths_linenumbers": [[1, 10, 3, 4], [1, 10, 3, 5, 6, 7, 8]], "covered_statements_linenumbers": [1, 2, 3, 5, 6, 7, 8, 10], "missing_statements_linenumbers": [4], "covered_prime_paths_linenumbers": [[1, 10, 3, 5, 6, 7, 8]], "missing_prime_paths_linenumbers": [[1, 10, 3, 4]], "num_total_prime_paths": 2, "num_covered_paths": 1, "prime_path_coverage": 0.5, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_71_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_71_CFG.dot"}
{"humaneval_id": "HumanEval_51", "python_file": "HumanEval_51/main.py", "input_file": "HumanEval_51/input.txt", "prime_paths_nodes": [["1", "6", "3"]], "prime_paths_statements": [["from typing import *\\ldef remove_vowels(text):...\\lremove_vowels('fedcba')\\l", "remove_vowels", "return ''.join([s for s in te...'a', 'e', 'i', 'o', 'u']])\\l"]], "prime_paths_linenumbers": [[1, 5, 3]], "covered_statements_linenumbers": [1, 2, 3, 5], "missing_statements_linenumbers": [], "covered_prime_paths_linenumbers": [[1, 5, 3]], "missing_prime_paths_linenumbers": [], "num_total_prime_paths": 1, "num_covered_paths": 1, "prime_path_coverage": 1.0, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_51_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_51_CFG.dot"}
{"humaneval_id": "HumanEval_136__0", "python_file": "HumanEval_136__0/main.py", "input_file": "HumanEval_136__0/input.txt", "prime_paths_nodes": [["1", "11", "3", "8"]], "prime_paths_statements": [["from typing import *\\ldef largest_smallest_integers(lst):...\\llargest_smallest_integers([])\\l", "largest_smallest_integers", "smallest = list(filter(lambda x: x < 0, lst))\\llargest = list(filter(lambda x: x > 0, lst))\\l", "return max(smallest) if smallest else None, min(largest) if largest else None\\l"]], "prime_paths_linenumbers": [[1, 10, 5, 6, 7]], "covered_statements_linenumbers": [1, 4, 5, 6, 7, 8, 10], "missing_statements_linenumbers": [], "covered_prime_paths_linenumbers": [[1, 10, 5, 6, 7]], "missing_prime_paths_linenumbers": [], "num_total_prime_paths": 1, "num_covered_paths": 1, "prime_path_coverage": 1.0, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_136__0_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_136__0_CFG.dot"}
{"humaneval_id": "HumanEval_17__1", "python_file": "HumanEval_17__1/main.py", "input_file": "HumanEval_17__1/input.txt", "prime_paths_nodes": [["1", "7", "3", "4"]], "prime_paths_statements": [["from typing import *\\ldef parse_music(music_string: str) ->List[int]:...\\lparse_music('.| .| .| .|')\\l", "parse_music", "note_map = {'o': 4, 'o|': 2, '.|': 1}\\l", "return [note_map[x] for x in music_string.split(' ') if x]\\l"]], "prime_paths_linenumbers": [[1, 8, 5, 6]], "covered_statements_linenumbers": [1, 4, 5, 6, 8], "missing_statements_linenumbers": [], "covered_prime_paths_linenumbers": [[1, 8, 5, 6]], "missing_prime_paths_linenumbers": [], "num_total_prime_paths": 1, "num_covered_paths": 1, "prime_path_coverage": 1.0, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_17__1_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_17__1_CFG.dot"}
{"humaneval_id": "HumanEval_8", "python_file": "HumanEval_8/main.py", "input_file": "HumanEval_8/input.txt", "prime_paths_nodes": [["5", "4", "6"], ["1", "9", "3", "4", "5"], ["1", "9", "3", "4", "6"]], "prime_paths_statements": [["sum_value += n\\lprod_value *= n\\l", "for n in numbers:\\l", "return sum_value, prod_value\\l"], ["from typing import *\\ldef sum_product(numbers: List[int]) ->Tuple[int, int]:...\\lsum_product([1, 1, 1])\\l", "sum_product", "sum_value = 0\\lprod_value = 1\\l", "for n in numbers:\\l", "sum_value += n\\lprod_value *= n\\l"], ["from typing import *\\ldef sum_product(numbers: List[int]) ->Tuple[int, int]:...\\lsum_product([1, 1, 1])\\l", "sum_product", "sum_value = 0\\lprod_value = 1\\l", "for n in numbers:\\l", "return sum_value, prod_value\\l"]], "prime_paths_linenumbers": [[7, 8, 6, 9], [1, 11, 3, 4, 6, 7, 8], [1, 11, 3, 4, 6, 9]], "covered_statements_linenumbers": [1, 2, 3, 4, 6, 7, 8, 9, 11], "missing_statements_linenumbers": [], "covered_prime_paths_linenumbers": [[7, 8, 6, 9], [1, 11, 3, 4, 6, 7, 8], [1, 11, 3, 4, 6, 9]], "missing_prime_paths_linenumbers": [], "num_total_prime_paths": 3, "num_covered_paths": 3, "prime_path_coverage": 1.0, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_8_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_8_CFG.dot"}
{"humaneval_id": "HumanEval_87__1", "python_file": "HumanEval_87__1/main.py", "input_file": "HumanEval_87__1/input.txt", "prime_paths_nodes": [["1", "11", "3", "8"]], "prime_paths_statements": [["from typing import *\\ldef get_row(lst, x):...\\lget_row([[], [1], [1, 2, 3]], 3)\\l", "get_row", "coords = [(i, j) for i in range(len(lst)) for j in range(len(lst[i])) if \\l    lst[i][j] == x]\\l", "return sorted(sorted(coords, key=lambda x: x[1], reverse=True), key=lambda\\l    x: x[0])\\l"]], "prime_paths_linenumbers": [[1, 14, 5, 7]], "covered_statements_linenumbers": [1, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14], "missing_statements_linenumbers": [], "covered_prime_paths_linenumbers": [[1, 14, 5, 7]], "missing_prime_paths_linenumbers": [], "num_total_prime_paths": 1, "num_covered_paths": 1, "prime_path_coverage": 1.0, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_87__1_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_87__1_CFG.dot"}
{"humaneval_id": "HumanEval_88", "python_file": "HumanEval_88/main.py", "input_file": "HumanEval_88/input.txt", "prime_paths_nodes": [["1", "6", "3"]], "prime_paths_statements": [["from typing import *\\ldef sort_array(array):...\\lsort_array([15, 42, 87, 32, 11, 0])\\l", "sort_array", "return [] if len(array) == 0 else sorted(array, reverse=(array[0] + array[-\\l    1]) % 2 == 0)\\l"]], "prime_paths_linenumbers": [[1, 5, 3]], "covered_statements_linenumbers": [1, 2, 3, 5], "missing_statements_linenumbers": [], "covered_prime_paths_linenumbers": [[1, 5, 3]], "missing_prime_paths_linenumbers": [], "num_total_prime_paths": 1, "num_covered_paths": 1, "prime_path_coverage": 1.0, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_88_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_88_CFG.dot"}
{"humaneval_id": "HumanEval_150__1", "python_file": "HumanEval_150__1/main.py", "input_file": "HumanEval_150__1/input.txt", "prime_paths_nodes": [["8", "5"], ["1", "15", "3", "4"], ["1", "15", "3", "5", "8", "10"]], "prime_paths_statements": [["if n % i == 0:\\l", "for i in range(2, n):\\l"], ["from typing import *\\ldef x_or_y(n, x, y):...\\lx_or_y(91, 56, 129)\\l", "x_or_y", "if n == 1:\\l", "return y\\l"], ["from typing import *\\ldef x_or_y(n, x, y):...\\lx_or_y(91, 56, 129)\\l", "x_or_y", "if n == 1:\\l", "for i in range(2, n):\\l", "if n % i == 0:\\l", "return y\\l"]], "prime_paths_linenumbers": [[8, 7], [1, 14, 5, 6], [1, 14, 5, 7, 8, 9]], "covered_statements_linenumbers": [1, 4, 5, 7, 8, 9, 14], "missing_statements_linenumbers": [6, 12], "covered_prime_paths_linenumbers": [[8, 7], [1, 14, 5, 7, 8, 9]], "missing_prime_paths_linenumbers": [[1, 14, 5, 6]], "num_total_prime_paths": 3, "num_covered_paths": 2, "prime_path_coverage": 0.67, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_150__1_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_150__1_CFG.dot"}
{"humaneval_id": "HumanEval_106", "python_file": "HumanEval_106/main.py", "input_file": "HumanEval_106/input.txt", "prime_paths_nodes": [["6", "8", "15", "18", "4", "7"], ["6", "10", "11", "14", "4", "7"], ["8", "15", "18", "4", "6", "10", "11", "13"], ["8", "15", "18", "4", "6", "10", "11", "14"], ["10", "11", "14", "4", "6", "8", "15", "17"], ["10", "11", "14", "4", "6", "8", "15", "18"], ["17", "15", "18", "4", "7"], ["17", "15", "18", "4", "6", "8"], ["17", "15", "18", "4", "6", "10", "11", "13"], ["17", "15", "18", "4", "6", "10", "11", "14"], ["18", "4", "6", "8", "15", "17"], ["13", "11", "14", "4", "7"], ["13", "11", "14", "4", "6", "10"], ["13", "11", "14", "4", "6", "8", "15", "17"], ["13", "11", "14", "4", "6", "8", "15", "18"], ["14", "4", "6", "10", "11", "13"], ["1", "21", "3", "4", "7"], ["1", "21", "3", "4", "6", "8", "15", "17"], ["1", "21", "3", "4", "6", "8", "15", "18"], ["1", "21", "3", "4", "6", "10", "11", "13"], ["1", "21", "3", "4", "6", "10", "11", "14"]], "prime_paths_statements": [["if i % 2 == 0:\\l", "x = 1\\l", "for j in range(1, i + 1):\\l", "ret += [x]\\l", "for i in range(1, n + 1):\\l", "return ret\\l"], ["if i % 2 == 0:\\l", "x = 0\\l", "for j in range(1, i + 1):\\l", "ret += [x]\\l", "for i in range(1, n + 1):\\l", "return ret\\l"], ["x = 1\\l", "for j in range(1, i + 1):\\l", "ret += [x]\\l", "for i in range(1, n + 1):\\l", "if i % 2 == 0:\\l", "x = 0\\l", "for j in range(1, i + 1):\\l", "x += j\\l"], ["x = 1\\l", "for j in range(1, i + 1):\\l", "ret += [x]\\l", "for i in range(1, n + 1):\\l", "if i % 2 == 0:\\l", "x = 0\\l", "for j in range(1, i + 1):\\l", "ret += [x]\\l"], ["x = 0\\l", "for j in range(1, i + 1):\\l", "ret += [x]\\l", "for i in range(1, n + 1):\\l", "if i % 2 == 0:\\l", "x = 1\\l", "for j in range(1, i + 1):\\l", "x *= j\\l"], ["x = 0\\l", "for j in range(1, i + 1):\\l", "ret += [x]\\l", "for i in range(1, n + 1):\\l", "if i % 2 == 0:\\l", "x = 1\\l", "for j in range(1, i + 1):\\l", "ret += [x]\\l"], ["x *= j\\l", "for j in range(1, i + 1):\\l", "ret += [x]\\l", "for i in range(1, n + 1):\\l", "return ret\\l"], ["x *= j\\l", "for j in range(1, i + 1):\\l", "ret += [x]\\l", "for i in range(1, n + 1):\\l", "if i % 2 == 0:\\l", "x = 1\\l"], ["x *= j\\l", "for j in range(1, i + 1):\\l", "ret += [x]\\l", "for i in range(1, n + 1):\\l", "if i % 2 == 0:\\l", "x = 0\\l", "for j in range(1, i + 1):\\l", "x += j\\l"], ["x *= j\\l", "for j in range(1, i + 1):\\l", "ret += [x]\\l", "for i in range(1, n + 1):\\l", "if i % 2 == 0:\\l", "x = 0\\l", "for j in range(1, i + 1):\\l", "ret += [x]\\l"], ["ret += [x]\\l", "for i in range(1, n + 1):\\l", "if i % 2 == 0:\\l", "x = 1\\l", "for j in range(1, i + 1):\\l", "x *= j\\l"], ["x += j\\l", "for j in range(1, i + 1):\\l", "ret += [x]\\l", "for i in range(1, n + 1):\\l", "return ret\\l"], ["x += j\\l", "for j in range(1, i + 1):\\l", "ret += [x]\\l", "for i in range(1, n + 1):\\l", "if i % 2 == 0:\\l", "x = 0\\l"], ["x += j\\l", "for j in range(1, i + 1):\\l", "ret += [x]\\l", "for i in range(1, n + 1):\\l", "if i % 2 == 0:\\l", "x = 1\\l", "for j in range(1, i + 1):\\l", "x *= j\\l"], ["x += j\\l", "for j in range(1, i + 1):\\l", "ret += [x]\\l", "for i in range(1, n + 1):\\l", "if i % 2 == 0:\\l", "x = 1\\l", "for j in range(1, i + 1):\\l", "ret += [x]\\l"], ["ret += [x]\\l", "for i in range(1, n + 1):\\l", "if i % 2 == 0:\\l", "x = 0\\l", "for j in range(1, i + 1):\\l", "x += j\\l"], ["from typing import *\\ldef f(n):...\\lf(5)\\l", "f", "ret = []\\l", "for i in range(1, n + 1):\\l", "return ret\\l"], ["from typing import *\\ldef f(n):...\\lf(5)\\l", "f", "ret = []\\l", "for i in range(1, n + 1):\\l", "if i % 2 == 0:\\l", "x = 1\\l", "for j in range(1, i + 1):\\l", "x *= j\\l"], ["from typing import *\\ldef f(n):...\\lf(5)\\l", "f", "ret = []\\l", "for i in range(1, n + 1):\\l", "if i % 2 == 0:\\l", "x = 1\\l", "for j in range(1, i + 1):\\l", "ret += [x]\\l"], ["from typing import *\\ldef f(n):...\\lf(5)\\l", "f", "ret = []\\l", "for i in range(1, n + 1):\\l", "if i % 2 == 0:\\l", "x = 0\\l", "for j in range(1, i + 1):\\l", "x += j\\l"], ["from typing import *\\ldef f(n):...\\lf(5)\\l", "f", "ret = []\\l", "for i in range(1, n + 1):\\l", "if i % 2 == 0:\\l", "x = 0\\l", "for j in range(1, i + 1):\\l", "ret += [x]\\l"]], "prime_paths_linenumbers": [[5, 6, 7, 8, 4, 13], [5, 10, 11, 12, 4, 13], [6, 7, 8, 4, 5, 10, 11, 11], [6, 7, 8, 4, 5, 10, 11, 12], [10, 11, 12, 4, 5, 6, 7, 7], [10, 11, 12, 4, 5, 6, 7, 8], [7, 7, 8, 4, 13], [7, 7, 8, 4, 5, 6], [7, 7, 8, 4, 5, 10, 11, 11], [7, 7, 8, 4, 5, 10, 11, 12], [8, 4, 5, 6, 7, 7], [11, 11, 12, 4, 13], [11, 11, 12, 4, 5, 10], [11, 11, 12, 4, 5, 6, 7, 7], [11, 11, 12, 4, 5, 6, 7, 8], [12, 4, 5, 10, 11, 11], [1, 15, 3, 4, 13], [1, 15, 3, 4, 5, 6, 7, 7], [1, 15, 3, 4, 5, 6, 7, 8], [1, 15, 3, 4, 5, 10, 11, 11], [1, 15, 3, 4, 5, 10, 11, 12]], "covered_statements_linenumbers": [1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 15], "missing_statements_linenumbers": [], "covered_prime_paths_linenumbers": [[5, 6, 7, 8, 4, 13], [5, 10, 11, 12, 4, 13], [6, 7, 8, 4, 5, 10, 11, 11], [6, 7, 8, 4, 5, 10, 11, 12], [10, 11, 12, 4, 5, 6, 7, 7], [10, 11, 12, 4, 5, 6, 7, 8], [7, 7, 8, 4, 13], [7, 7, 8, 4, 5, 6], [7, 7, 8, 4, 5, 10, 11, 11], [7, 7, 8, 4, 5, 10, 11, 12], [8, 4, 5, 6, 7, 7], [11, 11, 12, 4, 13], [11, 11, 12, 4, 5, 10], [11, 11, 12, 4, 5, 6, 7, 7], [11, 11, 12, 4, 5, 6, 7, 8], [12, 4, 5, 10, 11, 11], [1, 15, 3, 4, 13], [1, 15, 3, 4, 5, 6, 7, 7], [1, 15, 3, 4, 5, 6, 7, 8], [1, 15, 3, 4, 5, 10, 11, 11], [1, 15, 3, 4, 5, 10, 11, 12]], "missing_prime_paths_linenumbers": [], "num_total_prime_paths": 21, "num_covered_paths": 21, "prime_path_coverage": 1.0, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_106_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_106_CFG.dot"}
{"humaneval_id": "HumanEval_160__0", "python_file": "HumanEval_160__0/main.py", "input_file": "HumanEval_160__0/input.txt", "prime_paths_nodes": [["7", "5", "8"], ["1", "12", "3", "5", "7"], ["1", "12", "3", "5", "8"]], "prime_paths_statements": [["expression += oprt + str(oprn)\\l", "for oprt, oprn in zip(operator, operand[1:]):\\l", "return eval(expression)\\l"], ["from typing import *\\ldef do_algebra(operator, operand):...\\ldo_algebra(['//', '*'], [7, 3, 4])\\l", "do_algebra", "expression = str(operand[0])\\l", "for oprt, oprn in zip(operator, operand[1:]):\\l", "expression += oprt + str(oprn)\\l"], ["from typing import *\\ldef do_algebra(operator, operand):...\\ldo_algebra(['//', '*'], [7, 3, 4])\\l", "do_algebra", "expression = str(operand[0])\\l", "for oprt, oprn in zip(operator, operand[1:]):\\l", "return eval(expression)\\l"]], "prime_paths_linenumbers": [[7, 6, 8], [1, 10, 5, 6, 7], [1, 10, 5, 6, 8]], "covered_statements_linenumbers": [1, 4, 5, 6, 7, 8, 10], "missing_statements_linenumbers": [], "covered_prime_paths_linenumbers": [[7, 6, 8], [1, 10, 5, 6, 7], [1, 10, 5, 6, 8]], "missing_prime_paths_linenumbers": [], "num_total_prime_paths": 3, "num_covered_paths": 3, "prime_path_coverage": 1.0, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_160__0_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_160__0_CFG.dot"}
{"humaneval_id": "HumanEval_60", "python_file": "HumanEval_60/main.py", "input_file": "HumanEval_60/input.txt", "prime_paths_nodes": [["1", "6", "3"]], "prime_paths_statements": [["from typing import *\\ldef sum_to_n(n: int):...\\lsum_to_n(1)\\l", "sum_to_n", "return sum(range(n + 1))\\l"]], "prime_paths_linenumbers": [[1, 5, 3]], "covered_statements_linenumbers": [1, 2, 3, 5], "missing_statements_linenumbers": [], "covered_prime_paths_linenumbers": [[1, 5, 3]], "missing_prime_paths_linenumbers": [], "num_total_prime_paths": 1, "num_covered_paths": 1, "prime_path_coverage": 1.0, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_60_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_60_CFG.dot"}
{"humaneval_id": "HumanEval_46__1", "python_file": "HumanEval_46__1/main.py", "input_file": "HumanEval_46__1/input.txt", "prime_paths_nodes": [["9", "6", "10"], ["1", "15", "3", "4", "5"], ["1", "15", "3", "4", "6", "9"], ["1", "15", "3", "4", "6", "10"]], "prime_paths_statements": [["results.append(results[-1] + results[-2] + results[-3] + results[-4])\\lresults.pop(0)\\l", "for _ in range(4, n + 1):\\l", "return results[-1]\\l"], ["from typing import *\\ldef fib4(n: int):...\\lfib4(12)\\l", "fib4", "results = [0, 0, 2, 0]\\l", "if n < 4:\\l", "return results[n]\\l"], ["from typing import *\\ldef fib4(n: int):...\\lfib4(12)\\l", "fib4", "results = [0, 0, 2, 0]\\l", "if n < 4:\\l", "for _ in range(4, n + 1):\\l", "results.append(results[-1] + results[-2] + results[-3] + results[-4])\\lresults.pop(0)\\l"], ["from typing import *\\ldef fib4(n: int):...\\lfib4(12)\\l", "fib4", "results = [0, 0, 2, 0]\\l", "if n < 4:\\l", "for _ in range(4, n + 1):\\l", "return results[-1]\\l"]], "prime_paths_linenumbers": [[10, 11, 9, 13], [1, 15, 5, 6, 7], [1, 15, 5, 6, 9, 10, 11], [1, 15, 5, 6, 9, 13]], "covered_statements_linenumbers": [1, 4, 5, 6, 9, 10, 11, 13, 15], "missing_statements_linenumbers": [7], "covered_prime_paths_linenumbers": [[10, 11, 9, 13], [1, 15, 5, 6, 9, 10, 11], [1, 15, 5, 6, 9, 13]], "missing_prime_paths_linenumbers": [[1, 15, 5, 6, 7]], "num_total_prime_paths": 4, "num_covered_paths": 3, "prime_path_coverage": 0.75, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_46__1_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_46__1_CFG.dot"}
{"humaneval_id": "HumanEval_97__1", "python_file": "HumanEval_97__1/main.py", "input_file": "HumanEval_97__1/input.txt", "prime_paths_nodes": [["1", "6", "3"]], "prime_paths_statements": [["from typing import *\\ldef multiply(a, b):...\\lmultiply(76, 67)\\l", "multiply", "return abs(a % 10) * abs(b % 10)\\l"]], "prime_paths_linenumbers": [[1, 7, 5]], "covered_statements_linenumbers": [1, 4, 5, 7], "missing_statements_linenumbers": [], "covered_prime_paths_linenumbers": [[1, 7, 5]], "missing_prime_paths_linenumbers": [], "num_total_prime_paths": 1, "num_covered_paths": 1, "prime_path_coverage": 1.0, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_97__1_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_97__1_CFG.dot"}
{"humaneval_id": "HumanEval_28__0", "python_file": "HumanEval_28__0/main.py", "input_file": "HumanEval_28__0/input.txt", "prime_paths_nodes": [["1", "6", "3"]], "prime_paths_statements": [["from typing import *\\ldef concatenate(strings: List[str]) ->str:...\\lconcatenate([])\\l", "concatenate", "return ''.join(strings)\\l"]], "prime_paths_linenumbers": [[1, 7, 5]], "covered_statements_linenumbers": [1, 4, 5, 7], "missing_statements_linenumbers": [], "covered_prime_paths_linenumbers": [[1, 7, 5]], "missing_prime_paths_linenumbers": [], "num_total_prime_paths": 1, "num_covered_paths": 1, "prime_path_coverage": 1.0, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_28__0_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_28__0_CFG.dot"}
{"humaneval_id": "HumanEval_139__0", "python_file": "HumanEval_139__0/main.py", "input_file": "HumanEval_139__0/input.txt", "prime_paths_nodes": [["6", "4", "7"], ["1", "10", "3", "4", "6"], ["1", "10", "3", "4", "7"]], "prime_paths_statements": [["fact_i *= i\\lspecial_fact *= fact_i\\l", "for i in range(1, n + 1):\\l", "return special_fact\\l"], ["from typing import *\\ldef special_factorial(n):...\\lspecial_factorial(7)\\l", "special_factorial", "fact_i = 1\\lspecial_fact = 1\\l", "for i in range(1, n + 1):\\l", "fact_i *= i\\lspecial_fact *= fact_i\\l"], ["from typing import *\\ldef special_factorial(n):...\\lspecial_factorial(7)\\l", "special_factorial", "fact_i = 1\\lspecial_fact = 1\\l", "for i in range(1, n + 1):\\l", "return special_fact\\l"]], "prime_paths_linenumbers": [[8, 9, 7, 10], [1, 12, 5, 6, 7, 8, 9], [1, 12, 5, 6, 7, 10]], "covered_statements_linenumbers": [1, 4, 5, 6, 7, 8, 9, 10, 12], "missing_statements_linenumbers": [], "covered_prime_paths_linenumbers": [[8, 9, 7, 10], [1, 12, 5, 6, 7, 8, 9], [1, 12, 5, 6, 7, 10]], "missing_prime_paths_linenumbers": [], "num_total_prime_paths": 3, "num_covered_paths": 3, "prime_path_coverage": 1.0, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_139__0_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_139__0_CFG.dot"}
{"humaneval_id": "HumanEval_120__0", "python_file": "HumanEval_120__0/main.py", "input_file": "HumanEval_120__0/input.txt", "prime_paths_nodes": [["1", "11", "3", "4"], ["1", "11", "3", "5", "8"]], "prime_paths_statements": [["from typing import *\\ldef maximum(arr, k):...\\lmaximum([-3, 2, 1, 2, -1, -2, 1], 1)\\l", "maximum", "if k == 0:\\l", "return []\\l"], ["from typing import *\\ldef maximum(arr, k):...\\lmaximum([-3, 2, 1, 2, -1, -2, 1], 1)\\l", "maximum", "if k == 0:\\l", "arr.sort()\\lans = arr[-k:]\\l", "return ans\\l"]], "prime_paths_linenumbers": [[1, 11, 5, 6], [1, 11, 5, 7, 8, 9]], "covered_statements_linenumbers": [1, 4, 5, 7, 8, 9, 11], "missing_statements_linenumbers": [6], "covered_prime_paths_linenumbers": [[1, 11, 5, 7, 8, 9]], "missing_prime_paths_linenumbers": [[1, 11, 5, 6]], "num_total_prime_paths": 2, "num_covered_paths": 1, "prime_path_coverage": 0.5, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_120__0_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_120__0_CFG.dot"}
{"humaneval_id": "HumanEval_93__0", "python_file": "HumanEval_93__0/main.py", "input_file": "HumanEval_93__0/input.txt", "prime_paths_nodes": [["1", "11", "3", "8"]], "prime_paths_statements": [["from typing import *\\ldef encode(message):...\\lencode('YES')\\l", "encode", "vowels = 'aeiouAEIOU'\\lvowels_replace = dict([(i, chr(ord(i) + 2)) for i in vowels])\\lmessage = message.swapcase()\\l", "return ''.join([(vowels_replace[i] if i in vowels else i) for i in message])\\l"]], "prime_paths_linenumbers": [[1, 10, 5, 6, 7, 8]], "covered_statements_linenumbers": [1, 4, 5, 6, 7, 8, 10], "missing_statements_linenumbers": [], "covered_prime_paths_linenumbers": [[1, 10, 5, 6, 7, 8]], "missing_prime_paths_linenumbers": [], "num_total_prime_paths": 1, "num_covered_paths": 1, "prime_path_coverage": 1.0, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_93__0_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_93__0_CFG.dot"}
{"humaneval_id": "HumanEval_41", "python_file": "HumanEval_41/main.py", "input_file": "HumanEval_41/input.txt", "prime_paths_nodes": [["1", "6", "3"]], "prime_paths_statements": [["from typing import *\\ldef car_race_collision(n: int):...\\lcar_race_collision(2)\\l", "car_race_collision", "return n ** 2\\l"]], "prime_paths_linenumbers": [[1, 5, 3]], "covered_statements_linenumbers": [1, 2, 3, 5], "missing_statements_linenumbers": [], "covered_prime_paths_linenumbers": [[1, 5, 3]], "missing_prime_paths_linenumbers": [], "num_total_prime_paths": 1, "num_covered_paths": 1, "prime_path_coverage": 1.0, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_41_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_41_CFG.dot"}
{"humaneval_id": "HumanEval_22__0", "python_file": "HumanEval_22__0/main.py", "input_file": "HumanEval_22__0/input.txt", "prime_paths_nodes": [["1", "6", "3"]], "prime_paths_statements": [["from typing import *\\ldef filter_integers(values: List[Any]) ->List[int]:...\\lfilter_integers([])\\l", "filter_integers", "return [x for x in values if isinstance(x, int)]\\l"]], "prime_paths_linenumbers": [[1, 7, 5]], "covered_statements_linenumbers": [1, 4, 5, 7], "missing_statements_linenumbers": [], "covered_prime_paths_linenumbers": [[1, 7, 5]], "missing_prime_paths_linenumbers": [], "num_total_prime_paths": 1, "num_covered_paths": 1, "prime_path_coverage": 1.0, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_22__0_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_22__0_CFG.dot"}
{"humaneval_id": "HumanEval_85", "python_file": "HumanEval_85/main.py", "input_file": "HumanEval_85/input.txt", "prime_paths_nodes": [["1", "6", "3"]], "prime_paths_statements": [["from typing import *\\ldef add(lst):...\\ladd([4, 88])\\l", "add", "return sum([lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0])\\l"]], "prime_paths_linenumbers": [[1, 5, 3]], "covered_statements_linenumbers": [1, 2, 3, 5], "missing_statements_linenumbers": [], "covered_prime_paths_linenumbers": [[1, 5, 3]], "missing_prime_paths_linenumbers": [], "num_total_prime_paths": 1, "num_covered_paths": 1, "prime_path_coverage": 1.0, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_85_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_85_CFG.dot"}
{"humaneval_id": "HumanEval_112__1", "python_file": "HumanEval_112__1/main.py", "input_file": "HumanEval_112__1/input.txt", "prime_paths_nodes": [["1", "8", "3", "5"]], "prime_paths_statements": [["from typing import *\\ldef reverse_delete(s, c):...\\lreverse_delete('mamma', 'mia')\\l", "reverse_delete", "s = ''.join([char for char in s if char not in c])\\l", "return s, s[::-1] == s\\l"]], "prime_paths_linenumbers": [[1, 8, 5, 6]], "covered_statements_linenumbers": [1, 4, 5, 6, 8], "missing_statements_linenumbers": [], "covered_prime_paths_linenumbers": [[1, 8, 5, 6]], "missing_prime_paths_linenumbers": [], "num_total_prime_paths": 1, "num_covered_paths": 1, "prime_path_coverage": 1.0, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_112__1_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_112__1_CFG.dot"}
{"humaneval_id": "HumanEval_7__1", "python_file": "HumanEval_7__1/main.py", "input_file": "HumanEval_7__1/input.txt", "prime_paths_nodes": [["1", "6", "3"]], "prime_paths_statements": [["from typing import *\\ldef filter_by_substring(strings: List[str], substring: str) ->List[str]:...\\lfilter_by_substring(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx'\\l    )\\l", "filter_by_substring", "return [x for x in strings if substring in x]\\l"]], "prime_paths_linenumbers": [[1, 7, 5]], "covered_statements_linenumbers": [1, 4, 5, 7], "missing_statements_linenumbers": [], "covered_prime_paths_linenumbers": [[1, 7, 5]], "missing_prime_paths_linenumbers": [], "num_total_prime_paths": 1, "num_covered_paths": 1, "prime_path_coverage": 1.0, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_7__1_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_7__1_CFG.dot"}
{"humaneval_id": "HumanEval_103", "python_file": "HumanEval_103/main.py", "input_file": "HumanEval_103/input.txt", "prime_paths_nodes": [["9", "7", "10"], ["1", "13", "3", "4"], ["1", "13", "3", "5", "7", "9"], ["1", "13", "3", "5", "7", "10"]], "prime_paths_statements": [["summation += i\\l", "for i in range(n, m + 1):\\l", "return bin(round(summation / (m - n + 1)))\\l"], ["from typing import *\\ldef rounded_avg(n, m):...\\lrounded_avg(1, 5)\\l", "rounded_avg", "if m < n:\\l", "return -1\\l"], ["from typing import *\\ldef rounded_avg(n, m):...\\lrounded_avg(1, 5)\\l", "rounded_avg", "if m < n:\\l", "summation = 0\\l", "for i in range(n, m + 1):\\l", "summation += i\\l"], ["from typing import *\\ldef rounded_avg(n, m):...\\lrounded_avg(1, 5)\\l", "rounded_avg", "if m < n:\\l", "summation = 0\\l", "for i in range(n, m + 1):\\l", "return bin(round(summation / (m - n + 1)))\\l"]], "prime_paths_linenumbers": [[7, 6, 8], [1, 10, 3, 4], [1, 10, 3, 5, 6, 7], [1, 10, 3, 5, 6, 8]], "covered_statements_linenumbers": [1, 2, 3, 5, 6, 7, 8, 10], "missing_statements_linenumbers": [4], "covered_prime_paths_linenumbers": [[7, 6, 8], [1, 10, 3, 5, 6, 7], [1, 10, 3, 5, 6, 8]], "missing_prime_paths_linenumbers": [[1, 10, 3, 4]], "num_total_prime_paths": 4, "num_covered_paths": 3, "prime_path_coverage": 0.75, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_103_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_103_CFG.dot"}
{"humaneval_id": "HumanEval_73__0", "python_file": "HumanEval_73__0/main.py", "input_file": "HumanEval_73__0/input.txt", "prime_paths_nodes": [["7", "4", "8"], ["7", "10", "4", "8"], ["10", "4", "7"], ["1", "14", "3", "4", "8"], ["1", "14", "3", "4", "7", "10"]], "prime_paths_statements": [["if arr[i] != arr[len(arr) - i - 1]:\\l", "for i in range(len(arr) // 2):\\l", "return ans\\l"], ["if arr[i] != arr[len(arr) - i - 1]:\\l", "ans += 1\\l", "for i in range(len(arr) // 2):\\l", "return ans\\l"], ["ans += 1\\l", "for i in range(len(arr) // 2):\\l", "if arr[i] != arr[len(arr) - i - 1]:\\l"], ["from typing import *\\ldef smallest_change(arr):...\\lsmallest_change([1, 4, 2])\\l", "smallest_change", "ans = 0\\l", "for i in range(len(arr) // 2):\\l", "return ans\\l"], ["from typing import *\\ldef smallest_change(arr):...\\lsmallest_change([1, 4, 2])\\l", "smallest_change", "ans = 0\\l", "for i in range(len(arr) // 2):\\l", "if arr[i] != arr[len(arr) - i - 1]:\\l", "ans += 1\\l"]], "prime_paths_linenumbers": [[7, 6, 9], [7, 8, 6, 9], [8, 6, 7], [1, 11, 5, 6, 9], [1, 11, 5, 6, 7, 8]], "covered_statements_linenumbers": [1, 4, 5, 6, 7, 8, 9, 11], "missing_statements_linenumbers": [], "covered_prime_paths_linenumbers": [[7, 6, 9], [7, 8, 6, 9], [8, 6, 7], [1, 11, 5, 6, 9], [1, 11, 5, 6, 7, 8]], "missing_prime_paths_linenumbers": [], "num_total_prime_paths": 5, "num_covered_paths": 5, "prime_path_coverage": 1.0, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_73__0_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_73__0_CFG.dot"}
{"humaneval_id": "HumanEval_77__0", "python_file": "HumanEval_77__0/main.py", "input_file": "HumanEval_77__0/input.txt", "prime_paths_nodes": [["1", "8", "3", "5"]], "prime_paths_statements": [["from typing import *\\ldef iscube(a):...\\liscube(2)\\l", "iscube", "a = abs(a)\\l", "return int(round(a ** (1.0 / 3))) ** 3 == a\\l"]], "prime_paths_linenumbers": [[1, 8, 5, 6]], "covered_statements_linenumbers": [1, 4, 5, 6, 8], "missing_statements_linenumbers": [], "covered_prime_paths_linenumbers": [[1, 8, 5, 6]], "missing_prime_paths_linenumbers": [], "num_total_prime_paths": 1, "num_covered_paths": 1, "prime_path_coverage": 1.0, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_77__0_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_77__0_CFG.dot"}
{"humaneval_id": "HumanEval_44__0", "python_file": "HumanEval_44__0/main.py", "input_file": "HumanEval_44__0/input.txt", "prime_paths_nodes": [["5", "4", "6"], ["1", "10", "3", "4", "5"], ["1", "10", "3", "4", "6"]], "prime_paths_statements": [["ret = str(x % base) + ret\\lx //= base\\l", "while x > 0:\\l", "return ret\\l"], ["from typing import *\\ldef change_base(x: int, base: int):...\\lchange_base(234, 2)\\l", "change_base", "ret = ''\\l", "while x > 0:\\l", "ret = str(x % base) + ret\\lx //= base\\l"], ["from typing import *\\ldef change_base(x: int, base: int):...\\lchange_base(234, 2)\\l", "change_base", "ret = ''\\l", "while x > 0:\\l", "return ret\\l"]], "prime_paths_linenumbers": [[7, 8, 6, 9], [1, 11, 5, 6, 7, 8], [1, 11, 5, 6, 9]], "covered_statements_linenumbers": [1, 4, 5, 6, 7, 8, 9, 11], "missing_statements_linenumbers": [], "covered_prime_paths_linenumbers": [[7, 8, 6, 9], [1, 11, 5, 6, 7, 8], [1, 11, 5, 6, 9]], "missing_prime_paths_linenumbers": [], "num_total_prime_paths": 3, "num_covered_paths": 3, "prime_path_coverage": 1.0, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_44__0_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_44__0_CFG.dot"}
{"humaneval_id": "HumanEval_52__0", "python_file": "HumanEval_52__0/main.py", "input_file": "HumanEval_52__0/input.txt", "prime_paths_nodes": [["4", "3", "5"], ["1", "11", "3", "5"], ["1", "11", "3", "4", "6"]], "prime_paths_statements": [["if e >= t:\\l", "for e in l:\\l", "return True\\l"], ["from typing import *\\ldef below_threshold(l: list, t: int):...\\lbelow_threshold([1, 8, 4, 10], 11)\\l", "below_threshold", "for e in l:\\l", "return True\\l"], ["from typing import *\\ldef below_threshold(l: list, t: int):...\\lbelow_threshold([1, 8, 4, 10], 11)\\l", "below_threshold", "for e in l:\\l", "if e >= t:\\l", "return False\\l"]], "prime_paths_linenumbers": [[6, 5, 8], [1, 10, 5, 8], [1, 10, 5, 6, 7]], "covered_statements_linenumbers": [1, 4, 5, 6, 8, 10], "missing_statements_linenumbers": [7], "covered_prime_paths_linenumbers": [[6, 5, 8], [1, 10, 5, 8]], "missing_prime_paths_linenumbers": [[1, 10, 5, 6, 7]], "num_total_prime_paths": 3, "num_covered_paths": 2, "prime_path_coverage": 0.67, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_52__0_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_52__0_CFG.dot"}
{"humaneval_id": "HumanEval_129__1", "python_file": "HumanEval_129__1/main.py", "input_file": "HumanEval_129__1/input.txt", "prime_paths_nodes": [["10", "7", "5", "8", "28", "31"], ["10", "12", "14", "15", "16", "18", "19", "21", "22", "24", "25", "7", "5", "8", "28", "31"], ["10", "12", "14", "15", "16", "18", "19", "21", "22", "25", "7", "5", "8", "28", "31"], ["10", "12", "14", "15", "16", "18", "19", "22", "24", "25", "7", "5", "8", "28", "31"], ["10", "12", "14", "15", "16", "18", "19", "22", "25", "7", "5", "8", "28", "31"], ["10", "12", "14", "15", "16", "19", "21", "22", "24", "25", "7", "5", "8", "28", "31"], ["10", "12", "14", "15", "16", "19", "21", "22", "25", "7", "5", "8", "28", "31"], ["10", "12", "14", "15", "16", "19", "22", "24", "25", "7", "5", "8", "28", "31"], ["10", "12", "14", "15", "16", "19", "22", "25", "7", "5", "8", "28", "31"], ["10", "12", "14", "16", "18", "19", "21", "22", "24", "25", "7", "5", "8", "28", "31"], ["10", "12", "14", "16", "18", "19", "21", "22", "25", "7", "5", "8", "28", "31"], ["10", "12", "14", "16", "18", "19", "22", "24", "25", "7", "5", "8", "28", "31"], ["10", "12", "14", "16", "18", "19", "22", "25", "7", "5", "8", "28", "31"], ["10", "12", "14", "16", "19", "21", "22", "24", "25", "7", "5", "8", "28", "31"], ["10", "12", "14", "16", "19", "21", "22", "25", "7", "5", "8", "28", "31"], ["10", "12", "14", "16", "19", "22", "24", "25", "7", "5", "8", "28", "31"], ["10", "12", "14", "16", "19", "22", "25", "7", "5", "8", "28", "31"], ["10", "7", "5", "8", "28", "30", "32"], ["10", "12", "14", "15", "16", "18", "19", "21", "22", "24", "25", "7", "5", "8", "28", "30", "32"], ["10", "12", "14", "15", "16", "18", "19", "21", "22", "25", "7", "5", "8", "28", "30", "32"], ["10", "12", "14", "15", "16", "18", "19", "22", "24", "25", "7", "5", "8", "28", "30", "32"], ["10", "12", "14", "15", "16", "18", "19", "22", "25", "7", "5", "8", "28", "30", "32"], ["10", "12", "14", "15", "16", "19", "21", "22", "24", "25", "7", "5", "8", "28", "30", "32"], ["10", "12", "14", "15", "16", "19", "21", "22", "25", "7", "5", "8", "28", "30", "32"], ["10", "12", "14", "15", "16", "19", "22", "24", "25", "7", "5", "8", "28", "30", "32"], ["10", "12", "14", "15", "16", "19", "22", "25", "7", "5", "8", "28", "30", "32"], ["10", "12", "14", "16", "18", "19", "21", "22", "24", "25", "7", "5", "8", "28", "30", "32"], ["10", "12", "14", "16", "18", "19", "21", "22", "25", "7", "5", "8", "28", "30", "32"], ["10", "12", "14", "16", "18", "19", "22", "24", "25", "7", "5", "8", "28", "30", "32"], ["10", "12", "14", "16", "18", "19", "22", "25", "7", "5", "8", "28", "30", "32"], ["10", "12", "14", "16", "19", "21", "22", "24", "25", "7", "5", "8", "28", "30", "32"], ["10", "12", "14", "16", "19", "21", "22", "25", "7", "5", "8", "28", "30", "32"], ["10", "12", "14", "16", "19", "22", "24", "25", "7", "5", "8", "28", "30", "32"], ["10", "12", "14", "16", "19", "22", "25", "7", "5", "8", "28", "30", "32"], ["10", "7", "5", "8", "28", "30", "34"], ["10", "12", "14", "15", "16", "18", "19", "21", "22", "24", "25", "7", "5", "8", "28", "30", "34"], ["10", "12", "14", "15", "16", "18", "19", "21", "22", "25", "7", "5", "8", "28", "30", "34"], ["10", "12", "14", "15", "16", "18", "19", "22", "24", "25", "7", "5", "8", "28", "30", "34"], ["10", "12", "14", "15", "16", "18", "19", "22", "25", "7", "5", "8", "28", "30", "34"], ["10", "12", "14", "15", "16", "19", "21", "22", "24", "25", "7", "5", "8", "28", "30", "34"], ["10", "12", "14", "15", "16", "19", "21", "22", "25", "7", "5", "8", "28", "30", "34"], ["10", "12", "14", "15", "16", "19", "22", "24", "25", "7", "5", "8", "28", "30", "34"], ["10", "12", "14", "15", "16", "19", "22", "25", "7", "5", "8", "28", "30", "34"], ["10", "12", "14", "16", "18", "19", "21", "22", "24", "25", "7", "5", "8", "28", "30", "34"], ["10", "12", "14", "16", "18", "19", "21", "22", "25", "7", "5", "8", "28", "30", "34"], ["10", "12", "14", "16", "18", "19", "22", "24", "25", "7", "5", "8", "28", "30", "34"], ["10", "12", "14", "16", "18", "19", "22", "25", "7", "5", "8", "28", "30", "34"], ["10", "12", "14", "16", "19", "21", "22", "24", "25", "7", "5", "8", "28", "30", "34"], ["10", "12", "14", "16", "19", "21", "22", "25", "7", "5", "8", "28", "30", "34"], ["10", "12", "14", "16", "19", "22", "24", "25", "7", "5", "8", "28", "30", "34"], ["10", "12", "14", "16", "19", "22", "25", "7", "5", "8", "28", "30", "34"], ["12", "14", "15", "16", "18", "19", "21", "22", "24", "25", "7", "10"], ["12", "14", "15", "16", "18", "19", "21", "22", "25", "7", "10"], ["12", "14", "15", "16", "18", "19", "22", "24", "25", "7", "10"], ["12", "14", "15", "16", "18", "19", "22", "25", "7", "10"], ["12", "14", "15", "16", "19", "21", "22", "24", "25", "7", "10"], ["12", "14", "15", "16", "19", "21", "22", "25", "7", "10"], ["12", "14", "15", "16", "19", "22", "24", "25", "7", "10"], ["12", "14", "15", "16", "19", "22", "25", "7", "10"], ["12", "14", "16", "18", "19", "21", "22", "24", "25", "7", "10"], ["12", "14", "16", "18", "19", "21", "22", "25", "7", "10"], ["12", "14", "16", "18", "19", "22", "24", "25", "7", "10"], ["12", "14", "16", "18", "19", "22", "25", "7", "10"], ["12", "14", "16", "19", "21", "22", "24", "25", "7", "10"], ["12", "14", "16", "19", "21", "22", "25", "7", "10"], ["12", "14", "16", "19", "22", "24", "25", "7", "10"], ["12", "14", "16", "19", "22", "25", "7", "10"], ["14", "15", "16", "18", "19", "21", "22", "24", "25", "7", "10", "12"], ["14", "15", "16", "18", "19", "21", "22", "25", "7", "10", "12"], ["14", "15", "16", "18", "19", "22", "24", "25", "7", "10", "12"], ["14", "15", "16", "18", "19", "22", "25", "7", "10", "12"], ["14", "15", "16", "19", "21", "22", "24", "25", "7", "10", "12"], ["14", "15", "16", "19", "21", "22", "25", "7", "10", "12"], ["14", "15", "16", "19", "22", "24", "25", "7", "10", "12"], ["14", "15", "16", "19", "22", "25", "7", "10", "12"], ["14", "16", "18", "19", "21", "22", "24", "25", "7", "10", "12"], ["14", "16", "18", "19", "21", "22", "25", "7", "10", "12"], ["14", "16", "18", "19", "22", "24", "25", "7", "10", "12"], ["14", "16", "18", "19", "22", "25", "7", "10", "12"], ["14", "16", "19", "21", "22", "24", "25", "7", "10", "12"], ["14", "16", "19", "21", "22", "25", "7", "10", "12"], ["14", "16", "19", "22", "24", "25", "7", "10", "12"], ["14", "16", "19", "22", "25", "7", "10", "12"], ["15", "16", "18", "19", "21", "22", "24", "25", "7", "10", "12", "14"], ["15", "16", "18", "19", "21", "22", "25", "7", "10", "12", "14"], ["15", "16", "18", "19", "22", "24", "25", "7", "10", "12", "14"], ["15", "16", "18", "19", "22", "25", "7", "10", "12", "14"], ["15", "16", "19", "21", "22", "24", "25", "7", "10", "12", "14"], ["15", "16", "19", "21", "22", "25", "7", "10", "12", "14"], ["15", "16", "19", "22", "24", "25", "7", "10", "12", "14"], ["15", "16", "19", "22", "25", "7", "10", "12", "14"], ["16", "18", "19", "21", "22", "24", "25", "7", "10", "12", "14", "15"], ["16", "18", "19", "21", "22", "25", "7", "10", "12", "14", "15"], ["16", "18", "19", "22", "24", "25", "7", "10", "12", "14", "15"], ["16", "18", "19", "22", "25", "7", "10", "12", "14", "15"], ["16", "19", "21", "22", "24", "25", "7", "10", "12", "14", "15"], ["16", "19", "21", "22", "25", "7", "10", "12", "14", "15"], ["16", "19", "22", "24", "25", "7", "10", "12", "14", "15"], ["16", "19", "22", "25", "7", "10", "12", "14", "15"], ["18", "19", "21", "22", "24", "25", "7", "10", "12", "14", "15", "16"], ["18", "19", "21", "22", "24", "25", "7", "10", "12", "14", "16"], ["18", "19", "21", "22", "25", "7", "10", "12", "14", "15", "16"], ["18", "19", "21", "22", "25", "7", "10", "12", "14", "16"], ["18", "19", "22", "24", "25", "7", "10", "12", "14", "15", "16"], ["18", "19", "22", "24", "25", "7", "10", "12", "14", "16"], ["18", "19", "22", "25", "7", "10", "12", "14", "15", "16"], ["18", "19", "22", "25", "7", "10", "12", "14", "16"], ["19", "21", "22", "24", "25", "7", "10", "12", "14", "15", "16", "18"], ["19", "21", "22", "24", "25", "7", "10", "12", "14", "16", "18"], ["19", "21", "22", "25", "7", "10", "12", "14", "15", "16", "18"], ["19", "21", "22", "25", "7", "10", "12", "14", "16", "18"], ["19", "22", "24", "25", "7", "10", "12", "14", "15", "16", "18"], ["19", "22", "24", "25", "7", "10", "12", "14", "16", "18"], ["19", "22", "25", "7", "10", "12", "14", "15", "16", "18"], ["19", "22", "25", "7", "10", "12", "14", "16", "18"], ["21", "22", "24", "25", "7", "10", "12", "14", "15", "16", "18", "19"], ["21", "22", "24", "25", "7", "10", "12", "14", "15", "16", "19"], ["21", "22", "24", "25", "7", "10", "12", "14", "16", "18", "19"], ["21", "22", "24", "25", "7", "10", "12", "14", "16", "19"], ["21", "22", "25", "7", "10", "12", "14", "15", "16", "18", "19"], ["21", "22", "25", "7", "10", "12", "14", "15", "16", "19"], ["21", "22", "25", "7", "10", "12", "14", "16", "18", "19"], ["21", "22", "25", "7", "10", "12", "14", "16", "19"], ["22", "24", "25", "7", "10", "12", "14", "15", "16", "18", "19", "21"], ["22", "24", "25", "7", "10", "12", "14", "15", "16", "19", "21"], ["22", "24", "25", "7", "10", "12", "14", "16", "18", "19", "21"], ["22", "24", "25", "7", "10", "12", "14", "16", "19", "21"], ["22", "25", "7", "10", "12", "14", "15", "16", "18", "19", "21"], ["22", "25", "7", "10", "12", "14", "15", "16", "19", "21"], ["22", "25", "7", "10", "12", "14", "16", "18", "19", "21"], ["22", "25", "7", "10", "12", "14", "16", "19", "21"], ["24", "25", "7", "10", "12", "14", "15", "16", "18", "19", "21", "22"], ["24", "25", "7", "10", "12", "14", "15", "16", "18", "19", "22"], ["24", "25", "7", "10", "12", "14", "15", "16", "19", "21", "22"], ["24", "25", "7", "10", "12", "14", "15", "16", "19", "22"], ["24", "25", "7", "10", "12", "14", "16", "18", "19", "21", "22"], ["24", "25", "7", "10", "12", "14", "16", "18", "19", "22"], ["24", "25", "7", "10", "12", "14", "16", "19", "21", "22"], ["24", "25", "7", "10", "12", "14", "16", "19", "22"], ["25", "7", "10", "12", "14", "15", "16", "18", "19", "21", "22", "24"], ["25", "7", "10", "12", "14", "15", "16", "18", "19", "22", "24"], ["25", "7", "10", "12", "14", "15", "16", "19", "21", "22", "24"], ["25", "7", "10", "12", "14", "15", "16", "19", "22", "24"], ["25", "7", "10", "12", "14", "16", "18", "19", "21", "22", "24"], ["25", "7", "10", "12", "14", "16", "18", "19", "22", "24"], ["25", "7", "10", "12", "14", "16", "19", "21", "22", "24"], ["25", "7", "10", "12", "14", "16", "19", "22", "24"], ["30", "32", "28", "31"], ["30", "34", "28", "31"], ["32", "28", "30", "34"], ["34", "28", "30", "32"], ["1", "39", "3", "5", "7", "10", "12", "14", "15", "16", "18", "19", "21", "22", "24", "25"], ["1", "39", "3", "5", "7", "10", "12", "14", "15", "16", "18", "19", "21", "22", "25"], ["1", "39", "3", "5", "7", "10", "12", "14", "15", "16", "18", "19", "22", "24", "25"], ["1", "39", "3", "5", "7", "10", "12", "14", "15", "16", "18", "19", "22", "25"], ["1", "39", "3", "5", "7", "10", "12", "14", "15", "16", "19", "21", "22", "24", "25"], ["1", "39", "3", "5", "7", "10", "12", "14", "15", "16", "19", "21", "22", "25"], ["1", "39", "3", "5", "7", "10", "12", "14", "15", "16", "19", "22", "24", "25"], ["1", "39", "3", "5", "7", "10", "12", "14", "15", "16", "19", "22", "25"], ["1", "39", "3", "5", "7", "10", "12", "14", "16", "18", "19", "21", "22", "24", "25"], ["1", "39", "3", "5", "7", "10", "12", "14", "16", "18", "19", "21", "22", "25"], ["1", "39", "3", "5", "7", "10", "12", "14", "16", "18", "19", "22", "24", "25"], ["1", "39", "3", "5", "7", "10", "12", "14", "16", "18", "19", "22", "25"], ["1", "39", "3", "5", "7", "10", "12", "14", "16", "19", "21", "22", "24", "25"], ["1", "39", "3", "5", "7", "10", "12", "14", "16", "19", "21", "22", "25"], ["1", "39", "3", "5", "7", "10", "12", "14", "16", "19", "22", "24", "25"], ["1", "39", "3", "5", "7", "10", "12", "14", "16", "19", "22", "25"], ["1", "39", "3", "5", "8", "28", "31"], ["1", "39", "3", "5", "8", "28", "30", "32"], ["1", "39", "3", "5", "8", "28", "30", "34"]], "prime_paths_statements": [["if grid[i][j] == 1:\\l", "for j in range(n):\\l", "for i in range(n):\\l", "ans = []\\l", "for i in range(k):\\l", "return ans\\l"], ["if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "temp.append(grid[i - 1][j])\\l", "if j != 0:\\l", "temp.append(grid[i][j - 1])\\l", "if i != n - 1:\\l", "temp.append(grid[i + 1][j])\\l", "if j != n - 1:\\l", "temp.append(grid[i][j + 1])\\l", "val = min(temp)\\l", "for j in range(n):\\l", "for i in range(n):\\l", "ans = []\\l", "for i in range(k):\\l", "return ans\\l"], ["if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "temp.append(grid[i - 1][j])\\l", "if j != 0:\\l", "temp.append(grid[i][j - 1])\\l", "if i != n - 1:\\l", "temp.append(grid[i + 1][j])\\l", "if j != n - 1:\\l", "val = min(temp)\\l", "for j in range(n):\\l", "for i in range(n):\\l", "ans = []\\l", "for i in range(k):\\l", "return ans\\l"], ["if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "temp.append(grid[i - 1][j])\\l", "if j != 0:\\l", "temp.append(grid[i][j - 1])\\l", "if i != n - 1:\\l", "if j != n - 1:\\l", "temp.append(grid[i][j + 1])\\l", "val = min(temp)\\l", "for j in range(n):\\l", "for i in range(n):\\l", "ans = []\\l", "for i in range(k):\\l", "return ans\\l"], ["if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "temp.append(grid[i - 1][j])\\l", "if j != 0:\\l", "temp.append(grid[i][j - 1])\\l", "if i != n - 1:\\l", "if j != n - 1:\\l", "val = min(temp)\\l", "for j in range(n):\\l", "for i in range(n):\\l", "ans = []\\l", "for i in range(k):\\l", "return ans\\l"], ["if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "temp.append(grid[i - 1][j])\\l", "if j != 0:\\l", "if i != n - 1:\\l", "temp.append(grid[i + 1][j])\\l", "if j != n - 1:\\l", "temp.append(grid[i][j + 1])\\l", "val = min(temp)\\l", "for j in range(n):\\l", "for i in range(n):\\l", "ans = []\\l", "for i in range(k):\\l", "return ans\\l"], ["if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "temp.append(grid[i - 1][j])\\l", "if j != 0:\\l", "if i != n - 1:\\l", "temp.append(grid[i + 1][j])\\l", "if j != n - 1:\\l", "val = min(temp)\\l", "for j in range(n):\\l", "for i in range(n):\\l", "ans = []\\l", "for i in range(k):\\l", "return ans\\l"], ["if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "temp.append(grid[i - 1][j])\\l", "if j != 0:\\l", "if i != n - 1:\\l", "if j != n - 1:\\l", "temp.append(grid[i][j + 1])\\l", "val = min(temp)\\l", "for j in range(n):\\l", "for i in range(n):\\l", "ans = []\\l", "for i in range(k):\\l", "return ans\\l"], ["if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "temp.append(grid[i - 1][j])\\l", "if j != 0:\\l", "if i != n - 1:\\l", "if j != n - 1:\\l", "val = min(temp)\\l", "for j in range(n):\\l", "for i in range(n):\\l", "ans = []\\l", "for i in range(k):\\l", "return ans\\l"], ["if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "if j != 0:\\l", "temp.append(grid[i][j - 1])\\l", "if i != n - 1:\\l", "temp.append(grid[i + 1][j])\\l", "if j != n - 1:\\l", "temp.append(grid[i][j + 1])\\l", "val = min(temp)\\l", "for j in range(n):\\l", "for i in range(n):\\l", "ans = []\\l", "for i in range(k):\\l", "return ans\\l"], ["if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "if j != 0:\\l", "temp.append(grid[i][j - 1])\\l", "if i != n - 1:\\l", "temp.append(grid[i + 1][j])\\l", "if j != n - 1:\\l", "val = min(temp)\\l", "for j in range(n):\\l", "for i in range(n):\\l", "ans = []\\l", "for i in range(k):\\l", "return ans\\l"], ["if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "if j != 0:\\l", "temp.append(grid[i][j - 1])\\l", "if i != n - 1:\\l", "if j != n - 1:\\l", "temp.append(grid[i][j + 1])\\l", "val = min(temp)\\l", "for j in range(n):\\l", "for i in range(n):\\l", "ans = []\\l", "for i in range(k):\\l", "return ans\\l"], ["if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "if j != 0:\\l", "temp.append(grid[i][j - 1])\\l", "if i != n - 1:\\l", "if j != n - 1:\\l", "val = min(temp)\\l", "for j in range(n):\\l", "for i in range(n):\\l", "ans = []\\l", "for i in range(k):\\l", "return ans\\l"], ["if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "if j != 0:\\l", "if i != n - 1:\\l", "temp.append(grid[i + 1][j])\\l", "if j != n - 1:\\l", "temp.append(grid[i][j + 1])\\l", "val = min(temp)\\l", "for j in range(n):\\l", "for i in range(n):\\l", "ans = []\\l", "for i in range(k):\\l", "return ans\\l"], ["if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "if j != 0:\\l", "if i != n - 1:\\l", "temp.append(grid[i + 1][j])\\l", "if j != n - 1:\\l", "val = min(temp)\\l", "for j in range(n):\\l", "for i in range(n):\\l", "ans = []\\l", "for i in range(k):\\l", "return ans\\l"], ["if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "if j != 0:\\l", "if i != n - 1:\\l", "if j != n - 1:\\l", "temp.append(grid[i][j + 1])\\l", "val = min(temp)\\l", "for j in range(n):\\l", "for i in range(n):\\l", "ans = []\\l", "for i in range(k):\\l", "return ans\\l"], ["if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "if j != 0:\\l", "if i != n - 1:\\l", "if j != n - 1:\\l", "val = min(temp)\\l", "for j in range(n):\\l", "for i in range(n):\\l", "ans = []\\l", "for i in range(k):\\l", "return ans\\l"], ["if grid[i][j] == 1:\\l", "for j in range(n):\\l", "for i in range(n):\\l", "ans = []\\l", "for i in range(k):\\l", "if i % 2 == 0:\\l", "ans.append(1)\\l"], ["if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "temp.append(grid[i - 1][j])\\l", "if j != 0:\\l", "temp.append(grid[i][j - 1])\\l", "if i != n - 1:\\l", "temp.append(grid[i + 1][j])\\l", "if j != n - 1:\\l", "temp.append(grid[i][j + 1])\\l", "val = min(temp)\\l", "for j in range(n):\\l", "for i in range(n):\\l", "ans = []\\l", "for i in range(k):\\l", "if i % 2 == 0:\\l", "ans.append(1)\\l"], ["if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "temp.append(grid[i - 1][j])\\l", "if j != 0:\\l", "temp.append(grid[i][j - 1])\\l", "if i != n - 1:\\l", "temp.append(grid[i + 1][j])\\l", "if j != n - 1:\\l", "val = min(temp)\\l", "for j in range(n):\\l", "for i in range(n):\\l", "ans = []\\l", "for i in range(k):\\l", "if i % 2 == 0:\\l", "ans.append(1)\\l"], ["if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "temp.append(grid[i - 1][j])\\l", "if j != 0:\\l", "temp.append(grid[i][j - 1])\\l", "if i != n - 1:\\l", "if j != n - 1:\\l", "temp.append(grid[i][j + 1])\\l", "val = min(temp)\\l", "for j in range(n):\\l", "for i in range(n):\\l", "ans = []\\l", "for i in range(k):\\l", "if i % 2 == 0:\\l", "ans.append(1)\\l"], ["if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "temp.append(grid[i - 1][j])\\l", "if j != 0:\\l", "temp.append(grid[i][j - 1])\\l", "if i != n - 1:\\l", "if j != n - 1:\\l", "val = min(temp)\\l", "for j in range(n):\\l", "for i in range(n):\\l", "ans = []\\l", "for i in range(k):\\l", "if i % 2 == 0:\\l", "ans.append(1)\\l"], ["if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "temp.append(grid[i - 1][j])\\l", "if j != 0:\\l", "if i != n - 1:\\l", "temp.append(grid[i + 1][j])\\l", "if j != n - 1:\\l", "temp.append(grid[i][j + 1])\\l", "val = min(temp)\\l", "for j in range(n):\\l", "for i in range(n):\\l", "ans = []\\l", "for i in range(k):\\l", "if i % 2 == 0:\\l", "ans.append(1)\\l"], ["if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "temp.append(grid[i - 1][j])\\l", "if j != 0:\\l", "if i != n - 1:\\l", "temp.append(grid[i + 1][j])\\l", "if j != n - 1:\\l", "val = min(temp)\\l", "for j in range(n):\\l", "for i in range(n):\\l", "ans = []\\l", "for i in range(k):\\l", "if i % 2 == 0:\\l", "ans.append(1)\\l"], ["if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "temp.append(grid[i - 1][j])\\l", "if j != 0:\\l", "if i != n - 1:\\l", "if j != n - 1:\\l", "temp.append(grid[i][j + 1])\\l", "val = min(temp)\\l", "for j in range(n):\\l", "for i in range(n):\\l", "ans = []\\l", "for i in range(k):\\l", "if i % 2 == 0:\\l", "ans.append(1)\\l"], ["if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "temp.append(grid[i - 1][j])\\l", "if j != 0:\\l", "if i != n - 1:\\l", "if j != n - 1:\\l", "val = min(temp)\\l", "for j in range(n):\\l", "for i in range(n):\\l", "ans = []\\l", "for i in range(k):\\l", "if i % 2 == 0:\\l", "ans.append(1)\\l"], ["if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "if j != 0:\\l", "temp.append(grid[i][j - 1])\\l", "if i != n - 1:\\l", "temp.append(grid[i + 1][j])\\l", "if j != n - 1:\\l", "temp.append(grid[i][j + 1])\\l", "val = min(temp)\\l", "for j in range(n):\\l", "for i in range(n):\\l", "ans = []\\l", "for i in range(k):\\l", "if i % 2 == 0:\\l", "ans.append(1)\\l"], ["if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "if j != 0:\\l", "temp.append(grid[i][j - 1])\\l", "if i != n - 1:\\l", "temp.append(grid[i + 1][j])\\l", "if j != n - 1:\\l", "val = min(temp)\\l", "for j in range(n):\\l", "for i in range(n):\\l", "ans = []\\l", "for i in range(k):\\l", "if i % 2 == 0:\\l", "ans.append(1)\\l"], ["if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "if j != 0:\\l", "temp.append(grid[i][j - 1])\\l", "if i != n - 1:\\l", "if j != n - 1:\\l", "temp.append(grid[i][j + 1])\\l", "val = min(temp)\\l", "for j in range(n):\\l", "for i in range(n):\\l", "ans = []\\l", "for i in range(k):\\l", "if i % 2 == 0:\\l", "ans.append(1)\\l"], ["if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "if j != 0:\\l", "temp.append(grid[i][j - 1])\\l", "if i != n - 1:\\l", "if j != n - 1:\\l", "val = min(temp)\\l", "for j in range(n):\\l", "for i in range(n):\\l", "ans = []\\l", "for i in range(k):\\l", "if i % 2 == 0:\\l", "ans.append(1)\\l"], ["if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "if j != 0:\\l", "if i != n - 1:\\l", "temp.append(grid[i + 1][j])\\l", "if j != n - 1:\\l", "temp.append(grid[i][j + 1])\\l", "val = min(temp)\\l", "for j in range(n):\\l", "for i in range(n):\\l", "ans = []\\l", "for i in range(k):\\l", "if i % 2 == 0:\\l", "ans.append(1)\\l"], ["if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "if j != 0:\\l", "if i != n - 1:\\l", "temp.append(grid[i + 1][j])\\l", "if j != n - 1:\\l", "val = min(temp)\\l", "for j in range(n):\\l", "for i in range(n):\\l", "ans = []\\l", "for i in range(k):\\l", "if i % 2 == 0:\\l", "ans.append(1)\\l"], ["if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "if j != 0:\\l", "if i != n - 1:\\l", "if j != n - 1:\\l", "temp.append(grid[i][j + 1])\\l", "val = min(temp)\\l", "for j in range(n):\\l", "for i in range(n):\\l", "ans = []\\l", "for i in range(k):\\l", "if i % 2 == 0:\\l", "ans.append(1)\\l"], ["if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "if j != 0:\\l", "if i != n - 1:\\l", "if j != n - 1:\\l", "val = min(temp)\\l", "for j in range(n):\\l", "for i in range(n):\\l", "ans = []\\l", "for i in range(k):\\l", "if i % 2 == 0:\\l", "ans.append(1)\\l"], ["if grid[i][j] == 1:\\l", "for j in range(n):\\l", "for i in range(n):\\l", "ans = []\\l", "for i in range(k):\\l", "if i % 2 == 0:\\l", "ans.append(val)\\l"], ["if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "temp.append(grid[i - 1][j])\\l", "if j != 0:\\l", "temp.append(grid[i][j - 1])\\l", "if i != n - 1:\\l", "temp.append(grid[i + 1][j])\\l", "if j != n - 1:\\l", "temp.append(grid[i][j + 1])\\l", "val = min(temp)\\l", "for j in range(n):\\l", "for i in range(n):\\l", "ans = []\\l", "for i in range(k):\\l", "if i % 2 == 0:\\l", "ans.append(val)\\l"], ["if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "temp.append(grid[i - 1][j])\\l", "if j != 0:\\l", "temp.append(grid[i][j - 1])\\l", "if i != n - 1:\\l", "temp.append(grid[i + 1][j])\\l", "if j != n - 1:\\l", "val = min(temp)\\l", "for j in range(n):\\l", "for i in range(n):\\l", "ans = []\\l", "for i in range(k):\\l", "if i % 2 == 0:\\l", "ans.append(val)\\l"], ["if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "temp.append(grid[i - 1][j])\\l", "if j != 0:\\l", "temp.append(grid[i][j - 1])\\l", "if i != n - 1:\\l", "if j != n - 1:\\l", "temp.append(grid[i][j + 1])\\l", "val = min(temp)\\l", "for j in range(n):\\l", "for i in range(n):\\l", "ans = []\\l", "for i in range(k):\\l", "if i % 2 == 0:\\l", "ans.append(val)\\l"], ["if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "temp.append(grid[i - 1][j])\\l", "if j != 0:\\l", "temp.append(grid[i][j - 1])\\l", "if i != n - 1:\\l", "if j != n - 1:\\l", "val = min(temp)\\l", "for j in range(n):\\l", "for i in range(n):\\l", "ans = []\\l", "for i in range(k):\\l", "if i % 2 == 0:\\l", "ans.append(val)\\l"], ["if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "temp.append(grid[i - 1][j])\\l", "if j != 0:\\l", "if i != n - 1:\\l", "temp.append(grid[i + 1][j])\\l", "if j != n - 1:\\l", "temp.append(grid[i][j + 1])\\l", "val = min(temp)\\l", "for j in range(n):\\l", "for i in range(n):\\l", "ans = []\\l", "for i in range(k):\\l", "if i % 2 == 0:\\l", "ans.append(val)\\l"], ["if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "temp.append(grid[i - 1][j])\\l", "if j != 0:\\l", "if i != n - 1:\\l", "temp.append(grid[i + 1][j])\\l", "if j != n - 1:\\l", "val = min(temp)\\l", "for j in range(n):\\l", "for i in range(n):\\l", "ans = []\\l", "for i in range(k):\\l", "if i % 2 == 0:\\l", "ans.append(val)\\l"], ["if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "temp.append(grid[i - 1][j])\\l", "if j != 0:\\l", "if i != n - 1:\\l", "if j != n - 1:\\l", "temp.append(grid[i][j + 1])\\l", "val = min(temp)\\l", "for j in range(n):\\l", "for i in range(n):\\l", "ans = []\\l", "for i in range(k):\\l", "if i % 2 == 0:\\l", "ans.append(val)\\l"], ["if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "temp.append(grid[i - 1][j])\\l", "if j != 0:\\l", "if i != n - 1:\\l", "if j != n - 1:\\l", "val = min(temp)\\l", "for j in range(n):\\l", "for i in range(n):\\l", "ans = []\\l", "for i in range(k):\\l", "if i % 2 == 0:\\l", "ans.append(val)\\l"], ["if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "if j != 0:\\l", "temp.append(grid[i][j - 1])\\l", "if i != n - 1:\\l", "temp.append(grid[i + 1][j])\\l", "if j != n - 1:\\l", "temp.append(grid[i][j + 1])\\l", "val = min(temp)\\l", "for j in range(n):\\l", "for i in range(n):\\l", "ans = []\\l", "for i in range(k):\\l", "if i % 2 == 0:\\l", "ans.append(val)\\l"], ["if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "if j != 0:\\l", "temp.append(grid[i][j - 1])\\l", "if i != n - 1:\\l", "temp.append(grid[i + 1][j])\\l", "if j != n - 1:\\l", "val = min(temp)\\l", "for j in range(n):\\l", "for i in range(n):\\l", "ans = []\\l", "for i in range(k):\\l", "if i % 2 == 0:\\l", "ans.append(val)\\l"], ["if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "if j != 0:\\l", "temp.append(grid[i][j - 1])\\l", "if i != n - 1:\\l", "if j != n - 1:\\l", "temp.append(grid[i][j + 1])\\l", "val = min(temp)\\l", "for j in range(n):\\l", "for i in range(n):\\l", "ans = []\\l", "for i in range(k):\\l", "if i % 2 == 0:\\l", "ans.append(val)\\l"], ["if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "if j != 0:\\l", "temp.append(grid[i][j - 1])\\l", "if i != n - 1:\\l", "if j != n - 1:\\l", "val = min(temp)\\l", "for j in range(n):\\l", "for i in range(n):\\l", "ans = []\\l", "for i in range(k):\\l", "if i % 2 == 0:\\l", "ans.append(val)\\l"], ["if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "if j != 0:\\l", "if i != n - 1:\\l", "temp.append(grid[i + 1][j])\\l", "if j != n - 1:\\l", "temp.append(grid[i][j + 1])\\l", "val = min(temp)\\l", "for j in range(n):\\l", "for i in range(n):\\l", "ans = []\\l", "for i in range(k):\\l", "if i % 2 == 0:\\l", "ans.append(val)\\l"], ["if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "if j != 0:\\l", "if i != n - 1:\\l", "temp.append(grid[i + 1][j])\\l", "if j != n - 1:\\l", "val = min(temp)\\l", "for j in range(n):\\l", "for i in range(n):\\l", "ans = []\\l", "for i in range(k):\\l", "if i % 2 == 0:\\l", "ans.append(val)\\l"], ["if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "if j != 0:\\l", "if i != n - 1:\\l", "if j != n - 1:\\l", "temp.append(grid[i][j + 1])\\l", "val = min(temp)\\l", "for j in range(n):\\l", "for i in range(n):\\l", "ans = []\\l", "for i in range(k):\\l", "if i % 2 == 0:\\l", "ans.append(val)\\l"], ["if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "if j != 0:\\l", "if i != n - 1:\\l", "if j != n - 1:\\l", "val = min(temp)\\l", "for j in range(n):\\l", "for i in range(n):\\l", "ans = []\\l", "for i in range(k):\\l", "if i % 2 == 0:\\l", "ans.append(val)\\l"], ["temp = []\\l", "if i != 0:\\l", "temp.append(grid[i - 1][j])\\l", "if j != 0:\\l", "temp.append(grid[i][j - 1])\\l", "if i != n - 1:\\l", "temp.append(grid[i + 1][j])\\l", "if j != n - 1:\\l", "temp.append(grid[i][j + 1])\\l", "val = min(temp)\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l"], ["temp = []\\l", "if i != 0:\\l", "temp.append(grid[i - 1][j])\\l", "if j != 0:\\l", "temp.append(grid[i][j - 1])\\l", "if i != n - 1:\\l", "temp.append(grid[i + 1][j])\\l", "if j != n - 1:\\l", "val = min(temp)\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l"], ["temp = []\\l", "if i != 0:\\l", "temp.append(grid[i - 1][j])\\l", "if j != 0:\\l", "temp.append(grid[i][j - 1])\\l", "if i != n - 1:\\l", "if j != n - 1:\\l", "temp.append(grid[i][j + 1])\\l", "val = min(temp)\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l"], ["temp = []\\l", "if i != 0:\\l", "temp.append(grid[i - 1][j])\\l", "if j != 0:\\l", "temp.append(grid[i][j - 1])\\l", "if i != n - 1:\\l", "if j != n - 1:\\l", "val = min(temp)\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l"], ["temp = []\\l", "if i != 0:\\l", "temp.append(grid[i - 1][j])\\l", "if j != 0:\\l", "if i != n - 1:\\l", "temp.append(grid[i + 1][j])\\l", "if j != n - 1:\\l", "temp.append(grid[i][j + 1])\\l", "val = min(temp)\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l"], ["temp = []\\l", "if i != 0:\\l", "temp.append(grid[i - 1][j])\\l", "if j != 0:\\l", "if i != n - 1:\\l", "temp.append(grid[i + 1][j])\\l", "if j != n - 1:\\l", "val = min(temp)\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l"], ["temp = []\\l", "if i != 0:\\l", "temp.append(grid[i - 1][j])\\l", "if j != 0:\\l", "if i != n - 1:\\l", "if j != n - 1:\\l", "temp.append(grid[i][j + 1])\\l", "val = min(temp)\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l"], ["temp = []\\l", "if i != 0:\\l", "temp.append(grid[i - 1][j])\\l", "if j != 0:\\l", "if i != n - 1:\\l", "if j != n - 1:\\l", "val = min(temp)\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l"], ["temp = []\\l", "if i != 0:\\l", "if j != 0:\\l", "temp.append(grid[i][j - 1])\\l", "if i != n - 1:\\l", "temp.append(grid[i + 1][j])\\l", "if j != n - 1:\\l", "temp.append(grid[i][j + 1])\\l", "val = min(temp)\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l"], ["temp = []\\l", "if i != 0:\\l", "if j != 0:\\l", "temp.append(grid[i][j - 1])\\l", "if i != n - 1:\\l", "temp.append(grid[i + 1][j])\\l", "if j != n - 1:\\l", "val = min(temp)\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l"], ["temp = []\\l", "if i != 0:\\l", "if j != 0:\\l", "temp.append(grid[i][j - 1])\\l", "if i != n - 1:\\l", "if j != n - 1:\\l", "temp.append(grid[i][j + 1])\\l", "val = min(temp)\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l"], ["temp = []\\l", "if i != 0:\\l", "if j != 0:\\l", "temp.append(grid[i][j - 1])\\l", "if i != n - 1:\\l", "if j != n - 1:\\l", "val = min(temp)\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l"], ["temp = []\\l", "if i != 0:\\l", "if j != 0:\\l", "if i != n - 1:\\l", "temp.append(grid[i + 1][j])\\l", "if j != n - 1:\\l", "temp.append(grid[i][j + 1])\\l", "val = min(temp)\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l"], ["temp = []\\l", "if i != 0:\\l", "if j != 0:\\l", "if i != n - 1:\\l", "temp.append(grid[i + 1][j])\\l", "if j != n - 1:\\l", "val = min(temp)\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l"], ["temp = []\\l", "if i != 0:\\l", "if j != 0:\\l", "if i != n - 1:\\l", "if j != n - 1:\\l", "temp.append(grid[i][j + 1])\\l", "val = min(temp)\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l"], ["temp = []\\l", "if i != 0:\\l", "if j != 0:\\l", "if i != n - 1:\\l", "if j != n - 1:\\l", "val = min(temp)\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l"], ["if i != 0:\\l", "temp.append(grid[i - 1][j])\\l", "if j != 0:\\l", "temp.append(grid[i][j - 1])\\l", "if i != n - 1:\\l", "temp.append(grid[i + 1][j])\\l", "if j != n - 1:\\l", "temp.append(grid[i][j + 1])\\l", "val = min(temp)\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l", "temp = []\\l"], ["if i != 0:\\l", "temp.append(grid[i - 1][j])\\l", "if j != 0:\\l", "temp.append(grid[i][j - 1])\\l", "if i != n - 1:\\l", "temp.append(grid[i + 1][j])\\l", "if j != n - 1:\\l", "val = min(temp)\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l", "temp = []\\l"], ["if i != 0:\\l", "temp.append(grid[i - 1][j])\\l", "if j != 0:\\l", "temp.append(grid[i][j - 1])\\l", "if i != n - 1:\\l", "if j != n - 1:\\l", "temp.append(grid[i][j + 1])\\l", "val = min(temp)\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l", "temp = []\\l"], ["if i != 0:\\l", "temp.append(grid[i - 1][j])\\l", "if j != 0:\\l", "temp.append(grid[i][j - 1])\\l", "if i != n - 1:\\l", "if j != n - 1:\\l", "val = min(temp)\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l", "temp = []\\l"], ["if i != 0:\\l", "temp.append(grid[i - 1][j])\\l", "if j != 0:\\l", "if i != n - 1:\\l", "temp.append(grid[i + 1][j])\\l", "if j != n - 1:\\l", "temp.append(grid[i][j + 1])\\l", "val = min(temp)\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l", "temp = []\\l"], ["if i != 0:\\l", "temp.append(grid[i - 1][j])\\l", "if j != 0:\\l", "if i != n - 1:\\l", "temp.append(grid[i + 1][j])\\l", "if j != n - 1:\\l", "val = min(temp)\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l", "temp = []\\l"], ["if i != 0:\\l", "temp.append(grid[i - 1][j])\\l", "if j != 0:\\l", "if i != n - 1:\\l", "if j != n - 1:\\l", "temp.append(grid[i][j + 1])\\l", "val = min(temp)\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l", "temp = []\\l"], ["if i != 0:\\l", "temp.append(grid[i - 1][j])\\l", "if j != 0:\\l", "if i != n - 1:\\l", "if j != n - 1:\\l", "val = min(temp)\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l", "temp = []\\l"], ["if i != 0:\\l", "if j != 0:\\l", "temp.append(grid[i][j - 1])\\l", "if i != n - 1:\\l", "temp.append(grid[i + 1][j])\\l", "if j != n - 1:\\l", "temp.append(grid[i][j + 1])\\l", "val = min(temp)\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l", "temp = []\\l"], ["if i != 0:\\l", "if j != 0:\\l", "temp.append(grid[i][j - 1])\\l", "if i != n - 1:\\l", "temp.append(grid[i + 1][j])\\l", "if j != n - 1:\\l", "val = min(temp)\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l", "temp = []\\l"], ["if i != 0:\\l", "if j != 0:\\l", "temp.append(grid[i][j - 1])\\l", "if i != n - 1:\\l", "if j != n - 1:\\l", "temp.append(grid[i][j + 1])\\l", "val = min(temp)\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l", "temp = []\\l"], ["if i != 0:\\l", "if j != 0:\\l", "temp.append(grid[i][j - 1])\\l", "if i != n - 1:\\l", "if j != n - 1:\\l", "val = min(temp)\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l", "temp = []\\l"], ["if i != 0:\\l", "if j != 0:\\l", "if i != n - 1:\\l", "temp.append(grid[i + 1][j])\\l", "if j != n - 1:\\l", "temp.append(grid[i][j + 1])\\l", "val = min(temp)\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l", "temp = []\\l"], ["if i != 0:\\l", "if j != 0:\\l", "if i != n - 1:\\l", "temp.append(grid[i + 1][j])\\l", "if j != n - 1:\\l", "val = min(temp)\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l", "temp = []\\l"], ["if i != 0:\\l", "if j != 0:\\l", "if i != n - 1:\\l", "if j != n - 1:\\l", "temp.append(grid[i][j + 1])\\l", "val = min(temp)\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l", "temp = []\\l"], ["if i != 0:\\l", "if j != 0:\\l", "if i != n - 1:\\l", "if j != n - 1:\\l", "val = min(temp)\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l", "temp = []\\l"], ["temp.append(grid[i - 1][j])\\l", "if j != 0:\\l", "temp.append(grid[i][j - 1])\\l", "if i != n - 1:\\l", "temp.append(grid[i + 1][j])\\l", "if j != n - 1:\\l", "temp.append(grid[i][j + 1])\\l", "val = min(temp)\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l"], ["temp.append(grid[i - 1][j])\\l", "if j != 0:\\l", "temp.append(grid[i][j - 1])\\l", "if i != n - 1:\\l", "temp.append(grid[i + 1][j])\\l", "if j != n - 1:\\l", "val = min(temp)\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l"], ["temp.append(grid[i - 1][j])\\l", "if j != 0:\\l", "temp.append(grid[i][j - 1])\\l", "if i != n - 1:\\l", "if j != n - 1:\\l", "temp.append(grid[i][j + 1])\\l", "val = min(temp)\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l"], ["temp.append(grid[i - 1][j])\\l", "if j != 0:\\l", "temp.append(grid[i][j - 1])\\l", "if i != n - 1:\\l", "if j != n - 1:\\l", "val = min(temp)\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l"], ["temp.append(grid[i - 1][j])\\l", "if j != 0:\\l", "if i != n - 1:\\l", "temp.append(grid[i + 1][j])\\l", "if j != n - 1:\\l", "temp.append(grid[i][j + 1])\\l", "val = min(temp)\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l"], ["temp.append(grid[i - 1][j])\\l", "if j != 0:\\l", "if i != n - 1:\\l", "temp.append(grid[i + 1][j])\\l", "if j != n - 1:\\l", "val = min(temp)\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l"], ["temp.append(grid[i - 1][j])\\l", "if j != 0:\\l", "if i != n - 1:\\l", "if j != n - 1:\\l", "temp.append(grid[i][j + 1])\\l", "val = min(temp)\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l"], ["temp.append(grid[i - 1][j])\\l", "if j != 0:\\l", "if i != n - 1:\\l", "if j != n - 1:\\l", "val = min(temp)\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l"], ["if j != 0:\\l", "temp.append(grid[i][j - 1])\\l", "if i != n - 1:\\l", "temp.append(grid[i + 1][j])\\l", "if j != n - 1:\\l", "temp.append(grid[i][j + 1])\\l", "val = min(temp)\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "temp.append(grid[i - 1][j])\\l"], ["if j != 0:\\l", "temp.append(grid[i][j - 1])\\l", "if i != n - 1:\\l", "temp.append(grid[i + 1][j])\\l", "if j != n - 1:\\l", "val = min(temp)\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "temp.append(grid[i - 1][j])\\l"], ["if j != 0:\\l", "temp.append(grid[i][j - 1])\\l", "if i != n - 1:\\l", "if j != n - 1:\\l", "temp.append(grid[i][j + 1])\\l", "val = min(temp)\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "temp.append(grid[i - 1][j])\\l"], ["if j != 0:\\l", "temp.append(grid[i][j - 1])\\l", "if i != n - 1:\\l", "if j != n - 1:\\l", "val = min(temp)\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "temp.append(grid[i - 1][j])\\l"], ["if j != 0:\\l", "if i != n - 1:\\l", "temp.append(grid[i + 1][j])\\l", "if j != n - 1:\\l", "temp.append(grid[i][j + 1])\\l", "val = min(temp)\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "temp.append(grid[i - 1][j])\\l"], ["if j != 0:\\l", "if i != n - 1:\\l", "temp.append(grid[i + 1][j])\\l", "if j != n - 1:\\l", "val = min(temp)\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "temp.append(grid[i - 1][j])\\l"], ["if j != 0:\\l", "if i != n - 1:\\l", "if j != n - 1:\\l", "temp.append(grid[i][j + 1])\\l", "val = min(temp)\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "temp.append(grid[i - 1][j])\\l"], ["if j != 0:\\l", "if i != n - 1:\\l", "if j != n - 1:\\l", "val = min(temp)\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "temp.append(grid[i - 1][j])\\l"], ["temp.append(grid[i][j - 1])\\l", "if i != n - 1:\\l", "temp.append(grid[i + 1][j])\\l", "if j != n - 1:\\l", "temp.append(grid[i][j + 1])\\l", "val = min(temp)\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "temp.append(grid[i - 1][j])\\l", "if j != 0:\\l"], ["temp.append(grid[i][j - 1])\\l", "if i != n - 1:\\l", "temp.append(grid[i + 1][j])\\l", "if j != n - 1:\\l", "temp.append(grid[i][j + 1])\\l", "val = min(temp)\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "if j != 0:\\l"], ["temp.append(grid[i][j - 1])\\l", "if i != n - 1:\\l", "temp.append(grid[i + 1][j])\\l", "if j != n - 1:\\l", "val = min(temp)\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "temp.append(grid[i - 1][j])\\l", "if j != 0:\\l"], ["temp.append(grid[i][j - 1])\\l", "if i != n - 1:\\l", "temp.append(grid[i + 1][j])\\l", "if j != n - 1:\\l", "val = min(temp)\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "if j != 0:\\l"], ["temp.append(grid[i][j - 1])\\l", "if i != n - 1:\\l", "if j != n - 1:\\l", "temp.append(grid[i][j + 1])\\l", "val = min(temp)\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "temp.append(grid[i - 1][j])\\l", "if j != 0:\\l"], ["temp.append(grid[i][j - 1])\\l", "if i != n - 1:\\l", "if j != n - 1:\\l", "temp.append(grid[i][j + 1])\\l", "val = min(temp)\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "if j != 0:\\l"], ["temp.append(grid[i][j - 1])\\l", "if i != n - 1:\\l", "if j != n - 1:\\l", "val = min(temp)\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "temp.append(grid[i - 1][j])\\l", "if j != 0:\\l"], ["temp.append(grid[i][j - 1])\\l", "if i != n - 1:\\l", "if j != n - 1:\\l", "val = min(temp)\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "if j != 0:\\l"], ["if i != n - 1:\\l", "temp.append(grid[i + 1][j])\\l", "if j != n - 1:\\l", "temp.append(grid[i][j + 1])\\l", "val = min(temp)\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "temp.append(grid[i - 1][j])\\l", "if j != 0:\\l", "temp.append(grid[i][j - 1])\\l"], ["if i != n - 1:\\l", "temp.append(grid[i + 1][j])\\l", "if j != n - 1:\\l", "temp.append(grid[i][j + 1])\\l", "val = min(temp)\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "if j != 0:\\l", "temp.append(grid[i][j - 1])\\l"], ["if i != n - 1:\\l", "temp.append(grid[i + 1][j])\\l", "if j != n - 1:\\l", "val = min(temp)\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "temp.append(grid[i - 1][j])\\l", "if j != 0:\\l", "temp.append(grid[i][j - 1])\\l"], ["if i != n - 1:\\l", "temp.append(grid[i + 1][j])\\l", "if j != n - 1:\\l", "val = min(temp)\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "if j != 0:\\l", "temp.append(grid[i][j - 1])\\l"], ["if i != n - 1:\\l", "if j != n - 1:\\l", "temp.append(grid[i][j + 1])\\l", "val = min(temp)\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "temp.append(grid[i - 1][j])\\l", "if j != 0:\\l", "temp.append(grid[i][j - 1])\\l"], ["if i != n - 1:\\l", "if j != n - 1:\\l", "temp.append(grid[i][j + 1])\\l", "val = min(temp)\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "if j != 0:\\l", "temp.append(grid[i][j - 1])\\l"], ["if i != n - 1:\\l", "if j != n - 1:\\l", "val = min(temp)\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "temp.append(grid[i - 1][j])\\l", "if j != 0:\\l", "temp.append(grid[i][j - 1])\\l"], ["if i != n - 1:\\l", "if j != n - 1:\\l", "val = min(temp)\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "if j != 0:\\l", "temp.append(grid[i][j - 1])\\l"], ["temp.append(grid[i + 1][j])\\l", "if j != n - 1:\\l", "temp.append(grid[i][j + 1])\\l", "val = min(temp)\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "temp.append(grid[i - 1][j])\\l", "if j != 0:\\l", "temp.append(grid[i][j - 1])\\l", "if i != n - 1:\\l"], ["temp.append(grid[i + 1][j])\\l", "if j != n - 1:\\l", "temp.append(grid[i][j + 1])\\l", "val = min(temp)\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "temp.append(grid[i - 1][j])\\l", "if j != 0:\\l", "if i != n - 1:\\l"], ["temp.append(grid[i + 1][j])\\l", "if j != n - 1:\\l", "temp.append(grid[i][j + 1])\\l", "val = min(temp)\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "if j != 0:\\l", "temp.append(grid[i][j - 1])\\l", "if i != n - 1:\\l"], ["temp.append(grid[i + 1][j])\\l", "if j != n - 1:\\l", "temp.append(grid[i][j + 1])\\l", "val = min(temp)\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "if j != 0:\\l", "if i != n - 1:\\l"], ["temp.append(grid[i + 1][j])\\l", "if j != n - 1:\\l", "val = min(temp)\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "temp.append(grid[i - 1][j])\\l", "if j != 0:\\l", "temp.append(grid[i][j - 1])\\l", "if i != n - 1:\\l"], ["temp.append(grid[i + 1][j])\\l", "if j != n - 1:\\l", "val = min(temp)\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "temp.append(grid[i - 1][j])\\l", "if j != 0:\\l", "if i != n - 1:\\l"], ["temp.append(grid[i + 1][j])\\l", "if j != n - 1:\\l", "val = min(temp)\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "if j != 0:\\l", "temp.append(grid[i][j - 1])\\l", "if i != n - 1:\\l"], ["temp.append(grid[i + 1][j])\\l", "if j != n - 1:\\l", "val = min(temp)\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "if j != 0:\\l", "if i != n - 1:\\l"], ["if j != n - 1:\\l", "temp.append(grid[i][j + 1])\\l", "val = min(temp)\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "temp.append(grid[i - 1][j])\\l", "if j != 0:\\l", "temp.append(grid[i][j - 1])\\l", "if i != n - 1:\\l", "temp.append(grid[i + 1][j])\\l"], ["if j != n - 1:\\l", "temp.append(grid[i][j + 1])\\l", "val = min(temp)\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "temp.append(grid[i - 1][j])\\l", "if j != 0:\\l", "if i != n - 1:\\l", "temp.append(grid[i + 1][j])\\l"], ["if j != n - 1:\\l", "temp.append(grid[i][j + 1])\\l", "val = min(temp)\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "if j != 0:\\l", "temp.append(grid[i][j - 1])\\l", "if i != n - 1:\\l", "temp.append(grid[i + 1][j])\\l"], ["if j != n - 1:\\l", "temp.append(grid[i][j + 1])\\l", "val = min(temp)\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "if j != 0:\\l", "if i != n - 1:\\l", "temp.append(grid[i + 1][j])\\l"], ["if j != n - 1:\\l", "val = min(temp)\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "temp.append(grid[i - 1][j])\\l", "if j != 0:\\l", "temp.append(grid[i][j - 1])\\l", "if i != n - 1:\\l", "temp.append(grid[i + 1][j])\\l"], ["if j != n - 1:\\l", "val = min(temp)\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "temp.append(grid[i - 1][j])\\l", "if j != 0:\\l", "if i != n - 1:\\l", "temp.append(grid[i + 1][j])\\l"], ["if j != n - 1:\\l", "val = min(temp)\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "if j != 0:\\l", "temp.append(grid[i][j - 1])\\l", "if i != n - 1:\\l", "temp.append(grid[i + 1][j])\\l"], ["if j != n - 1:\\l", "val = min(temp)\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "if j != 0:\\l", "if i != n - 1:\\l", "temp.append(grid[i + 1][j])\\l"], ["temp.append(grid[i][j + 1])\\l", "val = min(temp)\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "temp.append(grid[i - 1][j])\\l", "if j != 0:\\l", "temp.append(grid[i][j - 1])\\l", "if i != n - 1:\\l", "temp.append(grid[i + 1][j])\\l", "if j != n - 1:\\l"], ["temp.append(grid[i][j + 1])\\l", "val = min(temp)\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "temp.append(grid[i - 1][j])\\l", "if j != 0:\\l", "temp.append(grid[i][j - 1])\\l", "if i != n - 1:\\l", "if j != n - 1:\\l"], ["temp.append(grid[i][j + 1])\\l", "val = min(temp)\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "temp.append(grid[i - 1][j])\\l", "if j != 0:\\l", "if i != n - 1:\\l", "temp.append(grid[i + 1][j])\\l", "if j != n - 1:\\l"], ["temp.append(grid[i][j + 1])\\l", "val = min(temp)\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "temp.append(grid[i - 1][j])\\l", "if j != 0:\\l", "if i != n - 1:\\l", "if j != n - 1:\\l"], ["temp.append(grid[i][j + 1])\\l", "val = min(temp)\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "if j != 0:\\l", "temp.append(grid[i][j - 1])\\l", "if i != n - 1:\\l", "temp.append(grid[i + 1][j])\\l", "if j != n - 1:\\l"], ["temp.append(grid[i][j + 1])\\l", "val = min(temp)\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "if j != 0:\\l", "temp.append(grid[i][j - 1])\\l", "if i != n - 1:\\l", "if j != n - 1:\\l"], ["temp.append(grid[i][j + 1])\\l", "val = min(temp)\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "if j != 0:\\l", "if i != n - 1:\\l", "temp.append(grid[i + 1][j])\\l", "if j != n - 1:\\l"], ["temp.append(grid[i][j + 1])\\l", "val = min(temp)\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "if j != 0:\\l", "if i != n - 1:\\l", "if j != n - 1:\\l"], ["val = min(temp)\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "temp.append(grid[i - 1][j])\\l", "if j != 0:\\l", "temp.append(grid[i][j - 1])\\l", "if i != n - 1:\\l", "temp.append(grid[i + 1][j])\\l", "if j != n - 1:\\l", "temp.append(grid[i][j + 1])\\l"], ["val = min(temp)\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "temp.append(grid[i - 1][j])\\l", "if j != 0:\\l", "temp.append(grid[i][j - 1])\\l", "if i != n - 1:\\l", "if j != n - 1:\\l", "temp.append(grid[i][j + 1])\\l"], ["val = min(temp)\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "temp.append(grid[i - 1][j])\\l", "if j != 0:\\l", "if i != n - 1:\\l", "temp.append(grid[i + 1][j])\\l", "if j != n - 1:\\l", "temp.append(grid[i][j + 1])\\l"], ["val = min(temp)\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "temp.append(grid[i - 1][j])\\l", "if j != 0:\\l", "if i != n - 1:\\l", "if j != n - 1:\\l", "temp.append(grid[i][j + 1])\\l"], ["val = min(temp)\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "if j != 0:\\l", "temp.append(grid[i][j - 1])\\l", "if i != n - 1:\\l", "temp.append(grid[i + 1][j])\\l", "if j != n - 1:\\l", "temp.append(grid[i][j + 1])\\l"], ["val = min(temp)\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "if j != 0:\\l", "temp.append(grid[i][j - 1])\\l", "if i != n - 1:\\l", "if j != n - 1:\\l", "temp.append(grid[i][j + 1])\\l"], ["val = min(temp)\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "if j != 0:\\l", "if i != n - 1:\\l", "temp.append(grid[i + 1][j])\\l", "if j != n - 1:\\l", "temp.append(grid[i][j + 1])\\l"], ["val = min(temp)\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "if j != 0:\\l", "if i != n - 1:\\l", "if j != n - 1:\\l", "temp.append(grid[i][j + 1])\\l"], ["if i % 2 == 0:\\l", "ans.append(1)\\l", "for i in range(k):\\l", "return ans\\l"], ["if i % 2 == 0:\\l", "ans.append(val)\\l", "for i in range(k):\\l", "return ans\\l"], ["ans.append(1)\\l", "for i in range(k):\\l", "if i % 2 == 0:\\l", "ans.append(val)\\l"], ["ans.append(val)\\l", "for i in range(k):\\l", "if i % 2 == 0:\\l", "ans.append(1)\\l"], ["from typing import *\\ldef minPath(grid, k):...\\lminPath([[8, 14, 9, 2], [6, 4, 13, 15], [5, 7, 1, 12], [3, 10, 11, 16]], 5)\\l", "minPath", "n = len(grid)\\lval = n * n + 1\\l", "for i in range(n):\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "temp.append(grid[i - 1][j])\\l", "if j != 0:\\l", "temp.append(grid[i][j - 1])\\l", "if i != n - 1:\\l", "temp.append(grid[i + 1][j])\\l", "if j != n - 1:\\l", "temp.append(grid[i][j + 1])\\l", "val = min(temp)\\l"], ["from typing import *\\ldef minPath(grid, k):...\\lminPath([[8, 14, 9, 2], [6, 4, 13, 15], [5, 7, 1, 12], [3, 10, 11, 16]], 5)\\l", "minPath", "n = len(grid)\\lval = n * n + 1\\l", "for i in range(n):\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "temp.append(grid[i - 1][j])\\l", "if j != 0:\\l", "temp.append(grid[i][j - 1])\\l", "if i != n - 1:\\l", "temp.append(grid[i + 1][j])\\l", "if j != n - 1:\\l", "val = min(temp)\\l"], ["from typing import *\\ldef minPath(grid, k):...\\lminPath([[8, 14, 9, 2], [6, 4, 13, 15], [5, 7, 1, 12], [3, 10, 11, 16]], 5)\\l", "minPath", "n = len(grid)\\lval = n * n + 1\\l", "for i in range(n):\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "temp.append(grid[i - 1][j])\\l", "if j != 0:\\l", "temp.append(grid[i][j - 1])\\l", "if i != n - 1:\\l", "if j != n - 1:\\l", "temp.append(grid[i][j + 1])\\l", "val = min(temp)\\l"], ["from typing import *\\ldef minPath(grid, k):...\\lminPath([[8, 14, 9, 2], [6, 4, 13, 15], [5, 7, 1, 12], [3, 10, 11, 16]], 5)\\l", "minPath", "n = len(grid)\\lval = n * n + 1\\l", "for i in range(n):\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "temp.append(grid[i - 1][j])\\l", "if j != 0:\\l", "temp.append(grid[i][j - 1])\\l", "if i != n - 1:\\l", "if j != n - 1:\\l", "val = min(temp)\\l"], ["from typing import *\\ldef minPath(grid, k):...\\lminPath([[8, 14, 9, 2], [6, 4, 13, 15], [5, 7, 1, 12], [3, 10, 11, 16]], 5)\\l", "minPath", "n = len(grid)\\lval = n * n + 1\\l", "for i in range(n):\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "temp.append(grid[i - 1][j])\\l", "if j != 0:\\l", "if i != n - 1:\\l", "temp.append(grid[i + 1][j])\\l", "if j != n - 1:\\l", "temp.append(grid[i][j + 1])\\l", "val = min(temp)\\l"], ["from typing import *\\ldef minPath(grid, k):...\\lminPath([[8, 14, 9, 2], [6, 4, 13, 15], [5, 7, 1, 12], [3, 10, 11, 16]], 5)\\l", "minPath", "n = len(grid)\\lval = n * n + 1\\l", "for i in range(n):\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "temp.append(grid[i - 1][j])\\l", "if j != 0:\\l", "if i != n - 1:\\l", "temp.append(grid[i + 1][j])\\l", "if j != n - 1:\\l", "val = min(temp)\\l"], ["from typing import *\\ldef minPath(grid, k):...\\lminPath([[8, 14, 9, 2], [6, 4, 13, 15], [5, 7, 1, 12], [3, 10, 11, 16]], 5)\\l", "minPath", "n = len(grid)\\lval = n * n + 1\\l", "for i in range(n):\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "temp.append(grid[i - 1][j])\\l", "if j != 0:\\l", "if i != n - 1:\\l", "if j != n - 1:\\l", "temp.append(grid[i][j + 1])\\l", "val = min(temp)\\l"], ["from typing import *\\ldef minPath(grid, k):...\\lminPath([[8, 14, 9, 2], [6, 4, 13, 15], [5, 7, 1, 12], [3, 10, 11, 16]], 5)\\l", "minPath", "n = len(grid)\\lval = n * n + 1\\l", "for i in range(n):\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "temp.append(grid[i - 1][j])\\l", "if j != 0:\\l", "if i != n - 1:\\l", "if j != n - 1:\\l", "val = min(temp)\\l"], ["from typing import *\\ldef minPath(grid, k):...\\lminPath([[8, 14, 9, 2], [6, 4, 13, 15], [5, 7, 1, 12], [3, 10, 11, 16]], 5)\\l", "minPath", "n = len(grid)\\lval = n * n + 1\\l", "for i in range(n):\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "if j != 0:\\l", "temp.append(grid[i][j - 1])\\l", "if i != n - 1:\\l", "temp.append(grid[i + 1][j])\\l", "if j != n - 1:\\l", "temp.append(grid[i][j + 1])\\l", "val = min(temp)\\l"], ["from typing import *\\ldef minPath(grid, k):...\\lminPath([[8, 14, 9, 2], [6, 4, 13, 15], [5, 7, 1, 12], [3, 10, 11, 16]], 5)\\l", "minPath", "n = len(grid)\\lval = n * n + 1\\l", "for i in range(n):\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "if j != 0:\\l", "temp.append(grid[i][j - 1])\\l", "if i != n - 1:\\l", "temp.append(grid[i + 1][j])\\l", "if j != n - 1:\\l", "val = min(temp)\\l"], ["from typing import *\\ldef minPath(grid, k):...\\lminPath([[8, 14, 9, 2], [6, 4, 13, 15], [5, 7, 1, 12], [3, 10, 11, 16]], 5)\\l", "minPath", "n = len(grid)\\lval = n * n + 1\\l", "for i in range(n):\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "if j != 0:\\l", "temp.append(grid[i][j - 1])\\l", "if i != n - 1:\\l", "if j != n - 1:\\l", "temp.append(grid[i][j + 1])\\l", "val = min(temp)\\l"], ["from typing import *\\ldef minPath(grid, k):...\\lminPath([[8, 14, 9, 2], [6, 4, 13, 15], [5, 7, 1, 12], [3, 10, 11, 16]], 5)\\l", "minPath", "n = len(grid)\\lval = n * n + 1\\l", "for i in range(n):\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "if j != 0:\\l", "temp.append(grid[i][j - 1])\\l", "if i != n - 1:\\l", "if j != n - 1:\\l", "val = min(temp)\\l"], ["from typing import *\\ldef minPath(grid, k):...\\lminPath([[8, 14, 9, 2], [6, 4, 13, 15], [5, 7, 1, 12], [3, 10, 11, 16]], 5)\\l", "minPath", "n = len(grid)\\lval = n * n + 1\\l", "for i in range(n):\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "if j != 0:\\l", "if i != n - 1:\\l", "temp.append(grid[i + 1][j])\\l", "if j != n - 1:\\l", "temp.append(grid[i][j + 1])\\l", "val = min(temp)\\l"], ["from typing import *\\ldef minPath(grid, k):...\\lminPath([[8, 14, 9, 2], [6, 4, 13, 15], [5, 7, 1, 12], [3, 10, 11, 16]], 5)\\l", "minPath", "n = len(grid)\\lval = n * n + 1\\l", "for i in range(n):\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "if j != 0:\\l", "if i != n - 1:\\l", "temp.append(grid[i + 1][j])\\l", "if j != n - 1:\\l", "val = min(temp)\\l"], ["from typing import *\\ldef minPath(grid, k):...\\lminPath([[8, 14, 9, 2], [6, 4, 13, 15], [5, 7, 1, 12], [3, 10, 11, 16]], 5)\\l", "minPath", "n = len(grid)\\lval = n * n + 1\\l", "for i in range(n):\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "if j != 0:\\l", "if i != n - 1:\\l", "if j != n - 1:\\l", "temp.append(grid[i][j + 1])\\l", "val = min(temp)\\l"], ["from typing import *\\ldef minPath(grid, k):...\\lminPath([[8, 14, 9, 2], [6, 4, 13, 15], [5, 7, 1, 12], [3, 10, 11, 16]], 5)\\l", "minPath", "n = len(grid)\\lval = n * n + 1\\l", "for i in range(n):\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "if j != 0:\\l", "if i != n - 1:\\l", "if j != n - 1:\\l", "val = min(temp)\\l"], ["from typing import *\\ldef minPath(grid, k):...\\lminPath([[8, 14, 9, 2], [6, 4, 13, 15], [5, 7, 1, 12], [3, 10, 11, 16]], 5)\\l", "minPath", "n = len(grid)\\lval = n * n + 1\\l", "for i in range(n):\\l", "ans = []\\l", "for i in range(k):\\l", "return ans\\l"], ["from typing import *\\ldef minPath(grid, k):...\\lminPath([[8, 14, 9, 2], [6, 4, 13, 15], [5, 7, 1, 12], [3, 10, 11, 16]], 5)\\l", "minPath", "n = len(grid)\\lval = n * n + 1\\l", "for i in range(n):\\l", "ans = []\\l", "for i in range(k):\\l", "if i % 2 == 0:\\l", "ans.append(1)\\l"], ["from typing import *\\ldef minPath(grid, k):...\\lminPath([[8, 14, 9, 2], [6, 4, 13, 15], [5, 7, 1, 12], [3, 10, 11, 16]], 5)\\l", "minPath", "n = len(grid)\\lval = n * n + 1\\l", "for i in range(n):\\l", "ans = []\\l", "for i in range(k):\\l", "if i % 2 == 0:\\l", "ans.append(val)\\l"]], "prime_paths_linenumbers": [[9, 8, 7, 25, 26, 31], [9, 10, 11, 12, 14, 15, 17, 18, 20, 21, 23, 8, 7, 25, 26, 31], [9, 10, 11, 12, 14, 15, 17, 18, 20, 23, 8, 7, 25, 26, 31], [9, 10, 11, 12, 14, 15, 17, 20, 21, 23, 8, 7, 25, 26, 31], [9, 10, 11, 12, 14, 15, 17, 20, 23, 8, 7, 25, 26, 31], [9, 10, 11, 12, 14, 17, 18, 20, 21, 23, 8, 7, 25, 26, 31], [9, 10, 11, 12, 14, 17, 18, 20, 23, 8, 7, 25, 26, 31], [9, 10, 11, 12, 14, 17, 20, 21, 23, 8, 7, 25, 26, 31], [9, 10, 11, 12, 14, 17, 20, 23, 8, 7, 25, 26, 31], [9, 10, 11, 14, 15, 17, 18, 20, 21, 23, 8, 7, 25, 26, 31], [9, 10, 11, 14, 15, 17, 18, 20, 23, 8, 7, 25, 26, 31], [9, 10, 11, 14, 15, 17, 20, 21, 23, 8, 7, 25, 26, 31], [9, 10, 11, 14, 15, 17, 20, 23, 8, 7, 25, 26, 31], [9, 10, 11, 14, 17, 18, 20, 21, 23, 8, 7, 25, 26, 31], [9, 10, 11, 14, 17, 18, 20, 23, 8, 7, 25, 26, 31], [9, 10, 11, 14, 17, 20, 21, 23, 8, 7, 25, 26, 31], [9, 10, 11, 14, 17, 20, 23, 8, 7, 25, 26, 31], [9, 8, 7, 25, 26, 27, 28], [9, 10, 11, 12, 14, 15, 17, 18, 20, 21, 23, 8, 7, 25, 26, 27, 28], [9, 10, 11, 12, 14, 15, 17, 18, 20, 23, 8, 7, 25, 26, 27, 28], [9, 10, 11, 12, 14, 15, 17, 20, 21, 23, 8, 7, 25, 26, 27, 28], [9, 10, 11, 12, 14, 15, 17, 20, 23, 8, 7, 25, 26, 27, 28], [9, 10, 11, 12, 14, 17, 18, 20, 21, 23, 8, 7, 25, 26, 27, 28], [9, 10, 11, 12, 14, 17, 18, 20, 23, 8, 7, 25, 26, 27, 28], [9, 10, 11, 12, 14, 17, 20, 21, 23, 8, 7, 25, 26, 27, 28], [9, 10, 11, 12, 14, 17, 20, 23, 8, 7, 25, 26, 27, 28], [9, 10, 11, 14, 15, 17, 18, 20, 21, 23, 8, 7, 25, 26, 27, 28], [9, 10, 11, 14, 15, 17, 18, 20, 23, 8, 7, 25, 26, 27, 28], [9, 10, 11, 14, 15, 17, 20, 21, 23, 8, 7, 25, 26, 27, 28], [9, 10, 11, 14, 15, 17, 20, 23, 8, 7, 25, 26, 27, 28], [9, 10, 11, 14, 17, 18, 20, 21, 23, 8, 7, 25, 26, 27, 28], [9, 10, 11, 14, 17, 18, 20, 23, 8, 7, 25, 26, 27, 28], [9, 10, 11, 14, 17, 20, 21, 23, 8, 7, 25, 26, 27, 28], [9, 10, 11, 14, 17, 20, 23, 8, 7, 25, 26, 27, 28], [9, 8, 7, 25, 26, 27, 30], [9, 10, 11, 12, 14, 15, 17, 18, 20, 21, 23, 8, 7, 25, 26, 27, 30], [9, 10, 11, 12, 14, 15, 17, 18, 20, 23, 8, 7, 25, 26, 27, 30], [9, 10, 11, 12, 14, 15, 17, 20, 21, 23, 8, 7, 25, 26, 27, 30], [9, 10, 11, 12, 14, 15, 17, 20, 23, 8, 7, 25, 26, 27, 30], [9, 10, 11, 12, 14, 17, 18, 20, 21, 23, 8, 7, 25, 26, 27, 30], [9, 10, 11, 12, 14, 17, 18, 20, 23, 8, 7, 25, 26, 27, 30], [9, 10, 11, 12, 14, 17, 20, 21, 23, 8, 7, 25, 26, 27, 30], [9, 10, 11, 12, 14, 17, 20, 23, 8, 7, 25, 26, 27, 30], [9, 10, 11, 14, 15, 17, 18, 20, 21, 23, 8, 7, 25, 26, 27, 30], [9, 10, 11, 14, 15, 17, 18, 20, 23, 8, 7, 25, 26, 27, 30], [9, 10, 11, 14, 15, 17, 20, 21, 23, 8, 7, 25, 26, 27, 30], [9, 10, 11, 14, 15, 17, 20, 23, 8, 7, 25, 26, 27, 30], [9, 10, 11, 14, 17, 18, 20, 21, 23, 8, 7, 25, 26, 27, 30], [9, 10, 11, 14, 17, 18, 20, 23, 8, 7, 25, 26, 27, 30], [9, 10, 11, 14, 17, 20, 21, 23, 8, 7, 25, 26, 27, 30], [9, 10, 11, 14, 17, 20, 23, 8, 7, 25, 26, 27, 30], [10, 11, 12, 14, 15, 17, 18, 20, 21, 23, 8, 9], [10, 11, 12, 14, 15, 17, 18, 20, 23, 8, 9], [10, 11, 12, 14, 15, 17, 20, 21, 23, 8, 9], [10, 11, 12, 14, 15, 17, 20, 23, 8, 9], [10, 11, 12, 14, 17, 18, 20, 21, 23, 8, 9], [10, 11, 12, 14, 17, 18, 20, 23, 8, 9], [10, 11, 12, 14, 17, 20, 21, 23, 8, 9], [10, 11, 12, 14, 17, 20, 23, 8, 9], [10, 11, 14, 15, 17, 18, 20, 21, 23, 8, 9], [10, 11, 14, 15, 17, 18, 20, 23, 8, 9], [10, 11, 14, 15, 17, 20, 21, 23, 8, 9], [10, 11, 14, 15, 17, 20, 23, 8, 9], [10, 11, 14, 17, 18, 20, 21, 23, 8, 9], [10, 11, 14, 17, 18, 20, 23, 8, 9], [10, 11, 14, 17, 20, 21, 23, 8, 9], [10, 11, 14, 17, 20, 23, 8, 9], [11, 12, 14, 15, 17, 18, 20, 21, 23, 8, 9, 10], [11, 12, 14, 15, 17, 18, 20, 23, 8, 9, 10], [11, 12, 14, 15, 17, 20, 21, 23, 8, 9, 10], [11, 12, 14, 15, 17, 20, 23, 8, 9, 10], [11, 12, 14, 17, 18, 20, 21, 23, 8, 9, 10], [11, 12, 14, 17, 18, 20, 23, 8, 9, 10], [11, 12, 14, 17, 20, 21, 23, 8, 9, 10], [11, 12, 14, 17, 20, 23, 8, 9, 10], [11, 14, 15, 17, 18, 20, 21, 23, 8, 9, 10], [11, 14, 15, 17, 18, 20, 23, 8, 9, 10], [11, 14, 15, 17, 20, 21, 23, 8, 9, 10], [11, 14, 15, 17, 20, 23, 8, 9, 10], [11, 14, 17, 18, 20, 21, 23, 8, 9, 10], [11, 14, 17, 18, 20, 23, 8, 9, 10], [11, 14, 17, 20, 21, 23, 8, 9, 10], [11, 14, 17, 20, 23, 8, 9, 10], [12, 14, 15, 17, 18, 20, 21, 23, 8, 9, 10, 11], [12, 14, 15, 17, 18, 20, 23, 8, 9, 10, 11], [12, 14, 15, 17, 20, 21, 23, 8, 9, 10, 11], [12, 14, 15, 17, 20, 23, 8, 9, 10, 11], [12, 14, 17, 18, 20, 21, 23, 8, 9, 10, 11], [12, 14, 17, 18, 20, 23, 8, 9, 10, 11], [12, 14, 17, 20, 21, 23, 8, 9, 10, 11], [12, 14, 17, 20, 23, 8, 9, 10, 11], [14, 15, 17, 18, 20, 21, 23, 8, 9, 10, 11, 12], [14, 15, 17, 18, 20, 23, 8, 9, 10, 11, 12], [14, 15, 17, 20, 21, 23, 8, 9, 10, 11, 12], [14, 15, 17, 20, 23, 8, 9, 10, 11, 12], [14, 17, 18, 20, 21, 23, 8, 9, 10, 11, 12], [14, 17, 18, 20, 23, 8, 9, 10, 11, 12], [14, 17, 20, 21, 23, 8, 9, 10, 11, 12], [14, 17, 20, 23, 8, 9, 10, 11, 12], [15, 17, 18, 20, 21, 23, 8, 9, 10, 11, 12, 14], [15, 17, 18, 20, 21, 23, 8, 9, 10, 11, 14], [15, 17, 18, 20, 23, 8, 9, 10, 11, 12, 14], [15, 17, 18, 20, 23, 8, 9, 10, 11, 14], [15, 17, 20, 21, 23, 8, 9, 10, 11, 12, 14], [15, 17, 20, 21, 23, 8, 9, 10, 11, 14], [15, 17, 20, 23, 8, 9, 10, 11, 12, 14], [15, 17, 20, 23, 8, 9, 10, 11, 14], [17, 18, 20, 21, 23, 8, 9, 10, 11, 12, 14, 15], [17, 18, 20, 21, 23, 8, 9, 10, 11, 14, 15], [17, 18, 20, 23, 8, 9, 10, 11, 12, 14, 15], [17, 18, 20, 23, 8, 9, 10, 11, 14, 15], [17, 20, 21, 23, 8, 9, 10, 11, 12, 14, 15], [17, 20, 21, 23, 8, 9, 10, 11, 14, 15], [17, 20, 23, 8, 9, 10, 11, 12, 14, 15], [17, 20, 23, 8, 9, 10, 11, 14, 15], [18, 20, 21, 23, 8, 9, 10, 11, 12, 14, 15, 17], [18, 20, 21, 23, 8, 9, 10, 11, 12, 14, 17], [18, 20, 21, 23, 8, 9, 10, 11, 14, 15, 17], [18, 20, 21, 23, 8, 9, 10, 11, 14, 17], [18, 20, 23, 8, 9, 10, 11, 12, 14, 15, 17], [18, 20, 23, 8, 9, 10, 11, 12, 14, 17], [18, 20, 23, 8, 9, 10, 11, 14, 15, 17], [18, 20, 23, 8, 9, 10, 11, 14, 17], [20, 21, 23, 8, 9, 10, 11, 12, 14, 15, 17, 18], [20, 21, 23, 8, 9, 10, 11, 12, 14, 17, 18], [20, 21, 23, 8, 9, 10, 11, 14, 15, 17, 18], [20, 21, 23, 8, 9, 10, 11, 14, 17, 18], [20, 23, 8, 9, 10, 11, 12, 14, 15, 17, 18], [20, 23, 8, 9, 10, 11, 12, 14, 17, 18], [20, 23, 8, 9, 10, 11, 14, 15, 17, 18], [20, 23, 8, 9, 10, 11, 14, 17, 18], [21, 23, 8, 9, 10, 11, 12, 14, 15, 17, 18, 20], [21, 23, 8, 9, 10, 11, 12, 14, 15, 17, 20], [21, 23, 8, 9, 10, 11, 12, 14, 17, 18, 20], [21, 23, 8, 9, 10, 11, 12, 14, 17, 20], [21, 23, 8, 9, 10, 11, 14, 15, 17, 18, 20], [21, 23, 8, 9, 10, 11, 14, 15, 17, 20], [21, 23, 8, 9, 10, 11, 14, 17, 18, 20], [21, 23, 8, 9, 10, 11, 14, 17, 20], [23, 8, 9, 10, 11, 12, 14, 15, 17, 18, 20, 21], [23, 8, 9, 10, 11, 12, 14, 15, 17, 20, 21], [23, 8, 9, 10, 11, 12, 14, 17, 18, 20, 21], [23, 8, 9, 10, 11, 12, 14, 17, 20, 21], [23, 8, 9, 10, 11, 14, 15, 17, 18, 20, 21], [23, 8, 9, 10, 11, 14, 15, 17, 20, 21], [23, 8, 9, 10, 11, 14, 17, 18, 20, 21], [23, 8, 9, 10, 11, 14, 17, 20, 21], [27, 28, 26, 31], [27, 30, 26, 31], [28, 26, 27, 30], [30, 26, 27, 28], [1, 33, 5, 6, 7, 8, 9, 10, 11, 12, 14, 15, 17, 18, 20, 21, 23], [1, 33, 5, 6, 7, 8, 9, 10, 11, 12, 14, 15, 17, 18, 20, 23], [1, 33, 5, 6, 7, 8, 9, 10, 11, 12, 14, 15, 17, 20, 21, 23], [1, 33, 5, 6, 7, 8, 9, 10, 11, 12, 14, 15, 17, 20, 23], [1, 33, 5, 6, 7, 8, 9, 10, 11, 12, 14, 17, 18, 20, 21, 23], [1, 33, 5, 6, 7, 8, 9, 10, 11, 12, 14, 17, 18, 20, 23], [1, 33, 5, 6, 7, 8, 9, 10, 11, 12, 14, 17, 20, 21, 23], [1, 33, 5, 6, 7, 8, 9, 10, 11, 12, 14, 17, 20, 23], [1, 33, 5, 6, 7, 8, 9, 10, 11, 14, 15, 17, 18, 20, 21, 23], [1, 33, 5, 6, 7, 8, 9, 10, 11, 14, 15, 17, 18, 20, 23], [1, 33, 5, 6, 7, 8, 9, 10, 11, 14, 15, 17, 20, 21, 23], [1, 33, 5, 6, 7, 8, 9, 10, 11, 14, 15, 17, 20, 23], [1, 33, 5, 6, 7, 8, 9, 10, 11, 14, 17, 18, 20, 21, 23], [1, 33, 5, 6, 7, 8, 9, 10, 11, 14, 17, 18, 20, 23], [1, 33, 5, 6, 7, 8, 9, 10, 11, 14, 17, 20, 21, 23], [1, 33, 5, 6, 7, 8, 9, 10, 11, 14, 17, 20, 23], [1, 33, 5, 6, 7, 25, 26, 31], [1, 33, 5, 6, 7, 25, 26, 27, 28], [1, 33, 5, 6, 7, 25, 26, 27, 30]], "covered_statements_linenumbers": [1, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 15, 17, 18, 20, 21, 23, 25, 26, 27, 28, 30, 31, 33], "missing_statements_linenumbers": [], "covered_prime_paths_linenumbers": [[9, 8, 7, 25, 26, 31], [9, 10, 11, 12, 14, 15, 17, 18, 20, 21, 23, 8, 7, 25, 26, 31], [9, 10, 11, 12, 14, 15, 17, 18, 20, 23, 8, 7, 25, 26, 31], [9, 10, 11, 12, 14, 15, 17, 20, 21, 23, 8, 7, 25, 26, 31], [9, 10, 11, 12, 14, 15, 17, 20, 23, 8, 7, 25, 26, 31], [9, 10, 11, 12, 14, 17, 18, 20, 21, 23, 8, 7, 25, 26, 31], [9, 10, 11, 12, 14, 17, 18, 20, 23, 8, 7, 25, 26, 31], [9, 10, 11, 12, 14, 17, 20, 21, 23, 8, 7, 25, 26, 31], [9, 10, 11, 12, 14, 17, 20, 23, 8, 7, 25, 26, 31], [9, 10, 11, 14, 15, 17, 18, 20, 21, 23, 8, 7, 25, 26, 31], [9, 10, 11, 14, 15, 17, 18, 20, 23, 8, 7, 25, 26, 31], [9, 10, 11, 14, 15, 17, 20, 21, 23, 8, 7, 25, 26, 31], [9, 10, 11, 14, 15, 17, 20, 23, 8, 7, 25, 26, 31], [9, 10, 11, 14, 17, 18, 20, 21, 23, 8, 7, 25, 26, 31], [9, 10, 11, 14, 17, 18, 20, 23, 8, 7, 25, 26, 31], [9, 10, 11, 14, 17, 20, 21, 23, 8, 7, 25, 26, 31], [9, 10, 11, 14, 17, 20, 23, 8, 7, 25, 26, 31], [9, 8, 7, 25, 26, 27, 28], [9, 10, 11, 12, 14, 15, 17, 18, 20, 21, 23, 8, 7, 25, 26, 27, 28], [9, 10, 11, 12, 14, 15, 17, 18, 20, 23, 8, 7, 25, 26, 27, 28], [9, 10, 11, 12, 14, 15, 17, 20, 21, 23, 8, 7, 25, 26, 27, 28], [9, 10, 11, 12, 14, 15, 17, 20, 23, 8, 7, 25, 26, 27, 28], [9, 10, 11, 12, 14, 17, 18, 20, 21, 23, 8, 7, 25, 26, 27, 28], [9, 10, 11, 12, 14, 17, 18, 20, 23, 8, 7, 25, 26, 27, 28], [9, 10, 11, 12, 14, 17, 20, 21, 23, 8, 7, 25, 26, 27, 28], [9, 10, 11, 12, 14, 17, 20, 23, 8, 7, 25, 26, 27, 28], [9, 10, 11, 14, 15, 17, 18, 20, 21, 23, 8, 7, 25, 26, 27, 28], [9, 10, 11, 14, 15, 17, 18, 20, 23, 8, 7, 25, 26, 27, 28], [9, 10, 11, 14, 15, 17, 20, 21, 23, 8, 7, 25, 26, 27, 28], [9, 10, 11, 14, 15, 17, 20, 23, 8, 7, 25, 26, 27, 28], [9, 10, 11, 14, 17, 18, 20, 21, 23, 8, 7, 25, 26, 27, 28], [9, 10, 11, 14, 17, 18, 20, 23, 8, 7, 25, 26, 27, 28], [9, 10, 11, 14, 17, 20, 21, 23, 8, 7, 25, 26, 27, 28], [9, 10, 11, 14, 17, 20, 23, 8, 7, 25, 26, 27, 28], [9, 8, 7, 25, 26, 27, 30], [9, 10, 11, 12, 14, 15, 17, 18, 20, 21, 23, 8, 7, 25, 26, 27, 30], [9, 10, 11, 12, 14, 15, 17, 18, 20, 23, 8, 7, 25, 26, 27, 30], [9, 10, 11, 12, 14, 15, 17, 20, 21, 23, 8, 7, 25, 26, 27, 30], [9, 10, 11, 12, 14, 15, 17, 20, 23, 8, 7, 25, 26, 27, 30], [9, 10, 11, 12, 14, 17, 18, 20, 21, 23, 8, 7, 25, 26, 27, 30], [9, 10, 11, 12, 14, 17, 18, 20, 23, 8, 7, 25, 26, 27, 30], [9, 10, 11, 12, 14, 17, 20, 21, 23, 8, 7, 25, 26, 27, 30], [9, 10, 11, 12, 14, 17, 20, 23, 8, 7, 25, 26, 27, 30], [9, 10, 11, 14, 15, 17, 18, 20, 21, 23, 8, 7, 25, 26, 27, 30], [9, 10, 11, 14, 15, 17, 18, 20, 23, 8, 7, 25, 26, 27, 30], [9, 10, 11, 14, 15, 17, 20, 21, 23, 8, 7, 25, 26, 27, 30], [9, 10, 11, 14, 15, 17, 20, 23, 8, 7, 25, 26, 27, 30], [9, 10, 11, 14, 17, 18, 20, 21, 23, 8, 7, 25, 26, 27, 30], [9, 10, 11, 14, 17, 18, 20, 23, 8, 7, 25, 26, 27, 30], [9, 10, 11, 14, 17, 20, 21, 23, 8, 7, 25, 26, 27, 30], [9, 10, 11, 14, 17, 20, 23, 8, 7, 25, 26, 27, 30], [10, 11, 12, 14, 15, 17, 18, 20, 21, 23, 8, 9], [10, 11, 12, 14, 15, 17, 18, 20, 23, 8, 9], [10, 11, 12, 14, 15, 17, 20, 21, 23, 8, 9], [10, 11, 12, 14, 15, 17, 20, 23, 8, 9], [10, 11, 12, 14, 17, 18, 20, 21, 23, 8, 9], [10, 11, 12, 14, 17, 18, 20, 23, 8, 9], [10, 11, 12, 14, 17, 20, 21, 23, 8, 9], [10, 11, 12, 14, 17, 20, 23, 8, 9], [10, 11, 14, 15, 17, 18, 20, 21, 23, 8, 9], [10, 11, 14, 15, 17, 18, 20, 23, 8, 9], [10, 11, 14, 15, 17, 20, 21, 23, 8, 9], [10, 11, 14, 15, 17, 20, 23, 8, 9], [10, 11, 14, 17, 18, 20, 21, 23, 8, 9], [10, 11, 14, 17, 18, 20, 23, 8, 9], [10, 11, 14, 17, 20, 21, 23, 8, 9], [10, 11, 14, 17, 20, 23, 8, 9], [11, 12, 14, 15, 17, 18, 20, 21, 23, 8, 9, 10], [11, 12, 14, 15, 17, 18, 20, 23, 8, 9, 10], [11, 12, 14, 15, 17, 20, 21, 23, 8, 9, 10], [11, 12, 14, 15, 17, 20, 23, 8, 9, 10], [11, 12, 14, 17, 18, 20, 21, 23, 8, 9, 10], [11, 12, 14, 17, 18, 20, 23, 8, 9, 10], [11, 12, 14, 17, 20, 21, 23, 8, 9, 10], [11, 12, 14, 17, 20, 23, 8, 9, 10], [11, 14, 15, 17, 18, 20, 21, 23, 8, 9, 10], [11, 14, 15, 17, 18, 20, 23, 8, 9, 10], [11, 14, 15, 17, 20, 21, 23, 8, 9, 10], [11, 14, 15, 17, 20, 23, 8, 9, 10], [11, 14, 17, 18, 20, 21, 23, 8, 9, 10], [11, 14, 17, 18, 20, 23, 8, 9, 10], [11, 14, 17, 20, 21, 23, 8, 9, 10], [11, 14, 17, 20, 23, 8, 9, 10], [12, 14, 15, 17, 18, 20, 21, 23, 8, 9, 10, 11], [12, 14, 15, 17, 18, 20, 23, 8, 9, 10, 11], [12, 14, 15, 17, 20, 21, 23, 8, 9, 10, 11], [12, 14, 15, 17, 20, 23, 8, 9, 10, 11], [12, 14, 17, 18, 20, 21, 23, 8, 9, 10, 11], [12, 14, 17, 18, 20, 23, 8, 9, 10, 11], [12, 14, 17, 20, 21, 23, 8, 9, 10, 11], [12, 14, 17, 20, 23, 8, 9, 10, 11], [14, 15, 17, 18, 20, 21, 23, 8, 9, 10, 11, 12], [14, 15, 17, 18, 20, 23, 8, 9, 10, 11, 12], [14, 15, 17, 20, 21, 23, 8, 9, 10, 11, 12], [14, 15, 17, 20, 23, 8, 9, 10, 11, 12], [14, 17, 18, 20, 21, 23, 8, 9, 10, 11, 12], [14, 17, 18, 20, 23, 8, 9, 10, 11, 12], [14, 17, 20, 21, 23, 8, 9, 10, 11, 12], [14, 17, 20, 23, 8, 9, 10, 11, 12], [15, 17, 18, 20, 21, 23, 8, 9, 10, 11, 12, 14], [15, 17, 18, 20, 21, 23, 8, 9, 10, 11, 14], [15, 17, 18, 20, 23, 8, 9, 10, 11, 12, 14], [15, 17, 18, 20, 23, 8, 9, 10, 11, 14], [15, 17, 20, 21, 23, 8, 9, 10, 11, 12, 14], [15, 17, 20, 21, 23, 8, 9, 10, 11, 14], [15, 17, 20, 23, 8, 9, 10, 11, 12, 14], [15, 17, 20, 23, 8, 9, 10, 11, 14], [17, 18, 20, 21, 23, 8, 9, 10, 11, 12, 14, 15], [17, 18, 20, 21, 23, 8, 9, 10, 11, 14, 15], [17, 18, 20, 23, 8, 9, 10, 11, 12, 14, 15], [17, 18, 20, 23, 8, 9, 10, 11, 14, 15], [17, 20, 21, 23, 8, 9, 10, 11, 12, 14, 15], [17, 20, 21, 23, 8, 9, 10, 11, 14, 15], [17, 20, 23, 8, 9, 10, 11, 12, 14, 15], [17, 20, 23, 8, 9, 10, 11, 14, 15], [18, 20, 21, 23, 8, 9, 10, 11, 12, 14, 15, 17], [18, 20, 21, 23, 8, 9, 10, 11, 12, 14, 17], [18, 20, 21, 23, 8, 9, 10, 11, 14, 15, 17], [18, 20, 21, 23, 8, 9, 10, 11, 14, 17], [18, 20, 23, 8, 9, 10, 11, 12, 14, 15, 17], [18, 20, 23, 8, 9, 10, 11, 12, 14, 17], [18, 20, 23, 8, 9, 10, 11, 14, 15, 17], [18, 20, 23, 8, 9, 10, 11, 14, 17], [20, 21, 23, 8, 9, 10, 11, 12, 14, 15, 17, 18], [20, 21, 23, 8, 9, 10, 11, 12, 14, 17, 18], [20, 21, 23, 8, 9, 10, 11, 14, 15, 17, 18], [20, 21, 23, 8, 9, 10, 11, 14, 17, 18], [20, 23, 8, 9, 10, 11, 12, 14, 15, 17, 18], [20, 23, 8, 9, 10, 11, 12, 14, 17, 18], [20, 23, 8, 9, 10, 11, 14, 15, 17, 18], [20, 23, 8, 9, 10, 11, 14, 17, 18], [21, 23, 8, 9, 10, 11, 12, 14, 15, 17, 18, 20], [21, 23, 8, 9, 10, 11, 12, 14, 15, 17, 20], [21, 23, 8, 9, 10, 11, 12, 14, 17, 18, 20], [21, 23, 8, 9, 10, 11, 12, 14, 17, 20], [21, 23, 8, 9, 10, 11, 14, 15, 17, 18, 20], [21, 23, 8, 9, 10, 11, 14, 15, 17, 20], [21, 23, 8, 9, 10, 11, 14, 17, 18, 20], [21, 23, 8, 9, 10, 11, 14, 17, 20], [23, 8, 9, 10, 11, 12, 14, 15, 17, 18, 20, 21], [23, 8, 9, 10, 11, 12, 14, 15, 17, 20, 21], [23, 8, 9, 10, 11, 12, 14, 17, 18, 20, 21], [23, 8, 9, 10, 11, 12, 14, 17, 20, 21], [23, 8, 9, 10, 11, 14, 15, 17, 18, 20, 21], [23, 8, 9, 10, 11, 14, 15, 17, 20, 21], [23, 8, 9, 10, 11, 14, 17, 18, 20, 21], [23, 8, 9, 10, 11, 14, 17, 20, 21], [27, 28, 26, 31], [27, 30, 26, 31], [28, 26, 27, 30], [30, 26, 27, 28], [1, 33, 5, 6, 7, 8, 9, 10, 11, 12, 14, 15, 17, 18, 20, 21, 23], [1, 33, 5, 6, 7, 8, 9, 10, 11, 12, 14, 15, 17, 18, 20, 23], [1, 33, 5, 6, 7, 8, 9, 10, 11, 12, 14, 15, 17, 20, 21, 23], [1, 33, 5, 6, 7, 8, 9, 10, 11, 12, 14, 15, 17, 20, 23], [1, 33, 5, 6, 7, 8, 9, 10, 11, 12, 14, 17, 18, 20, 21, 23], [1, 33, 5, 6, 7, 8, 9, 10, 11, 12, 14, 17, 18, 20, 23], [1, 33, 5, 6, 7, 8, 9, 10, 11, 12, 14, 17, 20, 21, 23], [1, 33, 5, 6, 7, 8, 9, 10, 11, 12, 14, 17, 20, 23], [1, 33, 5, 6, 7, 8, 9, 10, 11, 14, 15, 17, 18, 20, 21, 23], [1, 33, 5, 6, 7, 8, 9, 10, 11, 14, 15, 17, 18, 20, 23], [1, 33, 5, 6, 7, 8, 9, 10, 11, 14, 15, 17, 20, 21, 23], [1, 33, 5, 6, 7, 8, 9, 10, 11, 14, 15, 17, 20, 23], [1, 33, 5, 6, 7, 8, 9, 10, 11, 14, 17, 18, 20, 21, 23], [1, 33, 5, 6, 7, 8, 9, 10, 11, 14, 17, 18, 20, 23], [1, 33, 5, 6, 7, 8, 9, 10, 11, 14, 17, 20, 21, 23], [1, 33, 5, 6, 7, 8, 9, 10, 11, 14, 17, 20, 23], [1, 33, 5, 6, 7, 25, 26, 31], [1, 33, 5, 6, 7, 25, 26, 27, 28], [1, 33, 5, 6, 7, 25, 26, 27, 30]], "missing_prime_paths_linenumbers": [], "num_total_prime_paths": 170, "num_covered_paths": 170, "prime_path_coverage": 1.0, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_129__1_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_129__1_CFG.dot"}
{"humaneval_id": "HumanEval_129", "python_file": "HumanEval_129/main.py", "input_file": "HumanEval_129/input.txt", "prime_paths_nodes": [["10", "7", "5", "8", "28", "31"], ["10", "12", "14", "15", "16", "18", "19", "21", "22", "24", "25", "7", "5", "8", "28", "31"], ["10", "12", "14", "15", "16", "18", "19", "21", "22", "25", "7", "5", "8", "28", "31"], ["10", "12", "14", "15", "16", "18", "19", "22", "24", "25", "7", "5", "8", "28", "31"], ["10", "12", "14", "15", "16", "18", "19", "22", "25", "7", "5", "8", "28", "31"], ["10", "12", "14", "15", "16", "19", "21", "22", "24", "25", "7", "5", "8", "28", "31"], ["10", "12", "14", "15", "16", "19", "21", "22", "25", "7", "5", "8", "28", "31"], ["10", "12", "14", "15", "16", "19", "22", "24", "25", "7", "5", "8", "28", "31"], ["10", "12", "14", "15", "16", "19", "22", "25", "7", "5", "8", "28", "31"], ["10", "12", "14", "16", "18", "19", "21", "22", "24", "25", "7", "5", "8", "28", "31"], ["10", "12", "14", "16", "18", "19", "21", "22", "25", "7", "5", "8", "28", "31"], ["10", "12", "14", "16", "18", "19", "22", "24", "25", "7", "5", "8", "28", "31"], ["10", "12", "14", "16", "18", "19", "22", "25", "7", "5", "8", "28", "31"], ["10", "12", "14", "16", "19", "21", "22", "24", "25", "7", "5", "8", "28", "31"], ["10", "12", "14", "16", "19", "21", "22", "25", "7", "5", "8", "28", "31"], ["10", "12", "14", "16", "19", "22", "24", "25", "7", "5", "8", "28", "31"], ["10", "12", "14", "16", "19", "22", "25", "7", "5", "8", "28", "31"], ["10", "7", "5", "8", "28", "30", "32"], ["10", "12", "14", "15", "16", "18", "19", "21", "22", "24", "25", "7", "5", "8", "28", "30", "32"], ["10", "12", "14", "15", "16", "18", "19", "21", "22", "25", "7", "5", "8", "28", "30", "32"], ["10", "12", "14", "15", "16", "18", "19", "22", "24", "25", "7", "5", "8", "28", "30", "32"], ["10", "12", "14", "15", "16", "18", "19", "22", "25", "7", "5", "8", "28", "30", "32"], ["10", "12", "14", "15", "16", "19", "21", "22", "24", "25", "7", "5", "8", "28", "30", "32"], ["10", "12", "14", "15", "16", "19", "21", "22", "25", "7", "5", "8", "28", "30", "32"], ["10", "12", "14", "15", "16", "19", "22", "24", "25", "7", "5", "8", "28", "30", "32"], ["10", "12", "14", "15", "16", "19", "22", "25", "7", "5", "8", "28", "30", "32"], ["10", "12", "14", "16", "18", "19", "21", "22", "24", "25", "7", "5", "8", "28", "30", "32"], ["10", "12", "14", "16", "18", "19", "21", "22", "25", "7", "5", "8", "28", "30", "32"], ["10", "12", "14", "16", "18", "19", "22", "24", "25", "7", "5", "8", "28", "30", "32"], ["10", "12", "14", "16", "18", "19", "22", "25", "7", "5", "8", "28", "30", "32"], ["10", "12", "14", "16", "19", "21", "22", "24", "25", "7", "5", "8", "28", "30", "32"], ["10", "12", "14", "16", "19", "21", "22", "25", "7", "5", "8", "28", "30", "32"], ["10", "12", "14", "16", "19", "22", "24", "25", "7", "5", "8", "28", "30", "32"], ["10", "12", "14", "16", "19", "22", "25", "7", "5", "8", "28", "30", "32"], ["10", "7", "5", "8", "28", "30", "34"], ["10", "12", "14", "15", "16", "18", "19", "21", "22", "24", "25", "7", "5", "8", "28", "30", "34"], ["10", "12", "14", "15", "16", "18", "19", "21", "22", "25", "7", "5", "8", "28", "30", "34"], ["10", "12", "14", "15", "16", "18", "19", "22", "24", "25", "7", "5", "8", "28", "30", "34"], ["10", "12", "14", "15", "16", "18", "19", "22", "25", "7", "5", "8", "28", "30", "34"], ["10", "12", "14", "15", "16", "19", "21", "22", "24", "25", "7", "5", "8", "28", "30", "34"], ["10", "12", "14", "15", "16", "19", "21", "22", "25", "7", "5", "8", "28", "30", "34"], ["10", "12", "14", "15", "16", "19", "22", "24", "25", "7", "5", "8", "28", "30", "34"], ["10", "12", "14", "15", "16", "19", "22", "25", "7", "5", "8", "28", "30", "34"], ["10", "12", "14", "16", "18", "19", "21", "22", "24", "25", "7", "5", "8", "28", "30", "34"], ["10", "12", "14", "16", "18", "19", "21", "22", "25", "7", "5", "8", "28", "30", "34"], ["10", "12", "14", "16", "18", "19", "22", "24", "25", "7", "5", "8", "28", "30", "34"], ["10", "12", "14", "16", "18", "19", "22", "25", "7", "5", "8", "28", "30", "34"], ["10", "12", "14", "16", "19", "21", "22", "24", "25", "7", "5", "8", "28", "30", "34"], ["10", "12", "14", "16", "19", "21", "22", "25", "7", "5", "8", "28", "30", "34"], ["10", "12", "14", "16", "19", "22", "24", "25", "7", "5", "8", "28", "30", "34"], ["10", "12", "14", "16", "19", "22", "25", "7", "5", "8", "28", "30", "34"], ["12", "14", "15", "16", "18", "19", "21", "22", "24", "25", "7", "10"], ["12", "14", "15", "16", "18", "19", "21", "22", "25", "7", "10"], ["12", "14", "15", "16", "18", "19", "22", "24", "25", "7", "10"], ["12", "14", "15", "16", "18", "19", "22", "25", "7", "10"], ["12", "14", "15", "16", "19", "21", "22", "24", "25", "7", "10"], ["12", "14", "15", "16", "19", "21", "22", "25", "7", "10"], ["12", "14", "15", "16", "19", "22", "24", "25", "7", "10"], ["12", "14", "15", "16", "19", "22", "25", "7", "10"], ["12", "14", "16", "18", "19", "21", "22", "24", "25", "7", "10"], ["12", "14", "16", "18", "19", "21", "22", "25", "7", "10"], ["12", "14", "16", "18", "19", "22", "24", "25", "7", "10"], ["12", "14", "16", "18", "19", "22", "25", "7", "10"], ["12", "14", "16", "19", "21", "22", "24", "25", "7", "10"], ["12", "14", "16", "19", "21", "22", "25", "7", "10"], ["12", "14", "16", "19", "22", "24", "25", "7", "10"], ["12", "14", "16", "19", "22", "25", "7", "10"], ["14", "15", "16", "18", "19", "21", "22", "24", "25", "7", "10", "12"], ["14", "15", "16", "18", "19", "21", "22", "25", "7", "10", "12"], ["14", "15", "16", "18", "19", "22", "24", "25", "7", "10", "12"], ["14", "15", "16", "18", "19", "22", "25", "7", "10", "12"], ["14", "15", "16", "19", "21", "22", "24", "25", "7", "10", "12"], ["14", "15", "16", "19", "21", "22", "25", "7", "10", "12"], ["14", "15", "16", "19", "22", "24", "25", "7", "10", "12"], ["14", "15", "16", "19", "22", "25", "7", "10", "12"], ["14", "16", "18", "19", "21", "22", "24", "25", "7", "10", "12"], ["14", "16", "18", "19", "21", "22", "25", "7", "10", "12"], ["14", "16", "18", "19", "22", "24", "25", "7", "10", "12"], ["14", "16", "18", "19", "22", "25", "7", "10", "12"], ["14", "16", "19", "21", "22", "24", "25", "7", "10", "12"], ["14", "16", "19", "21", "22", "25", "7", "10", "12"], ["14", "16", "19", "22", "24", "25", "7", "10", "12"], ["14", "16", "19", "22", "25", "7", "10", "12"], ["15", "16", "18", "19", "21", "22", "24", "25", "7", "10", "12", "14"], ["15", "16", "18", "19", "21", "22", "25", "7", "10", "12", "14"], ["15", "16", "18", "19", "22", "24", "25", "7", "10", "12", "14"], ["15", "16", "18", "19", "22", "25", "7", "10", "12", "14"], ["15", "16", "19", "21", "22", "24", "25", "7", "10", "12", "14"], ["15", "16", "19", "21", "22", "25", "7", "10", "12", "14"], ["15", "16", "19", "22", "24", "25", "7", "10", "12", "14"], ["15", "16", "19", "22", "25", "7", "10", "12", "14"], ["16", "18", "19", "21", "22", "24", "25", "7", "10", "12", "14", "15"], ["16", "18", "19", "21", "22", "25", "7", "10", "12", "14", "15"], ["16", "18", "19", "22", "24", "25", "7", "10", "12", "14", "15"], ["16", "18", "19", "22", "25", "7", "10", "12", "14", "15"], ["16", "19", "21", "22", "24", "25", "7", "10", "12", "14", "15"], ["16", "19", "21", "22", "25", "7", "10", "12", "14", "15"], ["16", "19", "22", "24", "25", "7", "10", "12", "14", "15"], ["16", "19", "22", "25", "7", "10", "12", "14", "15"], ["18", "19", "21", "22", "24", "25", "7", "10", "12", "14", "15", "16"], ["18", "19", "21", "22", "24", "25", "7", "10", "12", "14", "16"], ["18", "19", "21", "22", "25", "7", "10", "12", "14", "15", "16"], ["18", "19", "21", "22", "25", "7", "10", "12", "14", "16"], ["18", "19", "22", "24", "25", "7", "10", "12", "14", "15", "16"], ["18", "19", "22", "24", "25", "7", "10", "12", "14", "16"], ["18", "19", "22", "25", "7", "10", "12", "14", "15", "16"], ["18", "19", "22", "25", "7", "10", "12", "14", "16"], ["19", "21", "22", "24", "25", "7", "10", "12", "14", "15", "16", "18"], ["19", "21", "22", "24", "25", "7", "10", "12", "14", "16", "18"], ["19", "21", "22", "25", "7", "10", "12", "14", "15", "16", "18"], ["19", "21", "22", "25", "7", "10", "12", "14", "16", "18"], ["19", "22", "24", "25", "7", "10", "12", "14", "15", "16", "18"], ["19", "22", "24", "25", "7", "10", "12", "14", "16", "18"], ["19", "22", "25", "7", "10", "12", "14", "15", "16", "18"], ["19", "22", "25", "7", "10", "12", "14", "16", "18"], ["21", "22", "24", "25", "7", "10", "12", "14", "15", "16", "18", "19"], ["21", "22", "24", "25", "7", "10", "12", "14", "15", "16", "19"], ["21", "22", "24", "25", "7", "10", "12", "14", "16", "18", "19"], ["21", "22", "24", "25", "7", "10", "12", "14", "16", "19"], ["21", "22", "25", "7", "10", "12", "14", "15", "16", "18", "19"], ["21", "22", "25", "7", "10", "12", "14", "15", "16", "19"], ["21", "22", "25", "7", "10", "12", "14", "16", "18", "19"], ["21", "22", "25", "7", "10", "12", "14", "16", "19"], ["22", "24", "25", "7", "10", "12", "14", "15", "16", "18", "19", "21"], ["22", "24", "25", "7", "10", "12", "14", "15", "16", "19", "21"], ["22", "24", "25", "7", "10", "12", "14", "16", "18", "19", "21"], ["22", "24", "25", "7", "10", "12", "14", "16", "19", "21"], ["22", "25", "7", "10", "12", "14", "15", "16", "18", "19", "21"], ["22", "25", "7", "10", "12", "14", "15", "16", "19", "21"], ["22", "25", "7", "10", "12", "14", "16", "18", "19", "21"], ["22", "25", "7", "10", "12", "14", "16", "19", "21"], ["24", "25", "7", "10", "12", "14", "15", "16", "18", "19", "21", "22"], ["24", "25", "7", "10", "12", "14", "15", "16", "18", "19", "22"], ["24", "25", "7", "10", "12", "14", "15", "16", "19", "21", "22"], ["24", "25", "7", "10", "12", "14", "15", "16", "19", "22"], ["24", "25", "7", "10", "12", "14", "16", "18", "19", "21", "22"], ["24", "25", "7", "10", "12", "14", "16", "18", "19", "22"], ["24", "25", "7", "10", "12", "14", "16", "19", "21", "22"], ["24", "25", "7", "10", "12", "14", "16", "19", "22"], ["25", "7", "10", "12", "14", "15", "16", "18", "19", "21", "22", "24"], ["25", "7", "10", "12", "14", "15", "16", "18", "19", "22", "24"], ["25", "7", "10", "12", "14", "15", "16", "19", "21", "22", "24"], ["25", "7", "10", "12", "14", "15", "16", "19", "22", "24"], ["25", "7", "10", "12", "14", "16", "18", "19", "21", "22", "24"], ["25", "7", "10", "12", "14", "16", "18", "19", "22", "24"], ["25", "7", "10", "12", "14", "16", "19", "21", "22", "24"], ["25", "7", "10", "12", "14", "16", "19", "22", "24"], ["30", "32", "28", "31"], ["30", "34", "28", "31"], ["32", "28", "30", "34"], ["34", "28", "30", "32"], ["1", "39", "3", "5", "7", "10", "12", "14", "15", "16", "18", "19", "21", "22", "24", "25"], ["1", "39", "3", "5", "7", "10", "12", "14", "15", "16", "18", "19", "21", "22", "25"], ["1", "39", "3", "5", "7", "10", "12", "14", "15", "16", "18", "19", "22", "24", "25"], ["1", "39", "3", "5", "7", "10", "12", "14", "15", "16", "18", "19", "22", "25"], ["1", "39", "3", "5", "7", "10", "12", "14", "15", "16", "19", "21", "22", "24", "25"], ["1", "39", "3", "5", "7", "10", "12", "14", "15", "16", "19", "21", "22", "25"], ["1", "39", "3", "5", "7", "10", "12", "14", "15", "16", "19", "22", "24", "25"], ["1", "39", "3", "5", "7", "10", "12", "14", "15", "16", "19", "22", "25"], ["1", "39", "3", "5", "7", "10", "12", "14", "16", "18", "19", "21", "22", "24", "25"], ["1", "39", "3", "5", "7", "10", "12", "14", "16", "18", "19", "21", "22", "25"], ["1", "39", "3", "5", "7", "10", "12", "14", "16", "18", "19", "22", "24", "25"], ["1", "39", "3", "5", "7", "10", "12", "14", "16", "18", "19", "22", "25"], ["1", "39", "3", "5", "7", "10", "12", "14", "16", "19", "21", "22", "24", "25"], ["1", "39", "3", "5", "7", "10", "12", "14", "16", "19", "21", "22", "25"], ["1", "39", "3", "5", "7", "10", "12", "14", "16", "19", "22", "24", "25"], ["1", "39", "3", "5", "7", "10", "12", "14", "16", "19", "22", "25"], ["1", "39", "3", "5", "8", "28", "31"], ["1", "39", "3", "5", "8", "28", "30", "32"], ["1", "39", "3", "5", "8", "28", "30", "34"]], "prime_paths_statements": [["if grid[i][j] == 1:\\l", "for j in range(n):\\l", "for i in range(n):\\l", "ans = []\\l", "for i in range(k):\\l", "return ans\\l"], ["if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "temp.append(grid[i - 1][j])\\l", "if j != 0:\\l", "temp.append(grid[i][j - 1])\\l", "if i != n - 1:\\l", "temp.append(grid[i + 1][j])\\l", "if j != n - 1:\\l", "temp.append(grid[i][j + 1])\\l", "val = min(temp)\\l", "for j in range(n):\\l", "for i in range(n):\\l", "ans = []\\l", "for i in range(k):\\l", "return ans\\l"], ["if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "temp.append(grid[i - 1][j])\\l", "if j != 0:\\l", "temp.append(grid[i][j - 1])\\l", "if i != n - 1:\\l", "temp.append(grid[i + 1][j])\\l", "if j != n - 1:\\l", "val = min(temp)\\l", "for j in range(n):\\l", "for i in range(n):\\l", "ans = []\\l", "for i in range(k):\\l", "return ans\\l"], ["if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "temp.append(grid[i - 1][j])\\l", "if j != 0:\\l", "temp.append(grid[i][j - 1])\\l", "if i != n - 1:\\l", "if j != n - 1:\\l", "temp.append(grid[i][j + 1])\\l", "val = min(temp)\\l", "for j in range(n):\\l", "for i in range(n):\\l", "ans = []\\l", "for i in range(k):\\l", "return ans\\l"], ["if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "temp.append(grid[i - 1][j])\\l", "if j != 0:\\l", "temp.append(grid[i][j - 1])\\l", "if i != n - 1:\\l", "if j != n - 1:\\l", "val = min(temp)\\l", "for j in range(n):\\l", "for i in range(n):\\l", "ans = []\\l", "for i in range(k):\\l", "return ans\\l"], ["if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "temp.append(grid[i - 1][j])\\l", "if j != 0:\\l", "if i != n - 1:\\l", "temp.append(grid[i + 1][j])\\l", "if j != n - 1:\\l", "temp.append(grid[i][j + 1])\\l", "val = min(temp)\\l", "for j in range(n):\\l", "for i in range(n):\\l", "ans = []\\l", "for i in range(k):\\l", "return ans\\l"], ["if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "temp.append(grid[i - 1][j])\\l", "if j != 0:\\l", "if i != n - 1:\\l", "temp.append(grid[i + 1][j])\\l", "if j != n - 1:\\l", "val = min(temp)\\l", "for j in range(n):\\l", "for i in range(n):\\l", "ans = []\\l", "for i in range(k):\\l", "return ans\\l"], ["if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "temp.append(grid[i - 1][j])\\l", "if j != 0:\\l", "if i != n - 1:\\l", "if j != n - 1:\\l", "temp.append(grid[i][j + 1])\\l", "val = min(temp)\\l", "for j in range(n):\\l", "for i in range(n):\\l", "ans = []\\l", "for i in range(k):\\l", "return ans\\l"], ["if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "temp.append(grid[i - 1][j])\\l", "if j != 0:\\l", "if i != n - 1:\\l", "if j != n - 1:\\l", "val = min(temp)\\l", "for j in range(n):\\l", "for i in range(n):\\l", "ans = []\\l", "for i in range(k):\\l", "return ans\\l"], ["if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "if j != 0:\\l", "temp.append(grid[i][j - 1])\\l", "if i != n - 1:\\l", "temp.append(grid[i + 1][j])\\l", "if j != n - 1:\\l", "temp.append(grid[i][j + 1])\\l", "val = min(temp)\\l", "for j in range(n):\\l", "for i in range(n):\\l", "ans = []\\l", "for i in range(k):\\l", "return ans\\l"], ["if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "if j != 0:\\l", "temp.append(grid[i][j - 1])\\l", "if i != n - 1:\\l", "temp.append(grid[i + 1][j])\\l", "if j != n - 1:\\l", "val = min(temp)\\l", "for j in range(n):\\l", "for i in range(n):\\l", "ans = []\\l", "for i in range(k):\\l", "return ans\\l"], ["if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "if j != 0:\\l", "temp.append(grid[i][j - 1])\\l", "if i != n - 1:\\l", "if j != n - 1:\\l", "temp.append(grid[i][j + 1])\\l", "val = min(temp)\\l", "for j in range(n):\\l", "for i in range(n):\\l", "ans = []\\l", "for i in range(k):\\l", "return ans\\l"], ["if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "if j != 0:\\l", "temp.append(grid[i][j - 1])\\l", "if i != n - 1:\\l", "if j != n - 1:\\l", "val = min(temp)\\l", "for j in range(n):\\l", "for i in range(n):\\l", "ans = []\\l", "for i in range(k):\\l", "return ans\\l"], ["if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "if j != 0:\\l", "if i != n - 1:\\l", "temp.append(grid[i + 1][j])\\l", "if j != n - 1:\\l", "temp.append(grid[i][j + 1])\\l", "val = min(temp)\\l", "for j in range(n):\\l", "for i in range(n):\\l", "ans = []\\l", "for i in range(k):\\l", "return ans\\l"], ["if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "if j != 0:\\l", "if i != n - 1:\\l", "temp.append(grid[i + 1][j])\\l", "if j != n - 1:\\l", "val = min(temp)\\l", "for j in range(n):\\l", "for i in range(n):\\l", "ans = []\\l", "for i in range(k):\\l", "return ans\\l"], ["if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "if j != 0:\\l", "if i != n - 1:\\l", "if j != n - 1:\\l", "temp.append(grid[i][j + 1])\\l", "val = min(temp)\\l", "for j in range(n):\\l", "for i in range(n):\\l", "ans = []\\l", "for i in range(k):\\l", "return ans\\l"], ["if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "if j != 0:\\l", "if i != n - 1:\\l", "if j != n - 1:\\l", "val = min(temp)\\l", "for j in range(n):\\l", "for i in range(n):\\l", "ans = []\\l", "for i in range(k):\\l", "return ans\\l"], ["if grid[i][j] == 1:\\l", "for j in range(n):\\l", "for i in range(n):\\l", "ans = []\\l", "for i in range(k):\\l", "if i % 2 == 0:\\l", "ans.append(1)\\l"], ["if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "temp.append(grid[i - 1][j])\\l", "if j != 0:\\l", "temp.append(grid[i][j - 1])\\l", "if i != n - 1:\\l", "temp.append(grid[i + 1][j])\\l", "if j != n - 1:\\l", "temp.append(grid[i][j + 1])\\l", "val = min(temp)\\l", "for j in range(n):\\l", "for i in range(n):\\l", "ans = []\\l", "for i in range(k):\\l", "if i % 2 == 0:\\l", "ans.append(1)\\l"], ["if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "temp.append(grid[i - 1][j])\\l", "if j != 0:\\l", "temp.append(grid[i][j - 1])\\l", "if i != n - 1:\\l", "temp.append(grid[i + 1][j])\\l", "if j != n - 1:\\l", "val = min(temp)\\l", "for j in range(n):\\l", "for i in range(n):\\l", "ans = []\\l", "for i in range(k):\\l", "if i % 2 == 0:\\l", "ans.append(1)\\l"], ["if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "temp.append(grid[i - 1][j])\\l", "if j != 0:\\l", "temp.append(grid[i][j - 1])\\l", "if i != n - 1:\\l", "if j != n - 1:\\l", "temp.append(grid[i][j + 1])\\l", "val = min(temp)\\l", "for j in range(n):\\l", "for i in range(n):\\l", "ans = []\\l", "for i in range(k):\\l", "if i % 2 == 0:\\l", "ans.append(1)\\l"], ["if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "temp.append(grid[i - 1][j])\\l", "if j != 0:\\l", "temp.append(grid[i][j - 1])\\l", "if i != n - 1:\\l", "if j != n - 1:\\l", "val = min(temp)\\l", "for j in range(n):\\l", "for i in range(n):\\l", "ans = []\\l", "for i in range(k):\\l", "if i % 2 == 0:\\l", "ans.append(1)\\l"], ["if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "temp.append(grid[i - 1][j])\\l", "if j != 0:\\l", "if i != n - 1:\\l", "temp.append(grid[i + 1][j])\\l", "if j != n - 1:\\l", "temp.append(grid[i][j + 1])\\l", "val = min(temp)\\l", "for j in range(n):\\l", "for i in range(n):\\l", "ans = []\\l", "for i in range(k):\\l", "if i % 2 == 0:\\l", "ans.append(1)\\l"], ["if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "temp.append(grid[i - 1][j])\\l", "if j != 0:\\l", "if i != n - 1:\\l", "temp.append(grid[i + 1][j])\\l", "if j != n - 1:\\l", "val = min(temp)\\l", "for j in range(n):\\l", "for i in range(n):\\l", "ans = []\\l", "for i in range(k):\\l", "if i % 2 == 0:\\l", "ans.append(1)\\l"], ["if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "temp.append(grid[i - 1][j])\\l", "if j != 0:\\l", "if i != n - 1:\\l", "if j != n - 1:\\l", "temp.append(grid[i][j + 1])\\l", "val = min(temp)\\l", "for j in range(n):\\l", "for i in range(n):\\l", "ans = []\\l", "for i in range(k):\\l", "if i % 2 == 0:\\l", "ans.append(1)\\l"], ["if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "temp.append(grid[i - 1][j])\\l", "if j != 0:\\l", "if i != n - 1:\\l", "if j != n - 1:\\l", "val = min(temp)\\l", "for j in range(n):\\l", "for i in range(n):\\l", "ans = []\\l", "for i in range(k):\\l", "if i % 2 == 0:\\l", "ans.append(1)\\l"], ["if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "if j != 0:\\l", "temp.append(grid[i][j - 1])\\l", "if i != n - 1:\\l", "temp.append(grid[i + 1][j])\\l", "if j != n - 1:\\l", "temp.append(grid[i][j + 1])\\l", "val = min(temp)\\l", "for j in range(n):\\l", "for i in range(n):\\l", "ans = []\\l", "for i in range(k):\\l", "if i % 2 == 0:\\l", "ans.append(1)\\l"], ["if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "if j != 0:\\l", "temp.append(grid[i][j - 1])\\l", "if i != n - 1:\\l", "temp.append(grid[i + 1][j])\\l", "if j != n - 1:\\l", "val = min(temp)\\l", "for j in range(n):\\l", "for i in range(n):\\l", "ans = []\\l", "for i in range(k):\\l", "if i % 2 == 0:\\l", "ans.append(1)\\l"], ["if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "if j != 0:\\l", "temp.append(grid[i][j - 1])\\l", "if i != n - 1:\\l", "if j != n - 1:\\l", "temp.append(grid[i][j + 1])\\l", "val = min(temp)\\l", "for j in range(n):\\l", "for i in range(n):\\l", "ans = []\\l", "for i in range(k):\\l", "if i % 2 == 0:\\l", "ans.append(1)\\l"], ["if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "if j != 0:\\l", "temp.append(grid[i][j - 1])\\l", "if i != n - 1:\\l", "if j != n - 1:\\l", "val = min(temp)\\l", "for j in range(n):\\l", "for i in range(n):\\l", "ans = []\\l", "for i in range(k):\\l", "if i % 2 == 0:\\l", "ans.append(1)\\l"], ["if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "if j != 0:\\l", "if i != n - 1:\\l", "temp.append(grid[i + 1][j])\\l", "if j != n - 1:\\l", "temp.append(grid[i][j + 1])\\l", "val = min(temp)\\l", "for j in range(n):\\l", "for i in range(n):\\l", "ans = []\\l", "for i in range(k):\\l", "if i % 2 == 0:\\l", "ans.append(1)\\l"], ["if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "if j != 0:\\l", "if i != n - 1:\\l", "temp.append(grid[i + 1][j])\\l", "if j != n - 1:\\l", "val = min(temp)\\l", "for j in range(n):\\l", "for i in range(n):\\l", "ans = []\\l", "for i in range(k):\\l", "if i % 2 == 0:\\l", "ans.append(1)\\l"], ["if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "if j != 0:\\l", "if i != n - 1:\\l", "if j != n - 1:\\l", "temp.append(grid[i][j + 1])\\l", "val = min(temp)\\l", "for j in range(n):\\l", "for i in range(n):\\l", "ans = []\\l", "for i in range(k):\\l", "if i % 2 == 0:\\l", "ans.append(1)\\l"], ["if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "if j != 0:\\l", "if i != n - 1:\\l", "if j != n - 1:\\l", "val = min(temp)\\l", "for j in range(n):\\l", "for i in range(n):\\l", "ans = []\\l", "for i in range(k):\\l", "if i % 2 == 0:\\l", "ans.append(1)\\l"], ["if grid[i][j] == 1:\\l", "for j in range(n):\\l", "for i in range(n):\\l", "ans = []\\l", "for i in range(k):\\l", "if i % 2 == 0:\\l", "ans.append(val)\\l"], ["if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "temp.append(grid[i - 1][j])\\l", "if j != 0:\\l", "temp.append(grid[i][j - 1])\\l", "if i != n - 1:\\l", "temp.append(grid[i + 1][j])\\l", "if j != n - 1:\\l", "temp.append(grid[i][j + 1])\\l", "val = min(temp)\\l", "for j in range(n):\\l", "for i in range(n):\\l", "ans = []\\l", "for i in range(k):\\l", "if i % 2 == 0:\\l", "ans.append(val)\\l"], ["if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "temp.append(grid[i - 1][j])\\l", "if j != 0:\\l", "temp.append(grid[i][j - 1])\\l", "if i != n - 1:\\l", "temp.append(grid[i + 1][j])\\l", "if j != n - 1:\\l", "val = min(temp)\\l", "for j in range(n):\\l", "for i in range(n):\\l", "ans = []\\l", "for i in range(k):\\l", "if i % 2 == 0:\\l", "ans.append(val)\\l"], ["if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "temp.append(grid[i - 1][j])\\l", "if j != 0:\\l", "temp.append(grid[i][j - 1])\\l", "if i != n - 1:\\l", "if j != n - 1:\\l", "temp.append(grid[i][j + 1])\\l", "val = min(temp)\\l", "for j in range(n):\\l", "for i in range(n):\\l", "ans = []\\l", "for i in range(k):\\l", "if i % 2 == 0:\\l", "ans.append(val)\\l"], ["if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "temp.append(grid[i - 1][j])\\l", "if j != 0:\\l", "temp.append(grid[i][j - 1])\\l", "if i != n - 1:\\l", "if j != n - 1:\\l", "val = min(temp)\\l", "for j in range(n):\\l", "for i in range(n):\\l", "ans = []\\l", "for i in range(k):\\l", "if i % 2 == 0:\\l", "ans.append(val)\\l"], ["if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "temp.append(grid[i - 1][j])\\l", "if j != 0:\\l", "if i != n - 1:\\l", "temp.append(grid[i + 1][j])\\l", "if j != n - 1:\\l", "temp.append(grid[i][j + 1])\\l", "val = min(temp)\\l", "for j in range(n):\\l", "for i in range(n):\\l", "ans = []\\l", "for i in range(k):\\l", "if i % 2 == 0:\\l", "ans.append(val)\\l"], ["if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "temp.append(grid[i - 1][j])\\l", "if j != 0:\\l", "if i != n - 1:\\l", "temp.append(grid[i + 1][j])\\l", "if j != n - 1:\\l", "val = min(temp)\\l", "for j in range(n):\\l", "for i in range(n):\\l", "ans = []\\l", "for i in range(k):\\l", "if i % 2 == 0:\\l", "ans.append(val)\\l"], ["if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "temp.append(grid[i - 1][j])\\l", "if j != 0:\\l", "if i != n - 1:\\l", "if j != n - 1:\\l", "temp.append(grid[i][j + 1])\\l", "val = min(temp)\\l", "for j in range(n):\\l", "for i in range(n):\\l", "ans = []\\l", "for i in range(k):\\l", "if i % 2 == 0:\\l", "ans.append(val)\\l"], ["if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "temp.append(grid[i - 1][j])\\l", "if j != 0:\\l", "if i != n - 1:\\l", "if j != n - 1:\\l", "val = min(temp)\\l", "for j in range(n):\\l", "for i in range(n):\\l", "ans = []\\l", "for i in range(k):\\l", "if i % 2 == 0:\\l", "ans.append(val)\\l"], ["if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "if j != 0:\\l", "temp.append(grid[i][j - 1])\\l", "if i != n - 1:\\l", "temp.append(grid[i + 1][j])\\l", "if j != n - 1:\\l", "temp.append(grid[i][j + 1])\\l", "val = min(temp)\\l", "for j in range(n):\\l", "for i in range(n):\\l", "ans = []\\l", "for i in range(k):\\l", "if i % 2 == 0:\\l", "ans.append(val)\\l"], ["if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "if j != 0:\\l", "temp.append(grid[i][j - 1])\\l", "if i != n - 1:\\l", "temp.append(grid[i + 1][j])\\l", "if j != n - 1:\\l", "val = min(temp)\\l", "for j in range(n):\\l", "for i in range(n):\\l", "ans = []\\l", "for i in range(k):\\l", "if i % 2 == 0:\\l", "ans.append(val)\\l"], ["if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "if j != 0:\\l", "temp.append(grid[i][j - 1])\\l", "if i != n - 1:\\l", "if j != n - 1:\\l", "temp.append(grid[i][j + 1])\\l", "val = min(temp)\\l", "for j in range(n):\\l", "for i in range(n):\\l", "ans = []\\l", "for i in range(k):\\l", "if i % 2 == 0:\\l", "ans.append(val)\\l"], ["if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "if j != 0:\\l", "temp.append(grid[i][j - 1])\\l", "if i != n - 1:\\l", "if j != n - 1:\\l", "val = min(temp)\\l", "for j in range(n):\\l", "for i in range(n):\\l", "ans = []\\l", "for i in range(k):\\l", "if i % 2 == 0:\\l", "ans.append(val)\\l"], ["if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "if j != 0:\\l", "if i != n - 1:\\l", "temp.append(grid[i + 1][j])\\l", "if j != n - 1:\\l", "temp.append(grid[i][j + 1])\\l", "val = min(temp)\\l", "for j in range(n):\\l", "for i in range(n):\\l", "ans = []\\l", "for i in range(k):\\l", "if i % 2 == 0:\\l", "ans.append(val)\\l"], ["if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "if j != 0:\\l", "if i != n - 1:\\l", "temp.append(grid[i + 1][j])\\l", "if j != n - 1:\\l", "val = min(temp)\\l", "for j in range(n):\\l", "for i in range(n):\\l", "ans = []\\l", "for i in range(k):\\l", "if i % 2 == 0:\\l", "ans.append(val)\\l"], ["if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "if j != 0:\\l", "if i != n - 1:\\l", "if j != n - 1:\\l", "temp.append(grid[i][j + 1])\\l", "val = min(temp)\\l", "for j in range(n):\\l", "for i in range(n):\\l", "ans = []\\l", "for i in range(k):\\l", "if i % 2 == 0:\\l", "ans.append(val)\\l"], ["if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "if j != 0:\\l", "if i != n - 1:\\l", "if j != n - 1:\\l", "val = min(temp)\\l", "for j in range(n):\\l", "for i in range(n):\\l", "ans = []\\l", "for i in range(k):\\l", "if i % 2 == 0:\\l", "ans.append(val)\\l"], ["temp = []\\l", "if i != 0:\\l", "temp.append(grid[i - 1][j])\\l", "if j != 0:\\l", "temp.append(grid[i][j - 1])\\l", "if i != n - 1:\\l", "temp.append(grid[i + 1][j])\\l", "if j != n - 1:\\l", "temp.append(grid[i][j + 1])\\l", "val = min(temp)\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l"], ["temp = []\\l", "if i != 0:\\l", "temp.append(grid[i - 1][j])\\l", "if j != 0:\\l", "temp.append(grid[i][j - 1])\\l", "if i != n - 1:\\l", "temp.append(grid[i + 1][j])\\l", "if j != n - 1:\\l", "val = min(temp)\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l"], ["temp = []\\l", "if i != 0:\\l", "temp.append(grid[i - 1][j])\\l", "if j != 0:\\l", "temp.append(grid[i][j - 1])\\l", "if i != n - 1:\\l", "if j != n - 1:\\l", "temp.append(grid[i][j + 1])\\l", "val = min(temp)\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l"], ["temp = []\\l", "if i != 0:\\l", "temp.append(grid[i - 1][j])\\l", "if j != 0:\\l", "temp.append(grid[i][j - 1])\\l", "if i != n - 1:\\l", "if j != n - 1:\\l", "val = min(temp)\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l"], ["temp = []\\l", "if i != 0:\\l", "temp.append(grid[i - 1][j])\\l", "if j != 0:\\l", "if i != n - 1:\\l", "temp.append(grid[i + 1][j])\\l", "if j != n - 1:\\l", "temp.append(grid[i][j + 1])\\l", "val = min(temp)\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l"], ["temp = []\\l", "if i != 0:\\l", "temp.append(grid[i - 1][j])\\l", "if j != 0:\\l", "if i != n - 1:\\l", "temp.append(grid[i + 1][j])\\l", "if j != n - 1:\\l", "val = min(temp)\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l"], ["temp = []\\l", "if i != 0:\\l", "temp.append(grid[i - 1][j])\\l", "if j != 0:\\l", "if i != n - 1:\\l", "if j != n - 1:\\l", "temp.append(grid[i][j + 1])\\l", "val = min(temp)\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l"], ["temp = []\\l", "if i != 0:\\l", "temp.append(grid[i - 1][j])\\l", "if j != 0:\\l", "if i != n - 1:\\l", "if j != n - 1:\\l", "val = min(temp)\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l"], ["temp = []\\l", "if i != 0:\\l", "if j != 0:\\l", "temp.append(grid[i][j - 1])\\l", "if i != n - 1:\\l", "temp.append(grid[i + 1][j])\\l", "if j != n - 1:\\l", "temp.append(grid[i][j + 1])\\l", "val = min(temp)\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l"], ["temp = []\\l", "if i != 0:\\l", "if j != 0:\\l", "temp.append(grid[i][j - 1])\\l", "if i != n - 1:\\l", "temp.append(grid[i + 1][j])\\l", "if j != n - 1:\\l", "val = min(temp)\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l"], ["temp = []\\l", "if i != 0:\\l", "if j != 0:\\l", "temp.append(grid[i][j - 1])\\l", "if i != n - 1:\\l", "if j != n - 1:\\l", "temp.append(grid[i][j + 1])\\l", "val = min(temp)\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l"], ["temp = []\\l", "if i != 0:\\l", "if j != 0:\\l", "temp.append(grid[i][j - 1])\\l", "if i != n - 1:\\l", "if j != n - 1:\\l", "val = min(temp)\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l"], ["temp = []\\l", "if i != 0:\\l", "if j != 0:\\l", "if i != n - 1:\\l", "temp.append(grid[i + 1][j])\\l", "if j != n - 1:\\l", "temp.append(grid[i][j + 1])\\l", "val = min(temp)\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l"], ["temp = []\\l", "if i != 0:\\l", "if j != 0:\\l", "if i != n - 1:\\l", "temp.append(grid[i + 1][j])\\l", "if j != n - 1:\\l", "val = min(temp)\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l"], ["temp = []\\l", "if i != 0:\\l", "if j != 0:\\l", "if i != n - 1:\\l", "if j != n - 1:\\l", "temp.append(grid[i][j + 1])\\l", "val = min(temp)\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l"], ["temp = []\\l", "if i != 0:\\l", "if j != 0:\\l", "if i != n - 1:\\l", "if j != n - 1:\\l", "val = min(temp)\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l"], ["if i != 0:\\l", "temp.append(grid[i - 1][j])\\l", "if j != 0:\\l", "temp.append(grid[i][j - 1])\\l", "if i != n - 1:\\l", "temp.append(grid[i + 1][j])\\l", "if j != n - 1:\\l", "temp.append(grid[i][j + 1])\\l", "val = min(temp)\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l", "temp = []\\l"], ["if i != 0:\\l", "temp.append(grid[i - 1][j])\\l", "if j != 0:\\l", "temp.append(grid[i][j - 1])\\l", "if i != n - 1:\\l", "temp.append(grid[i + 1][j])\\l", "if j != n - 1:\\l", "val = min(temp)\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l", "temp = []\\l"], ["if i != 0:\\l", "temp.append(grid[i - 1][j])\\l", "if j != 0:\\l", "temp.append(grid[i][j - 1])\\l", "if i != n - 1:\\l", "if j != n - 1:\\l", "temp.append(grid[i][j + 1])\\l", "val = min(temp)\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l", "temp = []\\l"], ["if i != 0:\\l", "temp.append(grid[i - 1][j])\\l", "if j != 0:\\l", "temp.append(grid[i][j - 1])\\l", "if i != n - 1:\\l", "if j != n - 1:\\l", "val = min(temp)\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l", "temp = []\\l"], ["if i != 0:\\l", "temp.append(grid[i - 1][j])\\l", "if j != 0:\\l", "if i != n - 1:\\l", "temp.append(grid[i + 1][j])\\l", "if j != n - 1:\\l", "temp.append(grid[i][j + 1])\\l", "val = min(temp)\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l", "temp = []\\l"], ["if i != 0:\\l", "temp.append(grid[i - 1][j])\\l", "if j != 0:\\l", "if i != n - 1:\\l", "temp.append(grid[i + 1][j])\\l", "if j != n - 1:\\l", "val = min(temp)\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l", "temp = []\\l"], ["if i != 0:\\l", "temp.append(grid[i - 1][j])\\l", "if j != 0:\\l", "if i != n - 1:\\l", "if j != n - 1:\\l", "temp.append(grid[i][j + 1])\\l", "val = min(temp)\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l", "temp = []\\l"], ["if i != 0:\\l", "temp.append(grid[i - 1][j])\\l", "if j != 0:\\l", "if i != n - 1:\\l", "if j != n - 1:\\l", "val = min(temp)\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l", "temp = []\\l"], ["if i != 0:\\l", "if j != 0:\\l", "temp.append(grid[i][j - 1])\\l", "if i != n - 1:\\l", "temp.append(grid[i + 1][j])\\l", "if j != n - 1:\\l", "temp.append(grid[i][j + 1])\\l", "val = min(temp)\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l", "temp = []\\l"], ["if i != 0:\\l", "if j != 0:\\l", "temp.append(grid[i][j - 1])\\l", "if i != n - 1:\\l", "temp.append(grid[i + 1][j])\\l", "if j != n - 1:\\l", "val = min(temp)\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l", "temp = []\\l"], ["if i != 0:\\l", "if j != 0:\\l", "temp.append(grid[i][j - 1])\\l", "if i != n - 1:\\l", "if j != n - 1:\\l", "temp.append(grid[i][j + 1])\\l", "val = min(temp)\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l", "temp = []\\l"], ["if i != 0:\\l", "if j != 0:\\l", "temp.append(grid[i][j - 1])\\l", "if i != n - 1:\\l", "if j != n - 1:\\l", "val = min(temp)\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l", "temp = []\\l"], ["if i != 0:\\l", "if j != 0:\\l", "if i != n - 1:\\l", "temp.append(grid[i + 1][j])\\l", "if j != n - 1:\\l", "temp.append(grid[i][j + 1])\\l", "val = min(temp)\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l", "temp = []\\l"], ["if i != 0:\\l", "if j != 0:\\l", "if i != n - 1:\\l", "temp.append(grid[i + 1][j])\\l", "if j != n - 1:\\l", "val = min(temp)\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l", "temp = []\\l"], ["if i != 0:\\l", "if j != 0:\\l", "if i != n - 1:\\l", "if j != n - 1:\\l", "temp.append(grid[i][j + 1])\\l", "val = min(temp)\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l", "temp = []\\l"], ["if i != 0:\\l", "if j != 0:\\l", "if i != n - 1:\\l", "if j != n - 1:\\l", "val = min(temp)\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l", "temp = []\\l"], ["temp.append(grid[i - 1][j])\\l", "if j != 0:\\l", "temp.append(grid[i][j - 1])\\l", "if i != n - 1:\\l", "temp.append(grid[i + 1][j])\\l", "if j != n - 1:\\l", "temp.append(grid[i][j + 1])\\l", "val = min(temp)\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l"], ["temp.append(grid[i - 1][j])\\l", "if j != 0:\\l", "temp.append(grid[i][j - 1])\\l", "if i != n - 1:\\l", "temp.append(grid[i + 1][j])\\l", "if j != n - 1:\\l", "val = min(temp)\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l"], ["temp.append(grid[i - 1][j])\\l", "if j != 0:\\l", "temp.append(grid[i][j - 1])\\l", "if i != n - 1:\\l", "if j != n - 1:\\l", "temp.append(grid[i][j + 1])\\l", "val = min(temp)\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l"], ["temp.append(grid[i - 1][j])\\l", "if j != 0:\\l", "temp.append(grid[i][j - 1])\\l", "if i != n - 1:\\l", "if j != n - 1:\\l", "val = min(temp)\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l"], ["temp.append(grid[i - 1][j])\\l", "if j != 0:\\l", "if i != n - 1:\\l", "temp.append(grid[i + 1][j])\\l", "if j != n - 1:\\l", "temp.append(grid[i][j + 1])\\l", "val = min(temp)\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l"], ["temp.append(grid[i - 1][j])\\l", "if j != 0:\\l", "if i != n - 1:\\l", "temp.append(grid[i + 1][j])\\l", "if j != n - 1:\\l", "val = min(temp)\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l"], ["temp.append(grid[i - 1][j])\\l", "if j != 0:\\l", "if i != n - 1:\\l", "if j != n - 1:\\l", "temp.append(grid[i][j + 1])\\l", "val = min(temp)\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l"], ["temp.append(grid[i - 1][j])\\l", "if j != 0:\\l", "if i != n - 1:\\l", "if j != n - 1:\\l", "val = min(temp)\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l"], ["if j != 0:\\l", "temp.append(grid[i][j - 1])\\l", "if i != n - 1:\\l", "temp.append(grid[i + 1][j])\\l", "if j != n - 1:\\l", "temp.append(grid[i][j + 1])\\l", "val = min(temp)\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "temp.append(grid[i - 1][j])\\l"], ["if j != 0:\\l", "temp.append(grid[i][j - 1])\\l", "if i != n - 1:\\l", "temp.append(grid[i + 1][j])\\l", "if j != n - 1:\\l", "val = min(temp)\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "temp.append(grid[i - 1][j])\\l"], ["if j != 0:\\l", "temp.append(grid[i][j - 1])\\l", "if i != n - 1:\\l", "if j != n - 1:\\l", "temp.append(grid[i][j + 1])\\l", "val = min(temp)\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "temp.append(grid[i - 1][j])\\l"], ["if j != 0:\\l", "temp.append(grid[i][j - 1])\\l", "if i != n - 1:\\l", "if j != n - 1:\\l", "val = min(temp)\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "temp.append(grid[i - 1][j])\\l"], ["if j != 0:\\l", "if i != n - 1:\\l", "temp.append(grid[i + 1][j])\\l", "if j != n - 1:\\l", "temp.append(grid[i][j + 1])\\l", "val = min(temp)\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "temp.append(grid[i - 1][j])\\l"], ["if j != 0:\\l", "if i != n - 1:\\l", "temp.append(grid[i + 1][j])\\l", "if j != n - 1:\\l", "val = min(temp)\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "temp.append(grid[i - 1][j])\\l"], ["if j != 0:\\l", "if i != n - 1:\\l", "if j != n - 1:\\l", "temp.append(grid[i][j + 1])\\l", "val = min(temp)\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "temp.append(grid[i - 1][j])\\l"], ["if j != 0:\\l", "if i != n - 1:\\l", "if j != n - 1:\\l", "val = min(temp)\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "temp.append(grid[i - 1][j])\\l"], ["temp.append(grid[i][j - 1])\\l", "if i != n - 1:\\l", "temp.append(grid[i + 1][j])\\l", "if j != n - 1:\\l", "temp.append(grid[i][j + 1])\\l", "val = min(temp)\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "temp.append(grid[i - 1][j])\\l", "if j != 0:\\l"], ["temp.append(grid[i][j - 1])\\l", "if i != n - 1:\\l", "temp.append(grid[i + 1][j])\\l", "if j != n - 1:\\l", "temp.append(grid[i][j + 1])\\l", "val = min(temp)\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "if j != 0:\\l"], ["temp.append(grid[i][j - 1])\\l", "if i != n - 1:\\l", "temp.append(grid[i + 1][j])\\l", "if j != n - 1:\\l", "val = min(temp)\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "temp.append(grid[i - 1][j])\\l", "if j != 0:\\l"], ["temp.append(grid[i][j - 1])\\l", "if i != n - 1:\\l", "temp.append(grid[i + 1][j])\\l", "if j != n - 1:\\l", "val = min(temp)\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "if j != 0:\\l"], ["temp.append(grid[i][j - 1])\\l", "if i != n - 1:\\l", "if j != n - 1:\\l", "temp.append(grid[i][j + 1])\\l", "val = min(temp)\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "temp.append(grid[i - 1][j])\\l", "if j != 0:\\l"], ["temp.append(grid[i][j - 1])\\l", "if i != n - 1:\\l", "if j != n - 1:\\l", "temp.append(grid[i][j + 1])\\l", "val = min(temp)\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "if j != 0:\\l"], ["temp.append(grid[i][j - 1])\\l", "if i != n - 1:\\l", "if j != n - 1:\\l", "val = min(temp)\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "temp.append(grid[i - 1][j])\\l", "if j != 0:\\l"], ["temp.append(grid[i][j - 1])\\l", "if i != n - 1:\\l", "if j != n - 1:\\l", "val = min(temp)\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "if j != 0:\\l"], ["if i != n - 1:\\l", "temp.append(grid[i + 1][j])\\l", "if j != n - 1:\\l", "temp.append(grid[i][j + 1])\\l", "val = min(temp)\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "temp.append(grid[i - 1][j])\\l", "if j != 0:\\l", "temp.append(grid[i][j - 1])\\l"], ["if i != n - 1:\\l", "temp.append(grid[i + 1][j])\\l", "if j != n - 1:\\l", "temp.append(grid[i][j + 1])\\l", "val = min(temp)\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "if j != 0:\\l", "temp.append(grid[i][j - 1])\\l"], ["if i != n - 1:\\l", "temp.append(grid[i + 1][j])\\l", "if j != n - 1:\\l", "val = min(temp)\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "temp.append(grid[i - 1][j])\\l", "if j != 0:\\l", "temp.append(grid[i][j - 1])\\l"], ["if i != n - 1:\\l", "temp.append(grid[i + 1][j])\\l", "if j != n - 1:\\l", "val = min(temp)\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "if j != 0:\\l", "temp.append(grid[i][j - 1])\\l"], ["if i != n - 1:\\l", "if j != n - 1:\\l", "temp.append(grid[i][j + 1])\\l", "val = min(temp)\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "temp.append(grid[i - 1][j])\\l", "if j != 0:\\l", "temp.append(grid[i][j - 1])\\l"], ["if i != n - 1:\\l", "if j != n - 1:\\l", "temp.append(grid[i][j + 1])\\l", "val = min(temp)\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "if j != 0:\\l", "temp.append(grid[i][j - 1])\\l"], ["if i != n - 1:\\l", "if j != n - 1:\\l", "val = min(temp)\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "temp.append(grid[i - 1][j])\\l", "if j != 0:\\l", "temp.append(grid[i][j - 1])\\l"], ["if i != n - 1:\\l", "if j != n - 1:\\l", "val = min(temp)\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "if j != 0:\\l", "temp.append(grid[i][j - 1])\\l"], ["temp.append(grid[i + 1][j])\\l", "if j != n - 1:\\l", "temp.append(grid[i][j + 1])\\l", "val = min(temp)\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "temp.append(grid[i - 1][j])\\l", "if j != 0:\\l", "temp.append(grid[i][j - 1])\\l", "if i != n - 1:\\l"], ["temp.append(grid[i + 1][j])\\l", "if j != n - 1:\\l", "temp.append(grid[i][j + 1])\\l", "val = min(temp)\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "temp.append(grid[i - 1][j])\\l", "if j != 0:\\l", "if i != n - 1:\\l"], ["temp.append(grid[i + 1][j])\\l", "if j != n - 1:\\l", "temp.append(grid[i][j + 1])\\l", "val = min(temp)\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "if j != 0:\\l", "temp.append(grid[i][j - 1])\\l", "if i != n - 1:\\l"], ["temp.append(grid[i + 1][j])\\l", "if j != n - 1:\\l", "temp.append(grid[i][j + 1])\\l", "val = min(temp)\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "if j != 0:\\l", "if i != n - 1:\\l"], ["temp.append(grid[i + 1][j])\\l", "if j != n - 1:\\l", "val = min(temp)\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "temp.append(grid[i - 1][j])\\l", "if j != 0:\\l", "temp.append(grid[i][j - 1])\\l", "if i != n - 1:\\l"], ["temp.append(grid[i + 1][j])\\l", "if j != n - 1:\\l", "val = min(temp)\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "temp.append(grid[i - 1][j])\\l", "if j != 0:\\l", "if i != n - 1:\\l"], ["temp.append(grid[i + 1][j])\\l", "if j != n - 1:\\l", "val = min(temp)\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "if j != 0:\\l", "temp.append(grid[i][j - 1])\\l", "if i != n - 1:\\l"], ["temp.append(grid[i + 1][j])\\l", "if j != n - 1:\\l", "val = min(temp)\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "if j != 0:\\l", "if i != n - 1:\\l"], ["if j != n - 1:\\l", "temp.append(grid[i][j + 1])\\l", "val = min(temp)\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "temp.append(grid[i - 1][j])\\l", "if j != 0:\\l", "temp.append(grid[i][j - 1])\\l", "if i != n - 1:\\l", "temp.append(grid[i + 1][j])\\l"], ["if j != n - 1:\\l", "temp.append(grid[i][j + 1])\\l", "val = min(temp)\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "temp.append(grid[i - 1][j])\\l", "if j != 0:\\l", "if i != n - 1:\\l", "temp.append(grid[i + 1][j])\\l"], ["if j != n - 1:\\l", "temp.append(grid[i][j + 1])\\l", "val = min(temp)\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "if j != 0:\\l", "temp.append(grid[i][j - 1])\\l", "if i != n - 1:\\l", "temp.append(grid[i + 1][j])\\l"], ["if j != n - 1:\\l", "temp.append(grid[i][j + 1])\\l", "val = min(temp)\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "if j != 0:\\l", "if i != n - 1:\\l", "temp.append(grid[i + 1][j])\\l"], ["if j != n - 1:\\l", "val = min(temp)\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "temp.append(grid[i - 1][j])\\l", "if j != 0:\\l", "temp.append(grid[i][j - 1])\\l", "if i != n - 1:\\l", "temp.append(grid[i + 1][j])\\l"], ["if j != n - 1:\\l", "val = min(temp)\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "temp.append(grid[i - 1][j])\\l", "if j != 0:\\l", "if i != n - 1:\\l", "temp.append(grid[i + 1][j])\\l"], ["if j != n - 1:\\l", "val = min(temp)\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "if j != 0:\\l", "temp.append(grid[i][j - 1])\\l", "if i != n - 1:\\l", "temp.append(grid[i + 1][j])\\l"], ["if j != n - 1:\\l", "val = min(temp)\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "if j != 0:\\l", "if i != n - 1:\\l", "temp.append(grid[i + 1][j])\\l"], ["temp.append(grid[i][j + 1])\\l", "val = min(temp)\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "temp.append(grid[i - 1][j])\\l", "if j != 0:\\l", "temp.append(grid[i][j - 1])\\l", "if i != n - 1:\\l", "temp.append(grid[i + 1][j])\\l", "if j != n - 1:\\l"], ["temp.append(grid[i][j + 1])\\l", "val = min(temp)\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "temp.append(grid[i - 1][j])\\l", "if j != 0:\\l", "temp.append(grid[i][j - 1])\\l", "if i != n - 1:\\l", "if j != n - 1:\\l"], ["temp.append(grid[i][j + 1])\\l", "val = min(temp)\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "temp.append(grid[i - 1][j])\\l", "if j != 0:\\l", "if i != n - 1:\\l", "temp.append(grid[i + 1][j])\\l", "if j != n - 1:\\l"], ["temp.append(grid[i][j + 1])\\l", "val = min(temp)\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "temp.append(grid[i - 1][j])\\l", "if j != 0:\\l", "if i != n - 1:\\l", "if j != n - 1:\\l"], ["temp.append(grid[i][j + 1])\\l", "val = min(temp)\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "if j != 0:\\l", "temp.append(grid[i][j - 1])\\l", "if i != n - 1:\\l", "temp.append(grid[i + 1][j])\\l", "if j != n - 1:\\l"], ["temp.append(grid[i][j + 1])\\l", "val = min(temp)\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "if j != 0:\\l", "temp.append(grid[i][j - 1])\\l", "if i != n - 1:\\l", "if j != n - 1:\\l"], ["temp.append(grid[i][j + 1])\\l", "val = min(temp)\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "if j != 0:\\l", "if i != n - 1:\\l", "temp.append(grid[i + 1][j])\\l", "if j != n - 1:\\l"], ["temp.append(grid[i][j + 1])\\l", "val = min(temp)\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "if j != 0:\\l", "if i != n - 1:\\l", "if j != n - 1:\\l"], ["val = min(temp)\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "temp.append(grid[i - 1][j])\\l", "if j != 0:\\l", "temp.append(grid[i][j - 1])\\l", "if i != n - 1:\\l", "temp.append(grid[i + 1][j])\\l", "if j != n - 1:\\l", "temp.append(grid[i][j + 1])\\l"], ["val = min(temp)\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "temp.append(grid[i - 1][j])\\l", "if j != 0:\\l", "temp.append(grid[i][j - 1])\\l", "if i != n - 1:\\l", "if j != n - 1:\\l", "temp.append(grid[i][j + 1])\\l"], ["val = min(temp)\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "temp.append(grid[i - 1][j])\\l", "if j != 0:\\l", "if i != n - 1:\\l", "temp.append(grid[i + 1][j])\\l", "if j != n - 1:\\l", "temp.append(grid[i][j + 1])\\l"], ["val = min(temp)\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "temp.append(grid[i - 1][j])\\l", "if j != 0:\\l", "if i != n - 1:\\l", "if j != n - 1:\\l", "temp.append(grid[i][j + 1])\\l"], ["val = min(temp)\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "if j != 0:\\l", "temp.append(grid[i][j - 1])\\l", "if i != n - 1:\\l", "temp.append(grid[i + 1][j])\\l", "if j != n - 1:\\l", "temp.append(grid[i][j + 1])\\l"], ["val = min(temp)\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "if j != 0:\\l", "temp.append(grid[i][j - 1])\\l", "if i != n - 1:\\l", "if j != n - 1:\\l", "temp.append(grid[i][j + 1])\\l"], ["val = min(temp)\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "if j != 0:\\l", "if i != n - 1:\\l", "temp.append(grid[i + 1][j])\\l", "if j != n - 1:\\l", "temp.append(grid[i][j + 1])\\l"], ["val = min(temp)\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "if j != 0:\\l", "if i != n - 1:\\l", "if j != n - 1:\\l", "temp.append(grid[i][j + 1])\\l"], ["if i % 2 == 0:\\l", "ans.append(1)\\l", "for i in range(k):\\l", "return ans\\l"], ["if i % 2 == 0:\\l", "ans.append(val)\\l", "for i in range(k):\\l", "return ans\\l"], ["ans.append(1)\\l", "for i in range(k):\\l", "if i % 2 == 0:\\l", "ans.append(val)\\l"], ["ans.append(val)\\l", "for i in range(k):\\l", "if i % 2 == 0:\\l", "ans.append(1)\\l"], ["from typing import *\\ldef minPath(grid, k):...\\lminPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3)\\l", "minPath", "n = len(grid)\\lval = n * n + 1\\l", "for i in range(n):\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "temp.append(grid[i - 1][j])\\l", "if j != 0:\\l", "temp.append(grid[i][j - 1])\\l", "if i != n - 1:\\l", "temp.append(grid[i + 1][j])\\l", "if j != n - 1:\\l", "temp.append(grid[i][j + 1])\\l", "val = min(temp)\\l"], ["from typing import *\\ldef minPath(grid, k):...\\lminPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3)\\l", "minPath", "n = len(grid)\\lval = n * n + 1\\l", "for i in range(n):\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "temp.append(grid[i - 1][j])\\l", "if j != 0:\\l", "temp.append(grid[i][j - 1])\\l", "if i != n - 1:\\l", "temp.append(grid[i + 1][j])\\l", "if j != n - 1:\\l", "val = min(temp)\\l"], ["from typing import *\\ldef minPath(grid, k):...\\lminPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3)\\l", "minPath", "n = len(grid)\\lval = n * n + 1\\l", "for i in range(n):\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "temp.append(grid[i - 1][j])\\l", "if j != 0:\\l", "temp.append(grid[i][j - 1])\\l", "if i != n - 1:\\l", "if j != n - 1:\\l", "temp.append(grid[i][j + 1])\\l", "val = min(temp)\\l"], ["from typing import *\\ldef minPath(grid, k):...\\lminPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3)\\l", "minPath", "n = len(grid)\\lval = n * n + 1\\l", "for i in range(n):\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "temp.append(grid[i - 1][j])\\l", "if j != 0:\\l", "temp.append(grid[i][j - 1])\\l", "if i != n - 1:\\l", "if j != n - 1:\\l", "val = min(temp)\\l"], ["from typing import *\\ldef minPath(grid, k):...\\lminPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3)\\l", "minPath", "n = len(grid)\\lval = n * n + 1\\l", "for i in range(n):\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "temp.append(grid[i - 1][j])\\l", "if j != 0:\\l", "if i != n - 1:\\l", "temp.append(grid[i + 1][j])\\l", "if j != n - 1:\\l", "temp.append(grid[i][j + 1])\\l", "val = min(temp)\\l"], ["from typing import *\\ldef minPath(grid, k):...\\lminPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3)\\l", "minPath", "n = len(grid)\\lval = n * n + 1\\l", "for i in range(n):\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "temp.append(grid[i - 1][j])\\l", "if j != 0:\\l", "if i != n - 1:\\l", "temp.append(grid[i + 1][j])\\l", "if j != n - 1:\\l", "val = min(temp)\\l"], ["from typing import *\\ldef minPath(grid, k):...\\lminPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3)\\l", "minPath", "n = len(grid)\\lval = n * n + 1\\l", "for i in range(n):\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "temp.append(grid[i - 1][j])\\l", "if j != 0:\\l", "if i != n - 1:\\l", "if j != n - 1:\\l", "temp.append(grid[i][j + 1])\\l", "val = min(temp)\\l"], ["from typing import *\\ldef minPath(grid, k):...\\lminPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3)\\l", "minPath", "n = len(grid)\\lval = n * n + 1\\l", "for i in range(n):\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "temp.append(grid[i - 1][j])\\l", "if j != 0:\\l", "if i != n - 1:\\l", "if j != n - 1:\\l", "val = min(temp)\\l"], ["from typing import *\\ldef minPath(grid, k):...\\lminPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3)\\l", "minPath", "n = len(grid)\\lval = n * n + 1\\l", "for i in range(n):\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "if j != 0:\\l", "temp.append(grid[i][j - 1])\\l", "if i != n - 1:\\l", "temp.append(grid[i + 1][j])\\l", "if j != n - 1:\\l", "temp.append(grid[i][j + 1])\\l", "val = min(temp)\\l"], ["from typing import *\\ldef minPath(grid, k):...\\lminPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3)\\l", "minPath", "n = len(grid)\\lval = n * n + 1\\l", "for i in range(n):\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "if j != 0:\\l", "temp.append(grid[i][j - 1])\\l", "if i != n - 1:\\l", "temp.append(grid[i + 1][j])\\l", "if j != n - 1:\\l", "val = min(temp)\\l"], ["from typing import *\\ldef minPath(grid, k):...\\lminPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3)\\l", "minPath", "n = len(grid)\\lval = n * n + 1\\l", "for i in range(n):\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "if j != 0:\\l", "temp.append(grid[i][j - 1])\\l", "if i != n - 1:\\l", "if j != n - 1:\\l", "temp.append(grid[i][j + 1])\\l", "val = min(temp)\\l"], ["from typing import *\\ldef minPath(grid, k):...\\lminPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3)\\l", "minPath", "n = len(grid)\\lval = n * n + 1\\l", "for i in range(n):\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "if j != 0:\\l", "temp.append(grid[i][j - 1])\\l", "if i != n - 1:\\l", "if j != n - 1:\\l", "val = min(temp)\\l"], ["from typing import *\\ldef minPath(grid, k):...\\lminPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3)\\l", "minPath", "n = len(grid)\\lval = n * n + 1\\l", "for i in range(n):\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "if j != 0:\\l", "if i != n - 1:\\l", "temp.append(grid[i + 1][j])\\l", "if j != n - 1:\\l", "temp.append(grid[i][j + 1])\\l", "val = min(temp)\\l"], ["from typing import *\\ldef minPath(grid, k):...\\lminPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3)\\l", "minPath", "n = len(grid)\\lval = n * n + 1\\l", "for i in range(n):\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "if j != 0:\\l", "if i != n - 1:\\l", "temp.append(grid[i + 1][j])\\l", "if j != n - 1:\\l", "val = min(temp)\\l"], ["from typing import *\\ldef minPath(grid, k):...\\lminPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3)\\l", "minPath", "n = len(grid)\\lval = n * n + 1\\l", "for i in range(n):\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "if j != 0:\\l", "if i != n - 1:\\l", "if j != n - 1:\\l", "temp.append(grid[i][j + 1])\\l", "val = min(temp)\\l"], ["from typing import *\\ldef minPath(grid, k):...\\lminPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3)\\l", "minPath", "n = len(grid)\\lval = n * n + 1\\l", "for i in range(n):\\l", "for j in range(n):\\l", "if grid[i][j] == 1:\\l", "temp = []\\l", "if i != 0:\\l", "if j != 0:\\l", "if i != n - 1:\\l", "if j != n - 1:\\l", "val = min(temp)\\l"], ["from typing import *\\ldef minPath(grid, k):...\\lminPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3)\\l", "minPath", "n = len(grid)\\lval = n * n + 1\\l", "for i in range(n):\\l", "ans = []\\l", "for i in range(k):\\l", "return ans\\l"], ["from typing import *\\ldef minPath(grid, k):...\\lminPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3)\\l", "minPath", "n = len(grid)\\lval = n * n + 1\\l", "for i in range(n):\\l", "ans = []\\l", "for i in range(k):\\l", "if i % 2 == 0:\\l", "ans.append(1)\\l"], ["from typing import *\\ldef minPath(grid, k):...\\lminPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3)\\l", "minPath", "n = len(grid)\\lval = n * n + 1\\l", "for i in range(n):\\l", "ans = []\\l", "for i in range(k):\\l", "if i % 2 == 0:\\l", "ans.append(val)\\l"]], "prime_paths_linenumbers": [[7, 6, 5, 23, 24, 29], [7, 8, 9, 10, 12, 13, 15, 16, 18, 19, 21, 6, 5, 23, 24, 29], [7, 8, 9, 10, 12, 13, 15, 16, 18, 21, 6, 5, 23, 24, 29], [7, 8, 9, 10, 12, 13, 15, 18, 19, 21, 6, 5, 23, 24, 29], [7, 8, 9, 10, 12, 13, 15, 18, 21, 6, 5, 23, 24, 29], [7, 8, 9, 10, 12, 15, 16, 18, 19, 21, 6, 5, 23, 24, 29], [7, 8, 9, 10, 12, 15, 16, 18, 21, 6, 5, 23, 24, 29], [7, 8, 9, 10, 12, 15, 18, 19, 21, 6, 5, 23, 24, 29], [7, 8, 9, 10, 12, 15, 18, 21, 6, 5, 23, 24, 29], [7, 8, 9, 12, 13, 15, 16, 18, 19, 21, 6, 5, 23, 24, 29], [7, 8, 9, 12, 13, 15, 16, 18, 21, 6, 5, 23, 24, 29], [7, 8, 9, 12, 13, 15, 18, 19, 21, 6, 5, 23, 24, 29], [7, 8, 9, 12, 13, 15, 18, 21, 6, 5, 23, 24, 29], [7, 8, 9, 12, 15, 16, 18, 19, 21, 6, 5, 23, 24, 29], [7, 8, 9, 12, 15, 16, 18, 21, 6, 5, 23, 24, 29], [7, 8, 9, 12, 15, 18, 19, 21, 6, 5, 23, 24, 29], [7, 8, 9, 12, 15, 18, 21, 6, 5, 23, 24, 29], [7, 6, 5, 23, 24, 25, 26], [7, 8, 9, 10, 12, 13, 15, 16, 18, 19, 21, 6, 5, 23, 24, 25, 26], [7, 8, 9, 10, 12, 13, 15, 16, 18, 21, 6, 5, 23, 24, 25, 26], [7, 8, 9, 10, 12, 13, 15, 18, 19, 21, 6, 5, 23, 24, 25, 26], [7, 8, 9, 10, 12, 13, 15, 18, 21, 6, 5, 23, 24, 25, 26], [7, 8, 9, 10, 12, 15, 16, 18, 19, 21, 6, 5, 23, 24, 25, 26], [7, 8, 9, 10, 12, 15, 16, 18, 21, 6, 5, 23, 24, 25, 26], [7, 8, 9, 10, 12, 15, 18, 19, 21, 6, 5, 23, 24, 25, 26], [7, 8, 9, 10, 12, 15, 18, 21, 6, 5, 23, 24, 25, 26], [7, 8, 9, 12, 13, 15, 16, 18, 19, 21, 6, 5, 23, 24, 25, 26], [7, 8, 9, 12, 13, 15, 16, 18, 21, 6, 5, 23, 24, 25, 26], [7, 8, 9, 12, 13, 15, 18, 19, 21, 6, 5, 23, 24, 25, 26], [7, 8, 9, 12, 13, 15, 18, 21, 6, 5, 23, 24, 25, 26], [7, 8, 9, 12, 15, 16, 18, 19, 21, 6, 5, 23, 24, 25, 26], [7, 8, 9, 12, 15, 16, 18, 21, 6, 5, 23, 24, 25, 26], [7, 8, 9, 12, 15, 18, 19, 21, 6, 5, 23, 24, 25, 26], [7, 8, 9, 12, 15, 18, 21, 6, 5, 23, 24, 25, 26], [7, 6, 5, 23, 24, 25, 28], [7, 8, 9, 10, 12, 13, 15, 16, 18, 19, 21, 6, 5, 23, 24, 25, 28], [7, 8, 9, 10, 12, 13, 15, 16, 18, 21, 6, 5, 23, 24, 25, 28], [7, 8, 9, 10, 12, 13, 15, 18, 19, 21, 6, 5, 23, 24, 25, 28], [7, 8, 9, 10, 12, 13, 15, 18, 21, 6, 5, 23, 24, 25, 28], [7, 8, 9, 10, 12, 15, 16, 18, 19, 21, 6, 5, 23, 24, 25, 28], [7, 8, 9, 10, 12, 15, 16, 18, 21, 6, 5, 23, 24, 25, 28], [7, 8, 9, 10, 12, 15, 18, 19, 21, 6, 5, 23, 24, 25, 28], [7, 8, 9, 10, 12, 15, 18, 21, 6, 5, 23, 24, 25, 28], [7, 8, 9, 12, 13, 15, 16, 18, 19, 21, 6, 5, 23, 24, 25, 28], [7, 8, 9, 12, 13, 15, 16, 18, 21, 6, 5, 23, 24, 25, 28], [7, 8, 9, 12, 13, 15, 18, 19, 21, 6, 5, 23, 24, 25, 28], [7, 8, 9, 12, 13, 15, 18, 21, 6, 5, 23, 24, 25, 28], [7, 8, 9, 12, 15, 16, 18, 19, 21, 6, 5, 23, 24, 25, 28], [7, 8, 9, 12, 15, 16, 18, 21, 6, 5, 23, 24, 25, 28], [7, 8, 9, 12, 15, 18, 19, 21, 6, 5, 23, 24, 25, 28], [7, 8, 9, 12, 15, 18, 21, 6, 5, 23, 24, 25, 28], [8, 9, 10, 12, 13, 15, 16, 18, 19, 21, 6, 7], [8, 9, 10, 12, 13, 15, 16, 18, 21, 6, 7], [8, 9, 10, 12, 13, 15, 18, 19, 21, 6, 7], [8, 9, 10, 12, 13, 15, 18, 21, 6, 7], [8, 9, 10, 12, 15, 16, 18, 19, 21, 6, 7], [8, 9, 10, 12, 15, 16, 18, 21, 6, 7], [8, 9, 10, 12, 15, 18, 19, 21, 6, 7], [8, 9, 10, 12, 15, 18, 21, 6, 7], [8, 9, 12, 13, 15, 16, 18, 19, 21, 6, 7], [8, 9, 12, 13, 15, 16, 18, 21, 6, 7], [8, 9, 12, 13, 15, 18, 19, 21, 6, 7], [8, 9, 12, 13, 15, 18, 21, 6, 7], [8, 9, 12, 15, 16, 18, 19, 21, 6, 7], [8, 9, 12, 15, 16, 18, 21, 6, 7], [8, 9, 12, 15, 18, 19, 21, 6, 7], [8, 9, 12, 15, 18, 21, 6, 7], [9, 10, 12, 13, 15, 16, 18, 19, 21, 6, 7, 8], [9, 10, 12, 13, 15, 16, 18, 21, 6, 7, 8], [9, 10, 12, 13, 15, 18, 19, 21, 6, 7, 8], [9, 10, 12, 13, 15, 18, 21, 6, 7, 8], [9, 10, 12, 15, 16, 18, 19, 21, 6, 7, 8], [9, 10, 12, 15, 16, 18, 21, 6, 7, 8], [9, 10, 12, 15, 18, 19, 21, 6, 7, 8], [9, 10, 12, 15, 18, 21, 6, 7, 8], [9, 12, 13, 15, 16, 18, 19, 21, 6, 7, 8], [9, 12, 13, 15, 16, 18, 21, 6, 7, 8], [9, 12, 13, 15, 18, 19, 21, 6, 7, 8], [9, 12, 13, 15, 18, 21, 6, 7, 8], [9, 12, 15, 16, 18, 19, 21, 6, 7, 8], [9, 12, 15, 16, 18, 21, 6, 7, 8], [9, 12, 15, 18, 19, 21, 6, 7, 8], [9, 12, 15, 18, 21, 6, 7, 8], [10, 12, 13, 15, 16, 18, 19, 21, 6, 7, 8, 9], [10, 12, 13, 15, 16, 18, 21, 6, 7, 8, 9], [10, 12, 13, 15, 18, 19, 21, 6, 7, 8, 9], [10, 12, 13, 15, 18, 21, 6, 7, 8, 9], [10, 12, 15, 16, 18, 19, 21, 6, 7, 8, 9], [10, 12, 15, 16, 18, 21, 6, 7, 8, 9], [10, 12, 15, 18, 19, 21, 6, 7, 8, 9], [10, 12, 15, 18, 21, 6, 7, 8, 9], [12, 13, 15, 16, 18, 19, 21, 6, 7, 8, 9, 10], [12, 13, 15, 16, 18, 21, 6, 7, 8, 9, 10], [12, 13, 15, 18, 19, 21, 6, 7, 8, 9, 10], [12, 13, 15, 18, 21, 6, 7, 8, 9, 10], [12, 15, 16, 18, 19, 21, 6, 7, 8, 9, 10], [12, 15, 16, 18, 21, 6, 7, 8, 9, 10], [12, 15, 18, 19, 21, 6, 7, 8, 9, 10], [12, 15, 18, 21, 6, 7, 8, 9, 10], [13, 15, 16, 18, 19, 21, 6, 7, 8, 9, 10, 12], [13, 15, 16, 18, 19, 21, 6, 7, 8, 9, 12], [13, 15, 16, 18, 21, 6, 7, 8, 9, 10, 12], [13, 15, 16, 18, 21, 6, 7, 8, 9, 12], [13, 15, 18, 19, 21, 6, 7, 8, 9, 10, 12], [13, 15, 18, 19, 21, 6, 7, 8, 9, 12], [13, 15, 18, 21, 6, 7, 8, 9, 10, 12], [13, 15, 18, 21, 6, 7, 8, 9, 12], [15, 16, 18, 19, 21, 6, 7, 8, 9, 10, 12, 13], [15, 16, 18, 19, 21, 6, 7, 8, 9, 12, 13], [15, 16, 18, 21, 6, 7, 8, 9, 10, 12, 13], [15, 16, 18, 21, 6, 7, 8, 9, 12, 13], [15, 18, 19, 21, 6, 7, 8, 9, 10, 12, 13], [15, 18, 19, 21, 6, 7, 8, 9, 12, 13], [15, 18, 21, 6, 7, 8, 9, 10, 12, 13], [15, 18, 21, 6, 7, 8, 9, 12, 13], [16, 18, 19, 21, 6, 7, 8, 9, 10, 12, 13, 15], [16, 18, 19, 21, 6, 7, 8, 9, 10, 12, 15], [16, 18, 19, 21, 6, 7, 8, 9, 12, 13, 15], [16, 18, 19, 21, 6, 7, 8, 9, 12, 15], [16, 18, 21, 6, 7, 8, 9, 10, 12, 13, 15], [16, 18, 21, 6, 7, 8, 9, 10, 12, 15], [16, 18, 21, 6, 7, 8, 9, 12, 13, 15], [16, 18, 21, 6, 7, 8, 9, 12, 15], [18, 19, 21, 6, 7, 8, 9, 10, 12, 13, 15, 16], [18, 19, 21, 6, 7, 8, 9, 10, 12, 15, 16], [18, 19, 21, 6, 7, 8, 9, 12, 13, 15, 16], [18, 19, 21, 6, 7, 8, 9, 12, 15, 16], [18, 21, 6, 7, 8, 9, 10, 12, 13, 15, 16], [18, 21, 6, 7, 8, 9, 10, 12, 15, 16], [18, 21, 6, 7, 8, 9, 12, 13, 15, 16], [18, 21, 6, 7, 8, 9, 12, 15, 16], [19, 21, 6, 7, 8, 9, 10, 12, 13, 15, 16, 18], [19, 21, 6, 7, 8, 9, 10, 12, 13, 15, 18], [19, 21, 6, 7, 8, 9, 10, 12, 15, 16, 18], [19, 21, 6, 7, 8, 9, 10, 12, 15, 18], [19, 21, 6, 7, 8, 9, 12, 13, 15, 16, 18], [19, 21, 6, 7, 8, 9, 12, 13, 15, 18], [19, 21, 6, 7, 8, 9, 12, 15, 16, 18], [19, 21, 6, 7, 8, 9, 12, 15, 18], [21, 6, 7, 8, 9, 10, 12, 13, 15, 16, 18, 19], [21, 6, 7, 8, 9, 10, 12, 13, 15, 18, 19], [21, 6, 7, 8, 9, 10, 12, 15, 16, 18, 19], [21, 6, 7, 8, 9, 10, 12, 15, 18, 19], [21, 6, 7, 8, 9, 12, 13, 15, 16, 18, 19], [21, 6, 7, 8, 9, 12, 13, 15, 18, 19], [21, 6, 7, 8, 9, 12, 15, 16, 18, 19], [21, 6, 7, 8, 9, 12, 15, 18, 19], [25, 26, 24, 29], [25, 28, 24, 29], [26, 24, 25, 28], [28, 24, 25, 26], [1, 31, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 15, 16, 18, 19, 21], [1, 31, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 15, 16, 18, 21], [1, 31, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 15, 18, 19, 21], [1, 31, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 15, 18, 21], [1, 31, 3, 4, 5, 6, 7, 8, 9, 10, 12, 15, 16, 18, 19, 21], [1, 31, 3, 4, 5, 6, 7, 8, 9, 10, 12, 15, 16, 18, 21], [1, 31, 3, 4, 5, 6, 7, 8, 9, 10, 12, 15, 18, 19, 21], [1, 31, 3, 4, 5, 6, 7, 8, 9, 10, 12, 15, 18, 21], [1, 31, 3, 4, 5, 6, 7, 8, 9, 12, 13, 15, 16, 18, 19, 21], [1, 31, 3, 4, 5, 6, 7, 8, 9, 12, 13, 15, 16, 18, 21], [1, 31, 3, 4, 5, 6, 7, 8, 9, 12, 13, 15, 18, 19, 21], [1, 31, 3, 4, 5, 6, 7, 8, 9, 12, 13, 15, 18, 21], [1, 31, 3, 4, 5, 6, 7, 8, 9, 12, 15, 16, 18, 19, 21], [1, 31, 3, 4, 5, 6, 7, 8, 9, 12, 15, 16, 18, 21], [1, 31, 3, 4, 5, 6, 7, 8, 9, 12, 15, 18, 19, 21], [1, 31, 3, 4, 5, 6, 7, 8, 9, 12, 15, 18, 21], [1, 31, 3, 4, 5, 23, 24, 29], [1, 31, 3, 4, 5, 23, 24, 25, 26], [1, 31, 3, 4, 5, 23, 24, 25, 28]], "covered_statements_linenumbers": [1, 2, 3, 4, 5, 6, 7, 8, 9, 12, 15, 16, 18, 19, 21, 23, 24, 25, 26, 28, 29, 31], "missing_statements_linenumbers": [10, 13], "covered_prime_paths_linenumbers": [[7, 6, 5, 23, 24, 29], [7, 8, 9, 12, 15, 16, 18, 19, 21, 6, 5, 23, 24, 29], [7, 8, 9, 12, 15, 16, 18, 21, 6, 5, 23, 24, 29], [7, 8, 9, 12, 15, 18, 19, 21, 6, 5, 23, 24, 29], [7, 8, 9, 12, 15, 18, 21, 6, 5, 23, 24, 29], [7, 6, 5, 23, 24, 25, 26], [7, 8, 9, 12, 15, 16, 18, 19, 21, 6, 5, 23, 24, 25, 26], [7, 8, 9, 12, 15, 16, 18, 21, 6, 5, 23, 24, 25, 26], [7, 8, 9, 12, 15, 18, 19, 21, 6, 5, 23, 24, 25, 26], [7, 8, 9, 12, 15, 18, 21, 6, 5, 23, 24, 25, 26], [7, 6, 5, 23, 24, 25, 28], [7, 8, 9, 12, 15, 16, 18, 19, 21, 6, 5, 23, 24, 25, 28], [7, 8, 9, 12, 15, 16, 18, 21, 6, 5, 23, 24, 25, 28], [7, 8, 9, 12, 15, 18, 19, 21, 6, 5, 23, 24, 25, 28], [7, 8, 9, 12, 15, 18, 21, 6, 5, 23, 24, 25, 28], [8, 9, 12, 15, 16, 18, 19, 21, 6, 7], [8, 9, 12, 15, 16, 18, 21, 6, 7], [8, 9, 12, 15, 18, 19, 21, 6, 7], [8, 9, 12, 15, 18, 21, 6, 7], [9, 12, 15, 16, 18, 19, 21, 6, 7, 8], [9, 12, 15, 16, 18, 21, 6, 7, 8], [9, 12, 15, 18, 19, 21, 6, 7, 8], [9, 12, 15, 18, 21, 6, 7, 8], [16, 18, 19, 21, 6, 7, 8, 9, 12, 15], [16, 18, 21, 6, 7, 8, 9, 12, 15], [18, 19, 21, 6, 7, 8, 9, 12, 15, 16], [18, 21, 6, 7, 8, 9, 12, 15, 16], [19, 21, 6, 7, 8, 9, 12, 15, 16, 18], [19, 21, 6, 7, 8, 9, 12, 15, 18], [21, 6, 7, 8, 9, 12, 15, 16, 18, 19], [21, 6, 7, 8, 9, 12, 15, 18, 19], [25, 26, 24, 29], [25, 28, 24, 29], [26, 24, 25, 28], [28, 24, 25, 26], [1, 31, 3, 4, 5, 6, 7, 8, 9, 12, 15, 16, 18, 19, 21], [1, 31, 3, 4, 5, 6, 7, 8, 9, 12, 15, 16, 18, 21], [1, 31, 3, 4, 5, 6, 7, 8, 9, 12, 15, 18, 19, 21], [1, 31, 3, 4, 5, 6, 7, 8, 9, 12, 15, 18, 21], [1, 31, 3, 4, 5, 23, 24, 29], [1, 31, 3, 4, 5, 23, 24, 25, 26], [1, 31, 3, 4, 5, 23, 24, 25, 28]], "missing_prime_paths_linenumbers": [[7, 8, 9, 10, 12, 13, 15, 16, 18, 19, 21, 6, 5, 23, 24, 29], [7, 8, 9, 10, 12, 13, 15, 16, 18, 21, 6, 5, 23, 24, 29], [7, 8, 9, 10, 12, 13, 15, 18, 19, 21, 6, 5, 23, 24, 29], [7, 8, 9, 10, 12, 13, 15, 18, 21, 6, 5, 23, 24, 29], [7, 8, 9, 10, 12, 15, 16, 18, 19, 21, 6, 5, 23, 24, 29], [7, 8, 9, 10, 12, 15, 16, 18, 21, 6, 5, 23, 24, 29], [7, 8, 9, 10, 12, 15, 18, 19, 21, 6, 5, 23, 24, 29], [7, 8, 9, 10, 12, 15, 18, 21, 6, 5, 23, 24, 29], [7, 8, 9, 12, 13, 15, 16, 18, 19, 21, 6, 5, 23, 24, 29], [7, 8, 9, 12, 13, 15, 16, 18, 21, 6, 5, 23, 24, 29], [7, 8, 9, 12, 13, 15, 18, 19, 21, 6, 5, 23, 24, 29], [7, 8, 9, 12, 13, 15, 18, 21, 6, 5, 23, 24, 29], [7, 8, 9, 10, 12, 13, 15, 16, 18, 19, 21, 6, 5, 23, 24, 25, 26], [7, 8, 9, 10, 12, 13, 15, 16, 18, 21, 6, 5, 23, 24, 25, 26], [7, 8, 9, 10, 12, 13, 15, 18, 19, 21, 6, 5, 23, 24, 25, 26], [7, 8, 9, 10, 12, 13, 15, 18, 21, 6, 5, 23, 24, 25, 26], [7, 8, 9, 10, 12, 15, 16, 18, 19, 21, 6, 5, 23, 24, 25, 26], [7, 8, 9, 10, 12, 15, 16, 18, 21, 6, 5, 23, 24, 25, 26], [7, 8, 9, 10, 12, 15, 18, 19, 21, 6, 5, 23, 24, 25, 26], [7, 8, 9, 10, 12, 15, 18, 21, 6, 5, 23, 24, 25, 26], [7, 8, 9, 12, 13, 15, 16, 18, 19, 21, 6, 5, 23, 24, 25, 26], [7, 8, 9, 12, 13, 15, 16, 18, 21, 6, 5, 23, 24, 25, 26], [7, 8, 9, 12, 13, 15, 18, 19, 21, 6, 5, 23, 24, 25, 26], [7, 8, 9, 12, 13, 15, 18, 21, 6, 5, 23, 24, 25, 26], [7, 8, 9, 10, 12, 13, 15, 16, 18, 19, 21, 6, 5, 23, 24, 25, 28], [7, 8, 9, 10, 12, 13, 15, 16, 18, 21, 6, 5, 23, 24, 25, 28], [7, 8, 9, 10, 12, 13, 15, 18, 19, 21, 6, 5, 23, 24, 25, 28], [7, 8, 9, 10, 12, 13, 15, 18, 21, 6, 5, 23, 24, 25, 28], [7, 8, 9, 10, 12, 15, 16, 18, 19, 21, 6, 5, 23, 24, 25, 28], [7, 8, 9, 10, 12, 15, 16, 18, 21, 6, 5, 23, 24, 25, 28], [7, 8, 9, 10, 12, 15, 18, 19, 21, 6, 5, 23, 24, 25, 28], [7, 8, 9, 10, 12, 15, 18, 21, 6, 5, 23, 24, 25, 28], [7, 8, 9, 12, 13, 15, 16, 18, 19, 21, 6, 5, 23, 24, 25, 28], [7, 8, 9, 12, 13, 15, 16, 18, 21, 6, 5, 23, 24, 25, 28], [7, 8, 9, 12, 13, 15, 18, 19, 21, 6, 5, 23, 24, 25, 28], [7, 8, 9, 12, 13, 15, 18, 21, 6, 5, 23, 24, 25, 28], [8, 9, 10, 12, 13, 15, 16, 18, 19, 21, 6, 7], [8, 9, 10, 12, 13, 15, 16, 18, 21, 6, 7], [8, 9, 10, 12, 13, 15, 18, 19, 21, 6, 7], [8, 9, 10, 12, 13, 15, 18, 21, 6, 7], [8, 9, 10, 12, 15, 16, 18, 19, 21, 6, 7], [8, 9, 10, 12, 15, 16, 18, 21, 6, 7], [8, 9, 10, 12, 15, 18, 19, 21, 6, 7], [8, 9, 10, 12, 15, 18, 21, 6, 7], [8, 9, 12, 13, 15, 16, 18, 19, 21, 6, 7], [8, 9, 12, 13, 15, 16, 18, 21, 6, 7], [8, 9, 12, 13, 15, 18, 19, 21, 6, 7], [8, 9, 12, 13, 15, 18, 21, 6, 7], [9, 10, 12, 13, 15, 16, 18, 19, 21, 6, 7, 8], [9, 10, 12, 13, 15, 16, 18, 21, 6, 7, 8], [9, 10, 12, 13, 15, 18, 19, 21, 6, 7, 8], [9, 10, 12, 13, 15, 18, 21, 6, 7, 8], [9, 10, 12, 15, 16, 18, 19, 21, 6, 7, 8], [9, 10, 12, 15, 16, 18, 21, 6, 7, 8], [9, 10, 12, 15, 18, 19, 21, 6, 7, 8], [9, 10, 12, 15, 18, 21, 6, 7, 8], [9, 12, 13, 15, 16, 18, 19, 21, 6, 7, 8], [9, 12, 13, 15, 16, 18, 21, 6, 7, 8], [9, 12, 13, 15, 18, 19, 21, 6, 7, 8], [9, 12, 13, 15, 18, 21, 6, 7, 8], [10, 12, 13, 15, 16, 18, 19, 21, 6, 7, 8, 9], [10, 12, 13, 15, 16, 18, 21, 6, 7, 8, 9], [10, 12, 13, 15, 18, 19, 21, 6, 7, 8, 9], [10, 12, 13, 15, 18, 21, 6, 7, 8, 9], [10, 12, 15, 16, 18, 19, 21, 6, 7, 8, 9], [10, 12, 15, 16, 18, 21, 6, 7, 8, 9], [10, 12, 15, 18, 19, 21, 6, 7, 8, 9], [10, 12, 15, 18, 21, 6, 7, 8, 9], [12, 13, 15, 16, 18, 19, 21, 6, 7, 8, 9, 10], [12, 13, 15, 16, 18, 21, 6, 7, 8, 9, 10], [12, 13, 15, 18, 19, 21, 6, 7, 8, 9, 10], [12, 13, 15, 18, 21, 6, 7, 8, 9, 10], [12, 15, 16, 18, 19, 21, 6, 7, 8, 9, 10], [12, 15, 16, 18, 21, 6, 7, 8, 9, 10], [12, 15, 18, 19, 21, 6, 7, 8, 9, 10], [12, 15, 18, 21, 6, 7, 8, 9, 10], [13, 15, 16, 18, 19, 21, 6, 7, 8, 9, 10, 12], [13, 15, 16, 18, 19, 21, 6, 7, 8, 9, 12], [13, 15, 16, 18, 21, 6, 7, 8, 9, 10, 12], [13, 15, 16, 18, 21, 6, 7, 8, 9, 12], [13, 15, 18, 19, 21, 6, 7, 8, 9, 10, 12], [13, 15, 18, 19, 21, 6, 7, 8, 9, 12], [13, 15, 18, 21, 6, 7, 8, 9, 10, 12], [13, 15, 18, 21, 6, 7, 8, 9, 12], [15, 16, 18, 19, 21, 6, 7, 8, 9, 10, 12, 13], [15, 16, 18, 19, 21, 6, 7, 8, 9, 12, 13], [15, 16, 18, 21, 6, 7, 8, 9, 10, 12, 13], [15, 16, 18, 21, 6, 7, 8, 9, 12, 13], [15, 18, 19, 21, 6, 7, 8, 9, 10, 12, 13], [15, 18, 19, 21, 6, 7, 8, 9, 12, 13], [15, 18, 21, 6, 7, 8, 9, 10, 12, 13], [15, 18, 21, 6, 7, 8, 9, 12, 13], [16, 18, 19, 21, 6, 7, 8, 9, 10, 12, 13, 15], [16, 18, 19, 21, 6, 7, 8, 9, 10, 12, 15], [16, 18, 19, 21, 6, 7, 8, 9, 12, 13, 15], [16, 18, 21, 6, 7, 8, 9, 10, 12, 13, 15], [16, 18, 21, 6, 7, 8, 9, 10, 12, 15], [16, 18, 21, 6, 7, 8, 9, 12, 13, 15], [18, 19, 21, 6, 7, 8, 9, 10, 12, 13, 15, 16], [18, 19, 21, 6, 7, 8, 9, 10, 12, 15, 16], [18, 19, 21, 6, 7, 8, 9, 12, 13, 15, 16], [18, 21, 6, 7, 8, 9, 10, 12, 13, 15, 16], [18, 21, 6, 7, 8, 9, 10, 12, 15, 16], [18, 21, 6, 7, 8, 9, 12, 13, 15, 16], [19, 21, 6, 7, 8, 9, 10, 12, 13, 15, 16, 18], [19, 21, 6, 7, 8, 9, 10, 12, 13, 15, 18], [19, 21, 6, 7, 8, 9, 10, 12, 15, 16, 18], [19, 21, 6, 7, 8, 9, 10, 12, 15, 18], [19, 21, 6, 7, 8, 9, 12, 13, 15, 16, 18], [19, 21, 6, 7, 8, 9, 12, 13, 15, 18], [21, 6, 7, 8, 9, 10, 12, 13, 15, 16, 18, 19], [21, 6, 7, 8, 9, 10, 12, 13, 15, 18, 19], [21, 6, 7, 8, 9, 10, 12, 15, 16, 18, 19], [21, 6, 7, 8, 9, 10, 12, 15, 18, 19], [21, 6, 7, 8, 9, 12, 13, 15, 16, 18, 19], [21, 6, 7, 8, 9, 12, 13, 15, 18, 19], [1, 31, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 15, 16, 18, 19, 21], [1, 31, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 15, 16, 18, 21], [1, 31, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 15, 18, 19, 21], [1, 31, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 15, 18, 21], [1, 31, 3, 4, 5, 6, 7, 8, 9, 10, 12, 15, 16, 18, 19, 21], [1, 31, 3, 4, 5, 6, 7, 8, 9, 10, 12, 15, 16, 18, 21], [1, 31, 3, 4, 5, 6, 7, 8, 9, 10, 12, 15, 18, 19, 21], [1, 31, 3, 4, 5, 6, 7, 8, 9, 10, 12, 15, 18, 21], [1, 31, 3, 4, 5, 6, 7, 8, 9, 12, 13, 15, 16, 18, 19, 21], [1, 31, 3, 4, 5, 6, 7, 8, 9, 12, 13, 15, 16, 18, 21], [1, 31, 3, 4, 5, 6, 7, 8, 9, 12, 13, 15, 18, 19, 21], [1, 31, 3, 4, 5, 6, 7, 8, 9, 12, 13, 15, 18, 21]], "num_total_prime_paths": 170, "num_covered_paths": 42, "prime_path_coverage": 0.25, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_129_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_129_CFG.dot"}
{"humaneval_id": "HumanEval_112__0", "python_file": "HumanEval_112__0/main.py", "input_file": "HumanEval_112__0/input.txt", "prime_paths_nodes": [["1", "8", "3", "5"]], "prime_paths_statements": [["from typing import *\\ldef reverse_delete(s, c):...\\lreverse_delete('abcdedcba', 'v')\\l", "reverse_delete", "s = ''.join([char for char in s if char not in c])\\l", "return s, s[::-1] == s\\l"]], "prime_paths_linenumbers": [[1, 8, 5, 6]], "covered_statements_linenumbers": [1, 4, 5, 6, 8], "missing_statements_linenumbers": [], "covered_prime_paths_linenumbers": [[1, 8, 5, 6]], "missing_prime_paths_linenumbers": [], "num_total_prime_paths": 1, "num_covered_paths": 1, "prime_path_coverage": 1.0, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_112__0_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_112__0_CFG.dot"}
{"humaneval_id": "HumanEval_66__0", "python_file": "HumanEval_66__0/main.py", "input_file": "HumanEval_66__0/input.txt", "prime_paths_nodes": [["1", "9", "3", "4"], ["1", "9", "3", "5"]], "prime_paths_statements": [["from typing import *\\ldef digitSum(s):...\\ldigitSum('abcCd')\\l", "digitSum", "if s == '':\\l", "return 0\\l"], ["from typing import *\\ldef digitSum(s):...\\ldigitSum('abcCd')\\l", "digitSum", "if s == '':\\l", "return sum(ord(char) if char.isupper() else 0 for char in s)\\l"]], "prime_paths_linenumbers": [[1, 9, 5, 6], [1, 9, 5, 7]], "covered_statements_linenumbers": [1, 4, 5, 7, 9], "missing_statements_linenumbers": [6], "covered_prime_paths_linenumbers": [[1, 9, 5, 7]], "missing_prime_paths_linenumbers": [[1, 9, 5, 6]], "num_total_prime_paths": 2, "num_covered_paths": 1, "prime_path_coverage": 0.5, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_66__0_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_66__0_CFG.dot"}
{"humaneval_id": "HumanEval_68", "python_file": "HumanEval_68/main.py", "input_file": "HumanEval_68/input.txt", "prime_paths_nodes": [["1", "16", "3", "5"], ["1", "16", "3", "6", "10", "11"], ["1", "16", "3", "6", "10", "12"]], "prime_paths_statements": [["from typing import *\\ldef pluck(arr):...\\lpluck([4, 2, 3])\\l", "pluck", "if len(arr) == 0:\\l", "return []\\l"], ["from typing import *\\ldef pluck(arr):...\\lpluck([4, 2, 3])\\l", "pluck", "if len(arr) == 0:\\l", "evens = list(filter(lambda x: x % 2 == 0, arr))\\l", "if evens == []:\\l", "return []\\l"], ["from typing import *\\ldef pluck(arr):...\\lpluck([4, 2, 3])\\l", "pluck", "if len(arr) == 0:\\l", "evens = list(filter(lambda x: x % 2 == 0, arr))\\l", "if evens == []:\\l", "return [min(evens), arr.index(min(evens))]\\l"]], "prime_paths_linenumbers": [[1, 8, 3, 3], [1, 8, 3, 4, 5, 5], [1, 8, 3, 4, 5, 6]], "covered_statements_linenumbers": [1, 2, 3, 4, 5, 6, 8], "missing_statements_linenumbers": [], "covered_prime_paths_linenumbers": [[1, 8, 3, 3], [1, 8, 3, 4, 5, 5], [1, 8, 3, 4, 5, 6]], "missing_prime_paths_linenumbers": [], "num_total_prime_paths": 3, "num_covered_paths": 3, "prime_path_coverage": 1.0, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_68_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_68_CFG.dot"}
{"humaneval_id": "HumanEval_19__1", "python_file": "HumanEval_19__1/main.py", "input_file": "HumanEval_19__1/input.txt", "prime_paths_nodes": [["1", "7", "3", "4"]], "prime_paths_statements": [["from typing import *\\ldef sort_numbers(numbers: str) ->str:...\\lsort_numbers('three five nine')\\l", "sort_numbers", "value_map = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': \\l    5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\\l", "return ' '.join(sorted([x for ...' ') if x], key=lambda x:\\l    value_map[x]))\\l"]], "prime_paths_linenumbers": [[1, 20, 5, 17]], "covered_statements_linenumbers": [1, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 20], "missing_statements_linenumbers": [], "covered_prime_paths_linenumbers": [[1, 20, 5, 17]], "missing_prime_paths_linenumbers": [], "num_total_prime_paths": 1, "num_covered_paths": 1, "prime_path_coverage": 1.0, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_19__1_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_19__1_CFG.dot"}
{"humaneval_id": "HumanEval_145", "python_file": "HumanEval_145/main.py", "input_file": "HumanEval_145/input.txt", "prime_paths_nodes": [["5", "6", "7", "8", "11"], ["5", "6", "8", "11"], ["1", "17", "3", "14"]], "prime_paths_statements": [["neg = 1\\l", "if n < 0:\\l", "n, neg = -1 * n, -1\\l", "n = [int(i) for i in str(n)]\\ln[0] = n[0] * neg\\l", "return sum(n)\\l"], ["neg = 1\\l", "if n < 0:\\l", "n = [int(i) for i in str(n)]\\ln[0] = n[0] * neg\\l", "return sum(n)\\l"], ["from typing import *\\ldef order_by_points(nums):...\\lorder_by_points([1, 11, -1, -11, -12])\\l", "order_by_points", "def digits_sum(n):...\\l", "return sorted(nums, key=digits_sum)\\l"]], "prime_paths_linenumbers": [[4, 5, 5, 6, 7, 8], [4, 5, 6, 7, 8], [1, 11, 3, 9]], "covered_statements_linenumbers": [1, 2, 3, 4, 5, 6, 7, 8, 9, 11], "missing_statements_linenumbers": [], "covered_prime_paths_linenumbers": [[4, 5, 5, 6, 7, 8], [4, 5, 6, 7, 8], [1, 11, 3, 9]], "missing_prime_paths_linenumbers": [], "num_total_prime_paths": 3, "num_covered_paths": 3, "prime_path_coverage": 1.0, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_145_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_145_CFG.dot"}
{"humaneval_id": "HumanEval_122__1", "python_file": "HumanEval_122__1/main.py", "input_file": "HumanEval_122__1/input.txt", "prime_paths_nodes": [["1", "6", "3"]], "prime_paths_statements": [["from typing import *\\ldef add_elements(arr, k):...\\ladd_elements([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\\l", "add_elements", "return sum(elem for elem in arr[:k] if len(str(elem)) <= 2)\\l"]], "prime_paths_linenumbers": [[1, 7, 5]], "covered_statements_linenumbers": [1, 4, 5, 7], "missing_statements_linenumbers": [], "covered_prime_paths_linenumbers": [[1, 7, 5]], "missing_prime_paths_linenumbers": [], "num_total_prime_paths": 1, "num_covered_paths": 1, "prime_path_coverage": 1.0, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_122__1_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_122__1_CFG.dot"}
{"humaneval_id": "HumanEval_15__0", "python_file": "HumanEval_15__0/main.py", "input_file": "HumanEval_15__0/input.txt", "prime_paths_nodes": [["1", "6", "3"]], "prime_paths_statements": [["from typing import *\\ldef string_sequence(n: int) ->str:...\\lstring_sequence(3)\\l", "string_sequence", "return ' '.join([str(x) for x in range(n + 1)])\\l"]], "prime_paths_linenumbers": [[1, 7, 5]], "covered_statements_linenumbers": [1, 4, 5, 7], "missing_statements_linenumbers": [], "covered_prime_paths_linenumbers": [[1, 7, 5]], "missing_prime_paths_linenumbers": [], "num_total_prime_paths": 1, "num_covered_paths": 1, "prime_path_coverage": 1.0, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_15__0_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_15__0_CFG.dot"}
{"humaneval_id": "HumanEval_110__1", "python_file": "HumanEval_110__1/main.py", "input_file": "HumanEval_110__1/input.txt", "prime_paths_nodes": [["5", "4", "6", "9", "11"], ["5", "7", "4", "6", "9", "11"], ["5", "4", "6", "10", "13"], ["5", "7", "4", "6", "10", "13"], ["5", "4", "6", "10", "14"], ["5", "7", "4", "6", "10", "14"], ["7", "4", "5"], ["9", "6", "10", "13"], ["9", "11", "6", "10", "13"], ["9", "6", "10", "14"], ["9", "11", "6", "10", "14"], ["11", "6", "9"], ["1", "18", "3", "4", "5", "7"], ["1", "18", "3", "4", "6", "9", "11"], ["1", "18", "3", "4", "6", "10", "13"], ["1", "18", "3", "4", "6", "10", "14"]], "prime_paths_statements": [["if i % 2 == 1:\\l", "for i in lst1:\\l", "for i in lst2:\\l", "if i % 2 == 0:\\l", "even += 1\\l"], ["if i % 2 == 1:\\l", "odd += 1\\l", "for i in lst1:\\l", "for i in lst2:\\l", "if i % 2 == 0:\\l", "even += 1\\l"], ["if i % 2 == 1:\\l", "for i in lst1:\\l", "for i in lst2:\\l", "if even >= odd:\\l", "return 'YES'\\l"], ["if i % 2 == 1:\\l", "odd += 1\\l", "for i in lst1:\\l", "for i in lst2:\\l", "if even >= odd:\\l", "return 'YES'\\l"], ["if i % 2 == 1:\\l", "for i in lst1:\\l", "for i in lst2:\\l", "if even >= odd:\\l", "return 'NO'\\l"], ["if i % 2 == 1:\\l", "odd += 1\\l", "for i in lst1:\\l", "for i in lst2:\\l", "if even >= odd:\\l", "return 'NO'\\l"], ["odd += 1\\l", "for i in lst1:\\l", "if i % 2 == 1:\\l"], ["if i % 2 == 0:\\l", "for i in lst2:\\l", "if even >= odd:\\l", "return 'YES'\\l"], ["if i % 2 == 0:\\l", "even += 1\\l", "for i in lst2:\\l", "if even >= odd:\\l", "return 'YES'\\l"], ["if i % 2 == 0:\\l", "for i in lst2:\\l", "if even >= odd:\\l", "return 'NO'\\l"], ["if i % 2 == 0:\\l", "even += 1\\l", "for i in lst2:\\l", "if even >= odd:\\l", "return 'NO'\\l"], ["even += 1\\l", "for i in lst2:\\l", "if i % 2 == 0:\\l"], ["from typing import *\\ldef exchange(lst1, lst2):...\\lexchange([100, 200], [200, 200])\\l", "exchange", "odd = 0\\leven = 0\\l", "for i in lst1:\\l", "if i % 2 == 1:\\l", "odd += 1\\l"], ["from typing import *\\ldef exchange(lst1, lst2):...\\lexchange([100, 200], [200, 200])\\l", "exchange", "odd = 0\\leven = 0\\l", "for i in lst1:\\l", "for i in lst2:\\l", "if i % 2 == 0:\\l", "even += 1\\l"], ["from typing import *\\ldef exchange(lst1, lst2):...\\lexchange([100, 200], [200, 200])\\l", "exchange", "odd = 0\\leven = 0\\l", "for i in lst1:\\l", "for i in lst2:\\l", "if even >= odd:\\l", "return 'YES'\\l"], ["from typing import *\\ldef exchange(lst1, lst2):...\\lexchange([100, 200], [200, 200])\\l", "exchange", "odd = 0\\leven = 0\\l", "for i in lst1:\\l", "for i in lst2:\\l", "if even >= odd:\\l", "return 'NO'\\l"]], "prime_paths_linenumbers": [[8, 7, 10, 11, 12], [8, 9, 7, 10, 11, 12], [8, 7, 10, 13, 14], [8, 9, 7, 10, 13, 14], [8, 7, 10, 13, 15], [8, 9, 7, 10, 13, 15], [9, 7, 8], [11, 10, 13, 14], [11, 12, 10, 13, 14], [11, 10, 13, 15], [11, 12, 10, 13, 15], [12, 10, 11], [1, 17, 5, 6, 7, 8, 9], [1, 17, 5, 6, 7, 10, 11, 12], [1, 17, 5, 6, 7, 10, 13, 14], [1, 17, 5, 6, 7, 10, 13, 15]], "covered_statements_linenumbers": [1, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 17], "missing_statements_linenumbers": [9, 15], "covered_prime_paths_linenumbers": [[8, 7, 10, 11, 12], [8, 7, 10, 13, 14], [11, 10, 13, 14], [11, 12, 10, 13, 14], [12, 10, 11], [1, 17, 5, 6, 7, 10, 11, 12], [1, 17, 5, 6, 7, 10, 13, 14]], "missing_prime_paths_linenumbers": [[8, 9, 7, 10, 11, 12], [8, 9, 7, 10, 13, 14], [8, 7, 10, 13, 15], [8, 9, 7, 10, 13, 15], [9, 7, 8], [11, 10, 13, 15], [11, 12, 10, 13, 15], [1, 17, 5, 6, 7, 8, 9], [1, 17, 5, 6, 7, 10, 13, 15]], "num_total_prime_paths": 16, "num_covered_paths": 7, "prime_path_coverage": 0.44, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_110__1_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_110__1_CFG.dot"}
{"humaneval_id": "HumanEval_146__1", "python_file": "HumanEval_146__1/main.py", "input_file": "HumanEval_146__1/input.txt", "prime_paths_nodes": [["5", "4", "6"], ["5", "7", "10", "4", "6"], ["5", "7", "10", "11", "4", "6"], ["7", "10", "4", "5"], ["7", "10", "11", "4", "5"], ["10", "4", "5", "7"], ["10", "11", "4", "5", "7"], ["11", "4", "5", "7", "10"], ["1", "15", "3", "4", "6"], ["1", "15", "3", "4", "5", "7", "10", "11"]], "prime_paths_statements": [["if num > 10:\\l", "for num in nums:\\l", "return count\\l"], ["if num > 10:\\l", "odd_digits = 1, 3, 5, 7, 9\\lnumber_as_string = str(num)\\l", "if int(number_as_string[0]) in odd_digits and int(number_as_string[-1]\\l", "for num in nums:\\l", "return count\\l"], ["if num > 10:\\l", "odd_digits = 1, 3, 5, 7, 9\\lnumber_as_string = str(num)\\l", "if int(number_as_string[0]) in odd_digits and int(number_as_string[-1]\\l", "count += 1\\l", "for num in nums:\\l", "return count\\l"], ["odd_digits = 1, 3, 5, 7, 9\\lnumber_as_string = str(num)\\l", "if int(number_as_string[0]) in odd_digits and int(number_as_string[-1]\\l", "for num in nums:\\l", "if num > 10:\\l"], ["odd_digits = 1, 3, 5, 7, 9\\lnumber_as_string = str(num)\\l", "if int(number_as_string[0]) in odd_digits and int(number_as_string[-1]\\l", "count += 1\\l", "for num in nums:\\l", "if num > 10:\\l"], ["if int(number_as_string[0]) in odd_digits and int(number_as_string[-1]\\l", "for num in nums:\\l", "if num > 10:\\l", "odd_digits = 1, 3, 5, 7, 9\\lnumber_as_string = str(num)\\l"], ["if int(number_as_string[0]) in odd_digits and int(number_as_string[-1]\\l", "count += 1\\l", "for num in nums:\\l", "if num > 10:\\l", "odd_digits = 1, 3, 5, 7, 9\\lnumber_as_string = str(num)\\l"], ["count += 1\\l", "for num in nums:\\l", "if num > 10:\\l", "odd_digits = 1, 3, 5, 7, 9\\lnumber_as_string = str(num)\\l", "if int(number_as_string[0]) in odd_digits and int(number_as_string[-1]\\l"], ["from typing import *\\ldef specialFilter(nums):...\\lspecialFilter([])\\l", "specialFilter", "count = 0\\l", "for num in nums:\\l", "return count\\l"], ["from typing import *\\ldef specialFilter(nums):...\\lspecialFilter([])\\l", "specialFilter", "count = 0\\l", "for num in nums:\\l", "if num > 10:\\l", "odd_digits = 1, 3, 5, 7, 9\\lnumber_as_string = str(num)\\l", "if int(number_as_string[0]) in odd_digits and int(number_as_string[-1]\\l", "count += 1\\l"]], "prime_paths_linenumbers": [[8, 7, 15], [8, 9, 10, 11, 7, 15], [8, 9, 10, 11, 13, 7, 15], [9, 10, 11, 7, 8], [9, 10, 11, 13, 7, 8], [11, 7, 8, 9, 10], [11, 13, 7, 8, 9, 10], [13, 7, 8, 9, 10, 11], [1, 17, 6, 7, 15], [1, 17, 6, 7, 8, 9, 10, 11, 13]], "covered_statements_linenumbers": [1, 4, 6, 7, 15, 17], "missing_statements_linenumbers": [8, 9, 10, 11, 13], "covered_prime_paths_linenumbers": [[1, 17, 6, 7, 15]], "missing_prime_paths_linenumbers": [[8, 7, 15], [8, 9, 10, 11, 7, 15], [8, 9, 10, 11, 13, 7, 15], [9, 10, 11, 7, 8], [9, 10, 11, 13, 7, 8], [11, 7, 8, 9, 10], [11, 13, 7, 8, 9, 10], [13, 7, 8, 9, 10, 11], [1, 17, 6, 7, 8, 9, 10, 11, 13]], "num_total_prime_paths": 10, "num_covered_paths": 1, "prime_path_coverage": 0.1, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_146__1_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_146__1_CFG.dot"}
{"humaneval_id": "HumanEval_125", "python_file": "HumanEval_125/main.py", "input_file": "HumanEval_125/input.txt", "prime_paths_nodes": [["1", "14", "3", "4"], ["1", "14", "3", "6", "7"], ["1", "14", "3", "6", "9"]], "prime_paths_statements": [["from typing import *\\ldef split_words(txt):...\\lsplit_words('Hello world!')\\l", "split_words", "if ' ' in txt:\\l", "return txt.split()\\l"], ["from typing import *\\ldef split_words(txt):...\\lsplit_words('Hello world!')\\l", "split_words", "if ' ' in txt:\\l", "if ',' in txt:\\l", "return txt.replace(',', ' ').split()\\l"], ["from typing import *\\ldef split_words(txt):...\\lsplit_words('Hello world!')\\l", "split_words", "if ' ' in txt:\\l", "if ',' in txt:\\l", "return len([i for i in txt if i.islower() and ord(i) % 2 == 0])\\l"]], "prime_paths_linenumbers": [[1, 10, 3, 4], [1, 10, 3, 5, 6], [1, 10, 3, 5, 8]], "covered_statements_linenumbers": [1, 2, 3, 4, 10], "missing_statements_linenumbers": [5, 6, 8], "covered_prime_paths_linenumbers": [[1, 10, 3, 4]], "missing_prime_paths_linenumbers": [[1, 10, 3, 5, 6], [1, 10, 3, 5, 8]], "num_total_prime_paths": 3, "num_covered_paths": 1, "prime_path_coverage": 0.33, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_125_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_125_CFG.dot"}
{"humaneval_id": "HumanEval_161__1", "python_file": "HumanEval_161__1/main.py", "input_file": "HumanEval_161__1/input.txt", "prime_paths_nodes": [["6", "9", "10", "5", "7", "12", "13"], ["6", "10", "5", "7", "12", "13"], ["6", "9", "10", "5", "7", "12", "14", "15"], ["6", "10", "5", "7", "12", "14", "15"], ["6", "9", "10", "5", "7", "12", "14", "16"], ["6", "10", "5", "7", "12", "14", "16"], ["9", "10", "5", "6"], ["10", "5", "6", "9"], ["13", "12", "14", "15"], ["13", "12", "14", "16"], ["1", "20", "3", "5", "6", "9", "10"], ["1", "20", "3", "5", "6", "10"], ["1", "20", "3", "5", "7", "12", "13"], ["1", "20", "3", "5", "7", "12", "14", "15"], ["1", "20", "3", "5", "7", "12", "14", "16"]], "prime_paths_statements": [["if i.isalpha():\\l", "new_str[idx] = i.swapcase()\\lflg = 1\\l", "idx += 1\\l", "for i in s:\\l", "s = ''\\l", "for i in new_str:\\l", "s += i\\l"], ["if i.isalpha():\\l", "idx += 1\\l", "for i in s:\\l", "s = ''\\l", "for i in new_str:\\l", "s += i\\l"], ["if i.isalpha():\\l", "new_str[idx] = i.swapcase()\\lflg = 1\\l", "idx += 1\\l", "for i in s:\\l", "s = ''\\l", "for i in new_str:\\l", "if flg == 0:\\l", "return s[len(s)::-1]\\l"], ["if i.isalpha():\\l", "idx += 1\\l", "for i in s:\\l", "s = ''\\l", "for i in new_str:\\l", "if flg == 0:\\l", "return s[len(s)::-1]\\l"], ["if i.isalpha():\\l", "new_str[idx] = i.swapcase()\\lflg = 1\\l", "idx += 1\\l", "for i in s:\\l", "s = ''\\l", "for i in new_str:\\l", "if flg == 0:\\l", "return s\\l"], ["if i.isalpha():\\l", "idx += 1\\l", "for i in s:\\l", "s = ''\\l", "for i in new_str:\\l", "if flg == 0:\\l", "return s\\l"], ["new_str[idx] = i.swapcase()\\lflg = 1\\l", "idx += 1\\l", "for i in s:\\l", "if i.isalpha():\\l"], ["idx += 1\\l", "for i in s:\\l", "if i.isalpha():\\l", "new_str[idx] = i.swapcase()\\lflg = 1\\l"], ["s += i\\l", "for i in new_str:\\l", "if flg == 0:\\l", "return s[len(s)::-1]\\l"], ["s += i\\l", "for i in new_str:\\l", "if flg == 0:\\l", "return s\\l"], ["from typing import *\\ldef solve(s):...\\lsolve('ab')\\l", "solve", "flg = 0\\lidx = 0\\lnew_str = list(s)\\l", "for i in s:\\l", "if i.isalpha():\\l", "new_str[idx] = i.swapcase()\\lflg = 1\\l", "idx += 1\\l"], ["from typing import *\\ldef solve(s):...\\lsolve('ab')\\l", "solve", "flg = 0\\lidx = 0\\lnew_str = list(s)\\l", "for i in s:\\l", "if i.isalpha():\\l", "idx += 1\\l"], ["from typing import *\\ldef solve(s):...\\lsolve('ab')\\l", "solve", "flg = 0\\lidx = 0\\lnew_str = list(s)\\l", "for i in s:\\l", "s = ''\\l", "for i in new_str:\\l", "s += i\\l"], ["from typing import *\\ldef solve(s):...\\lsolve('ab')\\l", "solve", "flg = 0\\lidx = 0\\lnew_str = list(s)\\l", "for i in s:\\l", "s = ''\\l", "for i in new_str:\\l", "if flg == 0:\\l", "return s[len(s)::-1]\\l"], ["from typing import *\\ldef solve(s):...\\lsolve('ab')\\l", "solve", "flg = 0\\lidx = 0\\lnew_str = list(s)\\l", "for i in s:\\l", "s = ''\\l", "for i in new_str:\\l", "if flg == 0:\\l", "return s\\l"]], "prime_paths_linenumbers": [[9, 10, 11, 12, 8, 13, 14, 15], [9, 12, 8, 13, 14, 15], [9, 10, 11, 12, 8, 13, 14, 16, 17], [9, 12, 8, 13, 14, 16, 17], [9, 10, 11, 12, 8, 13, 14, 16, 18], [9, 12, 8, 13, 14, 16, 18], [10, 11, 12, 8, 9], [12, 8, 9, 10, 11], [15, 14, 16, 17], [15, 14, 16, 18], [1, 20, 5, 6, 7, 8, 9, 10, 11, 12], [1, 20, 5, 6, 7, 8, 9, 12], [1, 20, 5, 6, 7, 8, 13, 14, 15], [1, 20, 5, 6, 7, 8, 13, 14, 16, 17], [1, 20, 5, 6, 7, 8, 13, 14, 16, 18]], "covered_statements_linenumbers": [1, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 20], "missing_statements_linenumbers": [17], "covered_prime_paths_linenumbers": [[9, 10, 11, 12, 8, 13, 14, 15], [9, 12, 8, 13, 14, 15], [9, 10, 11, 12, 8, 13, 14, 16, 18], [9, 12, 8, 13, 14, 16, 18], [10, 11, 12, 8, 9], [12, 8, 9, 10, 11], [15, 14, 16, 18], [1, 20, 5, 6, 7, 8, 9, 10, 11, 12], [1, 20, 5, 6, 7, 8, 9, 12], [1, 20, 5, 6, 7, 8, 13, 14, 15], [1, 20, 5, 6, 7, 8, 13, 14, 16, 18]], "missing_prime_paths_linenumbers": [[9, 10, 11, 12, 8, 13, 14, 16, 17], [9, 12, 8, 13, 14, 16, 17], [15, 14, 16, 17], [1, 20, 5, 6, 7, 8, 13, 14, 16, 17]], "num_total_prime_paths": 15, "num_covered_paths": 11, "prime_path_coverage": 0.73, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_161__1_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_161__1_CFG.dot"}
{"humaneval_id": "HumanEval_15", "python_file": "HumanEval_15/main.py", "input_file": "HumanEval_15/input.txt", "prime_paths_nodes": [["1", "6", "3"]], "prime_paths_statements": [["from typing import *\\ldef string_sequence(n: int) ->str:...\\lstring_sequence(0)\\l", "string_sequence", "return ' '.join([str(x) for x in range(n + 1)])\\l"]], "prime_paths_linenumbers": [[1, 5, 3]], "covered_statements_linenumbers": [1, 2, 3, 5], "missing_statements_linenumbers": [], "covered_prime_paths_linenumbers": [[1, 5, 3]], "missing_prime_paths_linenumbers": [], "num_total_prime_paths": 1, "num_covered_paths": 1, "prime_path_coverage": 1.0, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_15_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_15_CFG.dot"}
{"humaneval_id": "HumanEval_83__1", "python_file": "HumanEval_83__1/main.py", "input_file": "HumanEval_83__1/input.txt", "prime_paths_nodes": [["1", "9", "3", "4"], ["1", "9", "3", "5"]], "prime_paths_statements": [["from typing import *\\ldef starts_one_ends(n):...\\lstarts_one_ends(2)\\l", "starts_one_ends", "if n == 1:\\l", "return 1\\l"], ["from typing import *\\ldef starts_one_ends(n):...\\lstarts_one_ends(2)\\l", "starts_one_ends", "if n == 1:\\l", "return 18 * 10 ** (n - 2)\\l"]], "prime_paths_linenumbers": [[1, 9, 5, 6], [1, 9, 5, 7]], "covered_statements_linenumbers": [1, 4, 5, 7, 9], "missing_statements_linenumbers": [6], "covered_prime_paths_linenumbers": [[1, 9, 5, 7]], "missing_prime_paths_linenumbers": [[1, 9, 5, 6]], "num_total_prime_paths": 2, "num_covered_paths": 1, "prime_path_coverage": 0.5, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_83__1_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_83__1_CFG.dot"}
{"humaneval_id": "HumanEval_18", "python_file": "HumanEval_18/main.py", "input_file": "HumanEval_18/input.txt", "prime_paths_nodes": [["8", "4", "9"], ["8", "11", "4", "9"], ["11", "4", "8"], ["1", "15", "3", "4", "9"], ["1", "15", "3", "4", "8", "11"]], "prime_paths_statements": [["if string[i:i + len(substring)] == substring:\\l", "for i in range(len(string) - len(substring) + 1):\\l", "return times\\l"], ["if string[i:i + len(substring)] == substring:\\l", "times += 1\\l", "for i in range(len(string) - len(substring) + 1):\\l", "return times\\l"], ["times += 1\\l", "for i in range(len(string) - len(substring) + 1):\\l", "if string[i:i + len(substring)] == substring:\\l"], ["from typing import *\\ldef how_many_times(string: str, substring: str) ->int:...\\lhow_many_times('', 'x')\\l", "how_many_times", "times = 0\\l", "for i in range(len(string) - len(substring) + 1):\\l", "return times\\l"], ["from typing import *\\ldef how_many_times(string: str, substring: str) ->int:...\\lhow_many_times('', 'x')\\l", "how_many_times", "times = 0\\l", "for i in range(len(string) - len(substring) + 1):\\l", "if string[i:i + len(substring)] == substring:\\l", "times += 1\\l"]], "prime_paths_linenumbers": [[6, 5, 9], [6, 7, 5, 9], [7, 5, 6], [1, 11, 3, 5, 9], [1, 11, 3, 5, 6, 7]], "covered_statements_linenumbers": [1, 2, 3, 5, 9, 11], "missing_statements_linenumbers": [6, 7], "covered_prime_paths_linenumbers": [[1, 11, 3, 5, 9]], "missing_prime_paths_linenumbers": [[6, 5, 9], [6, 7, 5, 9], [7, 5, 6], [1, 11, 3, 5, 6, 7]], "num_total_prime_paths": 5, "num_covered_paths": 1, "prime_path_coverage": 0.2, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_18_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_18_CFG.dot"}
{"humaneval_id": "HumanEval_57", "python_file": "HumanEval_57/main.py", "input_file": "HumanEval_57/input.txt", "prime_paths_nodes": [["1", "9", "3", "4"], ["1", "9", "3", "5"]], "prime_paths_statements": [["from typing import *\\ldef monotonic(l: list):...\\lmonotonic([1, 2, 4, 10])\\l", "monotonic", "if l == sorted(l) or l == sorted(l, reverse=True):\\l", "return True\\l"], ["from typing import *\\ldef monotonic(l: list):...\\lmonotonic([1, 2, 4, 10])\\l", "monotonic", "if l == sorted(l) or l == sorted(l, reverse=True):\\l", "return False\\l"]], "prime_paths_linenumbers": [[1, 7, 3, 4], [1, 7, 3, 5]], "covered_statements_linenumbers": [1, 2, 3, 4, 7], "missing_statements_linenumbers": [5], "covered_prime_paths_linenumbers": [[1, 7, 3, 4]], "missing_prime_paths_linenumbers": [[1, 7, 3, 5]], "num_total_prime_paths": 2, "num_covered_paths": 1, "prime_path_coverage": 0.5, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_57_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_57_CFG.dot"}
{"humaneval_id": "HumanEval_45", "python_file": "HumanEval_45/main.py", "input_file": "HumanEval_45/input.txt", "prime_paths_nodes": [["1", "6", "3"]], "prime_paths_statements": [["from typing import *\\ldef triangle_area(a, h):...\\ltriangle_area(5, 3)\\l", "triangle_area", "return a * h / 2.0\\l"]], "prime_paths_linenumbers": [[1, 5, 3]], "covered_statements_linenumbers": [1, 2, 3, 5], "missing_statements_linenumbers": [], "covered_prime_paths_linenumbers": [[1, 5, 3]], "missing_prime_paths_linenumbers": [], "num_total_prime_paths": 1, "num_covered_paths": 1, "prime_path_coverage": 1.0, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_45_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_45_CFG.dot"}
{"humaneval_id": "HumanEval_46__0", "python_file": "HumanEval_46__0/main.py", "input_file": "HumanEval_46__0/input.txt", "prime_paths_nodes": [["9", "6", "10"], ["1", "15", "3", "4", "5"], ["1", "15", "3", "4", "6", "9"], ["1", "15", "3", "4", "6", "10"]], "prime_paths_statements": [["results.append(results[-1] + results[-2] + results[-3] + results[-4])\\lresults.pop(0)\\l", "for _ in range(4, n + 1):\\l", "return results[-1]\\l"], ["from typing import *\\ldef fib4(n: int):...\\lfib4(10)\\l", "fib4", "results = [0, 0, 2, 0]\\l", "if n < 4:\\l", "return results[n]\\l"], ["from typing import *\\ldef fib4(n: int):...\\lfib4(10)\\l", "fib4", "results = [0, 0, 2, 0]\\l", "if n < 4:\\l", "for _ in range(4, n + 1):\\l", "results.append(results[-1] + results[-2] + results[-3] + results[-4])\\lresults.pop(0)\\l"], ["from typing import *\\ldef fib4(n: int):...\\lfib4(10)\\l", "fib4", "results = [0, 0, 2, 0]\\l", "if n < 4:\\l", "for _ in range(4, n + 1):\\l", "return results[-1]\\l"]], "prime_paths_linenumbers": [[10, 11, 9, 13], [1, 15, 5, 6, 7], [1, 15, 5, 6, 9, 10, 11], [1, 15, 5, 6, 9, 13]], "covered_statements_linenumbers": [1, 4, 5, 6, 9, 10, 11, 13, 15], "missing_statements_linenumbers": [7], "covered_prime_paths_linenumbers": [[10, 11, 9, 13], [1, 15, 5, 6, 9, 10, 11], [1, 15, 5, 6, 9, 13]], "missing_prime_paths_linenumbers": [[1, 15, 5, 6, 7]], "num_total_prime_paths": 4, "num_covered_paths": 3, "prime_path_coverage": 0.75, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_46__0_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_46__0_CFG.dot"}
{"humaneval_id": "HumanEval_1__1", "python_file": "HumanEval_1__1/main.py", "input_file": "HumanEval_1__1/input.txt", "prime_paths_nodes": [["5", "7", "4", "6"], ["5", "9", "4", "6"], ["5", "9", "10", "13", "4", "6"], ["5", "9", "10", "13", "14", "4", "6"], ["7", "4", "5", "9", "10", "13", "14"], ["9", "4", "5", "7"], ["9", "10", "13", "4", "5", "7"], ["9", "10", "13", "14", "4", "5", "7"], ["10", "13", "4", "5", "9"], ["10", "13", "14", "4", "5", "9"], ["13", "4", "5", "9", "10"], ["13", "14", "4", "5", "9", "10"], ["14", "4", "5", "9", "10", "13"], ["1", "22", "3", "4", "6"], ["1", "22", "3", "4", "5", "7"], ["1", "22", "3", "4", "5", "9", "10", "13", "14"]], "prime_paths_statements": [["if c == '(':\\l", "current_depth += 1\\lcurrent_string.append(c)\\l", "for c in paren_string:\\l", "return result\\l"], ["if c == '(':\\l", "if c == ')':\\l", "for c in paren_string:\\l", "return result\\l"], ["if c == '(':\\l", "if c == ')':\\l", "current_depth -= 1\\lcurrent_string.append(c)\\l", "if current_depth == 0:\\l", "for c in paren_string:\\l", "return result\\l"], ["if c == '(':\\l", "if c == ')':\\l", "current_depth -= 1\\lcurrent_string.append(c)\\l", "if current_depth == 0:\\l", "result.append(''.join(current_string))\\lcurrent_string.clear()\\l", "for c in paren_string:\\l", "return result\\l"], ["current_depth += 1\\lcurrent_string.append(c)\\l", "for c in paren_string:\\l", "if c == '(':\\l", "if c == ')':\\l", "current_depth -= 1\\lcurrent_string.append(c)\\l", "if current_depth == 0:\\l", "result.append(''.join(current_string))\\lcurrent_string.clear()\\l"], ["if c == ')':\\l", "for c in paren_string:\\l", "if c == '(':\\l", "current_depth += 1\\lcurrent_string.append(c)\\l"], ["if c == ')':\\l", "current_depth -= 1\\lcurrent_string.append(c)\\l", "if current_depth == 0:\\l", "for c in paren_string:\\l", "if c == '(':\\l", "current_depth += 1\\lcurrent_string.append(c)\\l"], ["if c == ')':\\l", "current_depth -= 1\\lcurrent_string.append(c)\\l", "if current_depth == 0:\\l", "result.append(''.join(current_string))\\lcurrent_string.clear()\\l", "for c in paren_string:\\l", "if c == '(':\\l", "current_depth += 1\\lcurrent_string.append(c)\\l"], ["current_depth -= 1\\lcurrent_string.append(c)\\l", "if current_depth == 0:\\l", "for c in paren_string:\\l", "if c == '(':\\l", "if c == ')':\\l"], ["current_depth -= 1\\lcurrent_string.append(c)\\l", "if current_depth == 0:\\l", "result.append(''.join(current_string))\\lcurrent_string.clear()\\l", "for c in paren_string:\\l", "if c == '(':\\l", "if c == ')':\\l"], ["if current_depth == 0:\\l", "for c in paren_string:\\l", "if c == '(':\\l", "if c == ')':\\l", "current_depth -= 1\\lcurrent_string.append(c)\\l"], ["if current_depth == 0:\\l", "result.append(''.join(current_string))\\lcurrent_string.clear()\\l", "for c in paren_string:\\l", "if c == '(':\\l", "if c == ')':\\l", "current_depth -= 1\\lcurrent_string.append(c)\\l"], ["result.append(''.join(current_string))\\lcurrent_string.clear()\\l", "for c in paren_string:\\l", "if c == '(':\\l", "if c == ')':\\l", "current_depth -= 1\\lcurrent_string.append(c)\\l", "if current_depth == 0:\\l"], ["from typing import *\\ldef separate_paren_groups(paren_string: str) ->List[str]:...\\lseparate_paren_groups('()()((((()()((()))))...')\\l", "separate_paren_groups", "result = []\\lcurrent_string = []\\lcurrent_depth = 0\\l", "for c in paren_string:\\l", "return result\\l"], ["from typing import *\\ldef separate_paren_groups(paren_string: str) ->List[str]:...\\lseparate_paren_groups('()()((((()()((()))))...')\\l", "separate_paren_groups", "result = []\\lcurrent_string = []\\lcurrent_depth = 0\\l", "for c in paren_string:\\l", "if c == '(':\\l", "current_depth += 1\\lcurrent_string.append(c)\\l"], ["from typing import *\\ldef separate_paren_groups(paren_string: str) ->List[str]:...\\lseparate_paren_groups('()()((((()()((()))))...')\\l", "separate_paren_groups", "result = []\\lcurrent_string = []\\lcurrent_depth = 0\\l", "for c in paren_string:\\l", "if c == '(':\\l", "if c == ')':\\l", "current_depth -= 1\\lcurrent_string.append(c)\\l", "if current_depth == 0:\\l", "result.append(''.join(current_string))\\lcurrent_string.clear()\\l"]], "prime_paths_linenumbers": [[10, 11, 12, 9, 21], [10, 13, 9, 21], [10, 13, 14, 15, 17, 9, 21], [10, 13, 14, 15, 17, 18, 19, 9, 21], [11, 12, 9, 10, 13, 14, 15, 17, 18, 19], [13, 9, 10, 11, 12], [13, 14, 15, 17, 9, 10, 11, 12], [13, 14, 15, 17, 18, 19, 9, 10, 11, 12], [14, 15, 17, 9, 10, 13], [14, 15, 17, 18, 19, 9, 10, 13], [17, 9, 10, 13, 14, 15], [17, 18, 19, 9, 10, 13, 14, 15], [18, 19, 9, 10, 13, 14, 15, 17], [1, 23, 5, 6, 7, 9, 21], [1, 23, 5, 6, 7, 9, 10, 11, 12], [1, 23, 5, 6, 7, 9, 10, 13, 14, 15, 17, 18, 19]], "covered_statements_linenumbers": [1, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 21, 23], "missing_statements_linenumbers": [], "covered_prime_paths_linenumbers": [[10, 11, 12, 9, 21], [10, 13, 9, 21], [10, 13, 14, 15, 17, 9, 21], [10, 13, 14, 15, 17, 18, 19, 9, 21], [11, 12, 9, 10, 13, 14, 15, 17, 18, 19], [13, 9, 10, 11, 12], [13, 14, 15, 17, 9, 10, 11, 12], [13, 14, 15, 17, 18, 19, 9, 10, 11, 12], [14, 15, 17, 9, 10, 13], [14, 15, 17, 18, 19, 9, 10, 13], [17, 9, 10, 13, 14, 15], [17, 18, 19, 9, 10, 13, 14, 15], [18, 19, 9, 10, 13, 14, 15, 17], [1, 23, 5, 6, 7, 9, 21], [1, 23, 5, 6, 7, 9, 10, 11, 12], [1, 23, 5, 6, 7, 9, 10, 13, 14, 15, 17, 18, 19]], "missing_prime_paths_linenumbers": [], "num_total_prime_paths": 16, "num_covered_paths": 16, "prime_path_coverage": 1.0, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_1__1_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_1__1_CFG.dot"}
{"humaneval_id": "HumanEval_9", "python_file": "HumanEval_9/main.py", "input_file": "HumanEval_9/input.txt", "prime_paths_nodes": [["5", "7", "8", "4", "6"], ["5", "9", "8", "4", "6"], ["7", "8", "4", "5", "9"], ["9", "8", "4", "5", "7"], ["1", "14", "3", "4", "6"], ["1", "14", "3", "4", "5", "7", "8"], ["1", "14", "3", "4", "5", "9", "8"]], "prime_paths_statements": [["if running_max is None:\\l", "running_max = n\\l", "result.append(running_max)\\l", "for n in numbers:\\l", "return result\\l"], ["if running_max is None:\\l", "running_max = max(running_max, n)\\l", "result.append(running_max)\\l", "for n in numbers:\\l", "return result\\l"], ["running_max = n\\l", "result.append(running_max)\\l", "for n in numbers:\\l", "if running_max is None:\\l", "running_max = max(running_max, n)\\l"], ["running_max = max(running_max, n)\\l", "result.append(running_max)\\l", "for n in numbers:\\l", "if running_max is None:\\l", "running_max = n\\l"], ["from typing import *\\ldef rolling_max(numbers: List[int]) ->List[int]:...\\lrolling_max([3, 2, 3, 100, 3])\\l", "rolling_max", "running_max = None\\lresult = []\\l", "for n in numbers:\\l", "return result\\l"], ["from typing import *\\ldef rolling_max(numbers: List[int]) ->List[int]:...\\lrolling_max([3, 2, 3, 100, 3])\\l", "rolling_max", "running_max = None\\lresult = []\\l", "for n in numbers:\\l", "if running_max is None:\\l", "running_max = n\\l", "result.append(running_max)\\l"], ["from typing import *\\ldef rolling_max(numbers: List[int]) ->List[int]:...\\lrolling_max([3, 2, 3, 100, 3])\\l", "rolling_max", "running_max = None\\lresult = []\\l", "for n in numbers:\\l", "if running_max is None:\\l", "running_max = max(running_max, n)\\l", "result.append(running_max)\\l"]], "prime_paths_linenumbers": [[7, 8, 12, 6, 14], [7, 10, 12, 6, 14], [8, 12, 6, 7, 10], [10, 12, 6, 7, 8], [1, 16, 3, 4, 6, 14], [1, 16, 3, 4, 6, 7, 8, 12], [1, 16, 3, 4, 6, 7, 10, 12]], "covered_statements_linenumbers": [1, 2, 3, 4, 6, 7, 8, 10, 12, 14, 16], "missing_statements_linenumbers": [], "covered_prime_paths_linenumbers": [[7, 8, 12, 6, 14], [7, 10, 12, 6, 14], [8, 12, 6, 7, 10], [10, 12, 6, 7, 8], [1, 16, 3, 4, 6, 14], [1, 16, 3, 4, 6, 7, 8, 12], [1, 16, 3, 4, 6, 7, 10, 12]], "missing_prime_paths_linenumbers": [], "num_total_prime_paths": 7, "num_covered_paths": 7, "prime_path_coverage": 1.0, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_9_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_9_CFG.dot"}
{"humaneval_id": "HumanEval_113__0", "python_file": "HumanEval_113__0/main.py", "input_file": "HumanEval_113__0/input.txt", "prime_paths_nodes": [["5", "4", "6"], ["1", "16", "3", "4", "5"], ["1", "16", "3", "4", "6"]], "prime_paths_statements": [["n = sum(int(d) % 2 == 1 for d in arr)\\lres.append('the number of odd el...' + str(n) + 'n the str' + str(n) +\\l    'ng ' + str(n) + ' of the ' + str(n) + 'nput.')\\l", "for arr in lst:\\l", "return res\\l"], ["from typing import *\\ldef odd_count(lst):...\\lodd_count(['3', '11111111'])\\l", "odd_count", "res = []\\l", "for arr in lst:\\l", "n = sum(int(d) % 2 == 1 for d in arr)\\lres.append('the number of odd el...' + str(n) + 'n the str' + str(n) +\\l    'ng ' + str(n) + ' of the ' + str(n) + 'nput.')\\l"], ["from typing import *\\ldef odd_count(lst):...\\lodd_count(['3', '11111111'])\\l", "odd_count", "res = []\\l", "for arr in lst:\\l", "return res\\l"]], "prime_paths_linenumbers": [[7, 8, 6, 18], [1, 20, 5, 6, 7, 8], [1, 20, 5, 6, 18]], "covered_statements_linenumbers": [1, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 20], "missing_statements_linenumbers": [], "covered_prime_paths_linenumbers": [[7, 8, 6, 18], [1, 20, 5, 6, 7, 8], [1, 20, 5, 6, 18]], "missing_prime_paths_linenumbers": [], "num_total_prime_paths": 3, "num_covered_paths": 3, "prime_path_coverage": 1.0, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_113__0_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_113__0_CFG.dot"}
{"humaneval_id": "HumanEval_63", "python_file": "HumanEval_63/main.py", "input_file": "HumanEval_63/input.txt", "prime_paths_nodes": [["1", "15", "3", "4"], ["1", "15", "3", "5", "7"], ["1", "15", "3", "5", "8", "10"], ["1", "15", "3", "5", "8", "11"]], "prime_paths_statements": [["from typing import *\\ldef fibfib(n: int):...\\lfibfib(2)\\l", "fibfib", "if n == 0:\\l", "return 0\\l"], ["from typing import *\\ldef fibfib(n: int):...\\lfibfib(2)\\l", "fibfib", "if n == 0:\\l", "if n == 1:\\l", "return 0\\l"], ["from typing import *\\ldef fibfib(n: int):...\\lfibfib(2)\\l", "fibfib", "if n == 0:\\l", "if n == 1:\\l", "if n == 2:\\l", "return 1\\l"], ["from typing import *\\ldef fibfib(n: int):...\\lfibfib(2)\\l", "fibfib", "if n == 0:\\l", "if n == 1:\\l", "if n == 2:\\l", "return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\\l"]], "prime_paths_linenumbers": [[1, 11, 3, 4], [1, 11, 3, 5, 6], [1, 11, 3, 5, 7, 8], [1, 11, 3, 5, 7, 9]], "covered_statements_linenumbers": [1, 2, 3, 5, 7, 8, 11], "missing_statements_linenumbers": [4, 6, 9], "covered_prime_paths_linenumbers": [[1, 11, 3, 5, 7, 8]], "missing_prime_paths_linenumbers": [[1, 11, 3, 4], [1, 11, 3, 5, 6], [1, 11, 3, 5, 7, 9]], "num_total_prime_paths": 4, "num_covered_paths": 1, "prime_path_coverage": 0.25, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_63_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_63_CFG.dot"}
{"humaneval_id": "HumanEval_125__0", "python_file": "HumanEval_125__0/main.py", "input_file": "HumanEval_125__0/input.txt", "prime_paths_nodes": [["1", "14", "3", "4"], ["1", "14", "3", "6", "7"], ["1", "14", "3", "6", "9"]], "prime_paths_statements": [["from typing import *\\ldef split_words(txt):...\\lsplit_words('')\\l", "split_words", "if ' ' in txt:\\l", "return txt.split()\\l"], ["from typing import *\\ldef split_words(txt):...\\lsplit_words('')\\l", "split_words", "if ' ' in txt:\\l", "if ',' in txt:\\l", "return txt.replace(',', ' ').split()\\l"], ["from typing import *\\ldef split_words(txt):...\\lsplit_words('')\\l", "split_words", "if ' ' in txt:\\l", "if ',' in txt:\\l", "return len([i for i in txt if i.islower() and ord(i) % 2 == 0])\\l"]], "prime_paths_linenumbers": [[1, 12, 5, 6], [1, 12, 5, 7, 8], [1, 12, 5, 7, 10]], "covered_statements_linenumbers": [1, 4, 5, 7, 10, 12], "missing_statements_linenumbers": [6, 8], "covered_prime_paths_linenumbers": [[1, 12, 5, 7, 10]], "missing_prime_paths_linenumbers": [[1, 12, 5, 6], [1, 12, 5, 7, 8]], "num_total_prime_paths": 3, "num_covered_paths": 1, "prime_path_coverage": 0.33, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_125__0_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_125__0_CFG.dot"}
{"humaneval_id": "HumanEval_136__1", "python_file": "HumanEval_136__1/main.py", "input_file": "HumanEval_136__1/input.txt", "prime_paths_nodes": [["1", "11", "3", "8"]], "prime_paths_statements": [["from typing import *\\ldef largest_smallest_integers(lst):...\\llargest_smallest_integers([-1, -3, -5, -6])\\l", "largest_smallest_integers", "smallest = list(filter(lambda x: x < 0, lst))\\llargest = list(filter(lambda x: x > 0, lst))\\l", "return max(smallest) if smallest else None, min(largest) if largest else None\\l"]], "prime_paths_linenumbers": [[1, 10, 5, 6, 7]], "covered_statements_linenumbers": [1, 4, 5, 6, 7, 8, 10], "missing_statements_linenumbers": [], "covered_prime_paths_linenumbers": [[1, 10, 5, 6, 7]], "missing_prime_paths_linenumbers": [], "num_total_prime_paths": 1, "num_covered_paths": 1, "prime_path_coverage": 1.0, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_136__1_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_136__1_CFG.dot"}
{"humaneval_id": "HumanEval_66", "python_file": "HumanEval_66/main.py", "input_file": "HumanEval_66/input.txt", "prime_paths_nodes": [["1", "9", "3", "4"], ["1", "9", "3", "5"]], "prime_paths_statements": [["from typing import *\\ldef digitSum(s):...\\ldigitSum('You arE Very Smart')\\l", "digitSum", "if s == '':\\l", "return 0\\l"], ["from typing import *\\ldef digitSum(s):...\\ldigitSum('You arE Very Smart')\\l", "digitSum", "if s == '':\\l", "return sum(ord(char) if char.isupper() else 0 for char in s)\\l"]], "prime_paths_linenumbers": [[1, 5, 3, 3], [1, 5, 3, 4]], "covered_statements_linenumbers": [1, 2, 3, 4, 5], "missing_statements_linenumbers": [], "covered_prime_paths_linenumbers": [[1, 5, 3, 3], [1, 5, 3, 4]], "missing_prime_paths_linenumbers": [], "num_total_prime_paths": 2, "num_covered_paths": 2, "prime_path_coverage": 1.0, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_66_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_66_CFG.dot"}
{"humaneval_id": "HumanEval_23__1", "python_file": "HumanEval_23__1/main.py", "input_file": "HumanEval_23__1/input.txt", "prime_paths_nodes": [["1", "6", "3"]], "prime_paths_statements": [["from typing import *\\ldef strlen(string: str) ->int:...\\lstrlen('')\\l", "strlen", "return len(string)\\l"]], "prime_paths_linenumbers": [[1, 7, 5]], "covered_statements_linenumbers": [1, 4, 5, 7], "missing_statements_linenumbers": [], "covered_prime_paths_linenumbers": [[1, 7, 5]], "missing_prime_paths_linenumbers": [], "num_total_prime_paths": 1, "num_covered_paths": 1, "prime_path_coverage": 1.0, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_23__1_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_23__1_CFG.dot"}
{"humaneval_id": "HumanEval_153__1", "python_file": "HumanEval_153__1/main.py", "input_file": "HumanEval_153__1/input.txt", "prime_paths_nodes": [["11", "19", "10", "12", "22"], ["11", "19", "20", "10", "12", "22"], ["19", "10", "11"], ["19", "20", "10", "11"], ["20", "10", "11", "19"], ["1", "25", "3", "10", "11", "19", "20"], ["1", "25", "3", "10", "12", "22"]], "prime_paths_statements": [["val = len([x for x in s if x.isalpha() and x.isupper()]) - len([x for x in\\l    s if x.isalpha() and x.islower()])\\l", "if val > my_val:\\l", "for s in extensions:\\l", "ans = class_name + '.' + strong\\l", "return ans\\l"], ["val = len([x for x in s if x.isalpha() and x.isupper()]) - len([x for x in\\l    s if x.isalpha() and x.islower()])\\l", "if val > my_val:\\l", "strong = s\\lmy_val = val\\l", "for s in extensions:\\l", "ans = class_name + '.' + strong\\l", "return ans\\l"], ["if val > my_val:\\l", "for s in extensions:\\l", "val = len([x for x in s if x.isalpha() and x.isupper()]) - len([x for x in\\l    s if x.isalpha() and x.islower()])\\l"], ["if val > my_val:\\l", "strong = s\\lmy_val = val\\l", "for s in extensions:\\l", "val = len([x for x in s if x.isalpha() and x.isupper()]) - len([x for x in\\l    s if x.isalpha() and x.islower()])\\l"], ["strong = s\\lmy_val = val\\l", "for s in extensions:\\l", "val = len([x for x in s if x.isalpha() and x.isupper()]) - len([x for x in\\l    s if x.isalpha() and x.islower()])\\l", "if val > my_val:\\l"], ["from typing import *\\ldef Strongest_Extension(class_name, extensions):...\\lStrongest_Extension('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW'])\\l", "Strongest_Extension", "strong = extensions[0]\\lmy_val = len([x for x in extensions[0] if x.isalpha() and x.isupper()]) - len([\\l    x for x in extensions[0] if x.isalpha() and x.islower()])\\l", "for s in extensions:\\l", "val = len([x for x in s if x.isalpha() and x.isupper()]) - len([x for x in\\l    s if x.isalpha() and x.islower()])\\l", "if val > my_val:\\l", "strong = s\\lmy_val = val\\l"], ["from typing import *\\ldef Strongest_Extension(class_name, extensions):...\\lStrongest_Extension('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW'])\\l", "Strongest_Extension", "strong = extensions[0]\\lmy_val = len([x for x in extensions[0] if x.isalpha() and x.isupper()]) - len([\\l    x for x in extensions[0] if x.isalpha() and x.islower()])\\l", "for s in extensions:\\l", "ans = class_name + '.' + strong\\l", "return ans\\l"]], "prime_paths_linenumbers": [[9, 11, 8, 15, 16], [9, 11, 12, 13, 8, 15, 16], [11, 8, 9], [11, 12, 13, 8, 9], [12, 13, 8, 9, 11], [1, 18, 5, 6, 8, 9, 11, 12, 13], [1, 18, 5, 6, 8, 15, 16]], "covered_statements_linenumbers": [1, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 18], "missing_statements_linenumbers": [], "covered_prime_paths_linenumbers": [[9, 11, 8, 15, 16], [9, 11, 12, 13, 8, 15, 16], [11, 8, 9], [11, 12, 13, 8, 9], [12, 13, 8, 9, 11], [1, 18, 5, 6, 8, 9, 11, 12, 13], [1, 18, 5, 6, 8, 15, 16]], "missing_prime_paths_linenumbers": [], "num_total_prime_paths": 7, "num_covered_paths": 7, "prime_path_coverage": 1.0, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_153__1_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_153__1_CFG.dot"}
{"humaneval_id": "HumanEval_52__1", "python_file": "HumanEval_52__1/main.py", "input_file": "HumanEval_52__1/input.txt", "prime_paths_nodes": [["4", "3", "5"], ["1", "11", "3", "5"], ["1", "11", "3", "4", "6"]], "prime_paths_statements": [["if e >= t:\\l", "for e in l:\\l", "return True\\l"], ["from typing import *\\ldef below_threshold(l: list, t: int):...\\lbelow_threshold([1, 20, 4, 10], 5)\\l", "below_threshold", "for e in l:\\l", "return True\\l"], ["from typing import *\\ldef below_threshold(l: list, t: int):...\\lbelow_threshold([1, 20, 4, 10], 5)\\l", "below_threshold", "for e in l:\\l", "if e >= t:\\l", "return False\\l"]], "prime_paths_linenumbers": [[6, 5, 8], [1, 10, 5, 8], [1, 10, 5, 6, 7]], "covered_statements_linenumbers": [1, 4, 5, 6, 7, 10], "missing_statements_linenumbers": [8], "covered_prime_paths_linenumbers": [[1, 10, 5, 6, 7]], "missing_prime_paths_linenumbers": [[6, 5, 8], [1, 10, 5, 8]], "num_total_prime_paths": 3, "num_covered_paths": 1, "prime_path_coverage": 0.33, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_52__1_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_52__1_CFG.dot"}
{"humaneval_id": "HumanEval_109__0", "python_file": "HumanEval_109__0/main.py", "input_file": "HumanEval_109__0/input.txt", "prime_paths_nodes": [["14", "11", "15"], ["1", "21", "3", "5"], ["1", "21", "3", "6", "11", "15"], ["1", "21", "3", "6", "11", "14", "16"]], "prime_paths_statements": [["if my_arr[i] != sorted_array[i]:\\l", "for i in range(len(arr)):\\l", "return True\\l"], ["from typing import *\\ldef move_one_ball(arr):...\\lmove_one_ball([4, 3, 1, 2])\\l", "move_one_ball", "if len(arr) == 0:\\l", "return True\\l"], ["from typing import *\\ldef move_one_ball(arr):...\\lmove_one_ball([4, 3, 1, 2])\\l", "move_one_ball", "if len(arr) == 0:\\l", "sorted_array = sorted(arr)\\lmy_arr = []\\lmin_value = min(arr)\\lmin_index = arr.index(min_value)\\lmy_arr = arr[min_index:] + arr[0:min_index]\\l", "for i in range(len(arr)):\\l", "return True\\l"], ["from typing import *\\ldef move_one_ball(arr):...\\lmove_one_ball([4, 3, 1, 2])\\l", "move_one_ball", "if len(arr) == 0:\\l", "sorted_array = sorted(arr)\\lmy_arr = []\\lmin_value = min(arr)\\lmin_index = arr.index(min_value)\\lmy_arr = arr[min_index:] + arr[0:min_index]\\l", "for i in range(len(arr)):\\l", "if my_arr[i] != sorted_array[i]:\\l", "return False\\l"]], "prime_paths_linenumbers": [[14, 13, 16], [1, 18, 5, 6], [1, 18, 5, 7, 8, 10, 11, 12, 13, 16], [1, 18, 5, 7, 8, 10, 11, 12, 13, 14, 15]], "covered_statements_linenumbers": [1, 4, 5, 7, 8, 10, 11, 12, 13, 14, 15, 18], "missing_statements_linenumbers": [6, 16], "covered_prime_paths_linenumbers": [[1, 18, 5, 7, 8, 10, 11, 12, 13, 14, 15]], "missing_prime_paths_linenumbers": [[14, 13, 16], [1, 18, 5, 6], [1, 18, 5, 7, 8, 10, 11, 12, 13, 16]], "num_total_prime_paths": 4, "num_covered_paths": 1, "prime_path_coverage": 0.25, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_109__0_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_109__0_CFG.dot"}
{"humaneval_id": "HumanEval_160", "python_file": "HumanEval_160/main.py", "input_file": "HumanEval_160/input.txt", "prime_paths_nodes": [["7", "5", "8"], ["1", "12", "3", "5", "7"], ["1", "12", "3", "5", "8"]], "prime_paths_statements": [["expression += oprt + str(oprn)\\l", "for oprt, oprn in zip(operator, operand[1:]):\\l", "return eval(expression)\\l"], ["from typing import *\\ldef do_algebra(operator, operand):...\\ldo_algebra(['**', '*', '+'], [2, 3, 4, 5])\\l", "do_algebra", "expression = str(operand[0])\\l", "for oprt, oprn in zip(operator, operand[1:]):\\l", "expression += oprt + str(oprn)\\l"], ["from typing import *\\ldef do_algebra(operator, operand):...\\ldo_algebra(['**', '*', '+'], [2, 3, 4, 5])\\l", "do_algebra", "expression = str(operand[0])\\l", "for oprt, oprn in zip(operator, operand[1:]):\\l", "return eval(expression)\\l"]], "prime_paths_linenumbers": [[5, 4, 6], [1, 8, 3, 4, 5], [1, 8, 3, 4, 6]], "covered_statements_linenumbers": [1, 2, 3, 4, 5, 6, 8], "missing_statements_linenumbers": [], "covered_prime_paths_linenumbers": [[5, 4, 6], [1, 8, 3, 4, 5], [1, 8, 3, 4, 6]], "missing_prime_paths_linenumbers": [], "num_total_prime_paths": 3, "num_covered_paths": 3, "prime_path_coverage": 1.0, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_160_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_160_CFG.dot"}
{"humaneval_id": "HumanEval_19__0", "python_file": "HumanEval_19__0/main.py", "input_file": "HumanEval_19__0/input.txt", "prime_paths_nodes": [["1", "7", "3", "4"]], "prime_paths_statements": [["from typing import *\\ldef sort_numbers(numbers: str) ->str:...\\lsort_numbers('')\\l", "sort_numbers", "value_map = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': \\l    5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\\l", "return ' '.join(sorted([x for ...' ') if x], key=lambda x:\\l    value_map[x]))\\l"]], "prime_paths_linenumbers": [[1, 20, 5, 17]], "covered_statements_linenumbers": [1, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 20], "missing_statements_linenumbers": [], "covered_prime_paths_linenumbers": [[1, 20, 5, 17]], "missing_prime_paths_linenumbers": [], "num_total_prime_paths": 1, "num_covered_paths": 1, "prime_path_coverage": 1.0, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_19__0_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_19__0_CFG.dot"}
{"humaneval_id": "HumanEval_61", "python_file": "HumanEval_61/main.py", "input_file": "HumanEval_61/input.txt", "prime_paths_nodes": [["5", "7", "8", "4", "6"], ["5", "9", "8", "4", "6"], ["7", "8", "4", "5", "9"], ["9", "8", "4", "5", "7"], ["1", "15", "3", "4", "6"], ["1", "15", "3", "4", "5", "7", "8", "10"], ["1", "15", "3", "4", "5", "9", "8", "10"]], "prime_paths_statements": [["if b == '(':\\l", "depth += 1\\l", "if depth < 0:\\l", "for b in brackets:\\l", "return depth == 0\\l"], ["if b == '(':\\l", "depth -= 1\\l", "if depth < 0:\\l", "for b in brackets:\\l", "return depth == 0\\l"], ["depth += 1\\l", "if depth < 0:\\l", "for b in brackets:\\l", "if b == '(':\\l", "depth -= 1\\l"], ["depth -= 1\\l", "if depth < 0:\\l", "for b in brackets:\\l", "if b == '(':\\l", "depth += 1\\l"], ["from typing import *\\ldef correct_bracketing(brackets: str):...\\lcorrect_bracketing('(()())')\\l", "correct_bracketing", "depth = 0\\l", "for b in brackets:\\l", "return depth == 0\\l"], ["from typing import *\\ldef correct_bracketing(brackets: str):...\\lcorrect_bracketing('(()())')\\l", "correct_bracketing", "depth = 0\\l", "for b in brackets:\\l", "if b == '(':\\l", "depth += 1\\l", "if depth < 0:\\l", "return False\\l"], ["from typing import *\\ldef correct_bracketing(brackets: str):...\\lcorrect_bracketing('(()())')\\l", "correct_bracketing", "depth = 0\\l", "for b in brackets:\\l", "if b == '(':\\l", "depth -= 1\\l", "if depth < 0:\\l", "return False\\l"]], "prime_paths_linenumbers": [[5, 6, 9, 4, 11], [5, 8, 9, 4, 11], [6, 9, 4, 5, 8], [8, 9, 4, 5, 6], [1, 13, 3, 4, 11], [1, 13, 3, 4, 5, 6, 9, 10], [1, 13, 3, 4, 5, 8, 9, 10]], "covered_statements_linenumbers": [1, 2, 3, 4, 5, 6, 8, 9, 11, 13], "missing_statements_linenumbers": [10], "covered_prime_paths_linenumbers": [[5, 6, 9, 4, 11], [5, 8, 9, 4, 11], [6, 9, 4, 5, 8], [8, 9, 4, 5, 6], [1, 13, 3, 4, 11]], "missing_prime_paths_linenumbers": [[1, 13, 3, 4, 5, 6, 9, 10], [1, 13, 3, 4, 5, 8, 9, 10]], "num_total_prime_paths": 7, "num_covered_paths": 5, "prime_path_coverage": 0.71, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_61_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_61_CFG.dot"}
{"humaneval_id": "HumanEval_6__0", "python_file": "HumanEval_6__0/main.py", "input_file": "HumanEval_6__0/input.txt", "prime_paths_nodes": [["5", "6", "8"], ["5", "6", "7", "9"], ["5", "6", "7", "11"], ["7", "9", "6", "8"], ["7", "11", "6", "8"], ["9", "6", "7", "11"], ["11", "6", "7", "9"], ["1", "18", "3", "15"]], "prime_paths_statements": [["depth = 0\\lmax_depth = 0\\l", "for c in s:\\l", "return max_depth\\l"], ["depth = 0\\lmax_depth = 0\\l", "for c in s:\\l", "if c == '(':\\l", "depth += 1\\lmax_depth = max(depth, max_depth)\\l"], ["depth = 0\\lmax_depth = 0\\l", "for c in s:\\l", "if c == '(':\\l", "depth -= 1\\l"], ["if c == '(':\\l", "depth += 1\\lmax_depth = max(depth, max_depth)\\l", "for c in s:\\l", "return max_depth\\l"], ["if c == '(':\\l", "depth -= 1\\l", "for c in s:\\l", "return max_depth\\l"], ["depth += 1\\lmax_depth = max(depth, max_depth)\\l", "for c in s:\\l", "if c == '(':\\l", "depth -= 1\\l"], ["depth -= 1\\l", "for c in s:\\l", "if c == '(':\\l", "depth += 1\\lmax_depth = max(depth, max_depth)\\l"], ["from typing import *\\ldef parse_nested_parens(paren_string: str) ->List[int]:...\\lparse_nested_parens('((()))')\\l", "parse_nested_parens", "def parse_paren_group(s):...\\l", "return [parse_paren_group(x) for x in paren_string.split(' ') if x]\\l"]], "prime_paths_linenumbers": [[6, 7, 8, 15], [6, 7, 8, 9, 10, 11], [6, 7, 8, 9, 13], [9, 10, 11, 8, 15], [9, 13, 8, 15], [10, 11, 8, 9, 13], [13, 8, 9, 10, 11], [1, 19, 5, 17]], "covered_statements_linenumbers": [1, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19], "missing_statements_linenumbers": [], "covered_prime_paths_linenumbers": [[6, 7, 8, 15], [6, 7, 8, 9, 10, 11], [6, 7, 8, 9, 13], [9, 10, 11, 8, 15], [9, 13, 8, 15], [10, 11, 8, 9, 13], [13, 8, 9, 10, 11], [1, 19, 5, 17]], "missing_prime_paths_linenumbers": [], "num_total_prime_paths": 8, "num_covered_paths": 8, "prime_path_coverage": 1.0, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_6__0_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_6__0_CFG.dot"}
{"humaneval_id": "HumanEval_21", "python_file": "HumanEval_21/main.py", "input_file": "HumanEval_21/input.txt", "prime_paths_nodes": [["1", "9", "3", "6"]], "prime_paths_statements": [["from typing import *\\ldef rescale_to_unit(numbers: List[float]) ->List[float]:...\\lrescale_to_unit([2.0, 49.9])\\l", "rescale_to_unit", "min_number = min(numbers)\\lmax_number = max(numbers)\\l", "return [((x - min_number) / (max_number - min_number)) for x in numbers]\\l"]], "prime_paths_linenumbers": [[1, 7, 3, 4, 5]], "covered_statements_linenumbers": [1, 2, 3, 4, 5, 7], "missing_statements_linenumbers": [], "covered_prime_paths_linenumbers": [[1, 7, 3, 4, 5]], "missing_prime_paths_linenumbers": [], "num_total_prime_paths": 1, "num_covered_paths": 1, "prime_path_coverage": 1.0, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_21_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_21_CFG.dot"}
{"humaneval_id": "HumanEval_53", "python_file": "HumanEval_53/main.py", "input_file": "HumanEval_53/input.txt", "prime_paths_nodes": [["1", "6", "3"]], "prime_paths_statements": [["from typing import *\\ldef add(x: int, y: int):...\\ladd(0, 1)\\l", "add", "return x + y\\l"]], "prime_paths_linenumbers": [[1, 5, 3]], "covered_statements_linenumbers": [1, 2, 3, 5], "missing_statements_linenumbers": [], "covered_prime_paths_linenumbers": [[1, 5, 3]], "missing_prime_paths_linenumbers": [], "num_total_prime_paths": 1, "num_covered_paths": 1, "prime_path_coverage": 1.0, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_53_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_53_CFG.dot"}
{"humaneval_id": "HumanEval_142__0", "python_file": "HumanEval_142__0/main.py", "input_file": "HumanEval_142__0/input.txt", "prime_paths_nodes": [["7", "9", "4", "8"], ["7", "11", "12", "4", "8"], ["7", "11", "14", "4", "8"], ["9", "4", "7", "11", "12"], ["9", "4", "7", "11", "14"], ["11", "12", "4", "7", "9"], ["11", "14", "4", "7", "9"], ["12", "4", "7", "11", "14"], ["14", "4", "7", "11", "12"], ["1", "20", "3", "4", "8"], ["1", "20", "3", "4", "7", "9"], ["1", "20", "3", "4", "7", "11", "12"], ["1", "20", "3", "4", "7", "11", "14"]], "prime_paths_statements": [["if i % 3 == 0:\\l", "result.append(lst[i] ** 2)\\l", "for i in range(len(lst)):\\l", "return sum(result)\\l"], ["if i % 3 == 0:\\l", "if i % 4 == 0 and i % 3 != 0:\\l", "result.append(lst[i] ** 3)\\l", "for i in range(len(lst)):\\l", "return sum(result)\\l"], ["if i % 3 == 0:\\l", "if i % 4 == 0 and i % 3 != 0:\\l", "result.append(lst[i])\\l", "for i in range(len(lst)):\\l", "return sum(result)\\l"], ["result.append(lst[i] ** 2)\\l", "for i in range(len(lst)):\\l", "if i % 3 == 0:\\l", "if i % 4 == 0 and i % 3 != 0:\\l", "result.append(lst[i] ** 3)\\l"], ["result.append(lst[i] ** 2)\\l", "for i in range(len(lst)):\\l", "if i % 3 == 0:\\l", "if i % 4 == 0 and i % 3 != 0:\\l", "result.append(lst[i])\\l"], ["if i % 4 == 0 and i % 3 != 0:\\l", "result.append(lst[i] ** 3)\\l", "for i in range(len(lst)):\\l", "if i % 3 == 0:\\l", "result.append(lst[i] ** 2)\\l"], ["if i % 4 == 0 and i % 3 != 0:\\l", "result.append(lst[i])\\l", "for i in range(len(lst)):\\l", "if i % 3 == 0:\\l", "result.append(lst[i] ** 2)\\l"], ["result.append(lst[i] ** 3)\\l", "for i in range(len(lst)):\\l", "if i % 3 == 0:\\l", "if i % 4 == 0 and i % 3 != 0:\\l", "result.append(lst[i])\\l"], ["result.append(lst[i])\\l", "for i in range(len(lst)):\\l", "if i % 3 == 0:\\l", "if i % 4 == 0 and i % 3 != 0:\\l", "result.append(lst[i] ** 3)\\l"], ["from typing import *\\ldef sum_squares(lst):...\\lsum_squares([0])\\l", "sum_squares", "result = []\\l", "for i in range(len(lst)):\\l", "return sum(result)\\l"], ["from typing import *\\ldef sum_squares(lst):...\\lsum_squares([0])\\l", "sum_squares", "result = []\\l", "for i in range(len(lst)):\\l", "if i % 3 == 0:\\l", "result.append(lst[i] ** 2)\\l"], ["from typing import *\\ldef sum_squares(lst):...\\lsum_squares([0])\\l", "sum_squares", "result = []\\l", "for i in range(len(lst)):\\l", "if i % 3 == 0:\\l", "if i % 4 == 0 and i % 3 != 0:\\l", "result.append(lst[i] ** 3)\\l"], ["from typing import *\\ldef sum_squares(lst):...\\lsum_squares([0])\\l", "sum_squares", "result = []\\l", "for i in range(len(lst)):\\l", "if i % 3 == 0:\\l", "if i % 4 == 0 and i % 3 != 0:\\l", "result.append(lst[i])\\l"]], "prime_paths_linenumbers": [[7, 8, 6, 13], [7, 9, 10, 6, 13], [7, 9, 12, 6, 13], [8, 6, 7, 9, 10], [8, 6, 7, 9, 12], [9, 10, 6, 7, 8], [9, 12, 6, 7, 8], [10, 6, 7, 9, 12], [12, 6, 7, 9, 10], [1, 15, 5, 6, 13], [1, 15, 5, 6, 7, 8], [1, 15, 5, 6, 7, 9, 10], [1, 15, 5, 6, 7, 9, 12]], "covered_statements_linenumbers": [1, 4, 5, 6, 7, 8, 13, 15], "missing_statements_linenumbers": [9, 10, 12], "covered_prime_paths_linenumbers": [[7, 8, 6, 13], [1, 15, 5, 6, 13], [1, 15, 5, 6, 7, 8]], "missing_prime_paths_linenumbers": [[7, 9, 10, 6, 13], [7, 9, 12, 6, 13], [8, 6, 7, 9, 10], [8, 6, 7, 9, 12], [9, 10, 6, 7, 8], [9, 12, 6, 7, 8], [10, 6, 7, 9, 12], [12, 6, 7, 9, 10], [1, 15, 5, 6, 7, 9, 10], [1, 15, 5, 6, 7, 9, 12]], "num_total_prime_paths": 13, "num_covered_paths": 3, "prime_path_coverage": 0.23, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_142__0_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_142__0_CFG.dot"}
{"humaneval_id": "HumanEval_156__0", "python_file": "HumanEval_156__0/main.py", "input_file": "HumanEval_156__0/input.txt", "prime_paths_nodes": [["5", "7", "9", "4", "6"], ["8", "7", "9", "4", "5"], ["8", "7", "9", "4", "6"], ["9", "4", "5", "7", "8"], ["1", "12", "3", "4", "6"], ["1", "12", "3", "4", "5", "7", "8"], ["1", "12", "3", "4", "5", "7", "9"]], "prime_paths_statements": [["div = number // num[i]\\lnumber %= num[i]\\l", "while div:\\l", "i -= 1\\l", "while number:\\l", "return res.lower()\\l"], ["res += sym[i]\\ldiv -= 1\\l", "while div:\\l", "i -= 1\\l", "while number:\\l", "div = number // num[i]\\lnumber %= num[i]\\l"], ["res += sym[i]\\ldiv -= 1\\l", "while div:\\l", "i -= 1\\l", "while number:\\l", "return res.lower()\\l"], ["i -= 1\\l", "while number:\\l", "div = number // num[i]\\lnumber %= num[i]\\l", "while div:\\l", "res += sym[i]\\ldiv -= 1\\l"], ["from typing import *\\ldef int_to_mini_roman(number):...\\lint_to_mini_roman(900)\\l", "int_to_mini_roman", "num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\\lsym = ['I', 'IV', 'V', 'IX', 'X', 'XL', 'L', 'XC', 'C', 'CD', 'D', 'CM', 'M']\\li = 12\\lres = ''\\l", "while number:\\l", "return res.lower()\\l"], ["from typing import *\\ldef int_to_mini_roman(number):...\\lint_to_mini_roman(900)\\l", "int_to_mini_roman", "num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\\lsym = ['I', 'IV', 'V', 'IX', 'X', 'XL', 'L', 'XC', 'C', 'CD', 'D', 'CM', 'M']\\li = 12\\lres = ''\\l", "while number:\\l", "div = number // num[i]\\lnumber %= num[i]\\l", "while div:\\l", "res += sym[i]\\ldiv -= 1\\l"], ["from typing import *\\ldef int_to_mini_roman(number):...\\lint_to_mini_roman(900)\\l", "int_to_mini_roman", "num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\\lsym = ['I', 'IV', 'V', 'IX', 'X', 'XL', 'L', 'XC', 'C', 'CD', 'D', 'CM', 'M']\\li = 12\\lres = ''\\l", "while number:\\l", "div = number // num[i]\\lnumber %= num[i]\\l", "while div:\\l", "i -= 1\\l"]], "prime_paths_linenumbers": [[12, 13, 14, 17, 11, 18], [15, 16, 14, 17, 11, 12, 13], [15, 16, 14, 17, 11, 18], [17, 11, 12, 13, 14, 15, 16], [1, 20, 5, 7, 9, 10, 11, 18], [1, 20, 5, 7, 9, 10, 11, 12, 13, 14, 15, 16], [1, 20, 5, 7, 9, 10, 11, 12, 13, 14, 17]], "covered_statements_linenumbers": [1, 4, 5, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 20], "missing_statements_linenumbers": [], "covered_prime_paths_linenumbers": [[12, 13, 14, 17, 11, 18], [15, 16, 14, 17, 11, 12, 13], [15, 16, 14, 17, 11, 18], [17, 11, 12, 13, 14, 15, 16], [1, 20, 5, 7, 9, 10, 11, 18], [1, 20, 5, 7, 9, 10, 11, 12, 13, 14, 15, 16], [1, 20, 5, 7, 9, 10, 11, 12, 13, 14, 17]], "missing_prime_paths_linenumbers": [], "num_total_prime_paths": 7, "num_covered_paths": 7, "prime_path_coverage": 1.0, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_156__0_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_156__0_CFG.dot"}
{"humaneval_id": "HumanEval_30", "python_file": "HumanEval_30/main.py", "input_file": "HumanEval_30/input.txt", "prime_paths_nodes": [["1", "6", "3"]], "prime_paths_statements": [["from typing import *\\ldef get_positive(l: list):...\\lget_positive([-1, -2, 4, 5, 6])\\l", "get_positive", "return [e for e in l if e > 0]\\l"]], "prime_paths_linenumbers": [[1, 5, 3]], "covered_statements_linenumbers": [1, 2, 3, 5], "missing_statements_linenumbers": [], "covered_prime_paths_linenumbers": [[1, 5, 3]], "missing_prime_paths_linenumbers": [], "num_total_prime_paths": 1, "num_covered_paths": 1, "prime_path_coverage": 1.0, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_30_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_30_CFG.dot"}
{"humaneval_id": "HumanEval_132__1", "python_file": "HumanEval_132__1/main.py", "input_file": "HumanEval_132__1/input.txt", "prime_paths_nodes": [["7", "9", "4", "8", "16", "18"], ["7", "11", "4", "8", "16", "18"], ["7", "9", "4", "8", "16", "17", "19"], ["7", "11", "4", "8", "16", "17", "19"], ["9", "4", "7", "11"], ["11", "4", "7", "9"], ["17", "16", "18"], ["17", "19", "16", "18"], ["19", "16", "17"], ["1", "23", "3", "4", "7", "9"], ["1", "23", "3", "4", "7", "11"], ["1", "23", "3", "4", "8", "16", "18"], ["1", "23", "3", "4", "8", "16", "17", "19"]], "prime_paths_statements": [["if string[i] == '[':\\l", "opening_bracket_index.append(i)\\l", "for i in range(len(string)):\\l", "closing_bracket_index.reverse()\\lcnt = 0\\li = 0\\ll = len(closing_bracket_index)\\l", "for idx in opening_bracket_index:\\l", "return cnt >= 2\\l"], ["if string[i] == '[':\\l", "closing_bracket_index.append(i)\\l", "for i in range(len(string)):\\l", "closing_bracket_index.reverse()\\lcnt = 0\\li = 0\\ll = len(closing_bracket_index)\\l", "for idx in opening_bracket_index:\\l", "return cnt >= 2\\l"], ["if string[i] == '[':\\l", "opening_bracket_index.append(i)\\l", "for i in range(len(string)):\\l", "closing_bracket_index.reverse()\\lcnt = 0\\li = 0\\ll = len(closing_bracket_index)\\l", "for idx in opening_bracket_index:\\l", "if i < l and idx < closing_bracket_index[i]:\\l", "cnt += 1\\li += 1\\l"], ["if string[i] == '[':\\l", "closing_bracket_index.append(i)\\l", "for i in range(len(string)):\\l", "closing_bracket_index.reverse()\\lcnt = 0\\li = 0\\ll = len(closing_bracket_index)\\l", "for idx in opening_bracket_index:\\l", "if i < l and idx < closing_bracket_index[i]:\\l", "cnt += 1\\li += 1\\l"], ["opening_bracket_index.append(i)\\l", "for i in range(len(string)):\\l", "if string[i] == '[':\\l", "closing_bracket_index.append(i)\\l"], ["closing_bracket_index.append(i)\\l", "for i in range(len(string)):\\l", "if string[i] == '[':\\l", "opening_bracket_index.append(i)\\l"], ["if i < l and idx < closing_bracket_index[i]:\\l", "for idx in opening_bracket_index:\\l", "return cnt >= 2\\l"], ["if i < l and idx < closing_bracket_index[i]:\\l", "cnt += 1\\li += 1\\l", "for idx in opening_bracket_index:\\l", "return cnt >= 2\\l"], ["cnt += 1\\li += 1\\l", "for idx in opening_bracket_index:\\l", "if i < l and idx < closing_bracket_index[i]:\\l"], ["from typing import *\\ldef is_nested(string):...\\lis_nested('[[[[]]]]')\\l", "is_nested", "opening_bracket_index = []\\lclosing_bracket_index = []\\l", "for i in range(len(string)):\\l", "if string[i] == '[':\\l", "opening_bracket_index.append(i)\\l"], ["from typing import *\\ldef is_nested(string):...\\lis_nested('[[[[]]]]')\\l", "is_nested", "opening_bracket_index = []\\lclosing_bracket_index = []\\l", "for i in range(len(string)):\\l", "if string[i] == '[':\\l", "closing_bracket_index.append(i)\\l"], ["from typing import *\\ldef is_nested(string):...\\lis_nested('[[[[]]]]')\\l", "is_nested", "opening_bracket_index = []\\lclosing_bracket_index = []\\l", "for i in range(len(string)):\\l", "closing_bracket_index.reverse()\\lcnt = 0\\li = 0\\ll = len(closing_bracket_index)\\l", "for idx in opening_bracket_index:\\l", "return cnt >= 2\\l"], ["from typing import *\\ldef is_nested(string):...\\lis_nested('[[[[]]]]')\\l", "is_nested", "opening_bracket_index = []\\lclosing_bracket_index = []\\l", "for i in range(len(string)):\\l", "closing_bracket_index.reverse()\\lcnt = 0\\li = 0\\ll = len(closing_bracket_index)\\l", "for idx in opening_bracket_index:\\l", "if i < l and idx < closing_bracket_index[i]:\\l", "cnt += 1\\li += 1\\l"]], "prime_paths_linenumbers": [[8, 9, 7, 12, 13, 14, 15, 16, 20], [8, 11, 7, 12, 13, 14, 15, 16, 20], [8, 9, 7, 12, 13, 14, 15, 16, 17, 18, 19], [8, 11, 7, 12, 13, 14, 15, 16, 17, 18, 19], [9, 7, 8, 11], [11, 7, 8, 9], [17, 16, 20], [17, 18, 19, 16, 20], [18, 19, 16, 17], [1, 22, 5, 6, 7, 8, 9], [1, 22, 5, 6, 7, 8, 11], [1, 22, 5, 6, 7, 12, 13, 14, 15, 16, 20], [1, 22, 5, 6, 7, 12, 13, 14, 15, 16, 17, 18, 19]], "covered_statements_linenumbers": [1, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22], "missing_statements_linenumbers": [], "covered_prime_paths_linenumbers": [[8, 9, 7, 12, 13, 14, 15, 16, 20], [8, 11, 7, 12, 13, 14, 15, 16, 20], [8, 9, 7, 12, 13, 14, 15, 16, 17, 18, 19], [8, 11, 7, 12, 13, 14, 15, 16, 17, 18, 19], [9, 7, 8, 11], [11, 7, 8, 9], [17, 16, 20], [17, 18, 19, 16, 20], [18, 19, 16, 17], [1, 22, 5, 6, 7, 8, 9], [1, 22, 5, 6, 7, 8, 11], [1, 22, 5, 6, 7, 12, 13, 14, 15, 16, 20], [1, 22, 5, 6, 7, 12, 13, 14, 15, 16, 17, 18, 19]], "missing_prime_paths_linenumbers": [], "num_total_prime_paths": 13, "num_covered_paths": 13, "prime_path_coverage": 1.0, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_132__1_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_132__1_CFG.dot"}
{"humaneval_id": "HumanEval_124", "python_file": "HumanEval_124/main.py", "input_file": "HumanEval_124/input.txt", "prime_paths_nodes": [["1", "28", "3"]], "prime_paths_statements": [["from typing import *\\ldef valid_date(date):...\\lvalid_date('03-11-2000')\\l", "valid_date", ""]], "prime_paths_linenumbers": [[1, 20]], "covered_statements_linenumbers": [1, 2, 3, 4, 5, 6, 7, 9, 11, 13, 18, 20], "missing_statements_linenumbers": [8, 10, 12, 14, 15, 16], "covered_prime_paths_linenumbers": [[1, 20]], "missing_prime_paths_linenumbers": [], "num_total_prime_paths": 1, "num_covered_paths": 1, "prime_path_coverage": 1.0, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_124_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_124_CFG.dot"}
{"humaneval_id": "HumanEval_163__1", "python_file": "HumanEval_163__1/main.py", "input_file": "HumanEval_163__1/input.txt", "prime_paths_nodes": [["1", "11", "3", "8"]], "prime_paths_statements": [["from typing import *\\ldef generate_integers(a, b):...\\lgenerate_integers(10, 2)\\l", "generate_integers", "lower = max(2, min(a, b))\\lupper = min(8, max(a, b))\\l", "return [i for i in range(lower, upper + 1) if i % 2 == 0]\\l"]], "prime_paths_linenumbers": [[1, 10, 5, 6, 8]], "covered_statements_linenumbers": [1, 4, 5, 6, 8, 10], "missing_statements_linenumbers": [], "covered_prime_paths_linenumbers": [[1, 10, 5, 6, 8]], "missing_prime_paths_linenumbers": [], "num_total_prime_paths": 1, "num_covered_paths": 1, "prime_path_coverage": 1.0, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_163__1_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_163__1_CFG.dot"}
{"humaneval_id": "HumanEval_45__1", "python_file": "HumanEval_45__1/main.py", "input_file": "HumanEval_45__1/input.txt", "prime_paths_nodes": [["1", "6", "3"]], "prime_paths_statements": [["from typing import *\\ldef triangle_area(a, h):...\\ltriangle_area(2, 2)\\l", "triangle_area", "return a * h / 2.0\\l"]], "prime_paths_linenumbers": [[1, 7, 5]], "covered_statements_linenumbers": [1, 4, 5, 7], "missing_statements_linenumbers": [], "covered_prime_paths_linenumbers": [[1, 7, 5]], "missing_prime_paths_linenumbers": [], "num_total_prime_paths": 1, "num_covered_paths": 1, "prime_path_coverage": 1.0, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_45__1_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_45__1_CFG.dot"}
{"humaneval_id": "HumanEval_34__0", "python_file": "HumanEval_34__0/main.py", "input_file": "HumanEval_34__0/input.txt", "prime_paths_nodes": [["1", "6", "3"]], "prime_paths_statements": [["from typing import *\\ldef unique(l: list):...\\lunique(['a', 'b', 'b', 'c', 'd', 'd'])\\l", "unique", "return sorted(list(set(l)))\\l"]], "prime_paths_linenumbers": [[1, 7, 5]], "covered_statements_linenumbers": [1, 4, 5, 7], "missing_statements_linenumbers": [], "covered_prime_paths_linenumbers": [[1, 7, 5]], "missing_prime_paths_linenumbers": [], "num_total_prime_paths": 1, "num_covered_paths": 1, "prime_path_coverage": 1.0, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_34__0_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_34__0_CFG.dot"}
{"humaneval_id": "HumanEval_27__0", "python_file": "HumanEval_27__0/main.py", "input_file": "HumanEval_27__0/input.txt", "prime_paths_nodes": [["1", "6", "3"]], "prime_paths_statements": [["from typing import *\\ldef flip_case(string: str) ->str:...\\lflip_case('')\\l", "flip_case", "return string.swapcase()\\l"]], "prime_paths_linenumbers": [[1, 7, 5]], "covered_statements_linenumbers": [1, 4, 5, 7], "missing_statements_linenumbers": [], "covered_prime_paths_linenumbers": [[1, 7, 5]], "missing_prime_paths_linenumbers": [], "num_total_prime_paths": 1, "num_covered_paths": 1, "prime_path_coverage": 1.0, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_27__0_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_27__0_CFG.dot"}
{"humaneval_id": "HumanEval_24__1", "python_file": "HumanEval_24__1/main.py", "input_file": "HumanEval_24__1/input.txt", "prime_paths_nodes": [["6", "3"], ["1", "12", "3", "6", "8"]], "prime_paths_statements": [["if n % i == 0:\\l", "for i in reversed(range(n)):\\l"], ["from typing import *\\ldef largest_divisor(n: int) ->int:...\\llargest_divisor(100)\\l", "largest_divisor", "for i in reversed(range(n)):\\l", "if n % i == 0:\\l", "return i\\l"]], "prime_paths_linenumbers": [[6, 5], [1, 9, 5, 6, 7]], "covered_statements_linenumbers": [1, 4, 5, 6, 7, 9], "missing_statements_linenumbers": [], "covered_prime_paths_linenumbers": [[6, 5], [1, 9, 5, 6, 7]], "missing_prime_paths_linenumbers": [], "num_total_prime_paths": 2, "num_covered_paths": 2, "prime_path_coverage": 1.0, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_24__1_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_24__1_CFG.dot"}
{"humaneval_id": "HumanEval_130__1", "python_file": "HumanEval_130__1/main.py", "input_file": "HumanEval_130__1/input.txt", "prime_paths_nodes": [["9", "11", "7", "10"], ["9", "13", "7", "10"], ["11", "7", "9", "13"], ["13", "7", "9", "11"], ["1", "18", "3", "4"], ["1", "18", "3", "5", "7", "10"], ["1", "18", "3", "5", "7", "9", "11"], ["1", "18", "3", "5", "7", "9", "13"]], "prime_paths_statements": [["if i % 2 == 0:\\l", "my_tri.append(i / 2 + 1)\\l", "for i in range(2, n + 1):\\l", "return my_tri\\l"], ["if i % 2 == 0:\\l", "my_tri.append(my_tri[i - 1] + my_tri[i - 2] + (i + 3) / 2)\\l", "for i in range(2, n + 1):\\l", "return my_tri\\l"], ["my_tri.append(i / 2 + 1)\\l", "for i in range(2, n + 1):\\l", "if i % 2 == 0:\\l", "my_tri.append(my_tri[i - 1] + my_tri[i - 2] + (i + 3) / 2)\\l"], ["my_tri.append(my_tri[i - 1] + my_tri[i - 2] + (i + 3) / 2)\\l", "for i in range(2, n + 1):\\l", "if i % 2 == 0:\\l", "my_tri.append(i / 2 + 1)\\l"], ["from typing import *\\ldef tri(n):...\\ltri(8)\\l", "tri", "if n == 0:\\l", "return [1]\\l"], ["from typing import *\\ldef tri(n):...\\ltri(8)\\l", "tri", "if n == 0:\\l", "my_tri = [1, 3]\\l", "for i in range(2, n + 1):\\l", "return my_tri\\l"], ["from typing import *\\ldef tri(n):...\\ltri(8)\\l", "tri", "if n == 0:\\l", "my_tri = [1, 3]\\l", "for i in range(2, n + 1):\\l", "if i % 2 == 0:\\l", "my_tri.append(i / 2 + 1)\\l"], ["from typing import *\\ldef tri(n):...\\ltri(8)\\l", "tri", "if n == 0:\\l", "my_tri = [1, 3]\\l", "for i in range(2, n + 1):\\l", "if i % 2 == 0:\\l", "my_tri.append(my_tri[i - 1] + my_tri[i - 2] + (i + 3) / 2)\\l"]], "prime_paths_linenumbers": [[9, 10, 8, 13], [9, 12, 8, 13], [10, 8, 9, 12], [12, 8, 9, 10], [1, 15, 5, 6], [1, 15, 5, 7, 8, 13], [1, 15, 5, 7, 8, 9, 10], [1, 15, 5, 7, 8, 9, 12]], "covered_statements_linenumbers": [1, 4, 5, 7, 8, 9, 10, 12, 13, 15], "missing_statements_linenumbers": [6], "covered_prime_paths_linenumbers": [[9, 10, 8, 13], [9, 12, 8, 13], [10, 8, 9, 12], [12, 8, 9, 10], [1, 15, 5, 7, 8, 13], [1, 15, 5, 7, 8, 9, 10], [1, 15, 5, 7, 8, 9, 12]], "missing_prime_paths_linenumbers": [[1, 15, 5, 6]], "num_total_prime_paths": 8, "num_covered_paths": 7, "prime_path_coverage": 0.88, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_130__1_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_130__1_CFG.dot"}
{"humaneval_id": "HumanEval_31", "python_file": "HumanEval_31/main.py", "input_file": "HumanEval_31/input.txt", "prime_paths_nodes": [["8", "5", "9"], ["1", "15", "3", "4"], ["1", "15", "3", "5", "9"], ["1", "15", "3", "5", "8", "10"]], "prime_paths_statements": [["if n % k == 0:\\l", "for k in range(2, n - 1):\\l", "return True\\l"], ["from typing import *\\ldef is_prime(n):...\\lis_prime(6)\\l", "is_prime", "if n < 2:\\l", "return False\\l"], ["from typing import *\\ldef is_prime(n):...\\lis_prime(6)\\l", "is_prime", "if n < 2:\\l", "for k in range(2, n - 1):\\l", "return True\\l"], ["from typing import *\\ldef is_prime(n):...\\lis_prime(6)\\l", "is_prime", "if n < 2:\\l", "for k in range(2, n - 1):\\l", "if n % k == 0:\\l", "return False\\l"]], "prime_paths_linenumbers": [[6, 5, 8], [1, 10, 3, 4], [1, 10, 3, 5, 8], [1, 10, 3, 5, 6, 7]], "covered_statements_linenumbers": [1, 2, 3, 5, 6, 7, 10], "missing_statements_linenumbers": [4, 8], "covered_prime_paths_linenumbers": [[1, 10, 3, 5, 6, 7]], "missing_prime_paths_linenumbers": [[6, 5, 8], [1, 10, 3, 4], [1, 10, 3, 5, 8]], "num_total_prime_paths": 4, "num_covered_paths": 1, "prime_path_coverage": 0.25, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_31_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_31_CFG.dot"}
{"humaneval_id": "HumanEval_71__0", "python_file": "HumanEval_71__0/main.py", "input_file": "HumanEval_71__0/input.txt", "prime_paths_nodes": [["1", "11", "3", "4"], ["1", "11", "3", "5", "8"]], "prime_paths_statements": [["from typing import *\\ldef triangle_area(a, b, c):...\\ltriangle_area(1, 2, 3)\\l", "triangle_area", "if a + b <= c or a + c <= b or b + c <= a:\\l", "return -1\\l"], ["from typing import *\\ldef triangle_area(a, b, c):...\\ltriangle_area(1, 2, 3)\\l", "triangle_area", "if a + b <= c or a + c <= b or b + c <= a:\\l", "s = (a + b + c) / 2\\larea = (s * (s - a) * (s - b) * (s - c)) ** 0.5\\larea = round(area, 2)\\l", "return area\\l"]], "prime_paths_linenumbers": [[1, 12, 5, 6], [1, 12, 5, 7, 8, 9, 10]], "covered_statements_linenumbers": [1, 4, 5, 6, 12], "missing_statements_linenumbers": [7, 8, 9, 10], "covered_prime_paths_linenumbers": [[1, 12, 5, 6]], "missing_prime_paths_linenumbers": [[1, 12, 5, 7, 8, 9, 10]], "num_total_prime_paths": 2, "num_covered_paths": 1, "prime_path_coverage": 0.5, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_71__0_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_71__0_CFG.dot"}
{"humaneval_id": "HumanEval_82", "python_file": "HumanEval_82/main.py", "input_file": "HumanEval_82/input.txt", "prime_paths_nodes": [["10", "7", "11"], ["1", "17", "3", "5", "6"], ["1", "17", "3", "5", "7", "11"], ["1", "17", "3", "5", "7", "10", "12"]], "prime_paths_statements": [["if l % i == 0:\\l", "for i in range(2, l):\\l", "return True\\l"], ["from typing import *\\ldef prime_length(string):...\\lprime_length('Hello')\\l", "prime_length", "l = len(string)\\l", "if l == 0 or l == 1:\\l", "return False\\l"], ["from typing import *\\ldef prime_length(string):...\\lprime_length('Hello')\\l", "prime_length", "l = len(string)\\l", "if l == 0 or l == 1:\\l", "for i in range(2, l):\\l", "return True\\l"], ["from typing import *\\ldef prime_length(string):...\\lprime_length('Hello')\\l", "prime_length", "l = len(string)\\l", "if l == 0 or l == 1:\\l", "for i in range(2, l):\\l", "if l % i == 0:\\l", "return False\\l"]], "prime_paths_linenumbers": [[7, 6, 9], [1, 11, 3, 4, 5], [1, 11, 3, 4, 6, 9], [1, 11, 3, 4, 6, 7, 8]], "covered_statements_linenumbers": [1, 2, 3, 4, 6, 7, 9, 11], "missing_statements_linenumbers": [5, 8], "covered_prime_paths_linenumbers": [[7, 6, 9], [1, 11, 3, 4, 6, 9]], "missing_prime_paths_linenumbers": [[1, 11, 3, 4, 5], [1, 11, 3, 4, 6, 7, 8]], "num_total_prime_paths": 4, "num_covered_paths": 2, "prime_path_coverage": 0.5, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_82_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_82_CFG.dot"}
{"humaneval_id": "HumanEval_48", "python_file": "HumanEval_48/main.py", "input_file": "HumanEval_48/input.txt", "prime_paths_nodes": [["6", "3", "7"], ["1", "14", "3", "7"], ["1", "14", "3", "6", "9"]], "prime_paths_statements": [["if text[i] != text[len(text) - 1 - i]:\\l", "for i in range(len(text)):\\l", "return True\\l"], ["from typing import *\\ldef is_palindrome(text: str):...\\lis_palindrome('xywyx')\\l", "is_palindrome", "for i in range(len(text)):\\l", "return True\\l"], ["from typing import *\\ldef is_palindrome(text: str):...\\lis_palindrome('xywyx')\\l", "is_palindrome", "for i in range(len(text)):\\l", "if text[i] != text[len(text) - 1 - i]:\\l", "return False\\l"]], "prime_paths_linenumbers": [[4, 3, 6], [1, 8, 3, 6], [1, 8, 3, 4, 5]], "covered_statements_linenumbers": [1, 2, 3, 4, 6, 8], "missing_statements_linenumbers": [5], "covered_prime_paths_linenumbers": [[4, 3, 6], [1, 8, 3, 6]], "missing_prime_paths_linenumbers": [[1, 8, 3, 4, 5]], "num_total_prime_paths": 3, "num_covered_paths": 2, "prime_path_coverage": 0.67, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_48_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_48_CFG.dot"}
{"humaneval_id": "HumanEval_147", "python_file": "HumanEval_147/main.py", "input_file": "HumanEval_147/input.txt", "prime_paths_nodes": [["13", "10", "7", "5", "8"], ["13", "15", "10", "7", "5", "8"], ["15", "10", "13"], ["1", "19", "3", "5", "8"], ["1", "19", "3", "5", "7", "10", "13", "15"]], "prime_paths_statements": [["if (A[i] + A[j] + A[k]) % 3 == 0:\\l", "for k in range(j + 1, n):\\l", "for j in range(i + 1, n):\\l", "for i in range(n):\\l", "return len(ans)\\l"], ["if (A[i] + A[j] + A[k]) % 3 == 0:\\l", "ans += [(A[i], A[j], A[k])]\\l", "for k in range(j + 1, n):\\l", "for j in range(i + 1, n):\\l", "for i in range(n):\\l", "return len(ans)\\l"], ["ans += [(A[i], A[j], A[k])]\\l", "for k in range(j + 1, n):\\l", "if (A[i] + A[j] + A[k]) % 3 == 0:\\l"], ["from typing import *\\ldef get_max_triples(n):...\\lget_max_triples(5)\\l", "get_max_triples", "A = [(i * i - i + 1) for i in range(1, n + 1)]\\lans = []\\l", "for i in range(n):\\l", "return len(ans)\\l"], ["from typing import *\\ldef get_max_triples(n):...\\lget_max_triples(5)\\l", "get_max_triples", "A = [(i * i - i + 1) for i in range(1, n + 1)]\\lans = []\\l", "for i in range(n):\\l", "for j in range(i + 1, n):\\l", "for k in range(j + 1, n):\\l", "if (A[i] + A[j] + A[k]) % 3 == 0:\\l", "ans += [(A[i], A[j], A[k])]\\l"]], "prime_paths_linenumbers": [[8, 7, 6, 5, 10], [8, 9, 7, 6, 5, 10], [9, 7, 8], [1, 12, 3, 4, 5, 10], [1, 12, 3, 4, 5, 6, 7, 8, 9]], "covered_statements_linenumbers": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12], "missing_statements_linenumbers": [], "covered_prime_paths_linenumbers": [[8, 7, 6, 5, 10], [8, 9, 7, 6, 5, 10], [9, 7, 8], [1, 12, 3, 4, 5, 10], [1, 12, 3, 4, 5, 6, 7, 8, 9]], "missing_prime_paths_linenumbers": [], "num_total_prime_paths": 5, "num_covered_paths": 5, "prime_path_coverage": 1.0, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_147_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_147_CFG.dot"}
{"humaneval_id": "HumanEval_142__1", "python_file": "HumanEval_142__1/main.py", "input_file": "HumanEval_142__1/input.txt", "prime_paths_nodes": [["7", "9", "4", "8"], ["7", "11", "12", "4", "8"], ["7", "11", "14", "4", "8"], ["9", "4", "7", "11", "12"], ["9", "4", "7", "11", "14"], ["11", "12", "4", "7", "9"], ["11", "14", "4", "7", "9"], ["12", "4", "7", "11", "14"], ["14", "4", "7", "11", "12"], ["1", "20", "3", "4", "8"], ["1", "20", "3", "4", "7", "9"], ["1", "20", "3", "4", "7", "11", "12"], ["1", "20", "3", "4", "7", "11", "14"]], "prime_paths_statements": [["if i % 3 == 0:\\l", "result.append(lst[i] ** 2)\\l", "for i in range(len(lst)):\\l", "return sum(result)\\l"], ["if i % 3 == 0:\\l", "if i % 4 == 0 and i % 3 != 0:\\l", "result.append(lst[i] ** 3)\\l", "for i in range(len(lst)):\\l", "return sum(result)\\l"], ["if i % 3 == 0:\\l", "if i % 4 == 0 and i % 3 != 0:\\l", "result.append(lst[i])\\l", "for i in range(len(lst)):\\l", "return sum(result)\\l"], ["result.append(lst[i] ** 2)\\l", "for i in range(len(lst)):\\l", "if i % 3 == 0:\\l", "if i % 4 == 0 and i % 3 != 0:\\l", "result.append(lst[i] ** 3)\\l"], ["result.append(lst[i] ** 2)\\l", "for i in range(len(lst)):\\l", "if i % 3 == 0:\\l", "if i % 4 == 0 and i % 3 != 0:\\l", "result.append(lst[i])\\l"], ["if i % 4 == 0 and i % 3 != 0:\\l", "result.append(lst[i] ** 3)\\l", "for i in range(len(lst)):\\l", "if i % 3 == 0:\\l", "result.append(lst[i] ** 2)\\l"], ["if i % 4 == 0 and i % 3 != 0:\\l", "result.append(lst[i])\\l", "for i in range(len(lst)):\\l", "if i % 3 == 0:\\l", "result.append(lst[i] ** 2)\\l"], ["result.append(lst[i] ** 3)\\l", "for i in range(len(lst)):\\l", "if i % 3 == 0:\\l", "if i % 4 == 0 and i % 3 != 0:\\l", "result.append(lst[i])\\l"], ["result.append(lst[i])\\l", "for i in range(len(lst)):\\l", "if i % 3 == 0:\\l", "if i % 4 == 0 and i % 3 != 0:\\l", "result.append(lst[i] ** 3)\\l"], ["from typing import *\\ldef sum_squares(lst):...\\lsum_squares([-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37])\\l", "sum_squares", "result = []\\l", "for i in range(len(lst)):\\l", "return sum(result)\\l"], ["from typing import *\\ldef sum_squares(lst):...\\lsum_squares([-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37])\\l", "sum_squares", "result = []\\l", "for i in range(len(lst)):\\l", "if i % 3 == 0:\\l", "result.append(lst[i] ** 2)\\l"], ["from typing import *\\ldef sum_squares(lst):...\\lsum_squares([-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37])\\l", "sum_squares", "result = []\\l", "for i in range(len(lst)):\\l", "if i % 3 == 0:\\l", "if i % 4 == 0 and i % 3 != 0:\\l", "result.append(lst[i] ** 3)\\l"], ["from typing import *\\ldef sum_squares(lst):...\\lsum_squares([-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37])\\l", "sum_squares", "result = []\\l", "for i in range(len(lst)):\\l", "if i % 3 == 0:\\l", "if i % 4 == 0 and i % 3 != 0:\\l", "result.append(lst[i])\\l"]], "prime_paths_linenumbers": [[7, 8, 6, 13], [7, 9, 10, 6, 13], [7, 9, 12, 6, 13], [8, 6, 7, 9, 10], [8, 6, 7, 9, 12], [9, 10, 6, 7, 8], [9, 12, 6, 7, 8], [10, 6, 7, 9, 12], [12, 6, 7, 9, 10], [1, 15, 5, 6, 13], [1, 15, 5, 6, 7, 8], [1, 15, 5, 6, 7, 9, 10], [1, 15, 5, 6, 7, 9, 12]], "covered_statements_linenumbers": [1, 4, 5, 6, 7, 8, 9, 10, 12, 13, 15], "missing_statements_linenumbers": [], "covered_prime_paths_linenumbers": [[7, 8, 6, 13], [7, 9, 10, 6, 13], [7, 9, 12, 6, 13], [8, 6, 7, 9, 10], [8, 6, 7, 9, 12], [9, 10, 6, 7, 8], [9, 12, 6, 7, 8], [10, 6, 7, 9, 12], [12, 6, 7, 9, 10], [1, 15, 5, 6, 13], [1, 15, 5, 6, 7, 8], [1, 15, 5, 6, 7, 9, 10], [1, 15, 5, 6, 7, 9, 12]], "missing_prime_paths_linenumbers": [], "num_total_prime_paths": 13, "num_covered_paths": 13, "prime_path_coverage": 1.0, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_142__1_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_142__1_CFG.dot"}
{"humaneval_id": "HumanEval_157__0", "python_file": "HumanEval_157__0/main.py", "input_file": "HumanEval_157__0/input.txt", "prime_paths_nodes": [["1", "6", "3"]], "prime_paths_statements": [["from typing import *\\ldef right_angle_triangle(a, b, c):...\\lright_angle_triangle(7, 24, 25)\\l", "right_angle_triangle", "return a * a == b * b + c * c or b * b == a * a + c * c or c * c == a * a + b * b\\l"]], "prime_paths_linenumbers": [[1, 7, 5]], "covered_statements_linenumbers": [1, 4, 5, 7], "missing_statements_linenumbers": [], "covered_prime_paths_linenumbers": [[1, 7, 5]], "missing_prime_paths_linenumbers": [], "num_total_prime_paths": 1, "num_covered_paths": 1, "prime_path_coverage": 1.0, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_157__0_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_157__0_CFG.dot"}
{"humaneval_id": "HumanEval_60__1", "python_file": "HumanEval_60__1/main.py", "input_file": "HumanEval_60__1/input.txt", "prime_paths_nodes": [["1", "6", "3"]], "prime_paths_statements": [["from typing import *\\ldef sum_to_n(n: int):...\\lsum_to_n(100)\\l", "sum_to_n", "return sum(range(n + 1))\\l"]], "prime_paths_linenumbers": [[1, 7, 5]], "covered_statements_linenumbers": [1, 4, 5, 7], "missing_statements_linenumbers": [], "covered_prime_paths_linenumbers": [[1, 7, 5]], "missing_prime_paths_linenumbers": [], "num_total_prime_paths": 1, "num_covered_paths": 1, "prime_path_coverage": 1.0, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_60__1_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_60__1_CFG.dot"}
{"humaneval_id": "HumanEval_157", "python_file": "HumanEval_157/main.py", "input_file": "HumanEval_157/input.txt", "prime_paths_nodes": [["1", "6", "3"]], "prime_paths_statements": [["from typing import *\\ldef right_angle_triangle(a, b, c):...\\lright_angle_triangle(3, 4, 5)\\l", "right_angle_triangle", "return a * a == b * b + c * c or b * b == a * a + c * c or c * c == a * a + b * b\\l"]], "prime_paths_linenumbers": [[1, 5, 3]], "covered_statements_linenumbers": [1, 2, 3, 5], "missing_statements_linenumbers": [], "covered_prime_paths_linenumbers": [[1, 5, 3]], "missing_prime_paths_linenumbers": [], "num_total_prime_paths": 1, "num_covered_paths": 1, "prime_path_coverage": 1.0, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_157_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_157_CFG.dot"}
{"humaneval_id": "HumanEval_92__0", "python_file": "HumanEval_92__0/main.py", "input_file": "HumanEval_92__0/input.txt", "prime_paths_nodes": [["1", "12", "3", "5"], ["1", "12", "3", "4", "6"], ["1", "12", "3", "4", "7"]], "prime_paths_statements": [["from typing import *\\ldef any_int(x, y, z):...\\lany_int(2, 1, 1)\\l", "any_int", "if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\\l", "return False\\l"], ["from typing import *\\ldef any_int(x, y, z):...\\lany_int(2, 1, 1)\\l", "any_int", "if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\\l", "if x + y == z or x + z == y or y + z == x:\\l", "return True\\l"], ["from typing import *\\ldef any_int(x, y, z):...\\lany_int(2, 1, 1)\\l", "any_int", "if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\\l", "if x + y == z or x + z == y or y + z == x:\\l", "return False\\l"]], "prime_paths_linenumbers": [[1, 12, 6, 10], [1, 12, 6, 7, 8], [1, 12, 6, 7, 9]], "covered_statements_linenumbers": [1, 4, 6, 7, 8, 12], "missing_statements_linenumbers": [9, 10], "covered_prime_paths_linenumbers": [[1, 12, 6, 7, 8]], "missing_prime_paths_linenumbers": [[1, 12, 6, 10], [1, 12, 6, 7, 9]], "num_total_prime_paths": 3, "num_covered_paths": 1, "prime_path_coverage": 0.33, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_92__0_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_92__0_CFG.dot"}
{"humaneval_id": "HumanEval_74", "python_file": "HumanEval_74/main.py", "input_file": "HumanEval_74/input.txt", "prime_paths_nodes": [["5", "4", "6", "8", "9"], ["5", "4", "6", "8", "10", "12"], ["5", "4", "6", "8", "10", "14"], ["9", "8", "10", "12"], ["9", "8", "10", "14"], ["1", "18", "3", "4", "5"], ["1", "18", "3", "4", "6", "8", "9"], ["1", "18", "3", "4", "6", "8", "10", "12"], ["1", "18", "3", "4", "6", "8", "10", "14"]], "prime_paths_statements": [["l1 += len(st)\\l", "for st in lst1:\\l", "l2 = 0\\l", "for st in lst2:\\l", "l2 += len(st)\\l"], ["l1 += len(st)\\l", "for st in lst1:\\l", "l2 = 0\\l", "for st in lst2:\\l", "if l1 <= l2:\\l", "return lst1\\l"], ["l1 += len(st)\\l", "for st in lst1:\\l", "l2 = 0\\l", "for st in lst2:\\l", "if l1 <= l2:\\l", "return lst2\\l"], ["l2 += len(st)\\l", "for st in lst2:\\l", "if l1 <= l2:\\l", "return lst1\\l"], ["l2 += len(st)\\l", "for st in lst2:\\l", "if l1 <= l2:\\l", "return lst2\\l"], ["from typing import *\\ldef total_match(lst1, lst2):...\\ltotal_match(['hi', 'admin'], ['hi', 'hi'])\\l", "total_match", "l1 = 0\\l", "for st in lst1:\\l", "l1 += len(st)\\l"], ["from typing import *\\ldef total_match(lst1, lst2):...\\ltotal_match(['hi', 'admin'], ['hi', 'hi'])\\l", "total_match", "l1 = 0\\l", "for st in lst1:\\l", "l2 = 0\\l", "for st in lst2:\\l", "l2 += len(st)\\l"], ["from typing import *\\ldef total_match(lst1, lst2):...\\ltotal_match(['hi', 'admin'], ['hi', 'hi'])\\l", "total_match", "l1 = 0\\l", "for st in lst1:\\l", "l2 = 0\\l", "for st in lst2:\\l", "if l1 <= l2:\\l", "return lst1\\l"], ["from typing import *\\ldef total_match(lst1, lst2):...\\ltotal_match(['hi', 'admin'], ['hi', 'hi'])\\l", "total_match", "l1 = 0\\l", "for st in lst1:\\l", "l2 = 0\\l", "for st in lst2:\\l", "if l1 <= l2:\\l", "return lst2\\l"]], "prime_paths_linenumbers": [[5, 4, 7, 8, 9], [5, 4, 7, 8, 11, 12], [5, 4, 7, 8, 11, 14], [9, 8, 11, 12], [9, 8, 11, 14], [1, 16, 3, 4, 5], [1, 16, 3, 4, 7, 8, 9], [1, 16, 3, 4, 7, 8, 11, 12], [1, 16, 3, 4, 7, 8, 11, 14]], "covered_statements_linenumbers": [1, 2, 3, 4, 5, 7, 8, 9, 11, 14, 16], "missing_statements_linenumbers": [12], "covered_prime_paths_linenumbers": [[5, 4, 7, 8, 9], [5, 4, 7, 8, 11, 14], [9, 8, 11, 14], [1, 16, 3, 4, 5], [1, 16, 3, 4, 7, 8, 9], [1, 16, 3, 4, 7, 8, 11, 14]], "missing_prime_paths_linenumbers": [[5, 4, 7, 8, 11, 12], [9, 8, 11, 12], [1, 16, 3, 4, 7, 8, 11, 12]], "num_total_prime_paths": 9, "num_covered_paths": 6, "prime_path_coverage": 0.67, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_74_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_74_CFG.dot"}
{"humaneval_id": "HumanEval_29", "python_file": "HumanEval_29/main.py", "input_file": "HumanEval_29/input.txt", "prime_paths_nodes": [["1", "6", "3"]], "prime_paths_statements": [["from typing import *\\ldef filter_by_prefix(strings: List[str], prefix: str) ->List[str]:...\\lfilter_by_prefix([], 'john')\\l", "filter_by_prefix", "return [x for x in strings if x.startswith(prefix)]\\l"]], "prime_paths_linenumbers": [[1, 5, 3]], "covered_statements_linenumbers": [1, 2, 3, 5], "missing_statements_linenumbers": [], "covered_prime_paths_linenumbers": [[1, 5, 3]], "missing_prime_paths_linenumbers": [], "num_total_prime_paths": 1, "num_covered_paths": 1, "prime_path_coverage": 1.0, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_29_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_29_CFG.dot"}
{"humaneval_id": "HumanEval_40", "python_file": "HumanEval_40/main.py", "input_file": "HumanEval_40/input.txt", "prime_paths_nodes": [["14", "10", "6", "3", "7"], ["1", "21", "3", "7"], ["1", "21", "3", "6", "10", "14", "16"]], "prime_paths_statements": [["if l[i] + l[j] + l[k] == 0:\\l", "for k in range(j + 1, len(l)):\\l", "for j in range(i + 1, len(l)):\\l", "for i in range(len(l)):\\l", "return False\\l"], ["from typing import *\\ldef triples_sum_to_zero(l: list):...\\ltriples_sum_to_zero([1, 3, 5, 0])\\l", "triples_sum_to_zero", "for i in range(len(l)):\\l", "return False\\l"], ["from typing import *\\ldef triples_sum_to_zero(l: list):...\\ltriples_sum_to_zero([1, 3, 5, 0])\\l", "triples_sum_to_zero", "for i in range(len(l)):\\l", "for j in range(i + 1, len(l)):\\l", "for k in range(j + 1, len(l)):\\l", "if l[i] + l[j] + l[k] == 0:\\l", "return True\\l"]], "prime_paths_linenumbers": [[6, 5, 4, 3, 8], [1, 10, 3, 8], [1, 10, 3, 4, 5, 6, 7]], "covered_statements_linenumbers": [1, 2, 3, 4, 5, 6, 8, 10], "missing_statements_linenumbers": [7], "covered_prime_paths_linenumbers": [[6, 5, 4, 3, 8], [1, 10, 3, 8]], "missing_prime_paths_linenumbers": [[1, 10, 3, 4, 5, 6, 7]], "num_total_prime_paths": 3, "num_covered_paths": 2, "prime_path_coverage": 0.67, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_40_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_40_CFG.dot"}
{"humaneval_id": "HumanEval_113", "python_file": "HumanEval_113/main.py", "input_file": "HumanEval_113/input.txt", "prime_paths_nodes": [["5", "4", "6"], ["1", "16", "3", "4", "5"], ["1", "16", "3", "4", "6"]], "prime_paths_statements": [["n = sum(int(d) % 2 == 1 for d in arr)\\lres.append('the number of odd el...' + str(n) + 'n the str' + str(n) +\\l    'ng ' + str(n) + ' of the ' + str(n) + 'nput.')\\l", "for arr in lst:\\l", "return res\\l"], ["from typing import *\\ldef odd_count(lst):...\\lodd_count(['1234567'])\\l", "odd_count", "res = []\\l", "for arr in lst:\\l", "n = sum(int(d) % 2 == 1 for d in arr)\\lres.append('the number of odd el...' + str(n) + 'n the str' + str(n) +\\l    'ng ' + str(n) + ' of the ' + str(n) + 'nput.')\\l"], ["from typing import *\\ldef odd_count(lst):...\\lodd_count(['1234567'])\\l", "odd_count", "res = []\\l", "for arr in lst:\\l", "return res\\l"]], "prime_paths_linenumbers": [[5, 6, 4, 7], [1, 9, 3, 4, 5, 6], [1, 9, 3, 4, 7]], "covered_statements_linenumbers": [1, 2, 3, 4, 5, 6, 7, 9], "missing_statements_linenumbers": [], "covered_prime_paths_linenumbers": [[5, 6, 4, 7], [1, 9, 3, 4, 5, 6], [1, 9, 3, 4, 7]], "missing_prime_paths_linenumbers": [], "num_total_prime_paths": 3, "num_covered_paths": 3, "prime_path_coverage": 1.0, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_113_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_113_CFG.dot"}
{"humaneval_id": "HumanEval_88__1", "python_file": "HumanEval_88__1/main.py", "input_file": "HumanEval_88__1/input.txt", "prime_paths_nodes": [["1", "6", "3"]], "prime_paths_statements": [["from typing import *\\ldef sort_array(array):...\\lsort_array([5])\\l", "sort_array", "return [] if len(array) == 0 else sorted(array, reverse=(array[0] + array[-\\l    1]) % 2 == 0)\\l"]], "prime_paths_linenumbers": [[1, 8, 5]], "covered_statements_linenumbers": [1, 4, 5, 6, 8], "missing_statements_linenumbers": [], "covered_prime_paths_linenumbers": [[1, 8, 5]], "missing_prime_paths_linenumbers": [], "num_total_prime_paths": 1, "num_covered_paths": 1, "prime_path_coverage": 1.0, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_88__1_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_88__1_CFG.dot"}
{"humaneval_id": "HumanEval_58", "python_file": "HumanEval_58/main.py", "input_file": "HumanEval_58/input.txt", "prime_paths_nodes": [["8", "6", "5", "7"], ["8", "10", "6", "5", "7"], ["10", "6", "8"], ["1", "15", "3", "5", "7"], ["1", "15", "3", "5", "6", "8", "10"]], "prime_paths_statements": [["if e1 == e2:\\l", "for e2 in l2:\\l", "for e1 in l1:\\l", "return sorted(list(ret))\\l"], ["if e1 == e2:\\l", "ret.add(e1)\\l", "for e2 in l2:\\l", "for e1 in l1:\\l", "return sorted(list(ret))\\l"], ["ret.add(e1)\\l", "for e2 in l2:\\l", "if e1 == e2:\\l"], ["from typing import *\\ldef common(l1: list, l2: list):...\\lcommon([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\\l", "common", "ret = set()\\l", "for e1 in l1:\\l", "return sorted(list(ret))\\l"], ["from typing import *\\ldef common(l1: list, l2: list):...\\lcommon([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\\l", "common", "ret = set()\\l", "for e1 in l1:\\l", "for e2 in l2:\\l", "if e1 == e2:\\l", "ret.add(e1)\\l"]], "prime_paths_linenumbers": [[6, 5, 4, 8], [6, 7, 5, 4, 8], [7, 5, 6], [1, 10, 3, 4, 8], [1, 10, 3, 4, 5, 6, 7]], "covered_statements_linenumbers": [1, 2, 3, 4, 5, 6, 7, 8, 10], "missing_statements_linenumbers": [], "covered_prime_paths_linenumbers": [[6, 5, 4, 8], [6, 7, 5, 4, 8], [7, 5, 6], [1, 10, 3, 4, 8], [1, 10, 3, 4, 5, 6, 7]], "missing_prime_paths_linenumbers": [], "num_total_prime_paths": 5, "num_covered_paths": 5, "prime_path_coverage": 1.0, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_58_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_58_CFG.dot"}
{"humaneval_id": "HumanEval_149__0", "python_file": "HumanEval_149__0/main.py", "input_file": "HumanEval_149__0/input.txt", "prime_paths_nodes": [["6", "5", "7"], ["6", "9", "5", "7"], ["9", "5", "6"], ["1", "14", "3", "5", "7"], ["1", "14", "3", "5", "6", "9"]], "prime_paths_statements": [["if len(i) % 2 == 0:\\l", "for i in lst:\\l", "return sorted(new_lst, key=len)\\l"], ["if len(i) % 2 == 0:\\l", "new_lst.append(i)\\l", "for i in lst:\\l", "return sorted(new_lst, key=len)\\l"], ["new_lst.append(i)\\l", "for i in lst:\\l", "if len(i) % 2 == 0:\\l"], ["from typing import *\\ldef sorted_list_sum(lst):...\\lsorted_list_sum(['d', 'dcba', 'abcd', 'a'])\\l", "sorted_list_sum", "lst.sort()\\lnew_lst = []\\l", "for i in lst:\\l", "return sorted(new_lst, key=len)\\l"], ["from typing import *\\ldef sorted_list_sum(lst):...\\lsorted_list_sum(['d', 'dcba', 'abcd', 'a'])\\l", "sorted_list_sum", "lst.sort()\\lnew_lst = []\\l", "for i in lst:\\l", "if len(i) % 2 == 0:\\l", "new_lst.append(i)\\l"]], "prime_paths_linenumbers": [[8, 7, 10], [8, 9, 7, 10], [9, 7, 8], [1, 12, 5, 6, 7, 10], [1, 12, 5, 6, 7, 8, 9]], "covered_statements_linenumbers": [1, 4, 5, 6, 7, 8, 9, 10, 12], "missing_statements_linenumbers": [], "covered_prime_paths_linenumbers": [[8, 7, 10], [8, 9, 7, 10], [9, 7, 8], [1, 12, 5, 6, 7, 10], [1, 12, 5, 6, 7, 8, 9]], "missing_prime_paths_linenumbers": [], "num_total_prime_paths": 5, "num_covered_paths": 5, "prime_path_coverage": 1.0, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_149__0_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_149__0_CFG.dot"}
{"humaneval_id": "HumanEval_119__0", "python_file": "HumanEval_119__0/main.py", "input_file": "HumanEval_119__0/input.txt", "prime_paths_nodes": [["5", "6", "8"], ["5", "6", "7", "9", "10", "12"], ["5", "6", "7", "11", "10", "12"], ["7", "9", "10", "6", "8"], ["7", "11", "10", "6", "8"], ["9", "10", "6", "7", "11"], ["11", "10", "6", "7", "9"], ["1", "20", "3", "17"]], "prime_paths_statements": [["val = 0\\l", "for i in s:\\l", "return True if val == 0 else False\\l"], ["val = 0\\l", "for i in s:\\l", "if i == '(':\\l", "val = val + 1\\l", "if val < 0:\\l", "return False\\l"], ["val = 0\\l", "for i in s:\\l", "if i == '(':\\l", "val = val - 1\\l", "if val < 0:\\l", "return False\\l"], ["if i == '(':\\l", "val = val + 1\\l", "if val < 0:\\l", "for i in s:\\l", "return True if val == 0 else False\\l"], ["if i == '(':\\l", "val = val - 1\\l", "if val < 0:\\l", "for i in s:\\l", "return True if val == 0 else False\\l"], ["val = val + 1\\l", "if val < 0:\\l", "for i in s:\\l", "if i == '(':\\l", "val = val - 1\\l"], ["val = val - 1\\l", "if val < 0:\\l", "for i in s:\\l", "if i == '(':\\l", "val = val + 1\\l"], ["from typing import *\\ldef match_parens(lst):...\\lmatch_parens(['())(', '()'])\\l", "match_parens", "def check(s):...\\lS1 = lst[0] + lst[1]\\lS2 = lst[1] + lst[0]\\l", "return 'Yes' if check(S1) or che...'No'\\l"]], "prime_paths_linenumbers": [[6, 7, 14], [6, 7, 8, 9, 12, 13], [6, 7, 8, 11, 12, 13], [8, 9, 12, 7, 14], [8, 11, 12, 7, 14], [9, 12, 7, 8, 11], [11, 12, 7, 8, 9], [1, 20, 5, 16, 17, 18]], "covered_statements_linenumbers": [1, 4, 5, 6, 7, 8, 9, 11, 12, 13, 16, 17, 18, 20], "missing_statements_linenumbers": [14], "covered_prime_paths_linenumbers": [[6, 7, 8, 9, 12, 13], [6, 7, 8, 11, 12, 13], [9, 12, 7, 8, 11], [11, 12, 7, 8, 9], [1, 20, 5, 16, 17, 18]], "missing_prime_paths_linenumbers": [[6, 7, 14], [8, 9, 12, 7, 14], [8, 11, 12, 7, 14]], "num_total_prime_paths": 8, "num_covered_paths": 5, "prime_path_coverage": 0.62, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_119__0_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_119__0_CFG.dot"}
{"humaneval_id": "HumanEval_93", "python_file": "HumanEval_93/main.py", "input_file": "HumanEval_93/input.txt", "prime_paths_nodes": [["1", "11", "3", "8"]], "prime_paths_statements": [["from typing import *\\ldef encode(message):...\\lencode('TEST')\\l", "encode", "vowels = 'aeiouAEIOU'\\lvowels_replace = dict([(i, chr(ord(i) + 2)) for i in vowels])\\lmessage = message.swapcase()\\l", "return ''.join([(vowels_replace[i] if i in vowels else i) for i in message])\\l"]], "prime_paths_linenumbers": [[1, 8, 3, 4, 5, 6]], "covered_statements_linenumbers": [1, 2, 3, 4, 5, 6, 8], "missing_statements_linenumbers": [], "covered_prime_paths_linenumbers": [[1, 8, 3, 4, 5, 6]], "missing_prime_paths_linenumbers": [], "num_total_prime_paths": 1, "num_covered_paths": 1, "prime_path_coverage": 1.0, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_93_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_93_CFG.dot"}
{"humaneval_id": "HumanEval_3__1", "python_file": "HumanEval_3__1/main.py", "input_file": "HumanEval_3__1/input.txt", "prime_paths_nodes": [["5", "7", "4", "6"], ["7", "4", "5"], ["1", "13", "3", "4", "6"], ["1", "13", "3", "4", "5", "7", "8"]], "prime_paths_statements": [["balance += op\\l", "if balance < 0:\\l", "for op in operations:\\l", "return False\\l"], ["if balance < 0:\\l", "for op in operations:\\l", "balance += op\\l"], ["from typing import *\\ldef below_zero(operations: List[int]) ->bool:...\\lbelow_zero([1, -1, 2, -2, 5, -5, 4, -4])\\l", "below_zero", "balance = 0\\l", "for op in operations:\\l", "return False\\l"], ["from typing import *\\ldef below_zero(operations: List[int]) ->bool:...\\lbelow_zero([1, -1, 2, -2, 5, -5, 4, -4])\\l", "below_zero", "balance = 0\\l", "for op in operations:\\l", "balance += op\\l", "if balance < 0:\\l", "return True\\l"]], "prime_paths_linenumbers": [[8, 9, 7, 12], [9, 7, 8], [1, 14, 5, 7, 12], [1, 14, 5, 7, 8, 9, 10]], "covered_statements_linenumbers": [1, 4, 5, 7, 8, 9, 12, 14], "missing_statements_linenumbers": [10], "covered_prime_paths_linenumbers": [[8, 9, 7, 12], [9, 7, 8], [1, 14, 5, 7, 12]], "missing_prime_paths_linenumbers": [[1, 14, 5, 7, 8, 9, 10]], "num_total_prime_paths": 4, "num_covered_paths": 3, "prime_path_coverage": 0.75, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_3__1_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_3__1_CFG.dot"}
{"humaneval_id": "HumanEval_34__1", "python_file": "HumanEval_34__1/main.py", "input_file": "HumanEval_34__1/input.txt", "prime_paths_nodes": [["1", "6", "3"]], "prime_paths_statements": [["from typing import *\\ldef unique(l: list):...\\lunique([2, 1, 1, 2, 1, 1])\\l", "unique", "return sorted(list(set(l)))\\l"]], "prime_paths_linenumbers": [[1, 7, 5]], "covered_statements_linenumbers": [1, 4, 5, 7], "missing_statements_linenumbers": [], "covered_prime_paths_linenumbers": [[1, 7, 5]], "missing_prime_paths_linenumbers": [], "num_total_prime_paths": 1, "num_covered_paths": 1, "prime_path_coverage": 1.0, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_34__1_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_34__1_CFG.dot"}
{"humaneval_id": "HumanEval_69__1", "python_file": "HumanEval_69__1/main.py", "input_file": "HumanEval_69__1/input.txt", "prime_paths_nodes": [["6", "5", "7", "8", "12"], ["6", "5", "7", "8", "11", "13"], ["11", "8", "12"], ["11", "13", "8", "12"], ["13", "8", "11"], ["1", "17", "3", "5", "6"], ["1", "17", "3", "5", "7", "8", "12"], ["1", "17", "3", "5", "7", "8", "11", "13"]], "prime_paths_statements": [["frq[i] += 1\\l", "for i in lst:\\l", "ans = -1\\l", "for i in range(1, len(frq)):\\l", "return ans\\l"], ["frq[i] += 1\\l", "for i in lst:\\l", "ans = -1\\l", "for i in range(1, len(frq)):\\l", "if frq[i] >= i:\\l", "ans = i\\l"], ["if frq[i] >= i:\\l", "for i in range(1, len(frq)):\\l", "return ans\\l"], ["if frq[i] >= i:\\l", "ans = i\\l", "for i in range(1, len(frq)):\\l", "return ans\\l"], ["ans = i\\l", "for i in range(1, len(frq)):\\l", "if frq[i] >= i:\\l"], ["from typing import *\\ldef search(lst):...\\lsearch([8, 8, 8, 8, 8, 8, 8, 8])\\l", "search", "frq = [0] * (max(lst) + 1)\\l", "for i in lst:\\l", "frq[i] += 1\\l"], ["from typing import *\\ldef search(lst):...\\lsearch([8, 8, 8, 8, 8, 8, 8, 8])\\l", "search", "frq = [0] * (max(lst) + 1)\\l", "for i in lst:\\l", "ans = -1\\l", "for i in range(1, len(frq)):\\l", "return ans\\l"], ["from typing import *\\ldef search(lst):...\\lsearch([8, 8, 8, 8, 8, 8, 8, 8])\\l", "search", "frq = [0] * (max(lst) + 1)\\l", "for i in lst:\\l", "ans = -1\\l", "for i in range(1, len(frq)):\\l", "if frq[i] >= i:\\l", "ans = i\\l"]], "prime_paths_linenumbers": [[7, 6, 9, 10, 14], [7, 6, 9, 10, 11, 12], [11, 10, 14], [11, 12, 10, 14], [12, 10, 11], [1, 16, 5, 6, 7], [1, 16, 5, 6, 9, 10, 14], [1, 16, 5, 6, 9, 10, 11, 12]], "covered_statements_linenumbers": [1, 4, 5, 6, 7, 9, 10, 11, 12, 14, 16], "missing_statements_linenumbers": [], "covered_prime_paths_linenumbers": [[7, 6, 9, 10, 14], [7, 6, 9, 10, 11, 12], [11, 10, 14], [11, 12, 10, 14], [12, 10, 11], [1, 16, 5, 6, 7], [1, 16, 5, 6, 9, 10, 14], [1, 16, 5, 6, 9, 10, 11, 12]], "missing_prime_paths_linenumbers": [], "num_total_prime_paths": 8, "num_covered_paths": 8, "prime_path_coverage": 1.0, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_69__1_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_69__1_CFG.dot"}
{"humaneval_id": "HumanEval_85__0", "python_file": "HumanEval_85__0/main.py", "input_file": "HumanEval_85__0/input.txt", "prime_paths_nodes": [["1", "6", "3"]], "prime_paths_statements": [["from typing import *\\ldef add(lst):...\\ladd([4, 0, 6, 7])\\l", "add", "return sum([lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0])\\l"]], "prime_paths_linenumbers": [[1, 7, 5]], "covered_statements_linenumbers": [1, 4, 5, 7], "missing_statements_linenumbers": [], "covered_prime_paths_linenumbers": [[1, 7, 5]], "missing_prime_paths_linenumbers": [], "num_total_prime_paths": 1, "num_covered_paths": 1, "prime_path_coverage": 1.0, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_85__0_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_85__0_CFG.dot"}
{"humaneval_id": "HumanEval_58__0", "python_file": "HumanEval_58__0/main.py", "input_file": "HumanEval_58__0/input.txt", "prime_paths_nodes": [["8", "6", "5", "7"], ["8", "10", "6", "5", "7"], ["10", "6", "8"], ["1", "15", "3", "5", "7"], ["1", "15", "3", "5", "6", "8", "10"]], "prime_paths_statements": [["if e1 == e2:\\l", "for e2 in l2:\\l", "for e1 in l1:\\l", "return sorted(list(ret))\\l"], ["if e1 == e2:\\l", "ret.add(e1)\\l", "for e2 in l2:\\l", "for e1 in l1:\\l", "return sorted(list(ret))\\l"], ["ret.add(e1)\\l", "for e2 in l2:\\l", "if e1 == e2:\\l"], ["from typing import *\\ldef common(l1: list, l2: list):...\\lcommon([4, 3, 2, 8], [3, 2, 4])\\l", "common", "ret = set()\\l", "for e1 in l1:\\l", "return sorted(list(ret))\\l"], ["from typing import *\\ldef common(l1: list, l2: list):...\\lcommon([4, 3, 2, 8], [3, 2, 4])\\l", "common", "ret = set()\\l", "for e1 in l1:\\l", "for e2 in l2:\\l", "if e1 == e2:\\l", "ret.add(e1)\\l"]], "prime_paths_linenumbers": [[8, 7, 6, 10], [8, 9, 7, 6, 10], [9, 7, 8], [1, 12, 5, 6, 10], [1, 12, 5, 6, 7, 8, 9]], "covered_statements_linenumbers": [1, 4, 5, 6, 7, 8, 9, 10, 12], "missing_statements_linenumbers": [], "covered_prime_paths_linenumbers": [[8, 7, 6, 10], [8, 9, 7, 6, 10], [9, 7, 8], [1, 12, 5, 6, 10], [1, 12, 5, 6, 7, 8, 9]], "missing_prime_paths_linenumbers": [], "num_total_prime_paths": 5, "num_covered_paths": 5, "prime_path_coverage": 1.0, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_58__0_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_58__0_CFG.dot"}
{"humaneval_id": "HumanEval_77", "python_file": "HumanEval_77/main.py", "input_file": "HumanEval_77/input.txt", "prime_paths_nodes": [["1", "8", "3", "5"]], "prime_paths_statements": [["from typing import *\\ldef iscube(a):...\\liscube(1)\\l", "iscube", "a = abs(a)\\l", "return int(round(a ** (1.0 / 3))) ** 3 == a\\l"]], "prime_paths_linenumbers": [[1, 6, 3, 4]], "covered_statements_linenumbers": [1, 2, 3, 4, 6], "missing_statements_linenumbers": [], "covered_prime_paths_linenumbers": [[1, 6, 3, 4]], "missing_prime_paths_linenumbers": [], "num_total_prime_paths": 1, "num_covered_paths": 1, "prime_path_coverage": 1.0, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_77_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_77_CFG.dot"}
{"humaneval_id": "HumanEval_71__1", "python_file": "HumanEval_71__1/main.py", "input_file": "HumanEval_71__1/input.txt", "prime_paths_nodes": [["1", "11", "3", "4"], ["1", "11", "3", "5", "8"]], "prime_paths_statements": [["from typing import *\\ldef triangle_area(a, b, c):...\\ltriangle_area(1, 2, 10)\\l", "triangle_area", "if a + b <= c or a + c <= b or b + c <= a:\\l", "return -1\\l"], ["from typing import *\\ldef triangle_area(a, b, c):...\\ltriangle_area(1, 2, 10)\\l", "triangle_area", "if a + b <= c or a + c <= b or b + c <= a:\\l", "s = (a + b + c) / 2\\larea = (s * (s - a) * (s - b) * (s - c)) ** 0.5\\larea = round(area, 2)\\l", "return area\\l"]], "prime_paths_linenumbers": [[1, 12, 5, 6], [1, 12, 5, 7, 8, 9, 10]], "covered_statements_linenumbers": [1, 4, 5, 6, 12], "missing_statements_linenumbers": [7, 8, 9, 10], "covered_prime_paths_linenumbers": [[1, 12, 5, 6]], "missing_prime_paths_linenumbers": [[1, 12, 5, 7, 8, 9, 10]], "num_total_prime_paths": 2, "num_covered_paths": 1, "prime_path_coverage": 0.5, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_71__1_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_71__1_CFG.dot"}
{"humaneval_id": "HumanEval_28", "python_file": "HumanEval_28/main.py", "input_file": "HumanEval_28/input.txt", "prime_paths_nodes": [["1", "6", "3"]], "prime_paths_statements": [["from typing import *\\ldef concatenate(strings: List[str]) ->str:...\\lconcatenate(['x', 'y', 'z'])\\l", "concatenate", "return ''.join(strings)\\l"]], "prime_paths_linenumbers": [[1, 5, 3]], "covered_statements_linenumbers": [1, 2, 3, 5], "missing_statements_linenumbers": [], "covered_prime_paths_linenumbers": [[1, 5, 3]], "missing_prime_paths_linenumbers": [], "num_total_prime_paths": 1, "num_covered_paths": 1, "prime_path_coverage": 1.0, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_28_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_28_CFG.dot"}
{"humaneval_id": "HumanEval_115__1", "python_file": "HumanEval_115__1/main.py", "input_file": "HumanEval_115__1/input.txt", "prime_paths_nodes": [["1", "6", "3"]], "prime_paths_statements": [["from typing import *\\limport math\\ldef max_fill(grid, capacity):...\\lmax_fill([[1, 1, 1, 1], [1, 1, 1, 1]], 2)\\l", "max_fill", "return sum([math.ceil(sum(arr) / capacity) for arr in grid])\\l"]], "prime_paths_linenumbers": [[1, 8, 6]], "covered_statements_linenumbers": [1, 2, 5, 6, 8], "missing_statements_linenumbers": [], "covered_prime_paths_linenumbers": [[1, 8, 6]], "missing_prime_paths_linenumbers": [], "num_total_prime_paths": 1, "num_covered_paths": 1, "prime_path_coverage": 1.0, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_115__1_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_115__1_CFG.dot"}
{"humaneval_id": "HumanEval_28__1", "python_file": "HumanEval_28__1/main.py", "input_file": "HumanEval_28__1/input.txt", "prime_paths_nodes": [["1", "6", "3"]], "prime_paths_statements": [["from typing import *\\ldef concatenate(strings: List[str]) ->str:...\\lconcatenate(['x', 'y', 'z', 'w', 'k'])\\l", "concatenate", "return ''.join(strings)\\l"]], "prime_paths_linenumbers": [[1, 7, 5]], "covered_statements_linenumbers": [1, 4, 5, 7], "missing_statements_linenumbers": [], "covered_prime_paths_linenumbers": [[1, 7, 5]], "missing_prime_paths_linenumbers": [], "num_total_prime_paths": 1, "num_covered_paths": 1, "prime_path_coverage": 1.0, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_28__1_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_28__1_CFG.dot"}
{"humaneval_id": "HumanEval_128", "python_file": "HumanEval_128/main.py", "input_file": "HumanEval_128/input.txt", "prime_paths_nodes": [["1", "13", "3", "4"], ["1", "13", "3", "5", "10"]], "prime_paths_statements": [["from typing import *\\ldef prod_signs(arr):...\\lprod_signs([1, 2, 2, -4])\\l", "prod_signs", "if not arr:\\l", "return None\\l"], ["from typing import *\\ldef prod_signs(arr):...\\lprod_signs([1, 2, 2, -4])\\l", "prod_signs", "if not arr:\\l", "prod = 0 if 0 in arr else (-1) ** len(list(filter(lambda x: x < 0, arr)))\\l", "return prod * sum([abs(i) for i in arr])\\l"]], "prime_paths_linenumbers": [[1, 7, 3, 3], [1, 7, 3, 4, 5]], "covered_statements_linenumbers": [1, 2, 3, 4, 5, 7], "missing_statements_linenumbers": [], "covered_prime_paths_linenumbers": [[1, 7, 3, 3], [1, 7, 3, 4, 5]], "missing_prime_paths_linenumbers": [], "num_total_prime_paths": 2, "num_covered_paths": 2, "prime_path_coverage": 1.0, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_128_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_128_CFG.dot"}
{"humaneval_id": "HumanEval_32__1", "python_file": "HumanEval_32__1/main.py", "input_file": "HumanEval_32__1/input.txt", "prime_paths_nodes": [["9", "8", "10", "11", "13", "14", "3"], ["9", "8", "10", "11", "13", "15", "3"], ["9", "8", "10", "12"], ["9", "8", "10", "11", "13", "16"], ["9", "8", "10", "11", "13", "18"], ["11", "13", "16", "10", "12"], ["11", "13", "18", "10", "12"], ["13", "16", "10", "11"], ["13", "18", "10", "11"], ["16", "10", "11", "13", "14", "3"], ["16", "10", "11", "13", "15", "3"], ["16", "10", "11", "13", "18"], ["18", "10", "11", "13", "14", "3"], ["18", "10", "11", "13", "15", "3"], ["18", "10", "11", "13", "16"], ["1", "21", "7", "8", "10", "11", "13", "14", "3"], ["1", "21", "7", "8", "10", "11", "13", "15", "3"], ["1", "21", "7", "8", "9"], ["1", "21", "7", "8", "10", "12"], ["1", "21", "7", "8", "10", "11", "13", "16"], ["1", "21", "7", "8", "10", "11", "13", "18"]], "prime_paths_statements": [["begin *= 2.0\\lend *= 2.0\\l", "while poly(xs, begin) * poly(xs, end) > 0:\\l", "while end - begin > 1e-10:\\l", "center = (begin + end) / 2.0\\l", "if poly(xs, center) * poly(xs, begin) > 0:\\l", "poly", "return sum([(coeff * math.pow(x, i)) for i, coeff in enumerate(xs)])\\l"], ["begin *= 2.0\\lend *= 2.0\\l", "while poly(xs, begin) * poly(xs, end) > 0:\\l", "while end - begin > 1e-10:\\l", "center = (begin + end) / 2.0\\l", "if poly(xs, center) * poly(xs, begin) > 0:\\l", "poly", "return sum([(coeff * math.pow(x, i)) for i, coeff in enumerate(xs)])\\l"], ["begin *= 2.0\\lend *= 2.0\\l", "while poly(xs, begin) * poly(xs, end) > 0:\\l", "while end - begin > 1e-10:\\l", "return begin\\l"], ["begin *= 2.0\\lend *= 2.0\\l", "while poly(xs, begin) * poly(xs, end) > 0:\\l", "while end - begin > 1e-10:\\l", "center = (begin + end) / 2.0\\l", "if poly(xs, center) * poly(xs, begin) > 0:\\l", "begin = center\\l"], ["begin *= 2.0\\lend *= 2.0\\l", "while poly(xs, begin) * poly(xs, end) > 0:\\l", "while end - begin > 1e-10:\\l", "center = (begin + end) / 2.0\\l", "if poly(xs, center) * poly(xs, begin) > 0:\\l", "end = center\\l"], ["center = (begin + end) / 2.0\\l", "if poly(xs, center) * poly(xs, begin) > 0:\\l", "begin = center\\l", "while end - begin > 1e-10:\\l", "return begin\\l"], ["center = (begin + end) / 2.0\\l", "if poly(xs, center) * poly(xs, begin) > 0:\\l", "end = center\\l", "while end - begin > 1e-10:\\l", "return begin\\l"], ["if poly(xs, center) * poly(xs, begin) > 0:\\l", "begin = center\\l", "while end - begin > 1e-10:\\l", "center = (begin + end) / 2.0\\l"], ["if poly(xs, center) * poly(xs, begin) > 0:\\l", "end = center\\l", "while end - begin > 1e-10:\\l", "center = (begin + end) / 2.0\\l"], ["begin = center\\l", "while end - begin > 1e-10:\\l", "center = (begin + end) / 2.0\\l", "if poly(xs, center) * poly(xs, begin) > 0:\\l", "poly", "return sum([(coeff * math.pow(x, i)) for i, coeff in enumerate(xs)])\\l"], ["begin = center\\l", "while end - begin > 1e-10:\\l", "center = (begin + end) / 2.0\\l", "if poly(xs, center) * poly(xs, begin) > 0:\\l", "poly", "return sum([(coeff * math.pow(x, i)) for i, coeff in enumerate(xs)])\\l"], ["begin = center\\l", "while end - begin > 1e-10:\\l", "center = (begin + end) / 2.0\\l", "if poly(xs, center) * poly(xs, begin) > 0:\\l", "end = center\\l"], ["end = center\\l", "while end - begin > 1e-10:\\l", "center = (begin + end) / 2.0\\l", "if poly(xs, center) * poly(xs, begin) > 0:\\l", "poly", "return sum([(coeff * math.pow(x, i)) for i, coeff in enumerate(xs)])\\l"], ["end = center\\l", "while end - begin > 1e-10:\\l", "center = (begin + end) / 2.0\\l", "if poly(xs, center) * poly(xs, begin) > 0:\\l", "poly", "return sum([(coeff * math.pow(x, i)) for i, coeff in enumerate(xs)])\\l"], ["end = center\\l", "while end - begin > 1e-10:\\l", "center = (begin + end) / 2.0\\l", "if poly(xs, center) * poly(xs, begin) > 0:\\l", "begin = center\\l"], ["from typing import *\\limport math\\ldef poly(xs: list, x: float):...\\ldef find_zero(xs: list):...\\lfind_zero([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])\\l", "find_zero", "begin, end = -1.0, 1.0\\l", "while poly(xs, begin) * poly(xs, end) > 0:\\l", "while end - begin > 1e-10:\\l", "center = (begin + end) / 2.0\\l", "if poly(xs, center) * poly(xs, begin) > 0:\\l", "poly", "return sum([(coeff * math.pow(x, i)) for i, coeff in enumerate(xs)])\\l"], ["from typing import *\\limport math\\ldef poly(xs: list, x: float):...\\ldef find_zero(xs: list):...\\lfind_zero([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])\\l", "find_zero", "begin, end = -1.0, 1.0\\l", "while poly(xs, begin) * poly(xs, end) > 0:\\l", "while end - begin > 1e-10:\\l", "center = (begin + end) / 2.0\\l", "if poly(xs, center) * poly(xs, begin) > 0:\\l", "poly", "return sum([(coeff * math.pow(x, i)) for i, coeff in enumerate(xs)])\\l"], ["from typing import *\\limport math\\ldef poly(xs: list, x: float):...\\ldef find_zero(xs: list):...\\lfind_zero([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])\\l", "find_zero", "begin, end = -1.0, 1.0\\l", "while poly(xs, begin) * poly(xs, end) > 0:\\l", "begin *= 2.0\\lend *= 2.0\\l"], ["from typing import *\\limport math\\ldef poly(xs: list, x: float):...\\ldef find_zero(xs: list):...\\lfind_zero([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])\\l", "find_zero", "begin, end = -1.0, 1.0\\l", "while poly(xs, begin) * poly(xs, end) > 0:\\l", "while end - begin > 1e-10:\\l", "return begin\\l"], ["from typing import *\\limport math\\ldef poly(xs: list, x: float):...\\ldef find_zero(xs: list):...\\lfind_zero([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])\\l", "find_zero", "begin, end = -1.0, 1.0\\l", "while poly(xs, begin) * poly(xs, end) > 0:\\l", "while end - begin > 1e-10:\\l", "center = (begin + end) / 2.0\\l", "if poly(xs, center) * poly(xs, begin) > 0:\\l", "begin = center\\l"], ["from typing import *\\limport math\\ldef poly(xs: list, x: float):...\\ldef find_zero(xs: list):...\\lfind_zero([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])\\l", "find_zero", "begin, end = -1.0, 1.0\\l", "while poly(xs, begin) * poly(xs, end) > 0:\\l", "while end - begin > 1e-10:\\l", "center = (begin + end) / 2.0\\l", "if poly(xs, center) * poly(xs, begin) > 0:\\l", "end = center\\l"]], "prime_paths_linenumbers": [[12, 13, 11, 14, 15, 16, 16, 6], [12, 13, 11, 14, 15, 16, 16, 6], [12, 13, 11, 14, 20], [12, 13, 11, 14, 15, 16, 17], [12, 13, 11, 14, 15, 16, 19], [15, 16, 17, 14, 20], [15, 16, 19, 14, 20], [16, 17, 14, 15], [16, 19, 14, 15], [17, 14, 15, 16, 16, 6], [17, 14, 15, 16, 16, 6], [17, 14, 15, 16, 19], [19, 14, 15, 16, 16, 6], [19, 14, 15, 16, 16, 6], [19, 14, 15, 16, 17], [1, 22, 10, 11, 14, 15, 16, 16, 6], [1, 22, 10, 11, 14, 15, 16, 16, 6], [1, 22, 10, 11, 12, 13], [1, 22, 10, 11, 14, 20], [1, 22, 10, 11, 14, 15, 16, 17], [1, 22, 10, 11, 14, 15, 16, 19]], "covered_statements_linenumbers": [1, 2, 5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 22], "missing_statements_linenumbers": [], "covered_prime_paths_linenumbers": [[12, 13, 11, 14, 15, 16, 16, 6], [12, 13, 11, 14, 15, 16, 16, 6], [12, 13, 11, 14, 20], [12, 13, 11, 14, 15, 16, 17], [12, 13, 11, 14, 15, 16, 19], [15, 16, 17, 14, 20], [15, 16, 19, 14, 20], [16, 17, 14, 15], [16, 19, 14, 15], [17, 14, 15, 16, 16, 6], [17, 14, 15, 16, 16, 6], [17, 14, 15, 16, 19], [19, 14, 15, 16, 16, 6], [19, 14, 15, 16, 16, 6], [19, 14, 15, 16, 17], [1, 22, 10, 11, 14, 15, 16, 16, 6], [1, 22, 10, 11, 14, 15, 16, 16, 6], [1, 22, 10, 11, 12, 13], [1, 22, 10, 11, 14, 20], [1, 22, 10, 11, 14, 15, 16, 17], [1, 22, 10, 11, 14, 15, 16, 19]], "missing_prime_paths_linenumbers": [], "num_total_prime_paths": 21, "num_covered_paths": 21, "prime_path_coverage": 1.0, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_32__1_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_32__1_CFG.dot"}
{"humaneval_id": "HumanEval_147__0", "python_file": "HumanEval_147__0/main.py", "input_file": "HumanEval_147__0/input.txt", "prime_paths_nodes": [["13", "10", "7", "5", "8"], ["13", "15", "10", "7", "5", "8"], ["15", "10", "13"], ["1", "19", "3", "5", "8"], ["1", "19", "3", "5", "7", "10", "13", "15"]], "prime_paths_statements": [["if (A[i] + A[j] + A[k]) % 3 == 0:\\l", "for k in range(j + 1, n):\\l", "for j in range(i + 1, n):\\l", "for i in range(n):\\l", "return len(ans)\\l"], ["if (A[i] + A[j] + A[k]) % 3 == 0:\\l", "ans += [(A[i], A[j], A[k])]\\l", "for k in range(j + 1, n):\\l", "for j in range(i + 1, n):\\l", "for i in range(n):\\l", "return len(ans)\\l"], ["ans += [(A[i], A[j], A[k])]\\l", "for k in range(j + 1, n):\\l", "if (A[i] + A[j] + A[k]) % 3 == 0:\\l"], ["from typing import *\\ldef get_max_triples(n):...\\lget_max_triples(100)\\l", "get_max_triples", "A = [(i * i - i + 1) for i in range(1, n + 1)]\\lans = []\\l", "for i in range(n):\\l", "return len(ans)\\l"], ["from typing import *\\ldef get_max_triples(n):...\\lget_max_triples(100)\\l", "get_max_triples", "A = [(i * i - i + 1) for i in range(1, n + 1)]\\lans = []\\l", "for i in range(n):\\l", "for j in range(i + 1, n):\\l", "for k in range(j + 1, n):\\l", "if (A[i] + A[j] + A[k]) % 3 == 0:\\l", "ans += [(A[i], A[j], A[k])]\\l"]], "prime_paths_linenumbers": [[10, 9, 8, 7, 12], [10, 11, 9, 8, 7, 12], [11, 9, 10], [1, 14, 5, 6, 7, 12], [1, 14, 5, 6, 7, 8, 9, 10, 11]], "covered_statements_linenumbers": [1, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14], "missing_statements_linenumbers": [], "covered_prime_paths_linenumbers": [[10, 9, 8, 7, 12], [10, 11, 9, 8, 7, 12], [11, 9, 10], [1, 14, 5, 6, 7, 12], [1, 14, 5, 6, 7, 8, 9, 10, 11]], "missing_prime_paths_linenumbers": [], "num_total_prime_paths": 5, "num_covered_paths": 5, "prime_path_coverage": 1.0, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_147__0_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_147__0_CFG.dot"}
{"humaneval_id": "HumanEval_107__0", "python_file": "HumanEval_107__0/main.py", "input_file": "HumanEval_107__0/input.txt", "prime_paths_nodes": [["10", "12", "8", "11"], ["10", "14", "8", "11"], ["10", "14", "15", "8", "11"], ["12", "8", "10", "14", "15"], ["14", "8", "10", "12"], ["14", "15", "8", "10", "12"], ["15", "8", "10", "14"], ["1", "19", "3", "8", "11"], ["1", "19", "3", "8", "10", "12"], ["1", "19", "3", "8", "10", "14", "15"]], "prime_paths_statements": [["if i % 2 == 1 and is_palindrome(i):\\l", "odd_palindrome_count += 1\\l", "for i in range(1, n + 1):\\l", "return even_palindrome_count, odd_palindrome_count\\l"], ["if i % 2 == 1 and is_palindrome(i):\\l", "if i % 2 == 0 and is_palindrome(i):\\l", "for i in range(1, n + 1):\\l", "return even_palindrome_count, odd_palindrome_count\\l"], ["if i % 2 == 1 and is_palindrome(i):\\l", "if i % 2 == 0 and is_palindrome(i):\\l", "even_palindrome_count += 1\\l", "for i in range(1, n + 1):\\l", "return even_palindrome_count, odd_palindrome_count\\l"], ["odd_palindrome_count += 1\\l", "for i in range(1, n + 1):\\l", "if i % 2 == 1 and is_palindrome(i):\\l", "if i % 2 == 0 and is_palindrome(i):\\l", "even_palindrome_count += 1\\l"], ["if i % 2 == 0 and is_palindrome(i):\\l", "for i in range(1, n + 1):\\l", "if i % 2 == 1 and is_palindrome(i):\\l", "odd_palindrome_count += 1\\l"], ["if i % 2 == 0 and is_palindrome(i):\\l", "even_palindrome_count += 1\\l", "for i in range(1, n + 1):\\l", "if i % 2 == 1 and is_palindrome(i):\\l", "odd_palindrome_count += 1\\l"], ["even_palindrome_count += 1\\l", "for i in range(1, n + 1):\\l", "if i % 2 == 1 and is_palindrome(i):\\l", "if i % 2 == 0 and is_palindrome(i):\\l"], ["from typing import *\\ldef even_odd_palindrome(n):...\\leven_odd_palindrome(9)\\l", "even_odd_palindrome", "def is_palindrome(n):...\\leven_palindrome_count = 0\\lodd_palindrome_count = 0\\l", "for i in range(1, n + 1):\\l", "return even_palindrome_count, odd_palindrome_count\\l"], ["from typing import *\\ldef even_odd_palindrome(n):...\\leven_odd_palindrome(9)\\l", "even_odd_palindrome", "def is_palindrome(n):...\\leven_palindrome_count = 0\\lodd_palindrome_count = 0\\l", "for i in range(1, n + 1):\\l", "if i % 2 == 1 and is_palindrome(i):\\l", "odd_palindrome_count += 1\\l"], ["from typing import *\\ldef even_odd_palindrome(n):...\\leven_odd_palindrome(9)\\l", "even_odd_palindrome", "def is_palindrome(n):...\\leven_palindrome_count = 0\\lodd_palindrome_count = 0\\l", "for i in range(1, n + 1):\\l", "if i % 2 == 1 and is_palindrome(i):\\l", "if i % 2 == 0 and is_palindrome(i):\\l", "even_palindrome_count += 1\\l"]], "prime_paths_linenumbers": [[12, 13, 11, 16], [12, 14, 11, 16], [12, 14, 15, 11, 16], [13, 11, 12, 14, 15], [14, 11, 12, 13], [14, 15, 11, 12, 13], [15, 11, 12, 14], [1, 18, 5, 8, 9, 11, 16], [1, 18, 5, 8, 9, 11, 12, 13], [1, 18, 5, 8, 9, 11, 12, 14, 15]], "covered_statements_linenumbers": [1, 4, 5, 6, 8, 9, 11, 12, 13, 14, 15, 16, 18], "missing_statements_linenumbers": [], "covered_prime_paths_linenumbers": [[12, 13, 11, 16], [12, 14, 11, 16], [12, 14, 15, 11, 16], [13, 11, 12, 14, 15], [14, 11, 12, 13], [14, 15, 11, 12, 13], [15, 11, 12, 14], [1, 18, 5, 8, 9, 11, 16], [1, 18, 5, 8, 9, 11, 12, 13], [1, 18, 5, 8, 9, 11, 12, 14, 15]], "missing_prime_paths_linenumbers": [], "num_total_prime_paths": 10, "num_covered_paths": 10, "prime_path_coverage": 1.0, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_107__0_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_107__0_CFG.dot"}
{"humaneval_id": "HumanEval_91__0", "python_file": "HumanEval_91__0/main.py", "input_file": "HumanEval_91__0/input.txt", "prime_paths_nodes": [["1", "8", "3", "5"]], "prime_paths_statements": [["from typing import *\\ldef is_bored(S):...\\lis_bored('You and I are going ...')\\l", "is_bored", "import re\\lsentences = re.split('[.?!]\\\\s*', S)\\l", "return sum(sentence[0:2] == 'I ' for sentence in sentences)\\l"]], "prime_paths_linenumbers": [[1, 9, 5, 6, 7]], "covered_statements_linenumbers": [1, 4, 5, 6, 7, 9], "missing_statements_linenumbers": [], "covered_prime_paths_linenumbers": [[1, 9, 5, 6, 7]], "missing_prime_paths_linenumbers": [], "num_total_prime_paths": 1, "num_covered_paths": 1, "prime_path_coverage": 1.0, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_91__0_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_91__0_CFG.dot"}
{"humaneval_id": "HumanEval_67__0", "python_file": "HumanEval_67__0/main.py", "input_file": "HumanEval_67__0/input.txt", "prime_paths_nodes": [["7", "5", "8"], ["7", "10", "5", "8"], ["10", "5", "7"], ["1", "16", "3", "5", "8"], ["1", "16", "3", "5", "7", "10"]], "prime_paths_statements": [["if i.isdigit():\\l", "for i in s.split(' '):\\l", "return n - sum(lis)\\l"], ["if i.isdigit():\\l", "lis.append(int(i))\\l", "for i in s.split(' '):\\l", "return n - sum(lis)\\l"], ["lis.append(int(i))\\l", "for i in s.split(' '):\\l", "if i.isdigit():\\l"], ["from typing import *\\ldef fruit_distribution(s, n):...\\lfruit_distribution('2 apples and 3 orang...', 5)\\l", "fruit_distribution", "lis = list()\\l", "for i in s.split(' '):\\l", "return n - sum(lis)\\l"], ["from typing import *\\ldef fruit_distribution(s, n):...\\lfruit_distribution('2 apples and 3 orang...', 5)\\l", "fruit_distribution", "lis = list()\\l", "for i in s.split(' '):\\l", "if i.isdigit():\\l", "lis.append(int(i))\\l"]], "prime_paths_linenumbers": [[7, 6, 9], [7, 8, 6, 9], [8, 6, 7], [1, 11, 5, 6, 9], [1, 11, 5, 6, 7, 8]], "covered_statements_linenumbers": [1, 4, 5, 6, 7, 8, 9, 11], "missing_statements_linenumbers": [], "covered_prime_paths_linenumbers": [[7, 6, 9], [7, 8, 6, 9], [8, 6, 7], [1, 11, 5, 6, 9], [1, 11, 5, 6, 7, 8]], "missing_prime_paths_linenumbers": [], "num_total_prime_paths": 5, "num_covered_paths": 5, "prime_path_coverage": 1.0, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_67__0_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_67__0_CFG.dot"}
{"humaneval_id": "HumanEval_98__1", "python_file": "HumanEval_98__1/main.py", "input_file": "HumanEval_98__1/input.txt", "prime_paths_nodes": [["7", "4", "8"], ["7", "9", "4", "8"], ["9", "4", "7"], ["1", "13", "3", "4", "8"], ["1", "13", "3", "4", "7", "9"]], "prime_paths_statements": [["if s[i] in 'AEIOU':\\l", "for i in range(0, len(s), 2):\\l", "return count\\l"], ["if s[i] in 'AEIOU':\\l", "count += 1\\l", "for i in range(0, len(s), 2):\\l", "return count\\l"], ["count += 1\\l", "for i in range(0, len(s), 2):\\l", "if s[i] in 'AEIOU':\\l"], ["from typing import *\\ldef count_upper(s):...\\lcount_upper('U')\\l", "count_upper", "count = 0\\l", "for i in range(0, len(s), 2):\\l", "return count\\l"], ["from typing import *\\ldef count_upper(s):...\\lcount_upper('U')\\l", "count_upper", "count = 0\\l", "for i in range(0, len(s), 2):\\l", "if s[i] in 'AEIOU':\\l", "count += 1\\l"]], "prime_paths_linenumbers": [[7, 6, 9], [7, 8, 6, 9], [8, 6, 7], [1, 11, 5, 6, 9], [1, 11, 5, 6, 7, 8]], "covered_statements_linenumbers": [1, 4, 5, 6, 7, 8, 9, 11], "missing_statements_linenumbers": [], "covered_prime_paths_linenumbers": [[7, 6, 9], [7, 8, 6, 9], [8, 6, 7], [1, 11, 5, 6, 9], [1, 11, 5, 6, 7, 8]], "missing_prime_paths_linenumbers": [], "num_total_prime_paths": 5, "num_covered_paths": 5, "prime_path_coverage": 1.0, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_98__1_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_98__1_CFG.dot"}
{"humaneval_id": "HumanEval_35__0", "python_file": "HumanEval_35__0/main.py", "input_file": "HumanEval_35__0/input.txt", "prime_paths_nodes": [["5", "4", "6"], ["5", "7", "4", "6"], ["7", "4", "5"], ["1", "11", "3", "4", "6"], ["1", "11", "3", "4", "5", "7"]], "prime_paths_statements": [["if e > m:\\l", "for e in l:\\l", "return m\\l"], ["if e > m:\\l", "m = e\\l", "for e in l:\\l", "return m\\l"], ["m = e\\l", "for e in l:\\l", "if e > m:\\l"], ["from typing import *\\ldef max_element(l: list):...\\lmax_element([-5, 2, 48, 9, 4, 0, 6, 7])\\l", "max_element", "m = l[0]\\l", "for e in l:\\l", "return m\\l"], ["from typing import *\\ldef max_element(l: list):...\\lmax_element([-5, 2, 48, 9, 4, 0, 6, 7])\\l", "max_element", "m = l[0]\\l", "for e in l:\\l", "if e > m:\\l", "m = e\\l"]], "prime_paths_linenumbers": [[7, 6, 9], [7, 8, 6, 9], [8, 6, 7], [1, 11, 5, 6, 9], [1, 11, 5, 6, 7, 8]], "covered_statements_linenumbers": [1, 4, 5, 6, 7, 8, 9, 11], "missing_statements_linenumbers": [], "covered_prime_paths_linenumbers": [[7, 6, 9], [7, 8, 6, 9], [8, 6, 7], [1, 11, 5, 6, 9], [1, 11, 5, 6, 7, 8]], "missing_prime_paths_linenumbers": [], "num_total_prime_paths": 5, "num_covered_paths": 5, "prime_path_coverage": 1.0, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_35__0_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_35__0_CFG.dot"}
{"humaneval_id": "HumanEval_122", "python_file": "HumanEval_122/main.py", "input_file": "HumanEval_122/input.txt", "prime_paths_nodes": [["1", "6", "3"]], "prime_paths_statements": [["from typing import *\\ldef add_elements(arr, k):...\\ladd_elements([1, -2, -3, 41, 57, 76, 87, 88, 99], 3)\\l", "add_elements", "return sum(elem for elem in arr[:k] if len(str(elem)) <= 2)\\l"]], "prime_paths_linenumbers": [[1, 5, 3]], "covered_statements_linenumbers": [1, 2, 3, 5], "missing_statements_linenumbers": [], "covered_prime_paths_linenumbers": [[1, 5, 3]], "missing_prime_paths_linenumbers": [], "num_total_prime_paths": 1, "num_covered_paths": 1, "prime_path_coverage": 1.0, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_122_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_122_CFG.dot"}
{"humaneval_id": "HumanEval_162", "python_file": "HumanEval_162/main.py", "input_file": "HumanEval_162/input.txt", "prime_paths_nodes": [["1", "7", "3", "4"]], "prime_paths_statements": [["from typing import *\\ldef string_to_md5(text):...\\lstring_to_md5('Hello world')\\l", "string_to_md5", "import hashlib\\l", "return hashlib.md5(text.encode('ascii')).hexdigest() if text else None\\l"]], "prime_paths_linenumbers": [[1, 6, 3, 4]], "covered_statements_linenumbers": [1, 2, 3, 4, 6], "missing_statements_linenumbers": [], "covered_prime_paths_linenumbers": [[1, 6, 3, 4]], "missing_prime_paths_linenumbers": [], "num_total_prime_paths": 1, "num_covered_paths": 1, "prime_path_coverage": 1.0, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_162_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_162_CFG.dot"}
{"humaneval_id": "HumanEval_159__0", "python_file": "HumanEval_159__0/main.py", "input_file": "HumanEval_159__0/input.txt", "prime_paths_nodes": [["1", "10", "3", "4"], ["1", "10", "3", "6"]], "prime_paths_statements": [["from typing import *\\ldef eat(number, need, remaining):...\\leat(4, 5, 1)\\l", "eat", "if need <= remaining:\\l", "return [number + need, remaining - need]\\l"], ["from typing import *\\ldef eat(number, need, remaining):...\\leat(4, 5, 1)\\l", "eat", "if need <= remaining:\\l", "return [number + remaining, 0]\\l"]], "prime_paths_linenumbers": [[1, 10, 5, 6], [1, 10, 5, 8]], "covered_statements_linenumbers": [1, 4, 5, 8, 10], "missing_statements_linenumbers": [6], "covered_prime_paths_linenumbers": [[1, 10, 5, 8]], "missing_prime_paths_linenumbers": [[1, 10, 5, 6]], "num_total_prime_paths": 2, "num_covered_paths": 1, "prime_path_coverage": 0.5, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_159__0_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_159__0_CFG.dot"}
{"humaneval_id": "HumanEval_133__1", "python_file": "HumanEval_133__1/main.py", "input_file": "HumanEval_133__1/input.txt", "prime_paths_nodes": [["5", "4", "6"], ["1", "10", "3", "4", "5"], ["1", "10", "3", "4", "6"]], "prime_paths_statements": [["squared += math.ceil(i) ** 2\\l", "for i in lst:\\l", "return squared\\l"], ["from typing import *\\ldef sum_squares(lst):...\\lsum_squares([-2.4, 1, 1])\\l", "sum_squares", "import math\\lsquared = 0\\l", "for i in lst:\\l", "squared += math.ceil(i) ** 2\\l"], ["from typing import *\\ldef sum_squares(lst):...\\lsum_squares([-2.4, 1, 1])\\l", "sum_squares", "import math\\lsquared = 0\\l", "for i in lst:\\l", "return squared\\l"]], "prime_paths_linenumbers": [[8, 7, 9], [1, 11, 5, 6, 7, 8], [1, 11, 5, 6, 7, 9]], "covered_statements_linenumbers": [1, 4, 5, 6, 7, 8, 9, 11], "missing_statements_linenumbers": [], "covered_prime_paths_linenumbers": [[8, 7, 9], [1, 11, 5, 6, 7, 8], [1, 11, 5, 6, 7, 9]], "missing_prime_paths_linenumbers": [], "num_total_prime_paths": 3, "num_covered_paths": 3, "prime_path_coverage": 1.0, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_133__1_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_133__1_CFG.dot"}
{"humaneval_id": "HumanEval_21__1", "python_file": "HumanEval_21__1/main.py", "input_file": "HumanEval_21__1/input.txt", "prime_paths_nodes": [["1", "9", "3", "6"]], "prime_paths_statements": [["from typing import *\\ldef rescale_to_unit(numbers: List[float]) ->List[float]:...\\lrescale_to_unit([2.0, 1.0, 5.0, 3.0, 4.0])\\l", "rescale_to_unit", "min_number = min(numbers)\\lmax_number = max(numbers)\\l", "return [((x - min_number) / (max_number - min_number)) for x in numbers]\\l"]], "prime_paths_linenumbers": [[1, 9, 5, 6, 7]], "covered_statements_linenumbers": [1, 4, 5, 6, 7, 9], "missing_statements_linenumbers": [], "covered_prime_paths_linenumbers": [[1, 9, 5, 6, 7]], "missing_prime_paths_linenumbers": [], "num_total_prime_paths": 1, "num_covered_paths": 1, "prime_path_coverage": 1.0, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_21__1_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_21__1_CFG.dot"}
{"humaneval_id": "HumanEval_96__1", "python_file": "HumanEval_96__1/main.py", "input_file": "HumanEval_96__1/input.txt", "prime_paths_nodes": [["6", "8", "10", "12", "11", "4", "7"], ["6", "8", "10", "12", "11", "15", "4", "7"], ["6", "8", "11", "4", "7"], ["6", "8", "11", "15", "4", "7"], ["8", "10", "12", "11", "4", "6"], ["8", "10", "12", "11", "15", "4", "6"], ["10", "8", "11", "4", "6"], ["10", "8", "11", "15", "4", "6"], ["10", "8", "11", "4", "7"], ["10", "8", "11", "15", "4", "7"], ["10", "12", "11", "4", "6", "8"], ["10", "12", "11", "15", "4", "6", "8"], ["11", "4", "6", "8", "10", "12"], ["11", "15", "4", "6", "8", "10", "12"], ["12", "11", "4", "6", "8", "10"], ["12", "11", "15", "4", "6", "8", "10"], ["15", "4", "6", "8", "10", "12", "11"], ["15", "4", "6", "8", "11"], ["1", "20", "3", "4", "7"], ["1", "20", "3", "4", "6", "8", "10", "12", "11", "15"], ["1", "20", "3", "4", "6", "8", "11", "15"]], "prime_paths_statements": [["is_prime = True\\l", "for j in range(2, i):\\l", "if i % j == 0:\\l", "is_prime = False\\lbreak\\l", "if is_prime:\\l", "for i in range(2, n):\\l", "return primes\\l"], ["is_prime = True\\l", "for j in range(2, i):\\l", "if i % j == 0:\\l", "is_prime = False\\lbreak\\l", "if is_prime:\\l", "primes.append(i)\\l", "for i in range(2, n):\\l", "return primes\\l"], ["is_prime = True\\l", "for j in range(2, i):\\l", "if is_prime:\\l", "for i in range(2, n):\\l", "return primes\\l"], ["is_prime = True\\l", "for j in range(2, i):\\l", "if is_prime:\\l", "primes.append(i)\\l", "for i in range(2, n):\\l", "return primes\\l"], ["for j in range(2, i):\\l", "if i % j == 0:\\l", "is_prime = False\\lbreak\\l", "if is_prime:\\l", "for i in range(2, n):\\l", "is_prime = True\\l"], ["for j in range(2, i):\\l", "if i % j == 0:\\l", "is_prime = False\\lbreak\\l", "if is_prime:\\l", "primes.append(i)\\l", "for i in range(2, n):\\l", "is_prime = True\\l"], ["if i % j == 0:\\l", "for j in range(2, i):\\l", "if is_prime:\\l", "for i in range(2, n):\\l", "is_prime = True\\l"], ["if i % j == 0:\\l", "for j in range(2, i):\\l", "if is_prime:\\l", "primes.append(i)\\l", "for i in range(2, n):\\l", "is_prime = True\\l"], ["if i % j == 0:\\l", "for j in range(2, i):\\l", "if is_prime:\\l", "for i in range(2, n):\\l", "return primes\\l"], ["if i % j == 0:\\l", "for j in range(2, i):\\l", "if is_prime:\\l", "primes.append(i)\\l", "for i in range(2, n):\\l", "return primes\\l"], ["if i % j == 0:\\l", "is_prime = False\\lbreak\\l", "if is_prime:\\l", "for i in range(2, n):\\l", "is_prime = True\\l", "for j in range(2, i):\\l"], ["if i % j == 0:\\l", "is_prime = False\\lbreak\\l", "if is_prime:\\l", "primes.append(i)\\l", "for i in range(2, n):\\l", "is_prime = True\\l", "for j in range(2, i):\\l"], ["if is_prime:\\l", "for i in range(2, n):\\l", "is_prime = True\\l", "for j in range(2, i):\\l", "if i % j == 0:\\l", "is_prime = False\\lbreak\\l"], ["if is_prime:\\l", "primes.append(i)\\l", "for i in range(2, n):\\l", "is_prime = True\\l", "for j in range(2, i):\\l", "if i % j == 0:\\l", "is_prime = False\\lbreak\\l"], ["is_prime = False\\lbreak\\l", "if is_prime:\\l", "for i in range(2, n):\\l", "is_prime = True\\l", "for j in range(2, i):\\l", "if i % j == 0:\\l"], ["is_prime = False\\lbreak\\l", "if is_prime:\\l", "primes.append(i)\\l", "for i in range(2, n):\\l", "is_prime = True\\l", "for j in range(2, i):\\l", "if i % j == 0:\\l"], ["primes.append(i)\\l", "for i in range(2, n):\\l", "is_prime = True\\l", "for j in range(2, i):\\l", "if i % j == 0:\\l", "is_prime = False\\lbreak\\l", "if is_prime:\\l"], ["primes.append(i)\\l", "for i in range(2, n):\\l", "is_prime = True\\l", "for j in range(2, i):\\l", "if is_prime:\\l"], ["from typing import *\\ldef count_up_to(n):...\\lcount_up_to(22)\\l", "count_up_to", "primes = []\\l", "for i in range(2, n):\\l", "return primes\\l"], ["from typing import *\\ldef count_up_to(n):...\\lcount_up_to(22)\\l", "count_up_to", "primes = []\\l", "for i in range(2, n):\\l", "is_prime = True\\l", "for j in range(2, i):\\l", "if i % j == 0:\\l", "is_prime = False\\lbreak\\l", "if is_prime:\\l", "primes.append(i)\\l"], ["from typing import *\\ldef count_up_to(n):...\\lcount_up_to(22)\\l", "count_up_to", "primes = []\\l", "for i in range(2, n):\\l", "is_prime = True\\l", "for j in range(2, i):\\l", "if is_prime:\\l", "primes.append(i)\\l"]], "prime_paths_linenumbers": [[7, 8, 9, 10, 11, 12, 6, 14], [7, 8, 9, 10, 11, 12, 13, 6, 14], [7, 8, 12, 6, 14], [7, 8, 12, 13, 6, 14], [8, 9, 10, 11, 12, 6, 7], [8, 9, 10, 11, 12, 13, 6, 7], [9, 8, 12, 6, 7], [9, 8, 12, 13, 6, 7], [9, 8, 12, 6, 14], [9, 8, 12, 13, 6, 14], [9, 10, 11, 12, 6, 7, 8], [9, 10, 11, 12, 13, 6, 7, 8], [12, 6, 7, 8, 9, 10, 11], [12, 13, 6, 7, 8, 9, 10, 11], [10, 11, 12, 6, 7, 8, 9], [10, 11, 12, 13, 6, 7, 8, 9], [13, 6, 7, 8, 9, 10, 11, 12], [13, 6, 7, 8, 12], [1, 16, 5, 6, 14], [1, 16, 5, 6, 7, 8, 9, 10, 11, 12, 13], [1, 16, 5, 6, 7, 8, 12, 13]], "covered_statements_linenumbers": [1, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16], "missing_statements_linenumbers": [], "covered_prime_paths_linenumbers": [[7, 8, 9, 10, 11, 12, 6, 14], [7, 8, 9, 10, 11, 12, 13, 6, 14], [7, 8, 12, 6, 14], [7, 8, 12, 13, 6, 14], [8, 9, 10, 11, 12, 6, 7], [8, 9, 10, 11, 12, 13, 6, 7], [9, 8, 12, 6, 7], [9, 8, 12, 13, 6, 7], [9, 8, 12, 6, 14], [9, 8, 12, 13, 6, 14], [9, 10, 11, 12, 6, 7, 8], [9, 10, 11, 12, 13, 6, 7, 8], [12, 6, 7, 8, 9, 10, 11], [12, 13, 6, 7, 8, 9, 10, 11], [10, 11, 12, 6, 7, 8, 9], [10, 11, 12, 13, 6, 7, 8, 9], [13, 6, 7, 8, 9, 10, 11, 12], [13, 6, 7, 8, 12], [1, 16, 5, 6, 14], [1, 16, 5, 6, 7, 8, 9, 10, 11, 12, 13], [1, 16, 5, 6, 7, 8, 12, 13]], "missing_prime_paths_linenumbers": [], "num_total_prime_paths": 21, "num_covered_paths": 21, "prime_path_coverage": 1.0, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_96__1_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_96__1_CFG.dot"}
{"humaneval_id": "HumanEval_48__1", "python_file": "HumanEval_48__1/main.py", "input_file": "HumanEval_48__1/input.txt", "prime_paths_nodes": [["6", "3", "7"], ["1", "14", "3", "7"], ["1", "14", "3", "6", "9"]], "prime_paths_statements": [["if text[i] != text[len(text) - 1 - i]:\\l", "for i in range(len(text)):\\l", "return True\\l"], ["from typing import *\\ldef is_palindrome(text: str):...\\lis_palindrome('aaaaa')\\l", "is_palindrome", "for i in range(len(text)):\\l", "return True\\l"], ["from typing import *\\ldef is_palindrome(text: str):...\\lis_palindrome('aaaaa')\\l", "is_palindrome", "for i in range(len(text)):\\l", "if text[i] != text[len(text) - 1 - i]:\\l", "return False\\l"]], "prime_paths_linenumbers": [[6, 5, 8], [1, 10, 5, 8], [1, 10, 5, 6, 7]], "covered_statements_linenumbers": [1, 4, 5, 6, 8, 10], "missing_statements_linenumbers": [7], "covered_prime_paths_linenumbers": [[6, 5, 8], [1, 10, 5, 8]], "missing_prime_paths_linenumbers": [[1, 10, 5, 6, 7]], "num_total_prime_paths": 3, "num_covered_paths": 2, "prime_path_coverage": 0.67, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_48__1_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_48__1_CFG.dot"}
{"humaneval_id": "HumanEval_111__0", "python_file": "HumanEval_111__0/main.py", "input_file": "HumanEval_111__0/input.txt", "prime_paths_nodes": [["6", "5", "7", "11", "12"], ["6", "5", "7", "12"], ["6", "8", "5", "7", "11", "12"], ["6", "8", "5", "7", "12"], ["6", "5", "7", "11", "13", "16"], ["6", "8", "5", "7", "11", "13", "16"], ["8", "5", "6"], ["13", "11", "12"], ["13", "16", "11", "12"], ["16", "11", "13"], ["1", "20", "3", "5", "6", "8"], ["1", "20", "3", "5", "7", "11", "12"], ["1", "20", "3", "5", "7", "12"], ["1", "20", "3", "5", "7", "11", "13", "16"]], "prime_paths_statements": [["if list1.count(i) > t and i != '':\\l", "for i in list1:\\l", "if t > 0:\\l", "for i in list1:\\l", "return dict1\\l"], ["if list1.count(i) > t and i != '':\\l", "for i in list1:\\l", "if t > 0:\\l", "return dict1\\l"], ["if list1.count(i) > t and i != '':\\l", "t = list1.count(i)\\l", "for i in list1:\\l", "if t > 0:\\l", "for i in list1:\\l", "return dict1\\l"], ["if list1.count(i) > t and i != '':\\l", "t = list1.count(i)\\l", "for i in list1:\\l", "if t > 0:\\l", "return dict1\\l"], ["if list1.count(i) > t and i != '':\\l", "for i in list1:\\l", "if t > 0:\\l", "for i in list1:\\l", "if list1.count(i) == t:\\l", "dict1[i] = t\\l"], ["if list1.count(i) > t and i != '':\\l", "t = list1.count(i)\\l", "for i in list1:\\l", "if t > 0:\\l", "for i in list1:\\l", "if list1.count(i) == t:\\l", "dict1[i] = t\\l"], ["t = list1.count(i)\\l", "for i in list1:\\l", "if list1.count(i) > t and i != '':\\l"], ["if list1.count(i) == t:\\l", "for i in list1:\\l", "return dict1\\l"], ["if list1.count(i) == t:\\l", "dict1[i] = t\\l", "for i in list1:\\l", "return dict1\\l"], ["dict1[i] = t\\l", "for i in list1:\\l", "if list1.count(i) == t:\\l"], ["from typing import *\\ldef histogram(test):...\\lhistogram('a b c d g')\\l", "histogram", "dict1 = {}\\llist1 = test.split(' ')\\lt = 0\\l", "for i in list1:\\l", "if list1.count(i) > t and i != '':\\l", "t = list1.count(i)\\l"], ["from typing import *\\ldef histogram(test):...\\lhistogram('a b c d g')\\l", "histogram", "dict1 = {}\\llist1 = test.split(' ')\\lt = 0\\l", "for i in list1:\\l", "if t > 0:\\l", "for i in list1:\\l", "return dict1\\l"], ["from typing import *\\ldef histogram(test):...\\lhistogram('a b c d g')\\l", "histogram", "dict1 = {}\\llist1 = test.split(' ')\\lt = 0\\l", "for i in list1:\\l", "if t > 0:\\l", "return dict1\\l"], ["from typing import *\\ldef histogram(test):...\\lhistogram('a b c d g')\\l", "histogram", "dict1 = {}\\llist1 = test.split(' ')\\lt = 0\\l", "for i in list1:\\l", "if t > 0:\\l", "for i in list1:\\l", "if list1.count(i) == t:\\l", "dict1[i] = t\\l"]], "prime_paths_linenumbers": [[10, 9, 12, 13, 17], [10, 9, 12, 17], [10, 11, 9, 12, 13, 17], [10, 11, 9, 12, 17], [10, 9, 12, 13, 14, 16], [10, 11, 9, 12, 13, 14, 16], [11, 9, 10], [14, 13, 17], [14, 16, 13, 17], [16, 13, 14], [1, 19, 5, 6, 7, 9, 10, 11], [1, 19, 5, 6, 7, 9, 12, 13, 17], [1, 19, 5, 6, 7, 9, 12, 17], [1, 19, 5, 6, 7, 9, 12, 13, 14, 16]], "covered_statements_linenumbers": [1, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 16, 17, 19], "missing_statements_linenumbers": [], "covered_prime_paths_linenumbers": [[10, 9, 12, 13, 17], [10, 9, 12, 17], [10, 11, 9, 12, 13, 17], [10, 11, 9, 12, 17], [10, 9, 12, 13, 14, 16], [10, 11, 9, 12, 13, 14, 16], [11, 9, 10], [14, 13, 17], [14, 16, 13, 17], [16, 13, 14], [1, 19, 5, 6, 7, 9, 10, 11], [1, 19, 5, 6, 7, 9, 12, 13, 17], [1, 19, 5, 6, 7, 9, 12, 17], [1, 19, 5, 6, 7, 9, 12, 13, 14, 16]], "missing_prime_paths_linenumbers": [], "num_total_prime_paths": 14, "num_covered_paths": 14, "prime_path_coverage": 1.0, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_111__0_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_111__0_CFG.dot"}
{"humaneval_id": "HumanEval_87__0", "python_file": "HumanEval_87__0/main.py", "input_file": "HumanEval_87__0/input.txt", "prime_paths_nodes": [["1", "11", "3", "8"]], "prime_paths_statements": [["from typing import *\\ldef get_row(lst, x):...\\lget_row([[1]], 2)\\l", "get_row", "coords = [(i, j) for i in range(len(lst)) for j in range(len(lst[i])) if \\l    lst[i][j] == x]\\l", "return sorted(sorted(coords, key=lambda x: x[1], reverse=True), key=lambda\\l    x: x[0])\\l"]], "prime_paths_linenumbers": [[1, 14, 5, 7]], "covered_statements_linenumbers": [1, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14], "missing_statements_linenumbers": [], "covered_prime_paths_linenumbers": [[1, 14, 5, 7]], "missing_prime_paths_linenumbers": [], "num_total_prime_paths": 1, "num_covered_paths": 1, "prime_path_coverage": 1.0, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_87__0_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_87__0_CFG.dot"}
{"humaneval_id": "HumanEval_46", "python_file": "HumanEval_46/main.py", "input_file": "HumanEval_46/input.txt", "prime_paths_nodes": [["9", "6", "10"], ["1", "15", "3", "4", "5"], ["1", "15", "3", "4", "6", "9"], ["1", "15", "3", "4", "6", "10"]], "prime_paths_statements": [["results.append(results[-1] + results[-2] + results[-3] + results[-4])\\lresults.pop(0)\\l", "for _ in range(4, n + 1):\\l", "return results[-1]\\l"], ["from typing import *\\ldef fib4(n: int):...\\lfib4(5)\\l", "fib4", "results = [0, 0, 2, 0]\\l", "if n < 4:\\l", "return results[n]\\l"], ["from typing import *\\ldef fib4(n: int):...\\lfib4(5)\\l", "fib4", "results = [0, 0, 2, 0]\\l", "if n < 4:\\l", "for _ in range(4, n + 1):\\l", "results.append(results[-1] + results[-2] + results[-3] + results[-4])\\lresults.pop(0)\\l"], ["from typing import *\\ldef fib4(n: int):...\\lfib4(5)\\l", "fib4", "results = [0, 0, 2, 0]\\l", "if n < 4:\\l", "for _ in range(4, n + 1):\\l", "return results[-1]\\l"]], "prime_paths_linenumbers": [[8, 9, 7, 11], [1, 13, 3, 4, 5], [1, 13, 3, 4, 7, 8, 9], [1, 13, 3, 4, 7, 11]], "covered_statements_linenumbers": [1, 2, 3, 4, 7, 8, 9, 11, 13], "missing_statements_linenumbers": [5], "covered_prime_paths_linenumbers": [[8, 9, 7, 11], [1, 13, 3, 4, 7, 8, 9], [1, 13, 3, 4, 7, 11]], "missing_prime_paths_linenumbers": [[1, 13, 3, 4, 5]], "num_total_prime_paths": 4, "num_covered_paths": 3, "prime_path_coverage": 0.75, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_46_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_46_CFG.dot"}
{"humaneval_id": "HumanEval_32__0", "python_file": "HumanEval_32__0/main.py", "input_file": "HumanEval_32__0/input.txt", "prime_paths_nodes": [["9", "8", "10", "11", "13", "14", "3"], ["9", "8", "10", "11", "13", "15", "3"], ["9", "8", "10", "12"], ["9", "8", "10", "11", "13", "16"], ["9", "8", "10", "11", "13", "18"], ["11", "13", "16", "10", "12"], ["11", "13", "18", "10", "12"], ["13", "16", "10", "11"], ["13", "18", "10", "11"], ["16", "10", "11", "13", "14", "3"], ["16", "10", "11", "13", "15", "3"], ["16", "10", "11", "13", "18"], ["18", "10", "11", "13", "14", "3"], ["18", "10", "11", "13", "15", "3"], ["18", "10", "11", "13", "16"], ["1", "21", "7", "8", "10", "11", "13", "14", "3"], ["1", "21", "7", "8", "10", "11", "13", "15", "3"], ["1", "21", "7", "8", "9"], ["1", "21", "7", "8", "10", "12"], ["1", "21", "7", "8", "10", "11", "13", "16"], ["1", "21", "7", "8", "10", "11", "13", "18"]], "prime_paths_statements": [["begin *= 2.0\\lend *= 2.0\\l", "while poly(xs, begin) * poly(xs, end) > 0:\\l", "while end - begin > 1e-10:\\l", "center = (begin + end) / 2.0\\l", "if poly(xs, center) * poly(xs, begin) > 0:\\l", "poly", "return sum([(coeff * math.pow(x, i)) for i, coeff in enumerate(xs)])\\l"], ["begin *= 2.0\\lend *= 2.0\\l", "while poly(xs, begin) * poly(xs, end) > 0:\\l", "while end - begin > 1e-10:\\l", "center = (begin + end) / 2.0\\l", "if poly(xs, center) * poly(xs, begin) > 0:\\l", "poly", "return sum([(coeff * math.pow(x, i)) for i, coeff in enumerate(xs)])\\l"], ["begin *= 2.0\\lend *= 2.0\\l", "while poly(xs, begin) * poly(xs, end) > 0:\\l", "while end - begin > 1e-10:\\l", "return begin\\l"], ["begin *= 2.0\\lend *= 2.0\\l", "while poly(xs, begin) * poly(xs, end) > 0:\\l", "while end - begin > 1e-10:\\l", "center = (begin + end) / 2.0\\l", "if poly(xs, center) * poly(xs, begin) > 0:\\l", "begin = center\\l"], ["begin *= 2.0\\lend *= 2.0\\l", "while poly(xs, begin) * poly(xs, end) > 0:\\l", "while end - begin > 1e-10:\\l", "center = (begin + end) / 2.0\\l", "if poly(xs, center) * poly(xs, begin) > 0:\\l", "end = center\\l"], ["center = (begin + end) / 2.0\\l", "if poly(xs, center) * poly(xs, begin) > 0:\\l", "begin = center\\l", "while end - begin > 1e-10:\\l", "return begin\\l"], ["center = (begin + end) / 2.0\\l", "if poly(xs, center) * poly(xs, begin) > 0:\\l", "end = center\\l", "while end - begin > 1e-10:\\l", "return begin\\l"], ["if poly(xs, center) * poly(xs, begin) > 0:\\l", "begin = center\\l", "while end - begin > 1e-10:\\l", "center = (begin + end) / 2.0\\l"], ["if poly(xs, center) * poly(xs, begin) > 0:\\l", "end = center\\l", "while end - begin > 1e-10:\\l", "center = (begin + end) / 2.0\\l"], ["begin = center\\l", "while end - begin > 1e-10:\\l", "center = (begin + end) / 2.0\\l", "if poly(xs, center) * poly(xs, begin) > 0:\\l", "poly", "return sum([(coeff * math.pow(x, i)) for i, coeff in enumerate(xs)])\\l"], ["begin = center\\l", "while end - begin > 1e-10:\\l", "center = (begin + end) / 2.0\\l", "if poly(xs, center) * poly(xs, begin) > 0:\\l", "poly", "return sum([(coeff * math.pow(x, i)) for i, coeff in enumerate(xs)])\\l"], ["begin = center\\l", "while end - begin > 1e-10:\\l", "center = (begin + end) / 2.0\\l", "if poly(xs, center) * poly(xs, begin) > 0:\\l", "end = center\\l"], ["end = center\\l", "while end - begin > 1e-10:\\l", "center = (begin + end) / 2.0\\l", "if poly(xs, center) * poly(xs, begin) > 0:\\l", "poly", "return sum([(coeff * math.pow(x, i)) for i, coeff in enumerate(xs)])\\l"], ["end = center\\l", "while end - begin > 1e-10:\\l", "center = (begin + end) / 2.0\\l", "if poly(xs, center) * poly(xs, begin) > 0:\\l", "poly", "return sum([(coeff * math.pow(x, i)) for i, coeff in enumerate(xs)])\\l"], ["end = center\\l", "while end - begin > 1e-10:\\l", "center = (begin + end) / 2.0\\l", "if poly(xs, center) * poly(xs, begin) > 0:\\l", "begin = center\\l"], ["from typing import *\\limport math\\ldef poly(xs: list, x: float):...\\ldef find_zero(xs: list):...\\lfind_zero([5, 3, -5])\\l", "find_zero", "begin, end = -1.0, 1.0\\l", "while poly(xs, begin) * poly(xs, end) > 0:\\l", "while end - begin > 1e-10:\\l", "center = (begin + end) / 2.0\\l", "if poly(xs, center) * poly(xs, begin) > 0:\\l", "poly", "return sum([(coeff * math.pow(x, i)) for i, coeff in enumerate(xs)])\\l"], ["from typing import *\\limport math\\ldef poly(xs: list, x: float):...\\ldef find_zero(xs: list):...\\lfind_zero([5, 3, -5])\\l", "find_zero", "begin, end = -1.0, 1.0\\l", "while poly(xs, begin) * poly(xs, end) > 0:\\l", "while end - begin > 1e-10:\\l", "center = (begin + end) / 2.0\\l", "if poly(xs, center) * poly(xs, begin) > 0:\\l", "poly", "return sum([(coeff * math.pow(x, i)) for i, coeff in enumerate(xs)])\\l"], ["from typing import *\\limport math\\ldef poly(xs: list, x: float):...\\ldef find_zero(xs: list):...\\lfind_zero([5, 3, -5])\\l", "find_zero", "begin, end = -1.0, 1.0\\l", "while poly(xs, begin) * poly(xs, end) > 0:\\l", "begin *= 2.0\\lend *= 2.0\\l"], ["from typing import *\\limport math\\ldef poly(xs: list, x: float):...\\ldef find_zero(xs: list):...\\lfind_zero([5, 3, -5])\\l", "find_zero", "begin, end = -1.0, 1.0\\l", "while poly(xs, begin) * poly(xs, end) > 0:\\l", "while end - begin > 1e-10:\\l", "return begin\\l"], ["from typing import *\\limport math\\ldef poly(xs: list, x: float):...\\ldef find_zero(xs: list):...\\lfind_zero([5, 3, -5])\\l", "find_zero", "begin, end = -1.0, 1.0\\l", "while poly(xs, begin) * poly(xs, end) > 0:\\l", "while end - begin > 1e-10:\\l", "center = (begin + end) / 2.0\\l", "if poly(xs, center) * poly(xs, begin) > 0:\\l", "begin = center\\l"], ["from typing import *\\limport math\\ldef poly(xs: list, x: float):...\\ldef find_zero(xs: list):...\\lfind_zero([5, 3, -5])\\l", "find_zero", "begin, end = -1.0, 1.0\\l", "while poly(xs, begin) * poly(xs, end) > 0:\\l", "while end - begin > 1e-10:\\l", "center = (begin + end) / 2.0\\l", "if poly(xs, center) * poly(xs, begin) > 0:\\l", "end = center\\l"]], "prime_paths_linenumbers": [[12, 13, 11, 14, 15, 16, 16, 6], [12, 13, 11, 14, 15, 16, 16, 6], [12, 13, 11, 14, 20], [12, 13, 11, 14, 15, 16, 17], [12, 13, 11, 14, 15, 16, 19], [15, 16, 17, 14, 20], [15, 16, 19, 14, 20], [16, 17, 14, 15], [16, 19, 14, 15], [17, 14, 15, 16, 16, 6], [17, 14, 15, 16, 16, 6], [17, 14, 15, 16, 19], [19, 14, 15, 16, 16, 6], [19, 14, 15, 16, 16, 6], [19, 14, 15, 16, 17], [1, 22, 10, 11, 14, 15, 16, 16, 6], [1, 22, 10, 11, 14, 15, 16, 16, 6], [1, 22, 10, 11, 12, 13], [1, 22, 10, 11, 14, 20], [1, 22, 10, 11, 14, 15, 16, 17], [1, 22, 10, 11, 14, 15, 16, 19]], "covered_statements_linenumbers": [1, 2, 5, 6, 9, 10, 11, 14, 15, 16, 17, 19, 20, 22], "missing_statements_linenumbers": [12, 13], "covered_prime_paths_linenumbers": [[15, 16, 17, 14, 20], [15, 16, 19, 14, 20], [16, 17, 14, 15], [16, 19, 14, 15], [17, 14, 15, 16, 16, 6], [17, 14, 15, 16, 16, 6], [17, 14, 15, 16, 19], [19, 14, 15, 16, 16, 6], [19, 14, 15, 16, 16, 6], [19, 14, 15, 16, 17], [1, 22, 10, 11, 14, 15, 16, 16, 6], [1, 22, 10, 11, 14, 15, 16, 16, 6], [1, 22, 10, 11, 14, 20], [1, 22, 10, 11, 14, 15, 16, 17], [1, 22, 10, 11, 14, 15, 16, 19]], "missing_prime_paths_linenumbers": [[12, 13, 11, 14, 15, 16, 16, 6], [12, 13, 11, 14, 15, 16, 16, 6], [12, 13, 11, 14, 20], [12, 13, 11, 14, 15, 16, 17], [12, 13, 11, 14, 15, 16, 19], [1, 22, 10, 11, 12, 13]], "num_total_prime_paths": 21, "num_covered_paths": 15, "prime_path_coverage": 0.71, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_32__0_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_32__0_CFG.dot"}
{"humaneval_id": "HumanEval_74__0", "python_file": "HumanEval_74__0/main.py", "input_file": "HumanEval_74__0/input.txt", "prime_paths_nodes": [["5", "4", "6", "8", "9"], ["5", "4", "6", "8", "10", "12"], ["5", "4", "6", "8", "10", "14"], ["9", "8", "10", "12"], ["9", "8", "10", "14"], ["1", "18", "3", "4", "5"], ["1", "18", "3", "4", "6", "8", "9"], ["1", "18", "3", "4", "6", "8", "10", "12"], ["1", "18", "3", "4", "6", "8", "10", "14"]], "prime_paths_statements": [["l1 += len(st)\\l", "for st in lst1:\\l", "l2 = 0\\l", "for st in lst2:\\l", "l2 += len(st)\\l"], ["l1 += len(st)\\l", "for st in lst1:\\l", "l2 = 0\\l", "for st in lst2:\\l", "if l1 <= l2:\\l", "return lst1\\l"], ["l1 += len(st)\\l", "for st in lst1:\\l", "l2 = 0\\l", "for st in lst2:\\l", "if l1 <= l2:\\l", "return lst2\\l"], ["l2 += len(st)\\l", "for st in lst2:\\l", "if l1 <= l2:\\l", "return lst1\\l"], ["l2 += len(st)\\l", "for st in lst2:\\l", "if l1 <= l2:\\l", "return lst2\\l"], ["from typing import *\\ldef total_match(lst1, lst2):...\\ltotal_match(['4'], ['1', '2', '3', '4', '5'])\\l", "total_match", "l1 = 0\\l", "for st in lst1:\\l", "l1 += len(st)\\l"], ["from typing import *\\ldef total_match(lst1, lst2):...\\ltotal_match(['4'], ['1', '2', '3', '4', '5'])\\l", "total_match", "l1 = 0\\l", "for st in lst1:\\l", "l2 = 0\\l", "for st in lst2:\\l", "l2 += len(st)\\l"], ["from typing import *\\ldef total_match(lst1, lst2):...\\ltotal_match(['4'], ['1', '2', '3', '4', '5'])\\l", "total_match", "l1 = 0\\l", "for st in lst1:\\l", "l2 = 0\\l", "for st in lst2:\\l", "if l1 <= l2:\\l", "return lst1\\l"], ["from typing import *\\ldef total_match(lst1, lst2):...\\ltotal_match(['4'], ['1', '2', '3', '4', '5'])\\l", "total_match", "l1 = 0\\l", "for st in lst1:\\l", "l2 = 0\\l", "for st in lst2:\\l", "if l1 <= l2:\\l", "return lst2\\l"]], "prime_paths_linenumbers": [[7, 6, 9, 10, 11], [7, 6, 9, 10, 13, 14], [7, 6, 9, 10, 13, 16], [11, 10, 13, 14], [11, 10, 13, 16], [1, 18, 5, 6, 7], [1, 18, 5, 6, 9, 10, 11], [1, 18, 5, 6, 9, 10, 13, 14], [1, 18, 5, 6, 9, 10, 13, 16]], "covered_statements_linenumbers": [1, 4, 5, 6, 7, 9, 10, 11, 13, 14, 18], "missing_statements_linenumbers": [16], "covered_prime_paths_linenumbers": [[7, 6, 9, 10, 11], [7, 6, 9, 10, 13, 14], [11, 10, 13, 14], [1, 18, 5, 6, 7], [1, 18, 5, 6, 9, 10, 11], [1, 18, 5, 6, 9, 10, 13, 14]], "missing_prime_paths_linenumbers": [[7, 6, 9, 10, 13, 16], [11, 10, 13, 16], [1, 18, 5, 6, 9, 10, 13, 16]], "num_total_prime_paths": 9, "num_covered_paths": 6, "prime_path_coverage": 0.67, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_74__0_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_74__0_CFG.dot"}
{"humaneval_id": "HumanEval_68__1", "python_file": "HumanEval_68__1/main.py", "input_file": "HumanEval_68__1/input.txt", "prime_paths_nodes": [["1", "16", "3", "5"], ["1", "16", "3", "6", "10", "11"], ["1", "16", "3", "6", "10", "12"]], "prime_paths_statements": [["from typing import *\\ldef pluck(arr):...\\lpluck([5, 0, 3, 0, 4, 2])\\l", "pluck", "if len(arr) == 0:\\l", "return []\\l"], ["from typing import *\\ldef pluck(arr):...\\lpluck([5, 0, 3, 0, 4, 2])\\l", "pluck", "if len(arr) == 0:\\l", "evens = list(filter(lambda x: x % 2 == 0, arr))\\l", "if evens == []:\\l", "return []\\l"], ["from typing import *\\ldef pluck(arr):...\\lpluck([5, 0, 3, 0, 4, 2])\\l", "pluck", "if len(arr) == 0:\\l", "evens = list(filter(lambda x: x % 2 == 0, arr))\\l", "if evens == []:\\l", "return [min(evens), arr.index(min(evens))]\\l"]], "prime_paths_linenumbers": [[1, 12, 5, 6], [1, 12, 5, 7, 8, 9], [1, 12, 5, 7, 8, 10]], "covered_statements_linenumbers": [1, 4, 5, 7, 8, 10, 12], "missing_statements_linenumbers": [6, 9], "covered_prime_paths_linenumbers": [[1, 12, 5, 7, 8, 10]], "missing_prime_paths_linenumbers": [[1, 12, 5, 6], [1, 12, 5, 7, 8, 9]], "num_total_prime_paths": 3, "num_covered_paths": 1, "prime_path_coverage": 0.33, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_68__1_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_68__1_CFG.dot"}
{"humaneval_id": "HumanEval_106__0", "python_file": "HumanEval_106__0/main.py", "input_file": "HumanEval_106__0/input.txt", "prime_paths_nodes": [["6", "8", "15", "18", "4", "7"], ["6", "10", "11", "14", "4", "7"], ["8", "15", "18", "4", "6", "10", "11", "13"], ["8", "15", "18", "4", "6", "10", "11", "14"], ["10", "11", "14", "4", "6", "8", "15", "17"], ["10", "11", "14", "4", "6", "8", "15", "18"], ["17", "15", "18", "4", "7"], ["17", "15", "18", "4", "6", "8"], ["17", "15", "18", "4", "6", "10", "11", "13"], ["17", "15", "18", "4", "6", "10", "11", "14"], ["18", "4", "6", "8", "15", "17"], ["13", "11", "14", "4", "7"], ["13", "11", "14", "4", "6", "10"], ["13", "11", "14", "4", "6", "8", "15", "17"], ["13", "11", "14", "4", "6", "8", "15", "18"], ["14", "4", "6", "10", "11", "13"], ["1", "21", "3", "4", "7"], ["1", "21", "3", "4", "6", "8", "15", "17"], ["1", "21", "3", "4", "6", "8", "15", "18"], ["1", "21", "3", "4", "6", "10", "11", "13"], ["1", "21", "3", "4", "6", "10", "11", "14"]], "prime_paths_statements": [["if i % 2 == 0:\\l", "x = 1\\l", "for j in range(1, i + 1):\\l", "ret += [x]\\l", "for i in range(1, n + 1):\\l", "return ret\\l"], ["if i % 2 == 0:\\l", "x = 0\\l", "for j in range(1, i + 1):\\l", "ret += [x]\\l", "for i in range(1, n + 1):\\l", "return ret\\l"], ["x = 1\\l", "for j in range(1, i + 1):\\l", "ret += [x]\\l", "for i in range(1, n + 1):\\l", "if i % 2 == 0:\\l", "x = 0\\l", "for j in range(1, i + 1):\\l", "x += j\\l"], ["x = 1\\l", "for j in range(1, i + 1):\\l", "ret += [x]\\l", "for i in range(1, n + 1):\\l", "if i % 2 == 0:\\l", "x = 0\\l", "for j in range(1, i + 1):\\l", "ret += [x]\\l"], ["x = 0\\l", "for j in range(1, i + 1):\\l", "ret += [x]\\l", "for i in range(1, n + 1):\\l", "if i % 2 == 0:\\l", "x = 1\\l", "for j in range(1, i + 1):\\l", "x *= j\\l"], ["x = 0\\l", "for j in range(1, i + 1):\\l", "ret += [x]\\l", "for i in range(1, n + 1):\\l", "if i % 2 == 0:\\l", "x = 1\\l", "for j in range(1, i + 1):\\l", "ret += [x]\\l"], ["x *= j\\l", "for j in range(1, i + 1):\\l", "ret += [x]\\l", "for i in range(1, n + 1):\\l", "return ret\\l"], ["x *= j\\l", "for j in range(1, i + 1):\\l", "ret += [x]\\l", "for i in range(1, n + 1):\\l", "if i % 2 == 0:\\l", "x = 1\\l"], ["x *= j\\l", "for j in range(1, i + 1):\\l", "ret += [x]\\l", "for i in range(1, n + 1):\\l", "if i % 2 == 0:\\l", "x = 0\\l", "for j in range(1, i + 1):\\l", "x += j\\l"], ["x *= j\\l", "for j in range(1, i + 1):\\l", "ret += [x]\\l", "for i in range(1, n + 1):\\l", "if i % 2 == 0:\\l", "x = 0\\l", "for j in range(1, i + 1):\\l", "ret += [x]\\l"], ["ret += [x]\\l", "for i in range(1, n + 1):\\l", "if i % 2 == 0:\\l", "x = 1\\l", "for j in range(1, i + 1):\\l", "x *= j\\l"], ["x += j\\l", "for j in range(1, i + 1):\\l", "ret += [x]\\l", "for i in range(1, n + 1):\\l", "return ret\\l"], ["x += j\\l", "for j in range(1, i + 1):\\l", "ret += [x]\\l", "for i in range(1, n + 1):\\l", "if i % 2 == 0:\\l", "x = 0\\l"], ["x += j\\l", "for j in range(1, i + 1):\\l", "ret += [x]\\l", "for i in range(1, n + 1):\\l", "if i % 2 == 0:\\l", "x = 1\\l", "for j in range(1, i + 1):\\l", "x *= j\\l"], ["x += j\\l", "for j in range(1, i + 1):\\l", "ret += [x]\\l", "for i in range(1, n + 1):\\l", "if i % 2 == 0:\\l", "x = 1\\l", "for j in range(1, i + 1):\\l", "ret += [x]\\l"], ["ret += [x]\\l", "for i in range(1, n + 1):\\l", "if i % 2 == 0:\\l", "x = 0\\l", "for j in range(1, i + 1):\\l", "x += j\\l"], ["from typing import *\\ldef f(n):...\\lf(3)\\l", "f", "ret = []\\l", "for i in range(1, n + 1):\\l", "return ret\\l"], ["from typing import *\\ldef f(n):...\\lf(3)\\l", "f", "ret = []\\l", "for i in range(1, n + 1):\\l", "if i % 2 == 0:\\l", "x = 1\\l", "for j in range(1, i + 1):\\l", "x *= j\\l"], ["from typing import *\\ldef f(n):...\\lf(3)\\l", "f", "ret = []\\l", "for i in range(1, n + 1):\\l", "if i % 2 == 0:\\l", "x = 1\\l", "for j in range(1, i + 1):\\l", "ret += [x]\\l"], ["from typing import *\\ldef f(n):...\\lf(3)\\l", "f", "ret = []\\l", "for i in range(1, n + 1):\\l", "if i % 2 == 0:\\l", "x = 0\\l", "for j in range(1, i + 1):\\l", "x += j\\l"], ["from typing import *\\ldef f(n):...\\lf(3)\\l", "f", "ret = []\\l", "for i in range(1, n + 1):\\l", "if i % 2 == 0:\\l", "x = 0\\l", "for j in range(1, i + 1):\\l", "ret += [x]\\l"]], "prime_paths_linenumbers": [[7, 8, 9, 11, 6, 17], [7, 13, 14, 16, 6, 17], [8, 9, 11, 6, 7, 13, 14, 15], [8, 9, 11, 6, 7, 13, 14, 16], [13, 14, 16, 6, 7, 8, 9, 10], [13, 14, 16, 6, 7, 8, 9, 11], [10, 9, 11, 6, 17], [10, 9, 11, 6, 7, 8], [10, 9, 11, 6, 7, 13, 14, 15], [10, 9, 11, 6, 7, 13, 14, 16], [11, 6, 7, 8, 9, 10], [15, 14, 16, 6, 17], [15, 14, 16, 6, 7, 13], [15, 14, 16, 6, 7, 8, 9, 10], [15, 14, 16, 6, 7, 8, 9, 11], [16, 6, 7, 13, 14, 15], [1, 19, 5, 6, 17], [1, 19, 5, 6, 7, 8, 9, 10], [1, 19, 5, 6, 7, 8, 9, 11], [1, 19, 5, 6, 7, 13, 14, 15], [1, 19, 5, 6, 7, 13, 14, 16]], "covered_statements_linenumbers": [1, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 19], "missing_statements_linenumbers": [], "covered_prime_paths_linenumbers": [[7, 8, 9, 11, 6, 17], [7, 13, 14, 16, 6, 17], [8, 9, 11, 6, 7, 13, 14, 15], [8, 9, 11, 6, 7, 13, 14, 16], [13, 14, 16, 6, 7, 8, 9, 10], [13, 14, 16, 6, 7, 8, 9, 11], [10, 9, 11, 6, 17], [10, 9, 11, 6, 7, 8], [10, 9, 11, 6, 7, 13, 14, 15], [10, 9, 11, 6, 7, 13, 14, 16], [11, 6, 7, 8, 9, 10], [15, 14, 16, 6, 17], [15, 14, 16, 6, 7, 13], [15, 14, 16, 6, 7, 8, 9, 10], [15, 14, 16, 6, 7, 8, 9, 11], [16, 6, 7, 13, 14, 15], [1, 19, 5, 6, 17], [1, 19, 5, 6, 7, 8, 9, 10], [1, 19, 5, 6, 7, 8, 9, 11], [1, 19, 5, 6, 7, 13, 14, 15], [1, 19, 5, 6, 7, 13, 14, 16]], "missing_prime_paths_linenumbers": [], "num_total_prime_paths": 21, "num_covered_paths": 21, "prime_path_coverage": 1.0, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_106__0_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_106__0_CFG.dot"}
{"humaneval_id": "HumanEval_78__0", "python_file": "HumanEval_78__0/main.py", "input_file": "HumanEval_78__0/input.txt", "prime_paths_nodes": [["7", "4", "8"], ["7", "9", "4", "8"], ["9", "4", "7"], ["1", "13", "3", "4", "8"], ["1", "13", "3", "4", "7", "9"]], "prime_paths_statements": [["if num[i] in primes:\\l", "for i in range(0, len(num)):\\l", "return total\\l"], ["if num[i] in primes:\\l", "total += 1\\l", "for i in range(0, len(num)):\\l", "return total\\l"], ["total += 1\\l", "for i in range(0, len(num)):\\l", "if num[i] in primes:\\l"], ["from typing import *\\ldef hex_key(num):...\\lhex_key('2020')\\l", "hex_key", "primes = '2', '3', '5', '7', 'B', 'D'\\ltotal = 0\\l", "for i in range(0, len(num)):\\l", "return total\\l"], ["from typing import *\\ldef hex_key(num):...\\lhex_key('2020')\\l", "hex_key", "primes = '2', '3', '5', '7', 'B', 'D'\\ltotal = 0\\l", "for i in range(0, len(num)):\\l", "if num[i] in primes:\\l", "total += 1\\l"]], "prime_paths_linenumbers": [[8, 7, 10], [8, 9, 7, 10], [9, 7, 8], [1, 12, 5, 6, 7, 10], [1, 12, 5, 6, 7, 8, 9]], "covered_statements_linenumbers": [1, 4, 5, 6, 7, 8, 9, 10, 12], "missing_statements_linenumbers": [], "covered_prime_paths_linenumbers": [[8, 7, 10], [8, 9, 7, 10], [9, 7, 8], [1, 12, 5, 6, 7, 10], [1, 12, 5, 6, 7, 8, 9]], "missing_prime_paths_linenumbers": [], "num_total_prime_paths": 5, "num_covered_paths": 5, "prime_path_coverage": 1.0, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_78__0_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_78__0_CFG.dot"}
{"humaneval_id": "HumanEval_94__1", "python_file": "HumanEval_94__1/main.py", "input_file": "HumanEval_94__1/input.txt", "prime_paths_nodes": [["5", "8", "10"], ["8", "5", "9"], ["16", "18", "19", "15", "17", "23"], ["16", "19", "15", "17", "23"], ["18", "19", "15", "16"], ["19", "15", "16", "18"], ["1", "26", "3", "15", "16", "18", "19"], ["1", "26", "3", "15", "16", "19"], ["1", "26", "3", "15", "17", "23"]], "prime_paths_statements": [["for i in range(2, int(n ** 0.5) + 1):\\l", "if n % i == 0:\\l", "return False\\l"], ["if n % i == 0:\\l", "for i in range(2, int(n ** 0.5) + 1):\\l", "return True\\l"], ["if lst[i] > maxx and isPrime(lst[i]):\\l", "maxx = lst[i]\\l", "i += 1\\l", "while i < len(lst):\\l", "result = sum(int(digit) for digit in str(maxx))\\l", "return result\\l"], ["if lst[i] > maxx and isPrime(lst[i]):\\l", "i += 1\\l", "while i < len(lst):\\l", "result = sum(int(digit) for digit in str(maxx))\\l", "return result\\l"], ["maxx = lst[i]\\l", "i += 1\\l", "while i < len(lst):\\l", "if lst[i] > maxx and isPrime(lst[i]):\\l"], ["i += 1\\l", "while i < len(lst):\\l", "if lst[i] > maxx and isPrime(lst[i]):\\l", "maxx = lst[i]\\l"], ["from typing import *\\ldef skjkasdkd(lst):...\\lskjkasdkd([0, 8, 1, 2, 1, 7])\\l", "skjkasdkd", "def isPrime(n):...\\lmaxx = 0\\li = 0\\l", "while i < len(lst):\\l", "if lst[i] > maxx and isPrime(lst[i]):\\l", "maxx = lst[i]\\l", "i += 1\\l"], ["from typing import *\\ldef skjkasdkd(lst):...\\lskjkasdkd([0, 8, 1, 2, 1, 7])\\l", "skjkasdkd", "def isPrime(n):...\\lmaxx = 0\\li = 0\\l", "while i < len(lst):\\l", "if lst[i] > maxx and isPrime(lst[i]):\\l", "i += 1\\l"], ["from typing import *\\ldef skjkasdkd(lst):...\\lskjkasdkd([0, 8, 1, 2, 1, 7])\\l", "skjkasdkd", "def isPrime(n):...\\lmaxx = 0\\li = 0\\l", "while i < len(lst):\\l", "result = sum(int(digit) for digit in str(maxx))\\l", "return result\\l"]], "prime_paths_linenumbers": [[6, 7, 8], [7, 6, 10], [14, 15, 16, 13, 17, 18], [14, 16, 13, 17, 18], [15, 16, 13, 14], [16, 13, 14, 15], [1, 20, 5, 11, 12, 13, 14, 15, 16], [1, 20, 5, 11, 12, 13, 14, 16], [1, 20, 5, 11, 12, 13, 17, 18]], "covered_statements_linenumbers": [1, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 20], "missing_statements_linenumbers": [], "covered_prime_paths_linenumbers": [[6, 7, 8], [7, 6, 10], [14, 15, 16, 13, 17, 18], [14, 16, 13, 17, 18], [15, 16, 13, 14], [16, 13, 14, 15], [1, 20, 5, 11, 12, 13, 14, 15, 16], [1, 20, 5, 11, 12, 13, 14, 16], [1, 20, 5, 11, 12, 13, 17, 18]], "missing_prime_paths_linenumbers": [], "num_total_prime_paths": 9, "num_covered_paths": 9, "prime_path_coverage": 1.0, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_94__1_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_94__1_CFG.dot"}
{"humaneval_id": "HumanEval_83__0", "python_file": "HumanEval_83__0/main.py", "input_file": "HumanEval_83__0/input.txt", "prime_paths_nodes": [["1", "9", "3", "4"], ["1", "9", "3", "5"]], "prime_paths_statements": [["from typing import *\\ldef starts_one_ends(n):...\\lstarts_one_ends(4)\\l", "starts_one_ends", "if n == 1:\\l", "return 1\\l"], ["from typing import *\\ldef starts_one_ends(n):...\\lstarts_one_ends(4)\\l", "starts_one_ends", "if n == 1:\\l", "return 18 * 10 ** (n - 2)\\l"]], "prime_paths_linenumbers": [[1, 9, 5, 6], [1, 9, 5, 7]], "covered_statements_linenumbers": [1, 4, 5, 7, 9], "missing_statements_linenumbers": [6], "covered_prime_paths_linenumbers": [[1, 9, 5, 7]], "missing_prime_paths_linenumbers": [[1, 9, 5, 6]], "num_total_prime_paths": 2, "num_covered_paths": 1, "prime_path_coverage": 0.5, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_83__0_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_83__0_CFG.dot"}
{"humaneval_id": "HumanEval_64__1", "python_file": "HumanEval_64__1/main.py", "input_file": "HumanEval_64__1/input.txt", "prime_paths_nodes": [["1", "10", "3", "5", "6", "7"], ["1", "10", "3", "5", "7"]], "prime_paths_statements": [["from typing import *\\ldef vowels_count(s):...\\lvowels_count('bye')\\l", "vowels_count", "vowels = 'aeiouAEIOU'\\ln_vowels = sum(c in vowels for c in s)\\l", "if s[-1] == 'y' or s[-1] == 'Y':\\l", "n_vowels += 1\\l", "return n_vowels\\l"], ["from typing import *\\ldef vowels_count(s):...\\lvowels_count('bye')\\l", "vowels_count", "vowels = 'aeiouAEIOU'\\ln_vowels = sum(c in vowels for c in s)\\l", "if s[-1] == 'y' or s[-1] == 'Y':\\l", "return n_vowels\\l"]], "prime_paths_linenumbers": [[1, 11, 5, 6, 7, 8, 9], [1, 11, 5, 6, 7, 9]], "covered_statements_linenumbers": [1, 4, 5, 6, 7, 9, 11], "missing_statements_linenumbers": [8], "covered_prime_paths_linenumbers": [[1, 11, 5, 6, 7, 9]], "missing_prime_paths_linenumbers": [[1, 11, 5, 6, 7, 8, 9]], "num_total_prime_paths": 2, "num_covered_paths": 1, "prime_path_coverage": 0.5, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_64__1_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_64__1_CFG.dot"}
{"humaneval_id": "HumanEval_114", "python_file": "HumanEval_114/main.py", "input_file": "HumanEval_114/input.txt", "prime_paths_nodes": [["5", "7", "8", "9", "4", "6", "11", "12", "14"], ["5", "7", "8", "9", "4", "6", "12", "14"], ["5", "7", "9", "4", "6", "11", "12", "14"], ["5", "7", "9", "4", "6", "12", "14"], ["7", "8", "9", "4", "5"], ["7", "9", "4", "5"], ["8", "9", "4", "5", "7"], ["9", "4", "5", "7", "8"], ["1", "17", "3", "4", "5", "7", "8", "9"], ["1", "17", "3", "4", "5", "7", "9"], ["1", "17", "3", "4", "6", "11", "12", "14"], ["1", "17", "3", "4", "6", "12", "14"]], "prime_paths_statements": [["s += -num\\l", "if s < 0:\\l", "s = 0\\l", "max_sum = max(s, max_sum)\\l", "for num in nums:\\l", "if max_sum == 0:\\l", "max_sum = max(-i for i in nums)\\l", "min_sum = -max_sum\\l", "return min_sum\\l"], ["s += -num\\l", "if s < 0:\\l", "s = 0\\l", "max_sum = max(s, max_sum)\\l", "for num in nums:\\l", "if max_sum == 0:\\l", "min_sum = -max_sum\\l", "return min_sum\\l"], ["s += -num\\l", "if s < 0:\\l", "max_sum = max(s, max_sum)\\l", "for num in nums:\\l", "if max_sum == 0:\\l", "max_sum = max(-i for i in nums)\\l", "min_sum = -max_sum\\l", "return min_sum\\l"], ["s += -num\\l", "if s < 0:\\l", "max_sum = max(s, max_sum)\\l", "for num in nums:\\l", "if max_sum == 0:\\l", "min_sum = -max_sum\\l", "return min_sum\\l"], ["if s < 0:\\l", "s = 0\\l", "max_sum = max(s, max_sum)\\l", "for num in nums:\\l", "s += -num\\l"], ["if s < 0:\\l", "max_sum = max(s, max_sum)\\l", "for num in nums:\\l", "s += -num\\l"], ["s = 0\\l", "max_sum = max(s, max_sum)\\l", "for num in nums:\\l", "s += -num\\l", "if s < 0:\\l"], ["max_sum = max(s, max_sum)\\l", "for num in nums:\\l", "s += -num\\l", "if s < 0:\\l", "s = 0\\l"], ["from typing import *\\ldef minSubArraySum(nums):...\\lminSubArraySum([2, 3, 4, 1, 2, 4])\\l", "minSubArraySum", "max_sum = 0\\ls = 0\\l", "for num in nums:\\l", "s += -num\\l", "if s < 0:\\l", "s = 0\\l", "max_sum = max(s, max_sum)\\l"], ["from typing import *\\ldef minSubArraySum(nums):...\\lminSubArraySum([2, 3, 4, 1, 2, 4])\\l", "minSubArraySum", "max_sum = 0\\ls = 0\\l", "for num in nums:\\l", "s += -num\\l", "if s < 0:\\l", "max_sum = max(s, max_sum)\\l"], ["from typing import *\\ldef minSubArraySum(nums):...\\lminSubArraySum([2, 3, 4, 1, 2, 4])\\l", "minSubArraySum", "max_sum = 0\\ls = 0\\l", "for num in nums:\\l", "if max_sum == 0:\\l", "max_sum = max(-i for i in nums)\\l", "min_sum = -max_sum\\l", "return min_sum\\l"], ["from typing import *\\ldef minSubArraySum(nums):...\\lminSubArraySum([2, 3, 4, 1, 2, 4])\\l", "minSubArraySum", "max_sum = 0\\ls = 0\\l", "for num in nums:\\l", "if max_sum == 0:\\l", "min_sum = -max_sum\\l", "return min_sum\\l"]], "prime_paths_linenumbers": [[6, 7, 8, 9, 5, 10, 11, 12, 13], [6, 7, 8, 9, 5, 10, 12, 13], [6, 7, 9, 5, 10, 11, 12, 13], [6, 7, 9, 5, 10, 12, 13], [7, 8, 9, 5, 6], [7, 9, 5, 6], [8, 9, 5, 6, 7], [9, 5, 6, 7, 8], [1, 15, 3, 4, 5, 6, 7, 8, 9], [1, 15, 3, 4, 5, 6, 7, 9], [1, 15, 3, 4, 5, 10, 11, 12, 13], [1, 15, 3, 4, 5, 10, 12, 13]], "covered_statements_linenumbers": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15], "missing_statements_linenumbers": [], "covered_prime_paths_linenumbers": [[6, 7, 8, 9, 5, 10, 11, 12, 13], [6, 7, 8, 9, 5, 10, 12, 13], [6, 7, 9, 5, 10, 11, 12, 13], [6, 7, 9, 5, 10, 12, 13], [7, 8, 9, 5, 6], [7, 9, 5, 6], [8, 9, 5, 6, 7], [9, 5, 6, 7, 8], [1, 15, 3, 4, 5, 6, 7, 8, 9], [1, 15, 3, 4, 5, 6, 7, 9], [1, 15, 3, 4, 5, 10, 11, 12, 13], [1, 15, 3, 4, 5, 10, 12, 13]], "missing_prime_paths_linenumbers": [], "num_total_prime_paths": 12, "num_covered_paths": 12, "prime_path_coverage": 1.0, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_114_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_114_CFG.dot"}
{"humaneval_id": "HumanEval_42__1", "python_file": "HumanEval_42__1/main.py", "input_file": "HumanEval_42__1/input.txt", "prime_paths_nodes": [["1", "6", "3"]], "prime_paths_statements": [["from typing import *\\ldef incr_list(l: list):...\\lincr_list([])\\l", "incr_list", "return [(e + 1) for e in l]\\l"]], "prime_paths_linenumbers": [[1, 7, 5]], "covered_statements_linenumbers": [1, 4, 5, 7], "missing_statements_linenumbers": [], "covered_prime_paths_linenumbers": [[1, 7, 5]], "missing_prime_paths_linenumbers": [], "num_total_prime_paths": 1, "num_covered_paths": 1, "prime_path_coverage": 1.0, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_42__1_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_42__1_CFG.dot"}
{"humaneval_id": "HumanEval_125__1", "python_file": "HumanEval_125__1/main.py", "input_file": "HumanEval_125__1/input.txt", "prime_paths_nodes": [["1", "14", "3", "4"], ["1", "14", "3", "6", "7"], ["1", "14", "3", "6", "9"]], "prime_paths_statements": [["from typing import *\\ldef split_words(txt):...\\lsplit_words('Hello world,!')\\l", "split_words", "if ' ' in txt:\\l", "return txt.split()\\l"], ["from typing import *\\ldef split_words(txt):...\\lsplit_words('Hello world,!')\\l", "split_words", "if ' ' in txt:\\l", "if ',' in txt:\\l", "return txt.replace(',', ' ').split()\\l"], ["from typing import *\\ldef split_words(txt):...\\lsplit_words('Hello world,!')\\l", "split_words", "if ' ' in txt:\\l", "if ',' in txt:\\l", "return len([i for i in txt if i.islower() and ord(i) % 2 == 0])\\l"]], "prime_paths_linenumbers": [[1, 12, 5, 6], [1, 12, 5, 7, 8], [1, 12, 5, 7, 10]], "covered_statements_linenumbers": [1, 4, 5, 6, 12], "missing_statements_linenumbers": [7, 8, 10], "covered_prime_paths_linenumbers": [[1, 12, 5, 6]], "missing_prime_paths_linenumbers": [[1, 12, 5, 7, 8], [1, 12, 5, 7, 10]], "num_total_prime_paths": 3, "num_covered_paths": 1, "prime_path_coverage": 0.33, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_125__1_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_125__1_CFG.dot"}
{"humaneval_id": "HumanEval_18__0", "python_file": "HumanEval_18__0/main.py", "input_file": "HumanEval_18__0/input.txt", "prime_paths_nodes": [["8", "4", "9"], ["8", "11", "4", "9"], ["11", "4", "8"], ["1", "15", "3", "4", "9"], ["1", "15", "3", "4", "8", "11"]], "prime_paths_statements": [["if string[i:i + len(substring)] == substring:\\l", "for i in range(len(string) - len(substring) + 1):\\l", "return times\\l"], ["if string[i:i + len(substring)] == substring:\\l", "times += 1\\l", "for i in range(len(string) - len(substring) + 1):\\l", "return times\\l"], ["times += 1\\l", "for i in range(len(string) - len(substring) + 1):\\l", "if string[i:i + len(substring)] == substring:\\l"], ["from typing import *\\ldef how_many_times(string: str, substring: str) ->int:...\\lhow_many_times('xyxyxyx', 'x')\\l", "how_many_times", "times = 0\\l", "for i in range(len(string) - len(substring) + 1):\\l", "return times\\l"], ["from typing import *\\ldef how_many_times(string: str, substring: str) ->int:...\\lhow_many_times('xyxyxyx', 'x')\\l", "how_many_times", "times = 0\\l", "for i in range(len(string) - len(substring) + 1):\\l", "if string[i:i + len(substring)] == substring:\\l", "times += 1\\l"]], "prime_paths_linenumbers": [[8, 7, 11], [8, 9, 7, 11], [9, 7, 8], [1, 13, 5, 7, 11], [1, 13, 5, 7, 8, 9]], "covered_statements_linenumbers": [1, 4, 5, 7, 8, 9, 11, 13], "missing_statements_linenumbers": [], "covered_prime_paths_linenumbers": [[8, 7, 11], [8, 9, 7, 11], [9, 7, 8], [1, 13, 5, 7, 11], [1, 13, 5, 7, 8, 9]], "missing_prime_paths_linenumbers": [], "num_total_prime_paths": 5, "num_covered_paths": 5, "prime_path_coverage": 1.0, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_18__0_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_18__0_CFG.dot"}
{"humaneval_id": "HumanEval_22", "python_file": "HumanEval_22/main.py", "input_file": "HumanEval_22/input.txt", "prime_paths_nodes": [["1", "6", "3"]], "prime_paths_statements": [["from typing import *\\ldef filter_integers(values: List[Any]) ->List[int]:...\\lfilter_integers([3, 'c', 3, 3, 'a', 'b'])\\l", "filter_integers", "return [x for x in values if isinstance(x, int)]\\l"]], "prime_paths_linenumbers": [[1, 5, 3]], "covered_statements_linenumbers": [1, 2, 3, 5], "missing_statements_linenumbers": [], "covered_prime_paths_linenumbers": [[1, 5, 3]], "missing_prime_paths_linenumbers": [], "num_total_prime_paths": 1, "num_covered_paths": 1, "prime_path_coverage": 1.0, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_22_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_22_CFG.dot"}
{"humaneval_id": "HumanEval_99__1", "python_file": "HumanEval_99__1/main.py", "input_file": "HumanEval_99__1/input.txt", "prime_paths_nodes": [["8", "6", "7", "11", "12", "21", "13"], ["8", "6", "7", "11", "12", "23", "13"], ["8", "6", "7", "11", "14", "16", "13"], ["8", "6", "7", "11", "14", "18", "13"], ["1", "28", "3", "4", "6", "8"], ["1", "28", "3", "4", "6", "7", "11", "12", "21", "13"], ["1", "28", "3", "4", "6", "7", "11", "12", "23", "13"], ["1", "28", "3", "4", "6", "7", "11", "14", "16", "13"], ["1", "28", "3", "4", "6", "7", "11", "14", "18", "13"], ["1", "28", "3", "4", "7", "11", "12", "21", "13"], ["1", "28", "3", "4", "7", "11", "12", "23", "13"], ["1", "28", "3", "4", "7", "11", "14", "16", "13"], ["1", "28", "3", "4", "7", "11", "14", "18", "13"]], "prime_paths_statements": [["value = value[:-1]\\l", "while value[-1] == '0':\\l", "num = float(value)\\l", "if value[-2:] == '.5':\\l", "if num > 0:\\l", "res = ceil(num)\\l", "return res\\l"], ["value = value[:-1]\\l", "while value[-1] == '0':\\l", "num = float(value)\\l", "if value[-2:] == '.5':\\l", "if num > 0:\\l", "res = floor(num)\\l", "return res\\l"], ["value = value[:-1]\\l", "while value[-1] == '0':\\l", "num = float(value)\\l", "if value[-2:] == '.5':\\l", "if len(value) > 0:\\l", "res = int(round(num))\\l", "return res\\l"], ["value = value[:-1]\\l", "while value[-1] == '0':\\l", "num = float(value)\\l", "if value[-2:] == '.5':\\l", "if len(value) > 0:\\l", "res = 0\\l", "return res\\l"], ["from typing import *\\ldef closest_integer(value):...\\lclosest_integer('15.3')\\l", "closest_integer", "from math import floor, ceil\\l", "if value.count('.') == 1:\\l", "while value[-1] == '0':\\l", "value = value[:-1]\\l"], ["from typing import *\\ldef closest_integer(value):...\\lclosest_integer('15.3')\\l", "closest_integer", "from math import floor, ceil\\l", "if value.count('.') == 1:\\l", "while value[-1] == '0':\\l", "num = float(value)\\l", "if value[-2:] == '.5':\\l", "if num > 0:\\l", "res = ceil(num)\\l", "return res\\l"], ["from typing import *\\ldef closest_integer(value):...\\lclosest_integer('15.3')\\l", "closest_integer", "from math import floor, ceil\\l", "if value.count('.') == 1:\\l", "while value[-1] == '0':\\l", "num = float(value)\\l", "if value[-2:] == '.5':\\l", "if num > 0:\\l", "res = floor(num)\\l", "return res\\l"], ["from typing import *\\ldef closest_integer(value):...\\lclosest_integer('15.3')\\l", "closest_integer", "from math import floor, ceil\\l", "if value.count('.') == 1:\\l", "while value[-1] == '0':\\l", "num = float(value)\\l", "if value[-2:] == '.5':\\l", "if len(value) > 0:\\l", "res = int(round(num))\\l", "return res\\l"], ["from typing import *\\ldef closest_integer(value):...\\lclosest_integer('15.3')\\l", "closest_integer", "from math import floor, ceil\\l", "if value.count('.') == 1:\\l", "while value[-1] == '0':\\l", "num = float(value)\\l", "if value[-2:] == '.5':\\l", "if len(value) > 0:\\l", "res = 0\\l", "return res\\l"], ["from typing import *\\ldef closest_integer(value):...\\lclosest_integer('15.3')\\l", "closest_integer", "from math import floor, ceil\\l", "if value.count('.') == 1:\\l", "num = float(value)\\l", "if value[-2:] == '.5':\\l", "if num > 0:\\l", "res = ceil(num)\\l", "return res\\l"], ["from typing import *\\ldef closest_integer(value):...\\lclosest_integer('15.3')\\l", "closest_integer", "from math import floor, ceil\\l", "if value.count('.') == 1:\\l", "num = float(value)\\l", "if value[-2:] == '.5':\\l", "if num > 0:\\l", "res = floor(num)\\l", "return res\\l"], ["from typing import *\\ldef closest_integer(value):...\\lclosest_integer('15.3')\\l", "closest_integer", "from math import floor, ceil\\l", "if value.count('.') == 1:\\l", "num = float(value)\\l", "if value[-2:] == '.5':\\l", "if len(value) > 0:\\l", "res = int(round(num))\\l", "return res\\l"], ["from typing import *\\ldef closest_integer(value):...\\lclosest_integer('15.3')\\l", "closest_integer", "from math import floor, ceil\\l", "if value.count('.') == 1:\\l", "num = float(value)\\l", "if value[-2:] == '.5':\\l", "if len(value) > 0:\\l", "res = 0\\l", "return res\\l"]], "prime_paths_linenumbers": [[10, 9, 12, 13, 14, 15, 23], [10, 9, 12, 13, 14, 17, 23], [10, 9, 12, 13, 18, 19, 23], [10, 9, 12, 13, 18, 21, 23], [1, 25, 5, 7, 9, 10], [1, 25, 5, 7, 9, 12, 13, 14, 15, 23], [1, 25, 5, 7, 9, 12, 13, 14, 17, 23], [1, 25, 5, 7, 9, 12, 13, 18, 19, 23], [1, 25, 5, 7, 9, 12, 13, 18, 21, 23], [1, 25, 5, 7, 12, 13, 14, 15, 23], [1, 25, 5, 7, 12, 13, 14, 17, 23], [1, 25, 5, 7, 12, 13, 18, 19, 23], [1, 25, 5, 7, 12, 13, 18, 21, 23]], "covered_statements_linenumbers": [1, 4, 5, 7, 9, 12, 13, 18, 19, 23, 25], "missing_statements_linenumbers": [10, 14, 15, 17, 21], "covered_prime_paths_linenumbers": [[1, 25, 5, 7, 9, 12, 13, 18, 19, 23], [1, 25, 5, 7, 12, 13, 18, 19, 23]], "missing_prime_paths_linenumbers": [[10, 9, 12, 13, 14, 15, 23], [10, 9, 12, 13, 14, 17, 23], [10, 9, 12, 13, 18, 19, 23], [10, 9, 12, 13, 18, 21, 23], [1, 25, 5, 7, 9, 10], [1, 25, 5, 7, 9, 12, 13, 14, 15, 23], [1, 25, 5, 7, 9, 12, 13, 14, 17, 23], [1, 25, 5, 7, 9, 12, 13, 18, 21, 23], [1, 25, 5, 7, 12, 13, 14, 15, 23], [1, 25, 5, 7, 12, 13, 14, 17, 23], [1, 25, 5, 7, 12, 13, 18, 21, 23]], "num_total_prime_paths": 13, "num_covered_paths": 2, "prime_path_coverage": 0.15, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_99__1_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_99__1_CFG.dot"}
{"humaneval_id": "HumanEval_56__0", "python_file": "HumanEval_56__0/main.py", "input_file": "HumanEval_56__0/input.txt", "prime_paths_nodes": [["5", "7", "8", "4", "6"], ["5", "9", "8", "4", "6"], ["7", "8", "4", "5", "9"], ["9", "8", "4", "5", "7"], ["1", "15", "3", "4", "6"], ["1", "15", "3", "4", "5", "7", "8", "10"], ["1", "15", "3", "4", "5", "9", "8", "10"]], "prime_paths_statements": [["if b == '<':\\l", "depth += 1\\l", "if depth < 0:\\l", "for b in brackets:\\l", "return depth == 0\\l"], ["if b == '<':\\l", "depth -= 1\\l", "if depth < 0:\\l", "for b in brackets:\\l", "return depth == 0\\l"], ["depth += 1\\l", "if depth < 0:\\l", "for b in brackets:\\l", "if b == '<':\\l", "depth -= 1\\l"], ["depth -= 1\\l", "if depth < 0:\\l", "for b in brackets:\\l", "if b == '<':\\l", "depth += 1\\l"], ["from typing import *\\ldef correct_bracketing(brackets: str):...\\lcorrect_bracketing('<><><<><>><>>><>')\\l", "correct_bracketing", "depth = 0\\l", "for b in brackets:\\l", "return depth == 0\\l"], ["from typing import *\\ldef correct_bracketing(brackets: str):...\\lcorrect_bracketing('<><><<><>><>>><>')\\l", "correct_bracketing", "depth = 0\\l", "for b in brackets:\\l", "if b == '<':\\l", "depth += 1\\l", "if depth < 0:\\l", "return False\\l"], ["from typing import *\\ldef correct_bracketing(brackets: str):...\\lcorrect_bracketing('<><><<><>><>>><>')\\l", "correct_bracketing", "depth = 0\\l", "for b in brackets:\\l", "if b == '<':\\l", "depth -= 1\\l", "if depth < 0:\\l", "return False\\l"]], "prime_paths_linenumbers": [[7, 8, 11, 6, 13], [7, 10, 11, 6, 13], [8, 11, 6, 7, 10], [10, 11, 6, 7, 8], [1, 15, 5, 6, 13], [1, 15, 5, 6, 7, 8, 11, 12], [1, 15, 5, 6, 7, 10, 11, 12]], "covered_statements_linenumbers": [1, 4, 5, 6, 7, 8, 10, 11, 12, 15], "missing_statements_linenumbers": [13], "covered_prime_paths_linenumbers": [[8, 11, 6, 7, 10], [10, 11, 6, 7, 8], [1, 15, 5, 6, 7, 8, 11, 12], [1, 15, 5, 6, 7, 10, 11, 12]], "missing_prime_paths_linenumbers": [[7, 8, 11, 6, 13], [7, 10, 11, 6, 13], [1, 15, 5, 6, 13]], "num_total_prime_paths": 7, "num_covered_paths": 4, "prime_path_coverage": 0.57, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_56__0_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_56__0_CFG.dot"}
{"humaneval_id": "HumanEval_140__1", "python_file": "HumanEval_140__1/main.py", "input_file": "HumanEval_140__1/input.txt", "prime_paths_nodes": [["5", "7", "8", "4", "6", "16", "17"], ["5", "7", "8", "4", "6", "18", "17"], ["5", "7", "8", "4", "6", "18", "19", "17"], ["5", "9", "10", "11", "8", "4", "6", "16", "17"], ["5", "9", "10", "11", "8", "4", "6", "18", "17"], ["5", "9", "10", "11", "8", "4", "6", "18", "19", "17"], ["5", "9", "12", "13", "11", "8", "4", "6", "16", "17"], ["5", "9", "12", "13", "11", "8", "4", "6", "18", "17"], ["5", "9", "12", "13", "11", "8", "4", "6", "18", "19", "17"], ["5", "9", "12", "15", "11", "8", "4", "6", "16", "17"], ["5", "9", "12", "15", "11", "8", "4", "6", "18", "17"], ["5", "9", "12", "15", "11", "8", "4", "6", "18", "19", "17"], ["7", "8", "4", "5", "9", "10", "11"], ["7", "8", "4", "5", "9", "12", "13", "11"], ["7", "8", "4", "5", "9", "12", "15", "11"], ["9", "10", "11", "8", "4", "5", "7"], ["9", "12", "13", "11", "8", "4", "5", "7"], ["9", "12", "15", "11", "8", "4", "5", "7"], ["10", "11", "8", "4", "5", "9", "12", "13"], ["10", "11", "8", "4", "5", "9", "12", "15"], ["12", "13", "11", "8", "4", "5", "9", "10"], ["12", "15", "11", "8", "4", "5", "9", "10"], ["13", "11", "8", "4", "5", "9", "12", "15"], ["15", "11", "8", "4", "5", "9", "12", "13"], ["1", "23", "3", "4", "5", "7", "8"], ["1", "23", "3", "4", "5", "9", "10", "11", "8"], ["1", "23", "3", "4", "5", "9", "12", "13", "11", "8"], ["1", "23", "3", "4", "5", "9", "12", "15", "11", "8"], ["1", "23", "3", "4", "6", "16", "17"], ["1", "23", "3", "4", "6", "18", "17"], ["1", "23", "3", "4", "6", "18", "19", "17"]], "prime_paths_statements": [["if text[i] == ' ':\\l", "end += 1\\l", "i += 1\\l", "while i < len(text):\\l", "if end - start > 2:\\l", "new_text += '-'\\l", "return new_text\\l"], ["if text[i] == ' ':\\l", "end += 1\\l", "i += 1\\l", "while i < len(text):\\l", "if end - start > 2:\\l", "if end - start > 0:\\l", "return new_text\\l"], ["if text[i] == ' ':\\l", "end += 1\\l", "i += 1\\l", "while i < len(text):\\l", "if end - start > 2:\\l", "if end - start > 0:\\l", "new_text += '_'\\l", "return new_text\\l"], ["if text[i] == ' ':\\l", "if end - start > 2:\\l", "new_text += '-' + text[i]\\l", "start, end = i + 1, i + 1\\l", "i += 1\\l", "while i < len(text):\\l", "if end - start > 2:\\l", "new_text += '-'\\l", "return new_text\\l"], ["if text[i] == ' ':\\l", "if end - start > 2:\\l", "new_text += '-' + text[i]\\l", "start, end = i + 1, i + 1\\l", "i += 1\\l", "while i < len(text):\\l", "if end - start > 2:\\l", "if end - start > 0:\\l", "return new_text\\l"], ["if text[i] == ' ':\\l", "if end - start > 2:\\l", "new_text += '-' + text[i]\\l", "start, end = i + 1, i + 1\\l", "i += 1\\l", "while i < len(text):\\l", "if end - start > 2:\\l", "if end - start > 0:\\l", "new_text += '_'\\l", "return new_text\\l"], ["if text[i] == ' ':\\l", "if end - start > 2:\\l", "if end - start > 0:\\l", "new_text += '_' * (end - start) + text[i]\\l", "start, end = i + 1, i + 1\\l", "i += 1\\l", "while i < len(text):\\l", "if end - start > 2:\\l", "new_text += '-'\\l", "return new_text\\l"], ["if text[i] == ' ':\\l", "if end - start > 2:\\l", "if end - start > 0:\\l", "new_text += '_' * (end - start) + text[i]\\l", "start, end = i + 1, i + 1\\l", "i += 1\\l", "while i < len(text):\\l", "if end - start > 2:\\l", "if end - start > 0:\\l", "return new_text\\l"], ["if text[i] == ' ':\\l", "if end - start > 2:\\l", "if end - start > 0:\\l", "new_text += '_' * (end - start) + text[i]\\l", "start, end = i + 1, i + 1\\l", "i += 1\\l", "while i < len(text):\\l", "if end - start > 2:\\l", "if end - start > 0:\\l", "new_text += '_'\\l", "return new_text\\l"], ["if text[i] == ' ':\\l", "if end - start > 2:\\l", "if end - start > 0:\\l", "new_text += text[i]\\l", "start, end = i + 1, i + 1\\l", "i += 1\\l", "while i < len(text):\\l", "if end - start > 2:\\l", "new_text += '-'\\l", "return new_text\\l"], ["if text[i] == ' ':\\l", "if end - start > 2:\\l", "if end - start > 0:\\l", "new_text += text[i]\\l", "start, end = i + 1, i + 1\\l", "i += 1\\l", "while i < len(text):\\l", "if end - start > 2:\\l", "if end - start > 0:\\l", "return new_text\\l"], ["if text[i] == ' ':\\l", "if end - start > 2:\\l", "if end - start > 0:\\l", "new_text += text[i]\\l", "start, end = i + 1, i + 1\\l", "i += 1\\l", "while i < len(text):\\l", "if end - start > 2:\\l", "if end - start > 0:\\l", "new_text += '_'\\l", "return new_text\\l"], ["end += 1\\l", "i += 1\\l", "while i < len(text):\\l", "if text[i] == ' ':\\l", "if end - start > 2:\\l", "new_text += '-' + text[i]\\l", "start, end = i + 1, i + 1\\l"], ["end += 1\\l", "i += 1\\l", "while i < len(text):\\l", "if text[i] == ' ':\\l", "if end - start > 2:\\l", "if end - start > 0:\\l", "new_text += '_' * (end - start) + text[i]\\l", "start, end = i + 1, i + 1\\l"], ["end += 1\\l", "i += 1\\l", "while i < len(text):\\l", "if text[i] == ' ':\\l", "if end - start > 2:\\l", "if end - start > 0:\\l", "new_text += text[i]\\l", "start, end = i + 1, i + 1\\l"], ["if end - start > 2:\\l", "new_text += '-' + text[i]\\l", "start, end = i + 1, i + 1\\l", "i += 1\\l", "while i < len(text):\\l", "if text[i] == ' ':\\l", "end += 1\\l"], ["if end - start > 2:\\l", "if end - start > 0:\\l", "new_text += '_' * (end - start) + text[i]\\l", "start, end = i + 1, i + 1\\l", "i += 1\\l", "while i < len(text):\\l", "if text[i] == ' ':\\l", "end += 1\\l"], ["if end - start > 2:\\l", "if end - start > 0:\\l", "new_text += text[i]\\l", "start, end = i + 1, i + 1\\l", "i += 1\\l", "while i < len(text):\\l", "if text[i] == ' ':\\l", "end += 1\\l"], ["new_text += '-' + text[i]\\l", "start, end = i + 1, i + 1\\l", "i += 1\\l", "while i < len(text):\\l", "if text[i] == ' ':\\l", "if end - start > 2:\\l", "if end - start > 0:\\l", "new_text += '_' * (end - start) + text[i]\\l"], ["new_text += '-' + text[i]\\l", "start, end = i + 1, i + 1\\l", "i += 1\\l", "while i < len(text):\\l", "if text[i] == ' ':\\l", "if end - start > 2:\\l", "if end - start > 0:\\l", "new_text += text[i]\\l"], ["if end - start > 0:\\l", "new_text += '_' * (end - start) + text[i]\\l", "start, end = i + 1, i + 1\\l", "i += 1\\l", "while i < len(text):\\l", "if text[i] == ' ':\\l", "if end - start > 2:\\l", "new_text += '-' + text[i]\\l"], ["if end - start > 0:\\l", "new_text += text[i]\\l", "start, end = i + 1, i + 1\\l", "i += 1\\l", "while i < len(text):\\l", "if text[i] == ' ':\\l", "if end - start > 2:\\l", "new_text += '-' + text[i]\\l"], ["new_text += '_' * (end - start) + text[i]\\l", "start, end = i + 1, i + 1\\l", "i += 1\\l", "while i < len(text):\\l", "if text[i] == ' ':\\l", "if end - start > 2:\\l", "if end - start > 0:\\l", "new_text += text[i]\\l"], ["new_text += text[i]\\l", "start, end = i + 1, i + 1\\l", "i += 1\\l", "while i < len(text):\\l", "if text[i] == ' ':\\l", "if end - start > 2:\\l", "if end - start > 0:\\l", "new_text += '_' * (end - start) + text[i]\\l"], ["from typing import *\\ldef fix_spaces(text):...\\lfix_spaces('Yellow Yellow  Dirty...')\\l", "fix_spaces", "new_text = ''\\li = 0\\lstart, end = 0, 0\\l", "while i < len(text):\\l", "if text[i] == ' ':\\l", "end += 1\\l", "i += 1\\l"], ["from typing import *\\ldef fix_spaces(text):...\\lfix_spaces('Yellow Yellow  Dirty...')\\l", "fix_spaces", "new_text = ''\\li = 0\\lstart, end = 0, 0\\l", "while i < len(text):\\l", "if text[i] == ' ':\\l", "if end - start > 2:\\l", "new_text += '-' + text[i]\\l", "start, end = i + 1, i + 1\\l", "i += 1\\l"], ["from typing import *\\ldef fix_spaces(text):...\\lfix_spaces('Yellow Yellow  Dirty...')\\l", "fix_spaces", "new_text = ''\\li = 0\\lstart, end = 0, 0\\l", "while i < len(text):\\l", "if text[i] == ' ':\\l", "if end - start > 2:\\l", "if end - start > 0:\\l", "new_text += '_' * (end - start) + text[i]\\l", "start, end = i + 1, i + 1\\l", "i += 1\\l"], ["from typing import *\\ldef fix_spaces(text):...\\lfix_spaces('Yellow Yellow  Dirty...')\\l", "fix_spaces", "new_text = ''\\li = 0\\lstart, end = 0, 0\\l", "while i < len(text):\\l", "if text[i] == ' ':\\l", "if end - start > 2:\\l", "if end - start > 0:\\l", "new_text += text[i]\\l", "start, end = i + 1, i + 1\\l", "i += 1\\l"], ["from typing import *\\ldef fix_spaces(text):...\\lfix_spaces('Yellow Yellow  Dirty...')\\l", "fix_spaces", "new_text = ''\\li = 0\\lstart, end = 0, 0\\l", "while i < len(text):\\l", "if end - start > 2:\\l", "new_text += '-'\\l", "return new_text\\l"], ["from typing import *\\ldef fix_spaces(text):...\\lfix_spaces('Yellow Yellow  Dirty...')\\l", "fix_spaces", "new_text = ''\\li = 0\\lstart, end = 0, 0\\l", "while i < len(text):\\l", "if end - start > 2:\\l", "if end - start > 0:\\l", "return new_text\\l"], ["from typing import *\\ldef fix_spaces(text):...\\lfix_spaces('Yellow Yellow  Dirty...')\\l", "fix_spaces", "new_text = ''\\li = 0\\lstart, end = 0, 0\\l", "while i < len(text):\\l", "if end - start > 2:\\l", "if end - start > 0:\\l", "new_text += '_'\\l", "return new_text\\l"]], "prime_paths_linenumbers": [[9, 10, 19, 8, 20, 21, 24], [9, 10, 19, 8, 20, 22, 24], [9, 10, 19, 8, 20, 22, 23, 24], [9, 12, 13, 18, 19, 8, 20, 21, 24], [9, 12, 13, 18, 19, 8, 20, 22, 24], [9, 12, 13, 18, 19, 8, 20, 22, 23, 24], [9, 12, 14, 15, 18, 19, 8, 20, 21, 24], [9, 12, 14, 15, 18, 19, 8, 20, 22, 24], [9, 12, 14, 15, 18, 19, 8, 20, 22, 23, 24], [9, 12, 14, 17, 18, 19, 8, 20, 21, 24], [9, 12, 14, 17, 18, 19, 8, 20, 22, 24], [9, 12, 14, 17, 18, 19, 8, 20, 22, 23, 24], [10, 19, 8, 9, 12, 13, 18], [10, 19, 8, 9, 12, 14, 15, 18], [10, 19, 8, 9, 12, 14, 17, 18], [12, 13, 18, 19, 8, 9, 10], [12, 14, 15, 18, 19, 8, 9, 10], [12, 14, 17, 18, 19, 8, 9, 10], [13, 18, 19, 8, 9, 12, 14, 15], [13, 18, 19, 8, 9, 12, 14, 17], [14, 15, 18, 19, 8, 9, 12, 13], [14, 17, 18, 19, 8, 9, 12, 13], [15, 18, 19, 8, 9, 12, 14, 17], [17, 18, 19, 8, 9, 12, 14, 15], [1, 26, 5, 6, 7, 8, 9, 10, 19], [1, 26, 5, 6, 7, 8, 9, 12, 13, 18, 19], [1, 26, 5, 6, 7, 8, 9, 12, 14, 15, 18, 19], [1, 26, 5, 6, 7, 8, 9, 12, 14, 17, 18, 19], [1, 26, 5, 6, 7, 8, 20, 21, 24], [1, 26, 5, 6, 7, 8, 20, 22, 24], [1, 26, 5, 6, 7, 8, 20, 22, 23, 24]], "covered_statements_linenumbers": [1, 4, 5, 6, 7, 8, 9, 10, 12, 14, 15, 17, 18, 19, 20, 22, 24, 26], "missing_statements_linenumbers": [13, 21, 23], "covered_prime_paths_linenumbers": [[9, 10, 19, 8, 20, 22, 24], [9, 12, 14, 15, 18, 19, 8, 20, 22, 24], [9, 12, 14, 17, 18, 19, 8, 20, 22, 24], [10, 19, 8, 9, 12, 14, 15, 18], [10, 19, 8, 9, 12, 14, 17, 18], [12, 14, 15, 18, 19, 8, 9, 10], [12, 14, 17, 18, 19, 8, 9, 10], [15, 18, 19, 8, 9, 12, 14, 17], [17, 18, 19, 8, 9, 12, 14, 15], [1, 26, 5, 6, 7, 8, 9, 10, 19], [1, 26, 5, 6, 7, 8, 9, 12, 14, 15, 18, 19], [1, 26, 5, 6, 7, 8, 9, 12, 14, 17, 18, 19], [1, 26, 5, 6, 7, 8, 20, 22, 24]], "missing_prime_paths_linenumbers": [[9, 10, 19, 8, 20, 21, 24], [9, 10, 19, 8, 20, 22, 23, 24], [9, 12, 13, 18, 19, 8, 20, 21, 24], [9, 12, 13, 18, 19, 8, 20, 22, 24], [9, 12, 13, 18, 19, 8, 20, 22, 23, 24], [9, 12, 14, 15, 18, 19, 8, 20, 21, 24], [9, 12, 14, 15, 18, 19, 8, 20, 22, 23, 24], [9, 12, 14, 17, 18, 19, 8, 20, 21, 24], [9, 12, 14, 17, 18, 19, 8, 20, 22, 23, 24], [10, 19, 8, 9, 12, 13, 18], [12, 13, 18, 19, 8, 9, 10], [13, 18, 19, 8, 9, 12, 14, 15], [13, 18, 19, 8, 9, 12, 14, 17], [14, 15, 18, 19, 8, 9, 12, 13], [14, 17, 18, 19, 8, 9, 12, 13], [1, 26, 5, 6, 7, 8, 9, 12, 13, 18, 19], [1, 26, 5, 6, 7, 8, 20, 21, 24], [1, 26, 5, 6, 7, 8, 20, 22, 23, 24]], "num_total_prime_paths": 31, "num_covered_paths": 13, "prime_path_coverage": 0.42, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_140__1_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_140__1_CFG.dot"}
{"humaneval_id": "HumanEval_47__0", "python_file": "HumanEval_47__0/main.py", "input_file": "HumanEval_47__0/input.txt", "prime_paths_nodes": [["1", "13", "3", "5", "7"], ["1", "13", "3", "5", "9"]], "prime_paths_statements": [["from typing import *\\ldef median(l: list):...\\lmedian([8, 1, 3, 9, 9, 2, 7])\\l", "median", "l = sorted(l)\\l", "if len(l) % 2 == 1:\\l", "return l[len(l) // 2]\\l"], ["from typing import *\\ldef median(l: list):...\\lmedian([8, 1, 3, 9, 9, 2, 7])\\l", "median", "l = sorted(l)\\l", "if len(l) % 2 == 1:\\l", "return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2.0\\l"]], "prime_paths_linenumbers": [[1, 11, 5, 6, 7], [1, 11, 5, 6, 9]], "covered_statements_linenumbers": [1, 4, 5, 6, 7, 11], "missing_statements_linenumbers": [9], "covered_prime_paths_linenumbers": [[1, 11, 5, 6, 7]], "missing_prime_paths_linenumbers": [[1, 11, 5, 6, 9]], "num_total_prime_paths": 2, "num_covered_paths": 1, "prime_path_coverage": 0.5, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_47__0_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_47__0_CFG.dot"}
{"humaneval_id": "HumanEval_117", "python_file": "HumanEval_117/main.py", "input_file": "HumanEval_117/input.txt", "prime_paths_nodes": [["6", "8", "12", "4", "7"], ["6", "8", "12", "16", "4", "7"], ["11", "8", "12", "4", "6"], ["11", "8", "12", "16", "4", "6"], ["11", "14", "8", "12", "4", "6"], ["11", "14", "8", "12", "16", "4", "6"], ["11", "8", "12", "4", "7"], ["11", "8", "12", "16", "4", "7"], ["11", "14", "8", "12", "4", "7"], ["11", "14", "8", "12", "16", "4", "7"], ["12", "4", "6", "8", "11", "14"], ["12", "16", "4", "6", "8", "11", "14"], ["14", "8", "11"], ["16", "4", "6", "8", "12"], ["1", "21", "3", "4", "7"], ["1", "21", "3", "4", "6", "8", "11", "14"], ["1", "21", "3", "4", "6", "8", "12", "16"]], "prime_paths_statements": [["n_consonants = 0\\l", "for i in range(0, len(word)):\\l", "if n_consonants == n:\\l", "for word in s.split():\\l", "return result\\l"], ["n_consonants = 0\\l", "for i in range(0, len(word)):\\l", "if n_consonants == n:\\l", "result.append(word)\\l", "for word in s.split():\\l", "return result\\l"], ["if word[i].lower() not in ['a', 'e', 'i', 'o', 'u']:\\l", "for i in range(0, len(word)):\\l", "if n_consonants == n:\\l", "for word in s.split():\\l", "n_consonants = 0\\l"], ["if word[i].lower() not in ['a', 'e', 'i', 'o', 'u']:\\l", "for i in range(0, len(word)):\\l", "if n_consonants == n:\\l", "result.append(word)\\l", "for word in s.split():\\l", "n_consonants = 0\\l"], ["if word[i].lower() not in ['a', 'e', 'i', 'o', 'u']:\\l", "n_consonants += 1\\l", "for i in range(0, len(word)):\\l", "if n_consonants == n:\\l", "for word in s.split():\\l", "n_consonants = 0\\l"], ["if word[i].lower() not in ['a', 'e', 'i', 'o', 'u']:\\l", "n_consonants += 1\\l", "for i in range(0, len(word)):\\l", "if n_consonants == n:\\l", "result.append(word)\\l", "for word in s.split():\\l", "n_consonants = 0\\l"], ["if word[i].lower() not in ['a', 'e', 'i', 'o', 'u']:\\l", "for i in range(0, len(word)):\\l", "if n_consonants == n:\\l", "for word in s.split():\\l", "return result\\l"], ["if word[i].lower() not in ['a', 'e', 'i', 'o', 'u']:\\l", "for i in range(0, len(word)):\\l", "if n_consonants == n:\\l", "result.append(word)\\l", "for word in s.split():\\l", "return result\\l"], ["if word[i].lower() not in ['a', 'e', 'i', 'o', 'u']:\\l", "n_consonants += 1\\l", "for i in range(0, len(word)):\\l", "if n_consonants == n:\\l", "for word in s.split():\\l", "return result\\l"], ["if word[i].lower() not in ['a', 'e', 'i', 'o', 'u']:\\l", "n_consonants += 1\\l", "for i in range(0, len(word)):\\l", "if n_consonants == n:\\l", "result.append(word)\\l", "for word in s.split():\\l", "return result\\l"], ["if n_consonants == n:\\l", "for word in s.split():\\l", "n_consonants = 0\\l", "for i in range(0, len(word)):\\l", "if word[i].lower() not in ['a', 'e', 'i', 'o', 'u']:\\l", "n_consonants += 1\\l"], ["if n_consonants == n:\\l", "result.append(word)\\l", "for word in s.split():\\l", "n_consonants = 0\\l", "for i in range(0, len(word)):\\l", "if word[i].lower() not in ['a', 'e', 'i', 'o', 'u']:\\l", "n_consonants += 1\\l"], ["n_consonants += 1\\l", "for i in range(0, len(word)):\\l", "if word[i].lower() not in ['a', 'e', 'i', 'o', 'u']:\\l"], ["result.append(word)\\l", "for word in s.split():\\l", "n_consonants = 0\\l", "for i in range(0, len(word)):\\l", "if n_consonants == n:\\l"], ["from typing import *\\ldef select_words(s, n):...\\lselect_words('Mary had a little la...', 4)\\l", "select_words", "result = []\\l", "for word in s.split():\\l", "return result\\l"], ["from typing import *\\ldef select_words(s, n):...\\lselect_words('Mary had a little la...', 4)\\l", "select_words", "result = []\\l", "for word in s.split():\\l", "n_consonants = 0\\l", "for i in range(0, len(word)):\\l", "if word[i].lower() not in ['a', 'e', 'i', 'o', 'u']:\\l", "n_consonants += 1\\l"], ["from typing import *\\ldef select_words(s, n):...\\lselect_words('Mary had a little la...', 4)\\l", "select_words", "result = []\\l", "for word in s.split():\\l", "n_consonants = 0\\l", "for i in range(0, len(word)):\\l", "if n_consonants == n:\\l", "result.append(word)\\l"]], "prime_paths_linenumbers": [[5, 6, 9, 4, 11], [5, 6, 9, 10, 4, 11], [7, 6, 9, 4, 5], [7, 6, 9, 10, 4, 5], [7, 8, 6, 9, 4, 5], [7, 8, 6, 9, 10, 4, 5], [7, 6, 9, 4, 11], [7, 6, 9, 10, 4, 11], [7, 8, 6, 9, 4, 11], [7, 8, 6, 9, 10, 4, 11], [9, 4, 5, 6, 7, 8], [9, 10, 4, 5, 6, 7, 8], [8, 6, 7], [10, 4, 5, 6, 9], [1, 14, 3, 4, 11], [1, 14, 3, 4, 5, 6, 7, 8], [1, 14, 3, 4, 5, 6, 9, 10]], "covered_statements_linenumbers": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 14], "missing_statements_linenumbers": [], "covered_prime_paths_linenumbers": [[5, 6, 9, 4, 11], [5, 6, 9, 10, 4, 11], [7, 6, 9, 4, 5], [7, 6, 9, 10, 4, 5], [7, 8, 6, 9, 4, 5], [7, 8, 6, 9, 10, 4, 5], [7, 6, 9, 4, 11], [7, 6, 9, 10, 4, 11], [7, 8, 6, 9, 4, 11], [7, 8, 6, 9, 10, 4, 11], [9, 4, 5, 6, 7, 8], [9, 10, 4, 5, 6, 7, 8], [8, 6, 7], [10, 4, 5, 6, 9], [1, 14, 3, 4, 11], [1, 14, 3, 4, 5, 6, 7, 8], [1, 14, 3, 4, 5, 6, 9, 10]], "missing_prime_paths_linenumbers": [], "num_total_prime_paths": 17, "num_covered_paths": 17, "prime_path_coverage": 1.0, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_117_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_117_CFG.dot"}
{"humaneval_id": "HumanEval_132__0", "python_file": "HumanEval_132__0/main.py", "input_file": "HumanEval_132__0/input.txt", "prime_paths_nodes": [["7", "9", "4", "8", "16", "18"], ["7", "11", "4", "8", "16", "18"], ["7", "9", "4", "8", "16", "17", "19"], ["7", "11", "4", "8", "16", "17", "19"], ["9", "4", "7", "11"], ["11", "4", "7", "9"], ["17", "16", "18"], ["17", "19", "16", "18"], ["19", "16", "17"], ["1", "23", "3", "4", "7", "9"], ["1", "23", "3", "4", "7", "11"], ["1", "23", "3", "4", "8", "16", "18"], ["1", "23", "3", "4", "8", "16", "17", "19"]], "prime_paths_statements": [["if string[i] == '[':\\l", "opening_bracket_index.append(i)\\l", "for i in range(len(string)):\\l", "closing_bracket_index.reverse()\\lcnt = 0\\li = 0\\ll = len(closing_bracket_index)\\l", "for idx in opening_bracket_index:\\l", "return cnt >= 2\\l"], ["if string[i] == '[':\\l", "closing_bracket_index.append(i)\\l", "for i in range(len(string)):\\l", "closing_bracket_index.reverse()\\lcnt = 0\\li = 0\\ll = len(closing_bracket_index)\\l", "for idx in opening_bracket_index:\\l", "return cnt >= 2\\l"], ["if string[i] == '[':\\l", "opening_bracket_index.append(i)\\l", "for i in range(len(string)):\\l", "closing_bracket_index.reverse()\\lcnt = 0\\li = 0\\ll = len(closing_bracket_index)\\l", "for idx in opening_bracket_index:\\l", "if i < l and idx < closing_bracket_index[i]:\\l", "cnt += 1\\li += 1\\l"], ["if string[i] == '[':\\l", "closing_bracket_index.append(i)\\l", "for i in range(len(string)):\\l", "closing_bracket_index.reverse()\\lcnt = 0\\li = 0\\ll = len(closing_bracket_index)\\l", "for idx in opening_bracket_index:\\l", "if i < l and idx < closing_bracket_index[i]:\\l", "cnt += 1\\li += 1\\l"], ["opening_bracket_index.append(i)\\l", "for i in range(len(string)):\\l", "if string[i] == '[':\\l", "closing_bracket_index.append(i)\\l"], ["closing_bracket_index.append(i)\\l", "for i in range(len(string)):\\l", "if string[i] == '[':\\l", "opening_bracket_index.append(i)\\l"], ["if i < l and idx < closing_bracket_index[i]:\\l", "for idx in opening_bracket_index:\\l", "return cnt >= 2\\l"], ["if i < l and idx < closing_bracket_index[i]:\\l", "cnt += 1\\li += 1\\l", "for idx in opening_bracket_index:\\l", "return cnt >= 2\\l"], ["cnt += 1\\li += 1\\l", "for idx in opening_bracket_index:\\l", "if i < l and idx < closing_bracket_index[i]:\\l"], ["from typing import *\\ldef is_nested(string):...\\lis_nested('[][][[]]')\\l", "is_nested", "opening_bracket_index = []\\lclosing_bracket_index = []\\l", "for i in range(len(string)):\\l", "if string[i] == '[':\\l", "opening_bracket_index.append(i)\\l"], ["from typing import *\\ldef is_nested(string):...\\lis_nested('[][][[]]')\\l", "is_nested", "opening_bracket_index = []\\lclosing_bracket_index = []\\l", "for i in range(len(string)):\\l", "if string[i] == '[':\\l", "closing_bracket_index.append(i)\\l"], ["from typing import *\\ldef is_nested(string):...\\lis_nested('[][][[]]')\\l", "is_nested", "opening_bracket_index = []\\lclosing_bracket_index = []\\l", "for i in range(len(string)):\\l", "closing_bracket_index.reverse()\\lcnt = 0\\li = 0\\ll = len(closing_bracket_index)\\l", "for idx in opening_bracket_index:\\l", "return cnt >= 2\\l"], ["from typing import *\\ldef is_nested(string):...\\lis_nested('[][][[]]')\\l", "is_nested", "opening_bracket_index = []\\lclosing_bracket_index = []\\l", "for i in range(len(string)):\\l", "closing_bracket_index.reverse()\\lcnt = 0\\li = 0\\ll = len(closing_bracket_index)\\l", "for idx in opening_bracket_index:\\l", "if i < l and idx < closing_bracket_index[i]:\\l", "cnt += 1\\li += 1\\l"]], "prime_paths_linenumbers": [[8, 9, 7, 12, 13, 14, 15, 16, 20], [8, 11, 7, 12, 13, 14, 15, 16, 20], [8, 9, 7, 12, 13, 14, 15, 16, 17, 18, 19], [8, 11, 7, 12, 13, 14, 15, 16, 17, 18, 19], [9, 7, 8, 11], [11, 7, 8, 9], [17, 16, 20], [17, 18, 19, 16, 20], [18, 19, 16, 17], [1, 22, 5, 6, 7, 8, 9], [1, 22, 5, 6, 7, 8, 11], [1, 22, 5, 6, 7, 12, 13, 14, 15, 16, 20], [1, 22, 5, 6, 7, 12, 13, 14, 15, 16, 17, 18, 19]], "covered_statements_linenumbers": [1, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22], "missing_statements_linenumbers": [], "covered_prime_paths_linenumbers": [[8, 9, 7, 12, 13, 14, 15, 16, 20], [8, 11, 7, 12, 13, 14, 15, 16, 20], [8, 9, 7, 12, 13, 14, 15, 16, 17, 18, 19], [8, 11, 7, 12, 13, 14, 15, 16, 17, 18, 19], [9, 7, 8, 11], [11, 7, 8, 9], [17, 16, 20], [17, 18, 19, 16, 20], [18, 19, 16, 17], [1, 22, 5, 6, 7, 8, 9], [1, 22, 5, 6, 7, 8, 11], [1, 22, 5, 6, 7, 12, 13, 14, 15, 16, 20], [1, 22, 5, 6, 7, 12, 13, 14, 15, 16, 17, 18, 19]], "missing_prime_paths_linenumbers": [], "num_total_prime_paths": 13, "num_covered_paths": 13, "prime_path_coverage": 1.0, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_132__0_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_132__0_CFG.dot"}
{"humaneval_id": "HumanEval_81__1", "python_file": "HumanEval_81__1/main.py", "input_file": "HumanEval_81__1/input.txt", "prime_paths_nodes": [["5", "7", "4", "6"], ["5", "9", "10", "4", "6"], ["5", "9", "12", "13", "4", "6"], ["5", "9", "12", "15", "16", "4", "6"], ["5", "9", "12", "15", "18", "19", "4", "6"], ["5", "9", "12", "15", "18", "21", "22", "4", "6"], ["5", "9", "12", "15", "18", "21", "24", "25", "4", "6"], ["5", "9", "12", "15", "18", "21", "24", "27", "28", "4", "6"], ["5", "9", "12", "15", "18", "21", "24", "27", "30", "31", "4", "6"], ["5", "9", "12", "15", "18", "21", "24", "27", "30", "33", "34", "4", "6"], ["5", "9", "12", "15", "18", "21", "24", "27", "30", "33", "36", "37", "4", "6"], ["5", "9", "12", "15", "18", "21", "24", "27", "30", "33", "36", "39", "40", "4", "6"], ["5", "9", "12", "15", "18", "21", "24", "27", "30", "33", "36", "39", "42", "4", "6"], ["7", "4", "5", "9", "10"], ["7", "4", "5", "9", "12", "13"], ["7", "4", "5", "9", "12", "15", "16"], ["7", "4", "5", "9", "12", "15", "18", "19"], ["7", "4", "5", "9", "12", "15", "18", "21", "22"], ["7", "4", "5", "9", "12", "15", "18", "21", "24", "25"], ["7", "4", "5", "9", "12", "15", "18", "21", "24", "27", "28"], ["7", "4", "5", "9", "12", "15", "18", "21", "24", "27", "30", "31"], ["7", "4", "5", "9", "12", "15", "18", "21", "24", "27", "30", "33", "34"], ["7", "4", "5", "9", "12", "15", "18", "21", "24", "27", "30", "33", "36", "37"], ["7", "4", "5", "9", "12", "15", "18", "21", "24", "27", "30", "33", "36", "39", "40"], ["7", "4", "5", "9", "12", "15", "18", "21", "24", "27", "30", "33", "36", "39", "42"], ["9", "10", "4", "5", "7"], ["9", "12", "13", "4", "5", "7"], ["9", "12", "15", "16", "4", "5", "7"], ["9", "12", "15", "18", "19", "4", "5", "7"], ["9", "12", "15", "18", "21", "22", "4", "5", "7"], ["9", "12", "15", "18", "21", "24", "25", "4", "5", "7"], ["9", "12", "15", "18", "21", "24", "27", "28", "4", "5", "7"], ["9", "12", "15", "18", "21", "24", "27", "30", "31", "4", "5", "7"], ["9", "12", "15", "18", "21", "24", "27", "30", "33", "34", "4", "5", "7"], ["9", "12", "15", "18", "21", "24", "27", "30", "33", "36", "37", "4", "5", "7"], ["9", "12", "15", "18", "21", "24", "27", "30", "33", "36", "39", "40", "4", "5", "7"], ["9", "12", "15", "18", "21", "24", "27", "30", "33", "36", "39", "42", "4", "5", "7"], ["10", "4", "5", "9", "12", "13"], ["10", "4", "5", "9", "12", "15", "16"], ["10", "4", "5", "9", "12", "15", "18", "19"], ["10", "4", "5", "9", "12", "15", "18", "21", "22"], ["10", "4", "5", "9", "12", "15", "18", "21", "24", "25"], ["10", "4", "5", "9", "12", "15", "18", "21", "24", "27", "28"], ["10", "4", "5", "9", "12", "15", "18", "21", "24", "27", "30", "31"], ["10", "4", "5", "9", "12", "15", "18", "21", "24", "27", "30", "33", "34"], ["10", "4", "5", "9", "12", "15", "18", "21", "24", "27", "30", "33", "36", "37"], ["10", "4", "5", "9", "12", "15", "18", "21", "24", "27", "30", "33", "36", "39", "40"], ["10", "4", "5", "9", "12", "15", "18", "21", "24", "27", "30", "33", "36", "39", "42"], ["12", "13", "4", "5", "9", "10"], ["12", "15", "16", "4", "5", "9", "10"], ["12", "15", "18", "19", "4", "5", "9", "10"], ["12", "15", "18", "21", "22", "4", "5", "9", "10"], ["12", "15", "18", "21", "24", "25", "4", "5", "9", "10"], ["12", "15", "18", "21", "24", "27", "28", "4", "5", "9", "10"], ["12", "15", "18", "21", "24", "27", "30", "31", "4", "5", "9", "10"], ["12", "15", "18", "21", "24", "27", "30", "33", "34", "4", "5", "9", "10"], ["12", "15", "18", "21", "24", "27", "30", "33", "36", "37", "4", "5", "9", "10"], ["12", "15", "18", "21", "24", "27", "30", "33", "36", "39", "40", "4", "5", "9", "10"], ["12", "15", "18", "21", "24", "27", "30", "33", "36", "39", "42", "4", "5", "9", "10"], ["13", "4", "5", "9", "12", "15", "16"], ["13", "4", "5", "9", "12", "15", "18", "19"], ["13", "4", "5", "9", "12", "15", "18", "21", "22"], ["13", "4", "5", "9", "12", "15", "18", "21", "24", "25"], ["13", "4", "5", "9", "12", "15", "18", "21", "24", "27", "28"], ["13", "4", "5", "9", "12", "15", "18", "21", "24", "27", "30", "31"], ["13", "4", "5", "9", "12", "15", "18", "21", "24", "27", "30", "33", "34"], ["13", "4", "5", "9", "12", "15", "18", "21", "24", "27", "30", "33", "36", "37"], ["13", "4", "5", "9", "12", "15", "18", "21", "24", "27", "30", "33", "36", "39", "40"], ["13", "4", "5", "9", "12", "15", "18", "21", "24", "27", "30", "33", "36", "39", "42"], ["15", "16", "4", "5", "9", "12", "13"], ["15", "18", "19", "4", "5", "9", "12", "13"], ["15", "18", "21", "22", "4", "5", "9", "12", "13"], ["15", "18", "21", "24", "25", "4", "5", "9", "12", "13"], ["15", "18", "21", "24", "27", "28", "4", "5", "9", "12", "13"], ["15", "18", "21", "24", "27", "30", "31", "4", "5", "9", "12", "13"], ["15", "18", "21", "24", "27", "30", "33", "34", "4", "5", "9", "12", "13"], ["15", "18", "21", "24", "27", "30", "33", "36", "37", "4", "5", "9", "12", "13"], ["15", "18", "21", "24", "27", "30", "33", "36", "39", "40", "4", "5", "9", "12", "13"], ["15", "18", "21", "24", "27", "30", "33", "36", "39", "42", "4", "5", "9", "12", "13"], ["16", "4", "5", "9", "12", "15", "18", "19"], ["16", "4", "5", "9", "12", "15", "18", "21", "22"], ["16", "4", "5", "9", "12", "15", "18", "21", "24", "25"], ["16", "4", "5", "9", "12", "15", "18", "21", "24", "27", "28"], ["16", "4", "5", "9", "12", "15", "18", "21", "24", "27", "30", "31"], ["16", "4", "5", "9", "12", "15", "18", "21", "24", "27", "30", "33", "34"], ["16", "4", "5", "9", "12", "15", "18", "21", "24", "27", "30", "33", "36", "37"], ["16", "4", "5", "9", "12", "15", "18", "21", "24", "27", "30", "33", "36", "39", "40"], ["16", "4", "5", "9", "12", "15", "18", "21", "24", "27", "30", "33", "36", "39", "42"], ["18", "19", "4", "5", "9", "12", "15", "16"], ["18", "21", "22", "4", "5", "9", "12", "15", "16"], ["18", "21", "24", "25", "4", "5", "9", "12", "15", "16"], ["18", "21", "24", "27", "28", "4", "5", "9", "12", "15", "16"], ["18", "21", "24", "27", "30", "31", "4", "5", "9", "12", "15", "16"], ["18", "21", "24", "27", "30", "33", "34", "4", "5", "9", "12", "15", "16"], ["18", "21", "24", "27", "30", "33", "36", "37", "4", "5", "9", "12", "15", "16"], ["18", "21", "24", "27", "30", "33", "36", "39", "40", "4", "5", "9", "12", "15", "16"], ["18", "21", "24", "27", "30", "33", "36", "39", "42", "4", "5", "9", "12", "15", "16"], ["19", "4", "5", "9", "12", "15", "18", "21", "22"], ["19", "4", "5", "9", "12", "15", "18", "21", "24", "25"], ["19", "4", "5", "9", "12", "15", "18", "21", "24", "27", "28"], ["19", "4", "5", "9", "12", "15", "18", "21", "24", "27", "30", "31"], ["19", "4", "5", "9", "12", "15", "18", "21", "24", "27", "30", "33", "34"], ["19", "4", "5", "9", "12", "15", "18", "21", "24", "27", "30", "33", "36", "37"], ["19", "4", "5", "9", "12", "15", "18", "21", "24", "27", "30", "33", "36", "39", "40"], ["19", "4", "5", "9", "12", "15", "18", "21", "24", "27", "30", "33", "36", "39", "42"], ["21", "22", "4", "5", "9", "12", "15", "18", "19"], ["21", "24", "25", "4", "5", "9", "12", "15", "18", "19"], ["21", "24", "27", "28", "4", "5", "9", "12", "15", "18", "19"], ["21", "24", "27", "30", "31", "4", "5", "9", "12", "15", "18", "19"], ["21", "24", "27", "30", "33", "34", "4", "5", "9", "12", "15", "18", "19"], ["21", "24", "27", "30", "33", "36", "37", "4", "5", "9", "12", "15", "18", "19"], ["21", "24", "27", "30", "33", "36", "39", "40", "4", "5", "9", "12", "15", "18", "19"], ["21", "24", "27", "30", "33", "36", "39", "42", "4", "5", "9", "12", "15", "18", "19"], ["22", "4", "5", "9", "12", "15", "18", "21", "24", "25"], ["22", "4", "5", "9", "12", "15", "18", "21", "24", "27", "28"], ["22", "4", "5", "9", "12", "15", "18", "21", "24", "27", "30", "31"], ["22", "4", "5", "9", "12", "15", "18", "21", "24", "27", "30", "33", "34"], ["22", "4", "5", "9", "12", "15", "18", "21", "24", "27", "30", "33", "36", "37"], ["22", "4", "5", "9", "12", "15", "18", "21", "24", "27", "30", "33", "36", "39", "40"], ["22", "4", "5", "9", "12", "15", "18", "21", "24", "27", "30", "33", "36", "39", "42"], ["24", "25", "4", "5", "9", "12", "15", "18", "21", "22"], ["24", "27", "28", "4", "5", "9", "12", "15", "18", "21", "22"], ["24", "27", "30", "31", "4", "5", "9", "12", "15", "18", "21", "22"], ["24", "27", "30", "33", "34", "4", "5", "9", "12", "15", "18", "21", "22"], ["24", "27", "30", "33", "36", "37", "4", "5", "9", "12", "15", "18", "21", "22"], ["24", "27", "30", "33", "36", "39", "40", "4", "5", "9", "12", "15", "18", "21", "22"], ["24", "27", "30", "33", "36", "39", "42", "4", "5", "9", "12", "15", "18", "21", "22"], ["25", "4", "5", "9", "12", "15", "18", "21", "24", "27", "28"], ["25", "4", "5", "9", "12", "15", "18", "21", "24", "27", "30", "31"], ["25", "4", "5", "9", "12", "15", "18", "21", "24", "27", "30", "33", "34"], ["25", "4", "5", "9", "12", "15", "18", "21", "24", "27", "30", "33", "36", "37"], ["25", "4", "5", "9", "12", "15", "18", "21", "24", "27", "30", "33", "36", "39", "40"], ["25", "4", "5", "9", "12", "15", "18", "21", "24", "27", "30", "33", "36", "39", "42"], ["27", "28", "4", "5", "9", "12", "15", "18", "21", "24", "25"], ["27", "30", "31", "4", "5", "9", "12", "15", "18", "21", "24", "25"], ["27", "30", "33", "34", "4", "5", "9", "12", "15", "18", "21", "24", "25"], ["27", "30", "33", "36", "37", "4", "5", "9", "12", "15", "18", "21", "24", "25"], ["27", "30", "33", "36", "39", "40", "4", "5", "9", "12", "15", "18", "21", "24", "25"], ["27", "30", "33", "36", "39", "42", "4", "5", "9", "12", "15", "18", "21", "24", "25"], ["28", "4", "5", "9", "12", "15", "18", "21", "24", "27", "30", "31"], ["28", "4", "5", "9", "12", "15", "18", "21", "24", "27", "30", "33", "34"], ["28", "4", "5", "9", "12", "15", "18", "21", "24", "27", "30", "33", "36", "37"], ["28", "4", "5", "9", "12", "15", "18", "21", "24", "27", "30", "33", "36", "39", "40"], ["28", "4", "5", "9", "12", "15", "18", "21", "24", "27", "30", "33", "36", "39", "42"], ["30", "31", "4", "5", "9", "12", "15", "18", "21", "24", "27", "28"], ["30", "33", "34", "4", "5", "9", "12", "15", "18", "21", "24", "27", "28"], ["30", "33", "36", "37", "4", "5", "9", "12", "15", "18", "21", "24", "27", "28"], ["30", "33", "36", "39", "40", "4", "5", "9", "12", "15", "18", "21", "24", "27", "28"], ["30", "33", "36", "39", "42", "4", "5", "9", "12", "15", "18", "21", "24", "27", "28"], ["31", "4", "5", "9", "12", "15", "18", "21", "24", "27", "30", "33", "34"], ["31", "4", "5", "9", "12", "15", "18", "21", "24", "27", "30", "33", "36", "37"], ["31", "4", "5", "9", "12", "15", "18", "21", "24", "27", "30", "33", "36", "39", "40"], ["31", "4", "5", "9", "12", "15", "18", "21", "24", "27", "30", "33", "36", "39", "42"], ["33", "34", "4", "5", "9", "12", "15", "18", "21", "24", "27", "30", "31"], ["33", "36", "37", "4", "5", "9", "12", "15", "18", "21", "24", "27", "30", "31"], ["33", "36", "39", "40", "4", "5", "9", "12", "15", "18", "21", "24", "27", "30", "31"], ["33", "36", "39", "42", "4", "5", "9", "12", "15", "18", "21", "24", "27", "30", "31"], ["34", "4", "5", "9", "12", "15", "18", "21", "24", "27", "30", "33", "36", "37"], ["34", "4", "5", "9", "12", "15", "18", "21", "24", "27", "30", "33", "36", "39", "40"], ["34", "4", "5", "9", "12", "15", "18", "21", "24", "27", "30", "33", "36", "39", "42"], ["36", "37", "4", "5", "9", "12", "15", "18", "21", "24", "27", "30", "33", "34"], ["36", "39", "40", "4", "5", "9", "12", "15", "18", "21", "24", "27", "30", "33", "34"], ["36", "39", "42", "4", "5", "9", "12", "15", "18", "21", "24", "27", "30", "33", "34"], ["37", "4", "5", "9", "12", "15", "18", "21", "24", "27", "30", "33", "36", "39", "40"], ["37", "4", "5", "9", "12", "15", "18", "21", "24", "27", "30", "33", "36", "39", "42"], ["39", "40", "4", "5", "9", "12", "15", "18", "21", "24", "27", "30", "33", "36", "37"], ["39", "42", "4", "5", "9", "12", "15", "18", "21", "24", "27", "30", "33", "36", "37"], ["40", "4", "5", "9", "12", "15", "18", "21", "24", "27", "30", "33", "36", "39", "42"], ["42", "4", "5", "9", "12", "15", "18", "21", "24", "27", "30", "33", "36", "39", "40"], ["1", "58", "3", "4", "6"], ["1", "58", "3", "4", "5", "7"], ["1", "58", "3", "4", "5", "9", "10"], ["1", "58", "3", "4", "5", "9", "12", "13"], ["1", "58", "3", "4", "5", "9", "12", "15", "16"], ["1", "58", "3", "4", "5", "9", "12", "15", "18", "19"], ["1", "58", "3", "4", "5", "9", "12", "15", "18", "21", "22"], ["1", "58", "3", "4", "5", "9", "12", "15", "18", "21", "24", "25"], ["1", "58", "3", "4", "5", "9", "12", "15", "18", "21", "24", "27", "28"], ["1", "58", "3", "4", "5", "9", "12", "15", "18", "21", "24", "27", "30", "31"], ["1", "58", "3", "4", "5", "9", "12", "15", "18", "21", "24", "27", "30", "33", "34"], ["1", "58", "3", "4", "5", "9", "12", "15", "18", "21", "24", "27", "30", "33", "36", "37"], ["1", "58", "3", "4", "5", "9", "12", "15", "18", "21", "24", "27", "30", "33", "36", "39", "40"], ["1", "58", "3", "4", "5", "9", "12", "15", "18", "21", "24", "27", "30", "33", "36", "39", "42"]], "prime_paths_statements": [["if gpa == 4.0:\\l", "letter_grade.append('A+')\\l", "for gpa in grades:\\l", "return letter_grade\\l"], ["if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "letter_grade.append('A')\\l", "for gpa in grades:\\l", "return letter_grade\\l"], ["if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "letter_grade.append('A-')\\l", "for gpa in grades:\\l", "return letter_grade\\l"], ["if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "letter_grade.append('B+')\\l", "for gpa in grades:\\l", "return letter_grade\\l"], ["if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "letter_grade.append('B')\\l", "for gpa in grades:\\l", "return letter_grade\\l"], ["if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "letter_grade.append('B-')\\l", "for gpa in grades:\\l", "return letter_grade\\l"], ["if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "letter_grade.append('C+')\\l", "for gpa in grades:\\l", "return letter_grade\\l"], ["if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "letter_grade.append('C')\\l", "for gpa in grades:\\l", "return letter_grade\\l"], ["if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "if gpa > 1.3:\\l", "letter_grade.append('C-')\\l", "for gpa in grades:\\l", "return letter_grade\\l"], ["if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "if gpa > 1.3:\\l", "if gpa > 1.0:\\l", "letter_grade.append('D+')\\l", "for gpa in grades:\\l", "return letter_grade\\l"], ["if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "if gpa > 1.3:\\l", "if gpa > 1.0:\\l", "if gpa > 0.7:\\l", "letter_grade.append('D')\\l", "for gpa in grades:\\l", "return letter_grade\\l"], ["if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "if gpa > 1.3:\\l", "if gpa > 1.0:\\l", "if gpa > 0.7:\\l", "if gpa > 0.0:\\l", "letter_grade.append('D-')\\l", "for gpa in grades:\\l", "return letter_grade\\l"], ["if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "if gpa > 1.3:\\l", "if gpa > 1.0:\\l", "if gpa > 0.7:\\l", "if gpa > 0.0:\\l", "letter_grade.append('E')\\l", "for gpa in grades:\\l", "return letter_grade\\l"], ["letter_grade.append('A+')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "letter_grade.append('A')\\l"], ["letter_grade.append('A+')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "letter_grade.append('A-')\\l"], ["letter_grade.append('A+')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "letter_grade.append('B+')\\l"], ["letter_grade.append('A+')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "letter_grade.append('B')\\l"], ["letter_grade.append('A+')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "letter_grade.append('B-')\\l"], ["letter_grade.append('A+')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "letter_grade.append('C+')\\l"], ["letter_grade.append('A+')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "letter_grade.append('C')\\l"], ["letter_grade.append('A+')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "if gpa > 1.3:\\l", "letter_grade.append('C-')\\l"], ["letter_grade.append('A+')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "if gpa > 1.3:\\l", "if gpa > 1.0:\\l", "letter_grade.append('D+')\\l"], ["letter_grade.append('A+')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "if gpa > 1.3:\\l", "if gpa > 1.0:\\l", "if gpa > 0.7:\\l", "letter_grade.append('D')\\l"], ["letter_grade.append('A+')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "if gpa > 1.3:\\l", "if gpa > 1.0:\\l", "if gpa > 0.7:\\l", "if gpa > 0.0:\\l", "letter_grade.append('D-')\\l"], ["letter_grade.append('A+')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "if gpa > 1.3:\\l", "if gpa > 1.0:\\l", "if gpa > 0.7:\\l", "if gpa > 0.0:\\l", "letter_grade.append('E')\\l"], ["if gpa > 3.7:\\l", "letter_grade.append('A')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "letter_grade.append('A+')\\l"], ["if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "letter_grade.append('A-')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "letter_grade.append('A+')\\l"], ["if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "letter_grade.append('B+')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "letter_grade.append('A+')\\l"], ["if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "letter_grade.append('B')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "letter_grade.append('A+')\\l"], ["if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "letter_grade.append('B-')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "letter_grade.append('A+')\\l"], ["if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "letter_grade.append('C+')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "letter_grade.append('A+')\\l"], ["if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "letter_grade.append('C')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "letter_grade.append('A+')\\l"], ["if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "if gpa > 1.3:\\l", "letter_grade.append('C-')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "letter_grade.append('A+')\\l"], ["if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "if gpa > 1.3:\\l", "if gpa > 1.0:\\l", "letter_grade.append('D+')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "letter_grade.append('A+')\\l"], ["if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "if gpa > 1.3:\\l", "if gpa > 1.0:\\l", "if gpa > 0.7:\\l", "letter_grade.append('D')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "letter_grade.append('A+')\\l"], ["if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "if gpa > 1.3:\\l", "if gpa > 1.0:\\l", "if gpa > 0.7:\\l", "if gpa > 0.0:\\l", "letter_grade.append('D-')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "letter_grade.append('A+')\\l"], ["if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "if gpa > 1.3:\\l", "if gpa > 1.0:\\l", "if gpa > 0.7:\\l", "if gpa > 0.0:\\l", "letter_grade.append('E')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "letter_grade.append('A+')\\l"], ["letter_grade.append('A')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "letter_grade.append('A-')\\l"], ["letter_grade.append('A')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "letter_grade.append('B+')\\l"], ["letter_grade.append('A')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "letter_grade.append('B')\\l"], ["letter_grade.append('A')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "letter_grade.append('B-')\\l"], ["letter_grade.append('A')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "letter_grade.append('C+')\\l"], ["letter_grade.append('A')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "letter_grade.append('C')\\l"], ["letter_grade.append('A')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "if gpa > 1.3:\\l", "letter_grade.append('C-')\\l"], ["letter_grade.append('A')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "if gpa > 1.3:\\l", "if gpa > 1.0:\\l", "letter_grade.append('D+')\\l"], ["letter_grade.append('A')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "if gpa > 1.3:\\l", "if gpa > 1.0:\\l", "if gpa > 0.7:\\l", "letter_grade.append('D')\\l"], ["letter_grade.append('A')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "if gpa > 1.3:\\l", "if gpa > 1.0:\\l", "if gpa > 0.7:\\l", "if gpa > 0.0:\\l", "letter_grade.append('D-')\\l"], ["letter_grade.append('A')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "if gpa > 1.3:\\l", "if gpa > 1.0:\\l", "if gpa > 0.7:\\l", "if gpa > 0.0:\\l", "letter_grade.append('E')\\l"], ["if gpa > 3.3:\\l", "letter_grade.append('A-')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "letter_grade.append('A')\\l"], ["if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "letter_grade.append('B+')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "letter_grade.append('A')\\l"], ["if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "letter_grade.append('B')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "letter_grade.append('A')\\l"], ["if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "letter_grade.append('B-')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "letter_grade.append('A')\\l"], ["if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "letter_grade.append('C+')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "letter_grade.append('A')\\l"], ["if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "letter_grade.append('C')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "letter_grade.append('A')\\l"], ["if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "if gpa > 1.3:\\l", "letter_grade.append('C-')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "letter_grade.append('A')\\l"], ["if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "if gpa > 1.3:\\l", "if gpa > 1.0:\\l", "letter_grade.append('D+')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "letter_grade.append('A')\\l"], ["if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "if gpa > 1.3:\\l", "if gpa > 1.0:\\l", "if gpa > 0.7:\\l", "letter_grade.append('D')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "letter_grade.append('A')\\l"], ["if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "if gpa > 1.3:\\l", "if gpa > 1.0:\\l", "if gpa > 0.7:\\l", "if gpa > 0.0:\\l", "letter_grade.append('D-')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "letter_grade.append('A')\\l"], ["if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "if gpa > 1.3:\\l", "if gpa > 1.0:\\l", "if gpa > 0.7:\\l", "if gpa > 0.0:\\l", "letter_grade.append('E')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "letter_grade.append('A')\\l"], ["letter_grade.append('A-')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "letter_grade.append('B+')\\l"], ["letter_grade.append('A-')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "letter_grade.append('B')\\l"], ["letter_grade.append('A-')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "letter_grade.append('B-')\\l"], ["letter_grade.append('A-')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "letter_grade.append('C+')\\l"], ["letter_grade.append('A-')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "letter_grade.append('C')\\l"], ["letter_grade.append('A-')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "if gpa > 1.3:\\l", "letter_grade.append('C-')\\l"], ["letter_grade.append('A-')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "if gpa > 1.3:\\l", "if gpa > 1.0:\\l", "letter_grade.append('D+')\\l"], ["letter_grade.append('A-')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "if gpa > 1.3:\\l", "if gpa > 1.0:\\l", "if gpa > 0.7:\\l", "letter_grade.append('D')\\l"], ["letter_grade.append('A-')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "if gpa > 1.3:\\l", "if gpa > 1.0:\\l", "if gpa > 0.7:\\l", "if gpa > 0.0:\\l", "letter_grade.append('D-')\\l"], ["letter_grade.append('A-')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "if gpa > 1.3:\\l", "if gpa > 1.0:\\l", "if gpa > 0.7:\\l", "if gpa > 0.0:\\l", "letter_grade.append('E')\\l"], ["if gpa > 3.0:\\l", "letter_grade.append('B+')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "letter_grade.append('A-')\\l"], ["if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "letter_grade.append('B')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "letter_grade.append('A-')\\l"], ["if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "letter_grade.append('B-')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "letter_grade.append('A-')\\l"], ["if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "letter_grade.append('C+')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "letter_grade.append('A-')\\l"], ["if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "letter_grade.append('C')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "letter_grade.append('A-')\\l"], ["if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "if gpa > 1.3:\\l", "letter_grade.append('C-')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "letter_grade.append('A-')\\l"], ["if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "if gpa > 1.3:\\l", "if gpa > 1.0:\\l", "letter_grade.append('D+')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "letter_grade.append('A-')\\l"], ["if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "if gpa > 1.3:\\l", "if gpa > 1.0:\\l", "if gpa > 0.7:\\l", "letter_grade.append('D')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "letter_grade.append('A-')\\l"], ["if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "if gpa > 1.3:\\l", "if gpa > 1.0:\\l", "if gpa > 0.7:\\l", "if gpa > 0.0:\\l", "letter_grade.append('D-')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "letter_grade.append('A-')\\l"], ["if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "if gpa > 1.3:\\l", "if gpa > 1.0:\\l", "if gpa > 0.7:\\l", "if gpa > 0.0:\\l", "letter_grade.append('E')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "letter_grade.append('A-')\\l"], ["letter_grade.append('B+')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "letter_grade.append('B')\\l"], ["letter_grade.append('B+')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "letter_grade.append('B-')\\l"], ["letter_grade.append('B+')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "letter_grade.append('C+')\\l"], ["letter_grade.append('B+')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "letter_grade.append('C')\\l"], ["letter_grade.append('B+')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "if gpa > 1.3:\\l", "letter_grade.append('C-')\\l"], ["letter_grade.append('B+')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "if gpa > 1.3:\\l", "if gpa > 1.0:\\l", "letter_grade.append('D+')\\l"], ["letter_grade.append('B+')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "if gpa > 1.3:\\l", "if gpa > 1.0:\\l", "if gpa > 0.7:\\l", "letter_grade.append('D')\\l"], ["letter_grade.append('B+')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "if gpa > 1.3:\\l", "if gpa > 1.0:\\l", "if gpa > 0.7:\\l", "if gpa > 0.0:\\l", "letter_grade.append('D-')\\l"], ["letter_grade.append('B+')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "if gpa > 1.3:\\l", "if gpa > 1.0:\\l", "if gpa > 0.7:\\l", "if gpa > 0.0:\\l", "letter_grade.append('E')\\l"], ["if gpa > 2.7:\\l", "letter_grade.append('B')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "letter_grade.append('B+')\\l"], ["if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "letter_grade.append('B-')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "letter_grade.append('B+')\\l"], ["if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "letter_grade.append('C+')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "letter_grade.append('B+')\\l"], ["if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "letter_grade.append('C')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "letter_grade.append('B+')\\l"], ["if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "if gpa > 1.3:\\l", "letter_grade.append('C-')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "letter_grade.append('B+')\\l"], ["if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "if gpa > 1.3:\\l", "if gpa > 1.0:\\l", "letter_grade.append('D+')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "letter_grade.append('B+')\\l"], ["if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "if gpa > 1.3:\\l", "if gpa > 1.0:\\l", "if gpa > 0.7:\\l", "letter_grade.append('D')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "letter_grade.append('B+')\\l"], ["if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "if gpa > 1.3:\\l", "if gpa > 1.0:\\l", "if gpa > 0.7:\\l", "if gpa > 0.0:\\l", "letter_grade.append('D-')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "letter_grade.append('B+')\\l"], ["if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "if gpa > 1.3:\\l", "if gpa > 1.0:\\l", "if gpa > 0.7:\\l", "if gpa > 0.0:\\l", "letter_grade.append('E')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "letter_grade.append('B+')\\l"], ["letter_grade.append('B')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "letter_grade.append('B-')\\l"], ["letter_grade.append('B')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "letter_grade.append('C+')\\l"], ["letter_grade.append('B')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "letter_grade.append('C')\\l"], ["letter_grade.append('B')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "if gpa > 1.3:\\l", "letter_grade.append('C-')\\l"], ["letter_grade.append('B')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "if gpa > 1.3:\\l", "if gpa > 1.0:\\l", "letter_grade.append('D+')\\l"], ["letter_grade.append('B')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "if gpa > 1.3:\\l", "if gpa > 1.0:\\l", "if gpa > 0.7:\\l", "letter_grade.append('D')\\l"], ["letter_grade.append('B')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "if gpa > 1.3:\\l", "if gpa > 1.0:\\l", "if gpa > 0.7:\\l", "if gpa > 0.0:\\l", "letter_grade.append('D-')\\l"], ["letter_grade.append('B')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "if gpa > 1.3:\\l", "if gpa > 1.0:\\l", "if gpa > 0.7:\\l", "if gpa > 0.0:\\l", "letter_grade.append('E')\\l"], ["if gpa > 2.3:\\l", "letter_grade.append('B-')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "letter_grade.append('B')\\l"], ["if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "letter_grade.append('C+')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "letter_grade.append('B')\\l"], ["if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "letter_grade.append('C')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "letter_grade.append('B')\\l"], ["if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "if gpa > 1.3:\\l", "letter_grade.append('C-')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "letter_grade.append('B')\\l"], ["if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "if gpa > 1.3:\\l", "if gpa > 1.0:\\l", "letter_grade.append('D+')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "letter_grade.append('B')\\l"], ["if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "if gpa > 1.3:\\l", "if gpa > 1.0:\\l", "if gpa > 0.7:\\l", "letter_grade.append('D')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "letter_grade.append('B')\\l"], ["if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "if gpa > 1.3:\\l", "if gpa > 1.0:\\l", "if gpa > 0.7:\\l", "if gpa > 0.0:\\l", "letter_grade.append('D-')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "letter_grade.append('B')\\l"], ["if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "if gpa > 1.3:\\l", "if gpa > 1.0:\\l", "if gpa > 0.7:\\l", "if gpa > 0.0:\\l", "letter_grade.append('E')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "letter_grade.append('B')\\l"], ["letter_grade.append('B-')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "letter_grade.append('C+')\\l"], ["letter_grade.append('B-')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "letter_grade.append('C')\\l"], ["letter_grade.append('B-')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "if gpa > 1.3:\\l", "letter_grade.append('C-')\\l"], ["letter_grade.append('B-')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "if gpa > 1.3:\\l", "if gpa > 1.0:\\l", "letter_grade.append('D+')\\l"], ["letter_grade.append('B-')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "if gpa > 1.3:\\l", "if gpa > 1.0:\\l", "if gpa > 0.7:\\l", "letter_grade.append('D')\\l"], ["letter_grade.append('B-')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "if gpa > 1.3:\\l", "if gpa > 1.0:\\l", "if gpa > 0.7:\\l", "if gpa > 0.0:\\l", "letter_grade.append('D-')\\l"], ["letter_grade.append('B-')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "if gpa > 1.3:\\l", "if gpa > 1.0:\\l", "if gpa > 0.7:\\l", "if gpa > 0.0:\\l", "letter_grade.append('E')\\l"], ["if gpa > 2.0:\\l", "letter_grade.append('C+')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "letter_grade.append('B-')\\l"], ["if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "letter_grade.append('C')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "letter_grade.append('B-')\\l"], ["if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "if gpa > 1.3:\\l", "letter_grade.append('C-')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "letter_grade.append('B-')\\l"], ["if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "if gpa > 1.3:\\l", "if gpa > 1.0:\\l", "letter_grade.append('D+')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "letter_grade.append('B-')\\l"], ["if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "if gpa > 1.3:\\l", "if gpa > 1.0:\\l", "if gpa > 0.7:\\l", "letter_grade.append('D')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "letter_grade.append('B-')\\l"], ["if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "if gpa > 1.3:\\l", "if gpa > 1.0:\\l", "if gpa > 0.7:\\l", "if gpa > 0.0:\\l", "letter_grade.append('D-')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "letter_grade.append('B-')\\l"], ["if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "if gpa > 1.3:\\l", "if gpa > 1.0:\\l", "if gpa > 0.7:\\l", "if gpa > 0.0:\\l", "letter_grade.append('E')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "letter_grade.append('B-')\\l"], ["letter_grade.append('C+')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "letter_grade.append('C')\\l"], ["letter_grade.append('C+')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "if gpa > 1.3:\\l", "letter_grade.append('C-')\\l"], ["letter_grade.append('C+')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "if gpa > 1.3:\\l", "if gpa > 1.0:\\l", "letter_grade.append('D+')\\l"], ["letter_grade.append('C+')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "if gpa > 1.3:\\l", "if gpa > 1.0:\\l", "if gpa > 0.7:\\l", "letter_grade.append('D')\\l"], ["letter_grade.append('C+')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "if gpa > 1.3:\\l", "if gpa > 1.0:\\l", "if gpa > 0.7:\\l", "if gpa > 0.0:\\l", "letter_grade.append('D-')\\l"], ["letter_grade.append('C+')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "if gpa > 1.3:\\l", "if gpa > 1.0:\\l", "if gpa > 0.7:\\l", "if gpa > 0.0:\\l", "letter_grade.append('E')\\l"], ["if gpa > 1.7:\\l", "letter_grade.append('C')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "letter_grade.append('C+')\\l"], ["if gpa > 1.7:\\l", "if gpa > 1.3:\\l", "letter_grade.append('C-')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "letter_grade.append('C+')\\l"], ["if gpa > 1.7:\\l", "if gpa > 1.3:\\l", "if gpa > 1.0:\\l", "letter_grade.append('D+')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "letter_grade.append('C+')\\l"], ["if gpa > 1.7:\\l", "if gpa > 1.3:\\l", "if gpa > 1.0:\\l", "if gpa > 0.7:\\l", "letter_grade.append('D')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "letter_grade.append('C+')\\l"], ["if gpa > 1.7:\\l", "if gpa > 1.3:\\l", "if gpa > 1.0:\\l", "if gpa > 0.7:\\l", "if gpa > 0.0:\\l", "letter_grade.append('D-')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "letter_grade.append('C+')\\l"], ["if gpa > 1.7:\\l", "if gpa > 1.3:\\l", "if gpa > 1.0:\\l", "if gpa > 0.7:\\l", "if gpa > 0.0:\\l", "letter_grade.append('E')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "letter_grade.append('C+')\\l"], ["letter_grade.append('C')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "if gpa > 1.3:\\l", "letter_grade.append('C-')\\l"], ["letter_grade.append('C')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "if gpa > 1.3:\\l", "if gpa > 1.0:\\l", "letter_grade.append('D+')\\l"], ["letter_grade.append('C')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "if gpa > 1.3:\\l", "if gpa > 1.0:\\l", "if gpa > 0.7:\\l", "letter_grade.append('D')\\l"], ["letter_grade.append('C')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "if gpa > 1.3:\\l", "if gpa > 1.0:\\l", "if gpa > 0.7:\\l", "if gpa > 0.0:\\l", "letter_grade.append('D-')\\l"], ["letter_grade.append('C')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "if gpa > 1.3:\\l", "if gpa > 1.0:\\l", "if gpa > 0.7:\\l", "if gpa > 0.0:\\l", "letter_grade.append('E')\\l"], ["if gpa > 1.3:\\l", "letter_grade.append('C-')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "letter_grade.append('C')\\l"], ["if gpa > 1.3:\\l", "if gpa > 1.0:\\l", "letter_grade.append('D+')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "letter_grade.append('C')\\l"], ["if gpa > 1.3:\\l", "if gpa > 1.0:\\l", "if gpa > 0.7:\\l", "letter_grade.append('D')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "letter_grade.append('C')\\l"], ["if gpa > 1.3:\\l", "if gpa > 1.0:\\l", "if gpa > 0.7:\\l", "if gpa > 0.0:\\l", "letter_grade.append('D-')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "letter_grade.append('C')\\l"], ["if gpa > 1.3:\\l", "if gpa > 1.0:\\l", "if gpa > 0.7:\\l", "if gpa > 0.0:\\l", "letter_grade.append('E')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "letter_grade.append('C')\\l"], ["letter_grade.append('C-')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "if gpa > 1.3:\\l", "if gpa > 1.0:\\l", "letter_grade.append('D+')\\l"], ["letter_grade.append('C-')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "if gpa > 1.3:\\l", "if gpa > 1.0:\\l", "if gpa > 0.7:\\l", "letter_grade.append('D')\\l"], ["letter_grade.append('C-')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "if gpa > 1.3:\\l", "if gpa > 1.0:\\l", "if gpa > 0.7:\\l", "if gpa > 0.0:\\l", "letter_grade.append('D-')\\l"], ["letter_grade.append('C-')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "if gpa > 1.3:\\l", "if gpa > 1.0:\\l", "if gpa > 0.7:\\l", "if gpa > 0.0:\\l", "letter_grade.append('E')\\l"], ["if gpa > 1.0:\\l", "letter_grade.append('D+')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "if gpa > 1.3:\\l", "letter_grade.append('C-')\\l"], ["if gpa > 1.0:\\l", "if gpa > 0.7:\\l", "letter_grade.append('D')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "if gpa > 1.3:\\l", "letter_grade.append('C-')\\l"], ["if gpa > 1.0:\\l", "if gpa > 0.7:\\l", "if gpa > 0.0:\\l", "letter_grade.append('D-')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "if gpa > 1.3:\\l", "letter_grade.append('C-')\\l"], ["if gpa > 1.0:\\l", "if gpa > 0.7:\\l", "if gpa > 0.0:\\l", "letter_grade.append('E')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "if gpa > 1.3:\\l", "letter_grade.append('C-')\\l"], ["letter_grade.append('D+')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "if gpa > 1.3:\\l", "if gpa > 1.0:\\l", "if gpa > 0.7:\\l", "letter_grade.append('D')\\l"], ["letter_grade.append('D+')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "if gpa > 1.3:\\l", "if gpa > 1.0:\\l", "if gpa > 0.7:\\l", "if gpa > 0.0:\\l", "letter_grade.append('D-')\\l"], ["letter_grade.append('D+')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "if gpa > 1.3:\\l", "if gpa > 1.0:\\l", "if gpa > 0.7:\\l", "if gpa > 0.0:\\l", "letter_grade.append('E')\\l"], ["if gpa > 0.7:\\l", "letter_grade.append('D')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "if gpa > 1.3:\\l", "if gpa > 1.0:\\l", "letter_grade.append('D+')\\l"], ["if gpa > 0.7:\\l", "if gpa > 0.0:\\l", "letter_grade.append('D-')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "if gpa > 1.3:\\l", "if gpa > 1.0:\\l", "letter_grade.append('D+')\\l"], ["if gpa > 0.7:\\l", "if gpa > 0.0:\\l", "letter_grade.append('E')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "if gpa > 1.3:\\l", "if gpa > 1.0:\\l", "letter_grade.append('D+')\\l"], ["letter_grade.append('D')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "if gpa > 1.3:\\l", "if gpa > 1.0:\\l", "if gpa > 0.7:\\l", "if gpa > 0.0:\\l", "letter_grade.append('D-')\\l"], ["letter_grade.append('D')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "if gpa > 1.3:\\l", "if gpa > 1.0:\\l", "if gpa > 0.7:\\l", "if gpa > 0.0:\\l", "letter_grade.append('E')\\l"], ["if gpa > 0.0:\\l", "letter_grade.append('D-')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "if gpa > 1.3:\\l", "if gpa > 1.0:\\l", "if gpa > 0.7:\\l", "letter_grade.append('D')\\l"], ["if gpa > 0.0:\\l", "letter_grade.append('E')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "if gpa > 1.3:\\l", "if gpa > 1.0:\\l", "if gpa > 0.7:\\l", "letter_grade.append('D')\\l"], ["letter_grade.append('D-')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "if gpa > 1.3:\\l", "if gpa > 1.0:\\l", "if gpa > 0.7:\\l", "if gpa > 0.0:\\l", "letter_grade.append('E')\\l"], ["letter_grade.append('E')\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "if gpa > 1.3:\\l", "if gpa > 1.0:\\l", "if gpa > 0.7:\\l", "if gpa > 0.0:\\l", "letter_grade.append('D-')\\l"], ["from typing import *\\ldef numerical_letter_grade(grades):...\\lnumerical_letter_grade([0, 0.7])\\l", "numerical_letter_grade", "letter_grade = []\\l", "for gpa in grades:\\l", "return letter_grade\\l"], ["from typing import *\\ldef numerical_letter_grade(grades):...\\lnumerical_letter_grade([0, 0.7])\\l", "numerical_letter_grade", "letter_grade = []\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "letter_grade.append('A+')\\l"], ["from typing import *\\ldef numerical_letter_grade(grades):...\\lnumerical_letter_grade([0, 0.7])\\l", "numerical_letter_grade", "letter_grade = []\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "letter_grade.append('A')\\l"], ["from typing import *\\ldef numerical_letter_grade(grades):...\\lnumerical_letter_grade([0, 0.7])\\l", "numerical_letter_grade", "letter_grade = []\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "letter_grade.append('A-')\\l"], ["from typing import *\\ldef numerical_letter_grade(grades):...\\lnumerical_letter_grade([0, 0.7])\\l", "numerical_letter_grade", "letter_grade = []\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "letter_grade.append('B+')\\l"], ["from typing import *\\ldef numerical_letter_grade(grades):...\\lnumerical_letter_grade([0, 0.7])\\l", "numerical_letter_grade", "letter_grade = []\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "letter_grade.append('B')\\l"], ["from typing import *\\ldef numerical_letter_grade(grades):...\\lnumerical_letter_grade([0, 0.7])\\l", "numerical_letter_grade", "letter_grade = []\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "letter_grade.append('B-')\\l"], ["from typing import *\\ldef numerical_letter_grade(grades):...\\lnumerical_letter_grade([0, 0.7])\\l", "numerical_letter_grade", "letter_grade = []\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "letter_grade.append('C+')\\l"], ["from typing import *\\ldef numerical_letter_grade(grades):...\\lnumerical_letter_grade([0, 0.7])\\l", "numerical_letter_grade", "letter_grade = []\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "letter_grade.append('C')\\l"], ["from typing import *\\ldef numerical_letter_grade(grades):...\\lnumerical_letter_grade([0, 0.7])\\l", "numerical_letter_grade", "letter_grade = []\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "if gpa > 1.3:\\l", "letter_grade.append('C-')\\l"], ["from typing import *\\ldef numerical_letter_grade(grades):...\\lnumerical_letter_grade([0, 0.7])\\l", "numerical_letter_grade", "letter_grade = []\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "if gpa > 1.3:\\l", "if gpa > 1.0:\\l", "letter_grade.append('D+')\\l"], ["from typing import *\\ldef numerical_letter_grade(grades):...\\lnumerical_letter_grade([0, 0.7])\\l", "numerical_letter_grade", "letter_grade = []\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "if gpa > 1.3:\\l", "if gpa > 1.0:\\l", "if gpa > 0.7:\\l", "letter_grade.append('D')\\l"], ["from typing import *\\ldef numerical_letter_grade(grades):...\\lnumerical_letter_grade([0, 0.7])\\l", "numerical_letter_grade", "letter_grade = []\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "if gpa > 1.3:\\l", "if gpa > 1.0:\\l", "if gpa > 0.7:\\l", "if gpa > 0.0:\\l", "letter_grade.append('D-')\\l"], ["from typing import *\\ldef numerical_letter_grade(grades):...\\lnumerical_letter_grade([0, 0.7])\\l", "numerical_letter_grade", "letter_grade = []\\l", "for gpa in grades:\\l", "if gpa == 4.0:\\l", "if gpa > 3.7:\\l", "if gpa > 3.3:\\l", "if gpa > 3.0:\\l", "if gpa > 2.7:\\l", "if gpa > 2.3:\\l", "if gpa > 2.0:\\l", "if gpa > 1.7:\\l", "if gpa > 1.3:\\l", "if gpa > 1.0:\\l", "if gpa > 0.7:\\l", "if gpa > 0.0:\\l", "letter_grade.append('E')\\l"]], "prime_paths_linenumbers": [[8, 9, 7, 34], [8, 10, 11, 7, 34], [8, 10, 12, 13, 7, 34], [8, 10, 12, 14, 15, 7, 34], [8, 10, 12, 14, 16, 17, 7, 34], [8, 10, 12, 14, 16, 18, 19, 7, 34], [8, 10, 12, 14, 16, 18, 20, 21, 7, 34], [8, 10, 12, 14, 16, 18, 20, 22, 23, 7, 34], [8, 10, 12, 14, 16, 18, 20, 22, 24, 25, 7, 34], [8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 27, 7, 34], [8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 29, 7, 34], [8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 31, 7, 34], [8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 33, 7, 34], [9, 7, 8, 10, 11], [9, 7, 8, 10, 12, 13], [9, 7, 8, 10, 12, 14, 15], [9, 7, 8, 10, 12, 14, 16, 17], [9, 7, 8, 10, 12, 14, 16, 18, 19], [9, 7, 8, 10, 12, 14, 16, 18, 20, 21], [9, 7, 8, 10, 12, 14, 16, 18, 20, 22, 23], [9, 7, 8, 10, 12, 14, 16, 18, 20, 22, 24, 25], [9, 7, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 27], [9, 7, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 29], [9, 7, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 31], [9, 7, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 33], [10, 11, 7, 8, 9], [10, 12, 13, 7, 8, 9], [10, 12, 14, 15, 7, 8, 9], [10, 12, 14, 16, 17, 7, 8, 9], [10, 12, 14, 16, 18, 19, 7, 8, 9], [10, 12, 14, 16, 18, 20, 21, 7, 8, 9], [10, 12, 14, 16, 18, 20, 22, 23, 7, 8, 9], [10, 12, 14, 16, 18, 20, 22, 24, 25, 7, 8, 9], [10, 12, 14, 16, 18, 20, 22, 24, 26, 27, 7, 8, 9], [10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 29, 7, 8, 9], [10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 31, 7, 8, 9], [10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 33, 7, 8, 9], [11, 7, 8, 10, 12, 13], [11, 7, 8, 10, 12, 14, 15], [11, 7, 8, 10, 12, 14, 16, 17], [11, 7, 8, 10, 12, 14, 16, 18, 19], [11, 7, 8, 10, 12, 14, 16, 18, 20, 21], [11, 7, 8, 10, 12, 14, 16, 18, 20, 22, 23], [11, 7, 8, 10, 12, 14, 16, 18, 20, 22, 24, 25], [11, 7, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 27], [11, 7, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 29], [11, 7, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 31], [11, 7, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 33], [12, 13, 7, 8, 10, 11], [12, 14, 15, 7, 8, 10, 11], [12, 14, 16, 17, 7, 8, 10, 11], [12, 14, 16, 18, 19, 7, 8, 10, 11], [12, 14, 16, 18, 20, 21, 7, 8, 10, 11], [12, 14, 16, 18, 20, 22, 23, 7, 8, 10, 11], [12, 14, 16, 18, 20, 22, 24, 25, 7, 8, 10, 11], [12, 14, 16, 18, 20, 22, 24, 26, 27, 7, 8, 10, 11], [12, 14, 16, 18, 20, 22, 24, 26, 28, 29, 7, 8, 10, 11], [12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 31, 7, 8, 10, 11], [12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 33, 7, 8, 10, 11], [13, 7, 8, 10, 12, 14, 15], [13, 7, 8, 10, 12, 14, 16, 17], [13, 7, 8, 10, 12, 14, 16, 18, 19], [13, 7, 8, 10, 12, 14, 16, 18, 20, 21], [13, 7, 8, 10, 12, 14, 16, 18, 20, 22, 23], [13, 7, 8, 10, 12, 14, 16, 18, 20, 22, 24, 25], [13, 7, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 27], [13, 7, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 29], [13, 7, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 31], [13, 7, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 33], [14, 15, 7, 8, 10, 12, 13], [14, 16, 17, 7, 8, 10, 12, 13], [14, 16, 18, 19, 7, 8, 10, 12, 13], [14, 16, 18, 20, 21, 7, 8, 10, 12, 13], [14, 16, 18, 20, 22, 23, 7, 8, 10, 12, 13], [14, 16, 18, 20, 22, 24, 25, 7, 8, 10, 12, 13], [14, 16, 18, 20, 22, 24, 26, 27, 7, 8, 10, 12, 13], [14, 16, 18, 20, 22, 24, 26, 28, 29, 7, 8, 10, 12, 13], [14, 16, 18, 20, 22, 24, 26, 28, 30, 31, 7, 8, 10, 12, 13], [14, 16, 18, 20, 22, 24, 26, 28, 30, 33, 7, 8, 10, 12, 13], [15, 7, 8, 10, 12, 14, 16, 17], [15, 7, 8, 10, 12, 14, 16, 18, 19], [15, 7, 8, 10, 12, 14, 16, 18, 20, 21], [15, 7, 8, 10, 12, 14, 16, 18, 20, 22, 23], [15, 7, 8, 10, 12, 14, 16, 18, 20, 22, 24, 25], [15, 7, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 27], [15, 7, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 29], [15, 7, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 31], [15, 7, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 33], [16, 17, 7, 8, 10, 12, 14, 15], [16, 18, 19, 7, 8, 10, 12, 14, 15], [16, 18, 20, 21, 7, 8, 10, 12, 14, 15], [16, 18, 20, 22, 23, 7, 8, 10, 12, 14, 15], [16, 18, 20, 22, 24, 25, 7, 8, 10, 12, 14, 15], [16, 18, 20, 22, 24, 26, 27, 7, 8, 10, 12, 14, 15], [16, 18, 20, 22, 24, 26, 28, 29, 7, 8, 10, 12, 14, 15], [16, 18, 20, 22, 24, 26, 28, 30, 31, 7, 8, 10, 12, 14, 15], [16, 18, 20, 22, 24, 26, 28, 30, 33, 7, 8, 10, 12, 14, 15], [17, 7, 8, 10, 12, 14, 16, 18, 19], [17, 7, 8, 10, 12, 14, 16, 18, 20, 21], [17, 7, 8, 10, 12, 14, 16, 18, 20, 22, 23], [17, 7, 8, 10, 12, 14, 16, 18, 20, 22, 24, 25], [17, 7, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 27], [17, 7, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 29], [17, 7, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 31], [17, 7, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 33], [18, 19, 7, 8, 10, 12, 14, 16, 17], [18, 20, 21, 7, 8, 10, 12, 14, 16, 17], [18, 20, 22, 23, 7, 8, 10, 12, 14, 16, 17], [18, 20, 22, 24, 25, 7, 8, 10, 12, 14, 16, 17], [18, 20, 22, 24, 26, 27, 7, 8, 10, 12, 14, 16, 17], [18, 20, 22, 24, 26, 28, 29, 7, 8, 10, 12, 14, 16, 17], [18, 20, 22, 24, 26, 28, 30, 31, 7, 8, 10, 12, 14, 16, 17], [18, 20, 22, 24, 26, 28, 30, 33, 7, 8, 10, 12, 14, 16, 17], [19, 7, 8, 10, 12, 14, 16, 18, 20, 21], [19, 7, 8, 10, 12, 14, 16, 18, 20, 22, 23], [19, 7, 8, 10, 12, 14, 16, 18, 20, 22, 24, 25], [19, 7, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 27], [19, 7, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 29], [19, 7, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 31], [19, 7, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 33], [20, 21, 7, 8, 10, 12, 14, 16, 18, 19], [20, 22, 23, 7, 8, 10, 12, 14, 16, 18, 19], [20, 22, 24, 25, 7, 8, 10, 12, 14, 16, 18, 19], [20, 22, 24, 26, 27, 7, 8, 10, 12, 14, 16, 18, 19], [20, 22, 24, 26, 28, 29, 7, 8, 10, 12, 14, 16, 18, 19], [20, 22, 24, 26, 28, 30, 31, 7, 8, 10, 12, 14, 16, 18, 19], [20, 22, 24, 26, 28, 30, 33, 7, 8, 10, 12, 14, 16, 18, 19], [21, 7, 8, 10, 12, 14, 16, 18, 20, 22, 23], [21, 7, 8, 10, 12, 14, 16, 18, 20, 22, 24, 25], [21, 7, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 27], [21, 7, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 29], [21, 7, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 31], [21, 7, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 33], [22, 23, 7, 8, 10, 12, 14, 16, 18, 20, 21], [22, 24, 25, 7, 8, 10, 12, 14, 16, 18, 20, 21], [22, 24, 26, 27, 7, 8, 10, 12, 14, 16, 18, 20, 21], [22, 24, 26, 28, 29, 7, 8, 10, 12, 14, 16, 18, 20, 21], [22, 24, 26, 28, 30, 31, 7, 8, 10, 12, 14, 16, 18, 20, 21], [22, 24, 26, 28, 30, 33, 7, 8, 10, 12, 14, 16, 18, 20, 21], [23, 7, 8, 10, 12, 14, 16, 18, 20, 22, 24, 25], [23, 7, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 27], [23, 7, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 29], [23, 7, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 31], [23, 7, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 33], [24, 25, 7, 8, 10, 12, 14, 16, 18, 20, 22, 23], [24, 26, 27, 7, 8, 10, 12, 14, 16, 18, 20, 22, 23], [24, 26, 28, 29, 7, 8, 10, 12, 14, 16, 18, 20, 22, 23], [24, 26, 28, 30, 31, 7, 8, 10, 12, 14, 16, 18, 20, 22, 23], [24, 26, 28, 30, 33, 7, 8, 10, 12, 14, 16, 18, 20, 22, 23], [25, 7, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 27], [25, 7, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 29], [25, 7, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 31], [25, 7, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 33], [26, 27, 7, 8, 10, 12, 14, 16, 18, 20, 22, 24, 25], [26, 28, 29, 7, 8, 10, 12, 14, 16, 18, 20, 22, 24, 25], [26, 28, 30, 31, 7, 8, 10, 12, 14, 16, 18, 20, 22, 24, 25], [26, 28, 30, 33, 7, 8, 10, 12, 14, 16, 18, 20, 22, 24, 25], [27, 7, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 29], [27, 7, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 31], [27, 7, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 33], [28, 29, 7, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 27], [28, 30, 31, 7, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 27], [28, 30, 33, 7, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 27], [29, 7, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 31], [29, 7, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 33], [30, 31, 7, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 29], [30, 33, 7, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 29], [31, 7, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 33], [33, 7, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 31], [1, 36, 6, 7, 34], [1, 36, 6, 7, 8, 9], [1, 36, 6, 7, 8, 10, 11], [1, 36, 6, 7, 8, 10, 12, 13], [1, 36, 6, 7, 8, 10, 12, 14, 15], [1, 36, 6, 7, 8, 10, 12, 14, 16, 17], [1, 36, 6, 7, 8, 10, 12, 14, 16, 18, 19], [1, 36, 6, 7, 8, 10, 12, 14, 16, 18, 20, 21], [1, 36, 6, 7, 8, 10, 12, 14, 16, 18, 20, 22, 23], [1, 36, 6, 7, 8, 10, 12, 14, 16, 18, 20, 22, 24, 25], [1, 36, 6, 7, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 27], [1, 36, 6, 7, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 29], [1, 36, 6, 7, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 31], [1, 36, 6, 7, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 33]], "covered_statements_linenumbers": [1, 4, 6, 7, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 31, 33, 34, 36], "missing_statements_linenumbers": [9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29], "covered_prime_paths_linenumbers": [[8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 31, 7, 34], [8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 33, 7, 34], [31, 7, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 33], [33, 7, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 31], [1, 36, 6, 7, 34], [1, 36, 6, 7, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 31], [1, 36, 6, 7, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 33]], "missing_prime_paths_linenumbers": [[8, 9, 7, 34], [8, 10, 11, 7, 34], [8, 10, 12, 13, 7, 34], [8, 10, 12, 14, 15, 7, 34], [8, 10, 12, 14, 16, 17, 7, 34], [8, 10, 12, 14, 16, 18, 19, 7, 34], [8, 10, 12, 14, 16, 18, 20, 21, 7, 34], [8, 10, 12, 14, 16, 18, 20, 22, 23, 7, 34], [8, 10, 12, 14, 16, 18, 20, 22, 24, 25, 7, 34], [8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 27, 7, 34], [8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 29, 7, 34], [9, 7, 8, 10, 11], [9, 7, 8, 10, 12, 13], [9, 7, 8, 10, 12, 14, 15], [9, 7, 8, 10, 12, 14, 16, 17], [9, 7, 8, 10, 12, 14, 16, 18, 19], [9, 7, 8, 10, 12, 14, 16, 18, 20, 21], [9, 7, 8, 10, 12, 14, 16, 18, 20, 22, 23], [9, 7, 8, 10, 12, 14, 16, 18, 20, 22, 24, 25], [9, 7, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 27], [9, 7, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 29], [9, 7, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 31], [9, 7, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 33], [10, 11, 7, 8, 9], [10, 12, 13, 7, 8, 9], [10, 12, 14, 15, 7, 8, 9], [10, 12, 14, 16, 17, 7, 8, 9], [10, 12, 14, 16, 18, 19, 7, 8, 9], [10, 12, 14, 16, 18, 20, 21, 7, 8, 9], [10, 12, 14, 16, 18, 20, 22, 23, 7, 8, 9], [10, 12, 14, 16, 18, 20, 22, 24, 25, 7, 8, 9], [10, 12, 14, 16, 18, 20, 22, 24, 26, 27, 7, 8, 9], [10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 29, 7, 8, 9], [10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 31, 7, 8, 9], [10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 33, 7, 8, 9], [11, 7, 8, 10, 12, 13], [11, 7, 8, 10, 12, 14, 15], [11, 7, 8, 10, 12, 14, 16, 17], [11, 7, 8, 10, 12, 14, 16, 18, 19], [11, 7, 8, 10, 12, 14, 16, 18, 20, 21], [11, 7, 8, 10, 12, 14, 16, 18, 20, 22, 23], [11, 7, 8, 10, 12, 14, 16, 18, 20, 22, 24, 25], [11, 7, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 27], [11, 7, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 29], [11, 7, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 31], [11, 7, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 33], [12, 13, 7, 8, 10, 11], [12, 14, 15, 7, 8, 10, 11], [12, 14, 16, 17, 7, 8, 10, 11], [12, 14, 16, 18, 19, 7, 8, 10, 11], [12, 14, 16, 18, 20, 21, 7, 8, 10, 11], [12, 14, 16, 18, 20, 22, 23, 7, 8, 10, 11], [12, 14, 16, 18, 20, 22, 24, 25, 7, 8, 10, 11], [12, 14, 16, 18, 20, 22, 24, 26, 27, 7, 8, 10, 11], [12, 14, 16, 18, 20, 22, 24, 26, 28, 29, 7, 8, 10, 11], [12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 31, 7, 8, 10, 11], [12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 33, 7, 8, 10, 11], [13, 7, 8, 10, 12, 14, 15], [13, 7, 8, 10, 12, 14, 16, 17], [13, 7, 8, 10, 12, 14, 16, 18, 19], [13, 7, 8, 10, 12, 14, 16, 18, 20, 21], [13, 7, 8, 10, 12, 14, 16, 18, 20, 22, 23], [13, 7, 8, 10, 12, 14, 16, 18, 20, 22, 24, 25], [13, 7, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 27], [13, 7, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 29], [13, 7, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 31], [13, 7, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 33], [14, 15, 7, 8, 10, 12, 13], [14, 16, 17, 7, 8, 10, 12, 13], [14, 16, 18, 19, 7, 8, 10, 12, 13], [14, 16, 18, 20, 21, 7, 8, 10, 12, 13], [14, 16, 18, 20, 22, 23, 7, 8, 10, 12, 13], [14, 16, 18, 20, 22, 24, 25, 7, 8, 10, 12, 13], [14, 16, 18, 20, 22, 24, 26, 27, 7, 8, 10, 12, 13], [14, 16, 18, 20, 22, 24, 26, 28, 29, 7, 8, 10, 12, 13], [14, 16, 18, 20, 22, 24, 26, 28, 30, 31, 7, 8, 10, 12, 13], [14, 16, 18, 20, 22, 24, 26, 28, 30, 33, 7, 8, 10, 12, 13], [15, 7, 8, 10, 12, 14, 16, 17], [15, 7, 8, 10, 12, 14, 16, 18, 19], [15, 7, 8, 10, 12, 14, 16, 18, 20, 21], [15, 7, 8, 10, 12, 14, 16, 18, 20, 22, 23], [15, 7, 8, 10, 12, 14, 16, 18, 20, 22, 24, 25], [15, 7, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 27], [15, 7, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 29], [15, 7, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 31], [15, 7, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 33], [16, 17, 7, 8, 10, 12, 14, 15], [16, 18, 19, 7, 8, 10, 12, 14, 15], [16, 18, 20, 21, 7, 8, 10, 12, 14, 15], [16, 18, 20, 22, 23, 7, 8, 10, 12, 14, 15], [16, 18, 20, 22, 24, 25, 7, 8, 10, 12, 14, 15], [16, 18, 20, 22, 24, 26, 27, 7, 8, 10, 12, 14, 15], [16, 18, 20, 22, 24, 26, 28, 29, 7, 8, 10, 12, 14, 15], [16, 18, 20, 22, 24, 26, 28, 30, 31, 7, 8, 10, 12, 14, 15], [16, 18, 20, 22, 24, 26, 28, 30, 33, 7, 8, 10, 12, 14, 15], [17, 7, 8, 10, 12, 14, 16, 18, 19], [17, 7, 8, 10, 12, 14, 16, 18, 20, 21], [17, 7, 8, 10, 12, 14, 16, 18, 20, 22, 23], [17, 7, 8, 10, 12, 14, 16, 18, 20, 22, 24, 25], [17, 7, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 27], [17, 7, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 29], [17, 7, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 31], [17, 7, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 33], [18, 19, 7, 8, 10, 12, 14, 16, 17], [18, 20, 21, 7, 8, 10, 12, 14, 16, 17], [18, 20, 22, 23, 7, 8, 10, 12, 14, 16, 17], [18, 20, 22, 24, 25, 7, 8, 10, 12, 14, 16, 17], [18, 20, 22, 24, 26, 27, 7, 8, 10, 12, 14, 16, 17], [18, 20, 22, 24, 26, 28, 29, 7, 8, 10, 12, 14, 16, 17], [18, 20, 22, 24, 26, 28, 30, 31, 7, 8, 10, 12, 14, 16, 17], [18, 20, 22, 24, 26, 28, 30, 33, 7, 8, 10, 12, 14, 16, 17], [19, 7, 8, 10, 12, 14, 16, 18, 20, 21], [19, 7, 8, 10, 12, 14, 16, 18, 20, 22, 23], [19, 7, 8, 10, 12, 14, 16, 18, 20, 22, 24, 25], [19, 7, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 27], [19, 7, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 29], [19, 7, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 31], [19, 7, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 33], [20, 21, 7, 8, 10, 12, 14, 16, 18, 19], [20, 22, 23, 7, 8, 10, 12, 14, 16, 18, 19], [20, 22, 24, 25, 7, 8, 10, 12, 14, 16, 18, 19], [20, 22, 24, 26, 27, 7, 8, 10, 12, 14, 16, 18, 19], [20, 22, 24, 26, 28, 29, 7, 8, 10, 12, 14, 16, 18, 19], [20, 22, 24, 26, 28, 30, 31, 7, 8, 10, 12, 14, 16, 18, 19], [20, 22, 24, 26, 28, 30, 33, 7, 8, 10, 12, 14, 16, 18, 19], [21, 7, 8, 10, 12, 14, 16, 18, 20, 22, 23], [21, 7, 8, 10, 12, 14, 16, 18, 20, 22, 24, 25], [21, 7, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 27], [21, 7, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 29], [21, 7, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 31], [21, 7, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 33], [22, 23, 7, 8, 10, 12, 14, 16, 18, 20, 21], [22, 24, 25, 7, 8, 10, 12, 14, 16, 18, 20, 21], [22, 24, 26, 27, 7, 8, 10, 12, 14, 16, 18, 20, 21], [22, 24, 26, 28, 29, 7, 8, 10, 12, 14, 16, 18, 20, 21], [22, 24, 26, 28, 30, 31, 7, 8, 10, 12, 14, 16, 18, 20, 21], [22, 24, 26, 28, 30, 33, 7, 8, 10, 12, 14, 16, 18, 20, 21], [23, 7, 8, 10, 12, 14, 16, 18, 20, 22, 24, 25], [23, 7, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 27], [23, 7, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 29], [23, 7, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 31], [23, 7, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 33], [24, 25, 7, 8, 10, 12, 14, 16, 18, 20, 22, 23], [24, 26, 27, 7, 8, 10, 12, 14, 16, 18, 20, 22, 23], [24, 26, 28, 29, 7, 8, 10, 12, 14, 16, 18, 20, 22, 23], [24, 26, 28, 30, 31, 7, 8, 10, 12, 14, 16, 18, 20, 22, 23], [24, 26, 28, 30, 33, 7, 8, 10, 12, 14, 16, 18, 20, 22, 23], [25, 7, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 27], [25, 7, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 29], [25, 7, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 31], [25, 7, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 33], [26, 27, 7, 8, 10, 12, 14, 16, 18, 20, 22, 24, 25], [26, 28, 29, 7, 8, 10, 12, 14, 16, 18, 20, 22, 24, 25], [26, 28, 30, 31, 7, 8, 10, 12, 14, 16, 18, 20, 22, 24, 25], [26, 28, 30, 33, 7, 8, 10, 12, 14, 16, 18, 20, 22, 24, 25], [27, 7, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 29], [27, 7, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 31], [27, 7, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 33], [28, 29, 7, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 27], [28, 30, 31, 7, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 27], [28, 30, 33, 7, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 27], [29, 7, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 31], [29, 7, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 33], [30, 31, 7, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 29], [30, 33, 7, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 29], [1, 36, 6, 7, 8, 9], [1, 36, 6, 7, 8, 10, 11], [1, 36, 6, 7, 8, 10, 12, 13], [1, 36, 6, 7, 8, 10, 12, 14, 15], [1, 36, 6, 7, 8, 10, 12, 14, 16, 17], [1, 36, 6, 7, 8, 10, 12, 14, 16, 18, 19], [1, 36, 6, 7, 8, 10, 12, 14, 16, 18, 20, 21], [1, 36, 6, 7, 8, 10, 12, 14, 16, 18, 20, 22, 23], [1, 36, 6, 7, 8, 10, 12, 14, 16, 18, 20, 22, 24, 25], [1, 36, 6, 7, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 27], [1, 36, 6, 7, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 29]], "num_total_prime_paths": 183, "num_covered_paths": 7, "prime_path_coverage": 0.04, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_81__1_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_81__1_CFG.dot"}
{"humaneval_id": "HumanEval_76", "python_file": "HumanEval_76/main.py", "input_file": "HumanEval_76/input.txt", "prime_paths_nodes": [["8", "7", "9"], ["1", "12", "3", "4"], ["1", "12", "3", "5", "7", "8"], ["1", "12", "3", "5", "7", "9"]], "prime_paths_statements": [["power = power * n\\l", "while power < x:\\l", "return power == x\\l"], ["from typing import *\\ldef is_simple_power(x, n):...\\lis_simple_power(16, 2)\\l", "is_simple_power", "if n == 1:\\l", "return x == 1\\l"], ["from typing import *\\ldef is_simple_power(x, n):...\\lis_simple_power(16, 2)\\l", "is_simple_power", "if n == 1:\\l", "power = 1\\l", "while power < x:\\l", "power = power * n\\l"], ["from typing import *\\ldef is_simple_power(x, n):...\\lis_simple_power(16, 2)\\l", "is_simple_power", "if n == 1:\\l", "power = 1\\l", "while power < x:\\l", "return power == x\\l"]], "prime_paths_linenumbers": [[7, 6, 8], [1, 10, 3, 4], [1, 10, 3, 5, 6, 7], [1, 10, 3, 5, 6, 8]], "covered_statements_linenumbers": [1, 2, 3, 5, 6, 7, 8, 10], "missing_statements_linenumbers": [4], "covered_prime_paths_linenumbers": [[7, 6, 8], [1, 10, 3, 5, 6, 7], [1, 10, 3, 5, 6, 8]], "missing_prime_paths_linenumbers": [[1, 10, 3, 4]], "num_total_prime_paths": 4, "num_covered_paths": 3, "prime_path_coverage": 0.75, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_76_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_76_CFG.dot"}
{"humaneval_id": "HumanEval_126__1", "python_file": "HumanEval_126__1/main.py", "input_file": "HumanEval_126__1/input.txt", "prime_paths_nodes": [["6", "5", "7", "9"], ["6", "5", "7", "10", "15"], ["6", "5", "7", "10", "17"], ["1", "21", "3", "5", "6"], ["1", "21", "3", "5", "7", "9"], ["1", "21", "3", "5", "7", "10", "15"], ["1", "21", "3", "5", "7", "10", "17"]], "prime_paths_statements": [["count_digit[i] += 1\\l", "for i in lst:\\l", "if any(count_digit[i] > 2 for i in lst):\\l", "return False\\l"], ["count_digit[i] += 1\\l", "for i in lst:\\l", "if any(count_digit[i] > 2 for i in lst):\\l", "if all(lst[i - 1] <= lst[i] for i in range(1, len(lst))):\\l", "return True\\l"], ["count_digit[i] += 1\\l", "for i in lst:\\l", "if any(count_digit[i] > 2 for i in lst):\\l", "if all(lst[i - 1] <= lst[i] for i in range(1, len(lst))):\\l", "return False\\l"], ["from typing import *\\ldef is_sorted(lst):...\\lis_sorted([3, 2, 1])\\l", "is_sorted", "count_digit = dict([(i, 0) for i in lst])\\l", "for i in lst:\\l", "count_digit[i] += 1\\l"], ["from typing import *\\ldef is_sorted(lst):...\\lis_sorted([3, 2, 1])\\l", "is_sorted", "count_digit = dict([(i, 0) for i in lst])\\l", "for i in lst:\\l", "if any(count_digit[i] > 2 for i in lst):\\l", "return False\\l"], ["from typing import *\\ldef is_sorted(lst):...\\lis_sorted([3, 2, 1])\\l", "is_sorted", "count_digit = dict([(i, 0) for i in lst])\\l", "for i in lst:\\l", "if any(count_digit[i] > 2 for i in lst):\\l", "if all(lst[i - 1] <= lst[i] for i in range(1, len(lst))):\\l", "return True\\l"], ["from typing import *\\ldef is_sorted(lst):...\\lis_sorted([3, 2, 1])\\l", "is_sorted", "count_digit = dict([(i, 0) for i in lst])\\l", "for i in lst:\\l", "if any(count_digit[i] > 2 for i in lst):\\l", "if all(lst[i - 1] <= lst[i] for i in range(1, len(lst))):\\l", "return False\\l"]], "prime_paths_linenumbers": [[7, 6, 8, 9], [7, 6, 8, 10, 11], [7, 6, 8, 10, 13], [1, 15, 5, 6, 7], [1, 15, 5, 6, 8, 9], [1, 15, 5, 6, 8, 10, 11], [1, 15, 5, 6, 8, 10, 13]], "covered_statements_linenumbers": [1, 4, 5, 6, 7, 8, 10, 13, 15], "missing_statements_linenumbers": [9, 11], "covered_prime_paths_linenumbers": [[7, 6, 8, 10, 13], [1, 15, 5, 6, 7], [1, 15, 5, 6, 8, 10, 13]], "missing_prime_paths_linenumbers": [[7, 6, 8, 9], [7, 6, 8, 10, 11], [1, 15, 5, 6, 8, 9], [1, 15, 5, 6, 8, 10, 11]], "num_total_prime_paths": 7, "num_covered_paths": 3, "prime_path_coverage": 0.43, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_126__1_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_126__1_CFG.dot"}
{"humaneval_id": "HumanEval_103__1", "python_file": "HumanEval_103__1/main.py", "input_file": "HumanEval_103__1/input.txt", "prime_paths_nodes": [["9", "7", "10"], ["1", "13", "3", "4"], ["1", "13", "3", "5", "7", "9"], ["1", "13", "3", "5", "7", "10"]], "prime_paths_statements": [["summation += i\\l", "for i in range(n, m + 1):\\l", "return bin(round(summation / (m - n + 1)))\\l"], ["from typing import *\\ldef rounded_avg(n, m):...\\lrounded_avg(350, 902)\\l", "rounded_avg", "if m < n:\\l", "return -1\\l"], ["from typing import *\\ldef rounded_avg(n, m):...\\lrounded_avg(350, 902)\\l", "rounded_avg", "if m < n:\\l", "summation = 0\\l", "for i in range(n, m + 1):\\l", "summation += i\\l"], ["from typing import *\\ldef rounded_avg(n, m):...\\lrounded_avg(350, 902)\\l", "rounded_avg", "if m < n:\\l", "summation = 0\\l", "for i in range(n, m + 1):\\l", "return bin(round(summation / (m - n + 1)))\\l"]], "prime_paths_linenumbers": [[9, 8, 10], [1, 12, 5, 6], [1, 12, 5, 7, 8, 9], [1, 12, 5, 7, 8, 10]], "covered_statements_linenumbers": [1, 4, 5, 7, 8, 9, 10, 12], "missing_statements_linenumbers": [6], "covered_prime_paths_linenumbers": [[9, 8, 10], [1, 12, 5, 7, 8, 9], [1, 12, 5, 7, 8, 10]], "missing_prime_paths_linenumbers": [[1, 12, 5, 6]], "num_total_prime_paths": 4, "num_covered_paths": 3, "prime_path_coverage": 0.75, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_103__1_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_103__1_CFG.dot"}
{"humaneval_id": "HumanEval_111__1", "python_file": "HumanEval_111__1/main.py", "input_file": "HumanEval_111__1/input.txt", "prime_paths_nodes": [["6", "5", "7", "11", "12"], ["6", "5", "7", "12"], ["6", "8", "5", "7", "11", "12"], ["6", "8", "5", "7", "12"], ["6", "5", "7", "11", "13", "16"], ["6", "8", "5", "7", "11", "13", "16"], ["8", "5", "6"], ["13", "11", "12"], ["13", "16", "11", "12"], ["16", "11", "13"], ["1", "20", "3", "5", "6", "8"], ["1", "20", "3", "5", "7", "11", "12"], ["1", "20", "3", "5", "7", "12"], ["1", "20", "3", "5", "7", "11", "13", "16"]], "prime_paths_statements": [["if list1.count(i) > t and i != '':\\l", "for i in list1:\\l", "if t > 0:\\l", "for i in list1:\\l", "return dict1\\l"], ["if list1.count(i) > t and i != '':\\l", "for i in list1:\\l", "if t > 0:\\l", "return dict1\\l"], ["if list1.count(i) > t and i != '':\\l", "t = list1.count(i)\\l", "for i in list1:\\l", "if t > 0:\\l", "for i in list1:\\l", "return dict1\\l"], ["if list1.count(i) > t and i != '':\\l", "t = list1.count(i)\\l", "for i in list1:\\l", "if t > 0:\\l", "return dict1\\l"], ["if list1.count(i) > t and i != '':\\l", "for i in list1:\\l", "if t > 0:\\l", "for i in list1:\\l", "if list1.count(i) == t:\\l", "dict1[i] = t\\l"], ["if list1.count(i) > t and i != '':\\l", "t = list1.count(i)\\l", "for i in list1:\\l", "if t > 0:\\l", "for i in list1:\\l", "if list1.count(i) == t:\\l", "dict1[i] = t\\l"], ["t = list1.count(i)\\l", "for i in list1:\\l", "if list1.count(i) > t and i != '':\\l"], ["if list1.count(i) == t:\\l", "for i in list1:\\l", "return dict1\\l"], ["if list1.count(i) == t:\\l", "dict1[i] = t\\l", "for i in list1:\\l", "return dict1\\l"], ["dict1[i] = t\\l", "for i in list1:\\l", "if list1.count(i) == t:\\l"], ["from typing import *\\ldef histogram(test):...\\lhistogram('b b b b a')\\l", "histogram", "dict1 = {}\\llist1 = test.split(' ')\\lt = 0\\l", "for i in list1:\\l", "if list1.count(i) > t and i != '':\\l", "t = list1.count(i)\\l"], ["from typing import *\\ldef histogram(test):...\\lhistogram('b b b b a')\\l", "histogram", "dict1 = {}\\llist1 = test.split(' ')\\lt = 0\\l", "for i in list1:\\l", "if t > 0:\\l", "for i in list1:\\l", "return dict1\\l"], ["from typing import *\\ldef histogram(test):...\\lhistogram('b b b b a')\\l", "histogram", "dict1 = {}\\llist1 = test.split(' ')\\lt = 0\\l", "for i in list1:\\l", "if t > 0:\\l", "return dict1\\l"], ["from typing import *\\ldef histogram(test):...\\lhistogram('b b b b a')\\l", "histogram", "dict1 = {}\\llist1 = test.split(' ')\\lt = 0\\l", "for i in list1:\\l", "if t > 0:\\l", "for i in list1:\\l", "if list1.count(i) == t:\\l", "dict1[i] = t\\l"]], "prime_paths_linenumbers": [[10, 9, 12, 13, 17], [10, 9, 12, 17], [10, 11, 9, 12, 13, 17], [10, 11, 9, 12, 17], [10, 9, 12, 13, 14, 16], [10, 11, 9, 12, 13, 14, 16], [11, 9, 10], [14, 13, 17], [14, 16, 13, 17], [16, 13, 14], [1, 19, 5, 6, 7, 9, 10, 11], [1, 19, 5, 6, 7, 9, 12, 13, 17], [1, 19, 5, 6, 7, 9, 12, 17], [1, 19, 5, 6, 7, 9, 12, 13, 14, 16]], "covered_statements_linenumbers": [1, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 16, 17, 19], "missing_statements_linenumbers": [], "covered_prime_paths_linenumbers": [[10, 9, 12, 13, 17], [10, 9, 12, 17], [10, 11, 9, 12, 13, 17], [10, 11, 9, 12, 17], [10, 9, 12, 13, 14, 16], [10, 11, 9, 12, 13, 14, 16], [11, 9, 10], [14, 13, 17], [14, 16, 13, 17], [16, 13, 14], [1, 19, 5, 6, 7, 9, 10, 11], [1, 19, 5, 6, 7, 9, 12, 13, 17], [1, 19, 5, 6, 7, 9, 12, 17], [1, 19, 5, 6, 7, 9, 12, 13, 14, 16]], "missing_prime_paths_linenumbers": [], "num_total_prime_paths": 14, "num_covered_paths": 14, "prime_path_coverage": 1.0, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_111__1_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_111__1_CFG.dot"}
{"humaneval_id": "HumanEval_78__1", "python_file": "HumanEval_78__1/main.py", "input_file": "HumanEval_78__1/input.txt", "prime_paths_nodes": [["7", "4", "8"], ["7", "9", "4", "8"], ["9", "4", "7"], ["1", "13", "3", "4", "8"], ["1", "13", "3", "4", "7", "9"]], "prime_paths_statements": [["if num[i] in primes:\\l", "for i in range(0, len(num)):\\l", "return total\\l"], ["if num[i] in primes:\\l", "total += 1\\l", "for i in range(0, len(num)):\\l", "return total\\l"], ["total += 1\\l", "for i in range(0, len(num)):\\l", "if num[i] in primes:\\l"], ["from typing import *\\ldef hex_key(num):...\\lhex_key('123456789ABCDEF0')\\l", "hex_key", "primes = '2', '3', '5', '7', 'B', 'D'\\ltotal = 0\\l", "for i in range(0, len(num)):\\l", "return total\\l"], ["from typing import *\\ldef hex_key(num):...\\lhex_key('123456789ABCDEF0')\\l", "hex_key", "primes = '2', '3', '5', '7', 'B', 'D'\\ltotal = 0\\l", "for i in range(0, len(num)):\\l", "if num[i] in primes:\\l", "total += 1\\l"]], "prime_paths_linenumbers": [[8, 7, 10], [8, 9, 7, 10], [9, 7, 8], [1, 12, 5, 6, 7, 10], [1, 12, 5, 6, 7, 8, 9]], "covered_statements_linenumbers": [1, 4, 5, 6, 7, 8, 9, 10, 12], "missing_statements_linenumbers": [], "covered_prime_paths_linenumbers": [[8, 7, 10], [8, 9, 7, 10], [9, 7, 8], [1, 12, 5, 6, 7, 10], [1, 12, 5, 6, 7, 8, 9]], "missing_prime_paths_linenumbers": [], "num_total_prime_paths": 5, "num_covered_paths": 5, "prime_path_coverage": 1.0, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_78__1_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_78__1_CFG.dot"}
{"humaneval_id": "HumanEval_84__1", "python_file": "HumanEval_84__1/main.py", "input_file": "HumanEval_84__1/input.txt", "prime_paths_nodes": [["1", "6", "3"]], "prime_paths_statements": [["from typing import *\\ldef solve(N):...\\lsolve(147)\\l", "solve", "return bin(sum(int(i) for i in str(N)))[2:]\\l"]], "prime_paths_linenumbers": [[1, 7, 5]], "covered_statements_linenumbers": [1, 4, 5, 7], "missing_statements_linenumbers": [], "covered_prime_paths_linenumbers": [[1, 7, 5]], "missing_prime_paths_linenumbers": [], "num_total_prime_paths": 1, "num_covered_paths": 1, "prime_path_coverage": 1.0, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_84__1_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_84__1_CFG.dot"}
{"humaneval_id": "HumanEval_109__1", "python_file": "HumanEval_109__1/main.py", "input_file": "HumanEval_109__1/input.txt", "prime_paths_nodes": [["14", "11", "15"], ["1", "21", "3", "5"], ["1", "21", "3", "6", "11", "15"], ["1", "21", "3", "6", "11", "14", "16"]], "prime_paths_statements": [["if my_arr[i] != sorted_array[i]:\\l", "for i in range(len(arr)):\\l", "return True\\l"], ["from typing import *\\ldef move_one_ball(arr):...\\lmove_one_ball([3, 5, 4, 1, 2])\\l", "move_one_ball", "if len(arr) == 0:\\l", "return True\\l"], ["from typing import *\\ldef move_one_ball(arr):...\\lmove_one_ball([3, 5, 4, 1, 2])\\l", "move_one_ball", "if len(arr) == 0:\\l", "sorted_array = sorted(arr)\\lmy_arr = []\\lmin_value = min(arr)\\lmin_index = arr.index(min_value)\\lmy_arr = arr[min_index:] + arr[0:min_index]\\l", "for i in range(len(arr)):\\l", "return True\\l"], ["from typing import *\\ldef move_one_ball(arr):...\\lmove_one_ball([3, 5, 4, 1, 2])\\l", "move_one_ball", "if len(arr) == 0:\\l", "sorted_array = sorted(arr)\\lmy_arr = []\\lmin_value = min(arr)\\lmin_index = arr.index(min_value)\\lmy_arr = arr[min_index:] + arr[0:min_index]\\l", "for i in range(len(arr)):\\l", "if my_arr[i] != sorted_array[i]:\\l", "return False\\l"]], "prime_paths_linenumbers": [[14, 13, 16], [1, 18, 5, 6], [1, 18, 5, 7, 8, 10, 11, 12, 13, 16], [1, 18, 5, 7, 8, 10, 11, 12, 13, 14, 15]], "covered_statements_linenumbers": [1, 4, 5, 7, 8, 10, 11, 12, 13, 14, 15, 18], "missing_statements_linenumbers": [6, 16], "covered_prime_paths_linenumbers": [[1, 18, 5, 7, 8, 10, 11, 12, 13, 14, 15]], "missing_prime_paths_linenumbers": [[14, 13, 16], [1, 18, 5, 6], [1, 18, 5, 7, 8, 10, 11, 12, 13, 16]], "num_total_prime_paths": 4, "num_covered_paths": 1, "prime_path_coverage": 0.25, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_109__1_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_109__1_CFG.dot"}
{"humaneval_id": "HumanEval_84__0", "python_file": "HumanEval_84__0/main.py", "input_file": "HumanEval_84__0/input.txt", "prime_paths_nodes": [["1", "6", "3"]], "prime_paths_statements": [["from typing import *\\ldef solve(N):...\\lsolve(963)\\l", "solve", "return bin(sum(int(i) for i in str(N)))[2:]\\l"]], "prime_paths_linenumbers": [[1, 7, 5]], "covered_statements_linenumbers": [1, 4, 5, 7], "missing_statements_linenumbers": [], "covered_prime_paths_linenumbers": [[1, 7, 5]], "missing_prime_paths_linenumbers": [], "num_total_prime_paths": 1, "num_covered_paths": 1, "prime_path_coverage": 1.0, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_84__0_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_84__0_CFG.dot"}
{"humaneval_id": "HumanEval_24", "python_file": "HumanEval_24/main.py", "input_file": "HumanEval_24/input.txt", "prime_paths_nodes": [["6", "3"], ["1", "12", "3", "6", "8"]], "prime_paths_statements": [["if n % i == 0:\\l", "for i in reversed(range(n)):\\l"], ["from typing import *\\ldef largest_divisor(n: int) ->int:...\\llargest_divisor(3)\\l", "largest_divisor", "for i in reversed(range(n)):\\l", "if n % i == 0:\\l", "return i\\l"]], "prime_paths_linenumbers": [[4, 3], [1, 7, 3, 4, 5]], "covered_statements_linenumbers": [1, 2, 3, 4, 5, 7], "missing_statements_linenumbers": [], "covered_prime_paths_linenumbers": [[4, 3], [1, 7, 3, 4, 5]], "missing_prime_paths_linenumbers": [], "num_total_prime_paths": 2, "num_covered_paths": 2, "prime_path_coverage": 1.0, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_24_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_24_CFG.dot"}
{"humaneval_id": "HumanEval_93__1", "python_file": "HumanEval_93__1/main.py", "input_file": "HumanEval_93__1/input.txt", "prime_paths_nodes": [["1", "11", "3", "8"]], "prime_paths_statements": [["from typing import *\\ldef encode(message):...\\lencode('I DoNt KnOw WhAt tO ...')\\l", "encode", "vowels = 'aeiouAEIOU'\\lvowels_replace = dict([(i, chr(ord(i) + 2)) for i in vowels])\\lmessage = message.swapcase()\\l", "return ''.join([(vowels_replace[i] if i in vowels else i) for i in message])\\l"]], "prime_paths_linenumbers": [[1, 10, 5, 6, 7, 8]], "covered_statements_linenumbers": [1, 4, 5, 6, 7, 8, 10], "missing_statements_linenumbers": [], "covered_prime_paths_linenumbers": [[1, 10, 5, 6, 7, 8]], "missing_prime_paths_linenumbers": [], "num_total_prime_paths": 1, "num_covered_paths": 1, "prime_path_coverage": 1.0, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_93__1_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_93__1_CFG.dot"}
{"humaneval_id": "HumanEval_11", "python_file": "HumanEval_11/main.py", "input_file": "HumanEval_11/input.txt", "prime_paths_nodes": [["5", "6"], ["5", "8"], ["1", "15", "3", "12"]], "prime_paths_statements": [["if i == j:\\l", "return '0'\\l"], ["if i == j:\\l", "return '1'\\l"], ["from typing import *\\ldef string_xor(a: str, b: str) ->str:...\\lstring_xor('111000', '101010')\\l", "string_xor", "def xor(i, j):...\\l", "return ''.join(xor(x, y) for x, y in zip(a, b))\\l"]], "prime_paths_linenumbers": [[4, 5], [4, 7], [1, 11, 3, 9]], "covered_statements_linenumbers": [1, 2, 3, 4, 5, 7, 9, 11], "missing_statements_linenumbers": [], "covered_prime_paths_linenumbers": [[4, 5], [4, 7], [1, 11, 3, 9]], "missing_prime_paths_linenumbers": [], "num_total_prime_paths": 3, "num_covered_paths": 3, "prime_path_coverage": 1.0, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_11_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_11_CFG.dot"}
{"humaneval_id": "HumanEval_8__0", "python_file": "HumanEval_8__0/main.py", "input_file": "HumanEval_8__0/input.txt", "prime_paths_nodes": [["5", "4", "6"], ["1", "9", "3", "4", "5"], ["1", "9", "3", "4", "6"]], "prime_paths_statements": [["sum_value += n\\lprod_value *= n\\l", "for n in numbers:\\l", "return sum_value, prod_value\\l"], ["from typing import *\\ldef sum_product(numbers: List[int]) ->Tuple[int, int]:...\\lsum_product([])\\l", "sum_product", "sum_value = 0\\lprod_value = 1\\l", "for n in numbers:\\l", "sum_value += n\\lprod_value *= n\\l"], ["from typing import *\\ldef sum_product(numbers: List[int]) ->Tuple[int, int]:...\\lsum_product([])\\l", "sum_product", "sum_value = 0\\lprod_value = 1\\l", "for n in numbers:\\l", "return sum_value, prod_value\\l"]], "prime_paths_linenumbers": [[9, 10, 8, 11], [1, 13, 5, 6, 8, 9, 10], [1, 13, 5, 6, 8, 11]], "covered_statements_linenumbers": [1, 4, 5, 6, 8, 11, 13], "missing_statements_linenumbers": [9, 10], "covered_prime_paths_linenumbers": [[1, 13, 5, 6, 8, 11]], "missing_prime_paths_linenumbers": [[9, 10, 8, 11], [1, 13, 5, 6, 8, 9, 10]], "num_total_prime_paths": 3, "num_covered_paths": 1, "prime_path_coverage": 0.33, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_8__0_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_8__0_CFG.dot"}
{"humaneval_id": "HumanEval_65__0", "python_file": "HumanEval_65__0/main.py", "input_file": "HumanEval_65__0/input.txt", "prime_paths_nodes": [["1", "13", "3", "5", "7"], ["1", "13", "3", "5", "9"]], "prime_paths_statements": [["from typing import *\\ldef circular_shift(x, shift):...\\lcircular_shift(97, 8)\\l", "circular_shift", "s = str(x)\\l", "if shift > len(s):\\l", "return s[::-1]\\l"], ["from typing import *\\ldef circular_shift(x, shift):...\\lcircular_shift(97, 8)\\l", "circular_shift", "s = str(x)\\l", "if shift > len(s):\\l", "return s[len(s) - shift:] + s[:len(s) - shift]\\l"]], "prime_paths_linenumbers": [[1, 11, 5, 6, 7], [1, 11, 5, 6, 9]], "covered_statements_linenumbers": [1, 4, 5, 6, 7, 11], "missing_statements_linenumbers": [9], "covered_prime_paths_linenumbers": [[1, 11, 5, 6, 7]], "missing_prime_paths_linenumbers": [[1, 11, 5, 6, 9]], "num_total_prime_paths": 2, "num_covered_paths": 1, "prime_path_coverage": 0.5, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_65__0_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_65__0_CFG.dot"}
{"humaneval_id": "HumanEval_115__0", "python_file": "HumanEval_115__0/main.py", "input_file": "HumanEval_115__0/input.txt", "prime_paths_nodes": [["1", "6", "3"]], "prime_paths_statements": [["from typing import *\\limport math\\ldef max_fill(grid, capacity):...\\lmax_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\\l", "max_fill", "return sum([math.ceil(sum(arr) / capacity) for arr in grid])\\l"]], "prime_paths_linenumbers": [[1, 8, 6]], "covered_statements_linenumbers": [1, 2, 5, 6, 8], "missing_statements_linenumbers": [], "covered_prime_paths_linenumbers": [[1, 8, 6]], "missing_prime_paths_linenumbers": [], "num_total_prime_paths": 1, "num_covered_paths": 1, "prime_path_coverage": 1.0, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_115__0_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_115__0_CFG.dot"}
{"humaneval_id": "HumanEval_111", "python_file": "HumanEval_111/main.py", "input_file": "HumanEval_111/input.txt", "prime_paths_nodes": [["6", "5", "7", "11", "12"], ["6", "5", "7", "12"], ["6", "8", "5", "7", "11", "12"], ["6", "8", "5", "7", "12"], ["6", "5", "7", "11", "13", "16"], ["6", "8", "5", "7", "11", "13", "16"], ["8", "5", "6"], ["13", "11", "12"], ["13", "16", "11", "12"], ["16", "11", "13"], ["1", "20", "3", "5", "6", "8"], ["1", "20", "3", "5", "7", "11", "12"], ["1", "20", "3", "5", "7", "12"], ["1", "20", "3", "5", "7", "11", "13", "16"]], "prime_paths_statements": [["if list1.count(i) > t and i != '':\\l", "for i in list1:\\l", "if t > 0:\\l", "for i in list1:\\l", "return dict1\\l"], ["if list1.count(i) > t and i != '':\\l", "for i in list1:\\l", "if t > 0:\\l", "return dict1\\l"], ["if list1.count(i) > t and i != '':\\l", "t = list1.count(i)\\l", "for i in list1:\\l", "if t > 0:\\l", "for i in list1:\\l", "return dict1\\l"], ["if list1.count(i) > t and i != '':\\l", "t = list1.count(i)\\l", "for i in list1:\\l", "if t > 0:\\l", "return dict1\\l"], ["if list1.count(i) > t and i != '':\\l", "for i in list1:\\l", "if t > 0:\\l", "for i in list1:\\l", "if list1.count(i) == t:\\l", "dict1[i] = t\\l"], ["if list1.count(i) > t and i != '':\\l", "t = list1.count(i)\\l", "for i in list1:\\l", "if t > 0:\\l", "for i in list1:\\l", "if list1.count(i) == t:\\l", "dict1[i] = t\\l"], ["t = list1.count(i)\\l", "for i in list1:\\l", "if list1.count(i) > t and i != '':\\l"], ["if list1.count(i) == t:\\l", "for i in list1:\\l", "return dict1\\l"], ["if list1.count(i) == t:\\l", "dict1[i] = t\\l", "for i in list1:\\l", "return dict1\\l"], ["dict1[i] = t\\l", "for i in list1:\\l", "if list1.count(i) == t:\\l"], ["from typing import *\\ldef histogram(test):...\\lhistogram('a b b a')\\l", "histogram", "dict1 = {}\\llist1 = test.split(' ')\\lt = 0\\l", "for i in list1:\\l", "if list1.count(i) > t and i != '':\\l", "t = list1.count(i)\\l"], ["from typing import *\\ldef histogram(test):...\\lhistogram('a b b a')\\l", "histogram", "dict1 = {}\\llist1 = test.split(' ')\\lt = 0\\l", "for i in list1:\\l", "if t > 0:\\l", "for i in list1:\\l", "return dict1\\l"], ["from typing import *\\ldef histogram(test):...\\lhistogram('a b b a')\\l", "histogram", "dict1 = {}\\llist1 = test.split(' ')\\lt = 0\\l", "for i in list1:\\l", "if t > 0:\\l", "return dict1\\l"], ["from typing import *\\ldef histogram(test):...\\lhistogram('a b b a')\\l", "histogram", "dict1 = {}\\llist1 = test.split(' ')\\lt = 0\\l", "for i in list1:\\l", "if t > 0:\\l", "for i in list1:\\l", "if list1.count(i) == t:\\l", "dict1[i] = t\\l"]], "prime_paths_linenumbers": [[8, 7, 10, 11, 15], [8, 7, 10, 15], [8, 9, 7, 10, 11, 15], [8, 9, 7, 10, 15], [8, 7, 10, 11, 12, 14], [8, 9, 7, 10, 11, 12, 14], [9, 7, 8], [12, 11, 15], [12, 14, 11, 15], [14, 11, 12], [1, 17, 3, 4, 5, 7, 8, 9], [1, 17, 3, 4, 5, 7, 10, 11, 15], [1, 17, 3, 4, 5, 7, 10, 15], [1, 17, 3, 4, 5, 7, 10, 11, 12, 14]], "covered_statements_linenumbers": [1, 2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 14, 15, 17], "missing_statements_linenumbers": [], "covered_prime_paths_linenumbers": [[8, 7, 10, 11, 15], [8, 7, 10, 15], [8, 9, 7, 10, 11, 15], [8, 9, 7, 10, 15], [8, 7, 10, 11, 12, 14], [8, 9, 7, 10, 11, 12, 14], [9, 7, 8], [12, 11, 15], [12, 14, 11, 15], [14, 11, 12], [1, 17, 3, 4, 5, 7, 8, 9], [1, 17, 3, 4, 5, 7, 10, 11, 15], [1, 17, 3, 4, 5, 7, 10, 15], [1, 17, 3, 4, 5, 7, 10, 11, 12, 14]], "missing_prime_paths_linenumbers": [], "num_total_prime_paths": 14, "num_covered_paths": 14, "prime_path_coverage": 1.0, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_111_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_111_CFG.dot"}
{"humaneval_id": "HumanEval_47", "python_file": "HumanEval_47/main.py", "input_file": "HumanEval_47/input.txt", "prime_paths_nodes": [["1", "13", "3", "5", "7"], ["1", "13", "3", "5", "9"]], "prime_paths_statements": [["from typing import *\\ldef median(l: list):...\\lmedian([3, 1, 2, 4, 5])\\l", "median", "l = sorted(l)\\l", "if len(l) % 2 == 1:\\l", "return l[len(l) // 2]\\l"], ["from typing import *\\ldef median(l: list):...\\lmedian([3, 1, 2, 4, 5])\\l", "median", "l = sorted(l)\\l", "if len(l) % 2 == 1:\\l", "return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2.0\\l"]], "prime_paths_linenumbers": [[1, 9, 3, 4, 5], [1, 9, 3, 4, 7]], "covered_statements_linenumbers": [1, 2, 3, 4, 5, 9], "missing_statements_linenumbers": [7], "covered_prime_paths_linenumbers": [[1, 9, 3, 4, 5]], "missing_prime_paths_linenumbers": [[1, 9, 3, 4, 7]], "num_total_prime_paths": 2, "num_covered_paths": 1, "prime_path_coverage": 0.5, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_47_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_47_CFG.dot"}
{"humaneval_id": "HumanEval_147__1", "python_file": "HumanEval_147__1/main.py", "input_file": "HumanEval_147__1/input.txt", "prime_paths_nodes": [["13", "10", "7", "5", "8"], ["13", "15", "10", "7", "5", "8"], ["15", "10", "13"], ["1", "19", "3", "5", "8"], ["1", "19", "3", "5", "7", "10", "13", "15"]], "prime_paths_statements": [["if (A[i] + A[j] + A[k]) % 3 == 0:\\l", "for k in range(j + 1, n):\\l", "for j in range(i + 1, n):\\l", "for i in range(n):\\l", "return len(ans)\\l"], ["if (A[i] + A[j] + A[k]) % 3 == 0:\\l", "ans += [(A[i], A[j], A[k])]\\l", "for k in range(j + 1, n):\\l", "for j in range(i + 1, n):\\l", "for i in range(n):\\l", "return len(ans)\\l"], ["ans += [(A[i], A[j], A[k])]\\l", "for k in range(j + 1, n):\\l", "if (A[i] + A[j] + A[k]) % 3 == 0:\\l"], ["from typing import *\\ldef get_max_triples(n):...\\lget_max_triples(6)\\l", "get_max_triples", "A = [(i * i - i + 1) for i in range(1, n + 1)]\\lans = []\\l", "for i in range(n):\\l", "return len(ans)\\l"], ["from typing import *\\ldef get_max_triples(n):...\\lget_max_triples(6)\\l", "get_max_triples", "A = [(i * i - i + 1) for i in range(1, n + 1)]\\lans = []\\l", "for i in range(n):\\l", "for j in range(i + 1, n):\\l", "for k in range(j + 1, n):\\l", "if (A[i] + A[j] + A[k]) % 3 == 0:\\l", "ans += [(A[i], A[j], A[k])]\\l"]], "prime_paths_linenumbers": [[10, 9, 8, 7, 12], [10, 11, 9, 8, 7, 12], [11, 9, 10], [1, 14, 5, 6, 7, 12], [1, 14, 5, 6, 7, 8, 9, 10, 11]], "covered_statements_linenumbers": [1, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14], "missing_statements_linenumbers": [], "covered_prime_paths_linenumbers": [[10, 9, 8, 7, 12], [10, 11, 9, 8, 7, 12], [11, 9, 10], [1, 14, 5, 6, 7, 12], [1, 14, 5, 6, 7, 8, 9, 10, 11]], "missing_prime_paths_linenumbers": [], "num_total_prime_paths": 5, "num_covered_paths": 5, "prime_path_coverage": 1.0, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_147__1_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_147__1_CFG.dot"}
{"humaneval_id": "HumanEval_148", "python_file": "HumanEval_148/main.py", "input_file": "HumanEval_148/input.txt", "prime_paths_nodes": [["1", "17", "3", "4", "5"], ["1", "17", "3", "4", "6", "10", "11"], ["1", "17", "3", "4", "6", "10", "13"]], "prime_paths_statements": [["from typing import *\\ldef bf(planet1, planet2):...\\lbf('Jupiter', 'Neptune')\\l", "bf", "planet_names = ('Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\\l    'Uranus', 'Neptune')\\l", "if planet1 not in planet_names or planet2 not in planet_names or planet1 == planet2:\\l", "return ()\\l"], ["from typing import *\\ldef bf(planet1, planet2):...\\lbf('Jupiter', 'Neptune')\\l", "bf", "planet_names = ('Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\\l    'Uranus', 'Neptune')\\l", "if planet1 not in planet_names or planet2 not in planet_names or planet1 == planet2:\\l", "planet1_index = planet_names.index(planet1)\\lplanet2_index = planet_names.index(planet2)\\l", "if planet1_index < planet2_index:\\l", "return planet_names[planet1_index + 1:planet2_index]\\l"], ["from typing import *\\ldef bf(planet1, planet2):...\\lbf('Jupiter', 'Neptune')\\l", "bf", "planet_names = ('Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\\l    'Uranus', 'Neptune')\\l", "if planet1 not in planet_names or planet2 not in planet_names or planet1 == planet2:\\l", "planet1_index = planet_names.index(planet1)\\lplanet2_index = planet_names.index(planet2)\\l", "if planet1_index < planet2_index:\\l", "return planet_names[planet2_index + 1:planet1_index]\\l"]], "prime_paths_linenumbers": [[1, 13, 3, 4, 5], [1, 13, 3, 4, 6, 7, 8, 9], [1, 13, 3, 4, 6, 7, 8, 11]], "covered_statements_linenumbers": [1, 2, 3, 4, 6, 7, 8, 9, 13], "missing_statements_linenumbers": [5, 11], "covered_prime_paths_linenumbers": [[1, 13, 3, 4, 6, 7, 8, 9]], "missing_prime_paths_linenumbers": [[1, 13, 3, 4, 5], [1, 13, 3, 4, 6, 7, 8, 11]], "num_total_prime_paths": 3, "num_covered_paths": 1, "prime_path_coverage": 0.33, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_148_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_148_CFG.dot"}
{"humaneval_id": "HumanEval_134", "python_file": "HumanEval_134/main.py", "input_file": "HumanEval_134/input.txt", "prime_paths_nodes": [["1", "8", "3", "5"]], "prime_paths_statements": [["from typing import *\\ldef check_if_last_char_is_a_letter(txt):...\\lcheck_if_last_char_is_a_letter('apple')\\l", "check_if_last_char_is_a_letter", "check = txt.split(' ')[-1]\\l", "return True if len(check) == 1 and 97 <= ord(check.lower()) <= 122 else False\\l"]], "prime_paths_linenumbers": [[1, 7, 4, 5]], "covered_statements_linenumbers": [1, 2, 4, 5, 7], "missing_statements_linenumbers": [], "covered_prime_paths_linenumbers": [[1, 7, 4, 5]], "missing_prime_paths_linenumbers": [], "num_total_prime_paths": 1, "num_covered_paths": 1, "prime_path_coverage": 1.0, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_134_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_134_CFG.dot"}
{"humaneval_id": "HumanEval_135__1", "python_file": "HumanEval_135__1/main.py", "input_file": "HumanEval_135__1/input.txt", "prime_paths_nodes": [["5", "7", "8", "4", "6"], ["5", "8", "4", "6"], ["7", "8", "4", "5"], ["8", "4", "5", "7"], ["1", "11", "3", "4", "6"], ["1", "11", "3", "4", "5", "7", "8"], ["1", "11", "3", "4", "5", "8"]], "prime_paths_statements": [["if arr[i] < arr[i - 1]:\\l", "ind = i\\l", "i += 1\\l", "while i < len(arr):\\l", "return ind\\l"], ["if arr[i] < arr[i - 1]:\\l", "i += 1\\l", "while i < len(arr):\\l", "return ind\\l"], ["ind = i\\l", "i += 1\\l", "while i < len(arr):\\l", "if arr[i] < arr[i - 1]:\\l"], ["i += 1\\l", "while i < len(arr):\\l", "if arr[i] < arr[i - 1]:\\l", "ind = i\\l"], ["from typing import *\\ldef can_arrange(arr):...\\lcan_arrange([4, 8, 5, 7, 3])\\l", "can_arrange", "ind = -1\\li = 1\\l", "while i < len(arr):\\l", "return ind\\l"], ["from typing import *\\ldef can_arrange(arr):...\\lcan_arrange([4, 8, 5, 7, 3])\\l", "can_arrange", "ind = -1\\li = 1\\l", "while i < len(arr):\\l", "if arr[i] < arr[i - 1]:\\l", "ind = i\\l", "i += 1\\l"], ["from typing import *\\ldef can_arrange(arr):...\\lcan_arrange([4, 8, 5, 7, 3])\\l", "can_arrange", "ind = -1\\li = 1\\l", "while i < len(arr):\\l", "if arr[i] < arr[i - 1]:\\l", "i += 1\\l"]], "prime_paths_linenumbers": [[8, 9, 10, 7, 11], [8, 10, 7, 11], [9, 10, 7, 8], [10, 7, 8, 9], [1, 13, 5, 6, 7, 11], [1, 13, 5, 6, 7, 8, 9, 10], [1, 13, 5, 6, 7, 8, 10]], "covered_statements_linenumbers": [1, 4, 5, 6, 7, 8, 9, 10, 11, 13], "missing_statements_linenumbers": [], "covered_prime_paths_linenumbers": [[8, 9, 10, 7, 11], [8, 10, 7, 11], [9, 10, 7, 8], [10, 7, 8, 9], [1, 13, 5, 6, 7, 11], [1, 13, 5, 6, 7, 8, 9, 10], [1, 13, 5, 6, 7, 8, 10]], "missing_prime_paths_linenumbers": [], "num_total_prime_paths": 7, "num_covered_paths": 7, "prime_path_coverage": 1.0, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_135__1_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_135__1_CFG.dot"}
{"humaneval_id": "HumanEval_77__1", "python_file": "HumanEval_77__1/main.py", "input_file": "HumanEval_77__1/input.txt", "prime_paths_nodes": [["1", "8", "3", "5"]], "prime_paths_statements": [["from typing import *\\ldef iscube(a):...\\liscube(0)\\l", "iscube", "a = abs(a)\\l", "return int(round(a ** (1.0 / 3))) ** 3 == a\\l"]], "prime_paths_linenumbers": [[1, 8, 5, 6]], "covered_statements_linenumbers": [1, 4, 5, 6, 8], "missing_statements_linenumbers": [], "covered_prime_paths_linenumbers": [[1, 8, 5, 6]], "missing_prime_paths_linenumbers": [], "num_total_prime_paths": 1, "num_covered_paths": 1, "prime_path_coverage": 1.0, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_77__1_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_77__1_CFG.dot"}
{"humaneval_id": "HumanEval_36", "python_file": "HumanEval_36/main.py", "input_file": "HumanEval_36/input.txt", "prime_paths_nodes": [["6", "4", "7", "14", "15"], ["6", "8", "4", "7", "14", "15"], ["6", "4", "7", "14", "16"], ["6", "8", "4", "7", "14", "16"], ["8", "4", "6"], ["15", "14", "16"], ["1", "19", "3", "4", "6", "8"], ["1", "19", "3", "4", "7", "14", "15"], ["1", "19", "3", "4", "7", "14", "16"]], "prime_paths_statements": [["if i % 11 == 0 or i % 13 == 0:\\l", "for i in range(n):\\l", "s = ''.join(list(map(str, ns)))\\lans = 0\\l", "for c in s:\\l", "ans += c == '7'\\l"], ["if i % 11 == 0 or i % 13 == 0:\\l", "ns.append(i)\\l", "for i in range(n):\\l", "s = ''.join(list(map(str, ns)))\\lans = 0\\l", "for c in s:\\l", "ans += c == '7'\\l"], ["if i % 11 == 0 or i % 13 == 0:\\l", "for i in range(n):\\l", "s = ''.join(list(map(str, ns)))\\lans = 0\\l", "for c in s:\\l", "return ans\\l"], ["if i % 11 == 0 or i % 13 == 0:\\l", "ns.append(i)\\l", "for i in range(n):\\l", "s = ''.join(list(map(str, ns)))\\lans = 0\\l", "for c in s:\\l", "return ans\\l"], ["ns.append(i)\\l", "for i in range(n):\\l", "if i % 11 == 0 or i % 13 == 0:\\l"], ["ans += c == '7'\\l", "for c in s:\\l", "return ans\\l"], ["from typing import *\\ldef fizz_buzz(n: int):...\\lfizz_buzz(50)\\l", "fizz_buzz", "ns = []\\l", "for i in range(n):\\l", "if i % 11 == 0 or i % 13 == 0:\\l", "ns.append(i)\\l"], ["from typing import *\\ldef fizz_buzz(n: int):...\\lfizz_buzz(50)\\l", "fizz_buzz", "ns = []\\l", "for i in range(n):\\l", "s = ''.join(list(map(str, ns)))\\lans = 0\\l", "for c in s:\\l", "ans += c == '7'\\l"], ["from typing import *\\ldef fizz_buzz(n: int):...\\lfizz_buzz(50)\\l", "fizz_buzz", "ns = []\\l", "for i in range(n):\\l", "s = ''.join(list(map(str, ns)))\\lans = 0\\l", "for c in s:\\l", "return ans\\l"]], "prime_paths_linenumbers": [[5, 4, 7, 8, 9, 10], [5, 6, 4, 7, 8, 9, 10], [5, 4, 7, 8, 9, 11], [5, 6, 4, 7, 8, 9, 11], [6, 4, 5], [10, 9, 11], [1, 13, 3, 4, 5, 6], [1, 13, 3, 4, 7, 8, 9, 10], [1, 13, 3, 4, 7, 8, 9, 11]], "covered_statements_linenumbers": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13], "missing_statements_linenumbers": [], "covered_prime_paths_linenumbers": [[5, 4, 7, 8, 9, 10], [5, 6, 4, 7, 8, 9, 10], [5, 4, 7, 8, 9, 11], [5, 6, 4, 7, 8, 9, 11], [6, 4, 5], [10, 9, 11], [1, 13, 3, 4, 5, 6], [1, 13, 3, 4, 7, 8, 9, 10], [1, 13, 3, 4, 7, 8, 9, 11]], "missing_prime_paths_linenumbers": [], "num_total_prime_paths": 9, "num_covered_paths": 9, "prime_path_coverage": 1.0, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_36_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_36_CFG.dot"}
{"humaneval_id": "HumanEval_86__0", "python_file": "HumanEval_86__0/main.py", "input_file": "HumanEval_86__0/input.txt", "prime_paths_nodes": [["1", "6", "3"]], "prime_paths_statements": [["from typing import *\\ldef anti_shuffle(s):...\\lanti_shuffle('')\\l", "anti_shuffle", "return ' '.join([''.join(sorted(list(i)...' ')])\\l"]], "prime_paths_linenumbers": [[1, 7, 5]], "covered_statements_linenumbers": [1, 4, 5, 7], "missing_statements_linenumbers": [], "covered_prime_paths_linenumbers": [[1, 7, 5]], "missing_prime_paths_linenumbers": [], "num_total_prime_paths": 1, "num_covered_paths": 1, "prime_path_coverage": 1.0, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_86__0_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_86__0_CFG.dot"}
{"humaneval_id": "HumanEval_0__1", "python_file": "HumanEval_0__1/main.py", "input_file": "HumanEval_0__1/input.txt", "prime_paths_nodes": [["8", "5", "3", "6"], ["8", "10", "13", "5", "3", "6"], ["10", "13", "5", "8"], ["13", "5", "8", "10"], ["1", "19", "3", "6"], ["1", "19", "3", "5", "8", "10", "13", "14"]], "prime_paths_statements": [["if idx != idx2:\\l", "for idx2, elem2 in enumerate(numbers):\\l", "for idx, elem in enumerate(numbers):\\l", "return False\\l"], ["if idx != idx2:\\l", "distance = abs(elem - elem2)\\l", "if distance < threshold:\\l", "for idx2, elem2 in enumerate(numbers):\\l", "for idx, elem in enumerate(numbers):\\l", "return False\\l"], ["distance = abs(elem - elem2)\\l", "if distance < threshold:\\l", "for idx2, elem2 in enumerate(numbers):\\l", "if idx != idx2:\\l"], ["if distance < threshold:\\l", "for idx2, elem2 in enumerate(numbers):\\l", "if idx != idx2:\\l", "distance = abs(elem - elem2)\\l"], ["from typing import *\\ldef has_close_elements(numbers: List[float], threshold: float) ->bool:...\\lhas_close_elements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5)\\l", "has_close_elements", "for idx, elem in enumerate(numbers):\\l", "return False\\l"], ["from typing import *\\ldef has_close_elements(numbers: List[float], threshold: float) ->bool:...\\lhas_close_elements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5)\\l", "has_close_elements", "for idx, elem in enumerate(numbers):\\l", "for idx2, elem2 in enumerate(numbers):\\l", "if idx != idx2:\\l", "distance = abs(elem - elem2)\\l", "if distance < threshold:\\l", "return True\\l"]], "prime_paths_linenumbers": [[7, 6, 5, 12], [7, 8, 9, 6, 5, 12], [8, 9, 6, 7], [9, 6, 7, 8], [1, 14, 5, 12], [1, 14, 5, 6, 7, 8, 9, 10]], "covered_statements_linenumbers": [1, 4, 5, 6, 7, 8, 9, 12, 14], "missing_statements_linenumbers": [10], "covered_prime_paths_linenumbers": [[7, 6, 5, 12], [7, 8, 9, 6, 5, 12], [8, 9, 6, 7], [9, 6, 7, 8], [1, 14, 5, 12]], "missing_prime_paths_linenumbers": [[1, 14, 5, 6, 7, 8, 9, 10]], "num_total_prime_paths": 6, "num_covered_paths": 5, "prime_path_coverage": 0.83, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_0__1_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_0__1_CFG.dot"}
{"humaneval_id": "HumanEval_80__0", "python_file": "HumanEval_80__0/main.py", "input_file": "HumanEval_80__0/input.txt", "prime_paths_nodes": [["10", "6", "11"], ["1", "17", "3", "5"], ["1", "17", "3", "6", "11"], ["1", "17", "3", "6", "10", "12"]], "prime_paths_statements": [["if s[i] == s[i + 1] or s[i + 1] == s[i + 2] or s[i] == s[i + 2]:\\l", "for i in range(len(s) - 2):\\l", "return True\\l"], ["from typing import *\\ldef is_happy(s):...\\lis_happy('aabb')\\l", "is_happy", "if len(s) < 3:\\l", "return False\\l"], ["from typing import *\\ldef is_happy(s):...\\lis_happy('aabb')\\l", "is_happy", "if len(s) < 3:\\l", "for i in range(len(s) - 2):\\l", "return True\\l"], ["from typing import *\\ldef is_happy(s):...\\lis_happy('aabb')\\l", "is_happy", "if len(s) < 3:\\l", "for i in range(len(s) - 2):\\l", "if s[i] == s[i + 1] or s[i + 1] == s[i + 2] or s[i] == s[i + 2]:\\l", "return False\\l"]], "prime_paths_linenumbers": [[10, 8, 12], [1, 14, 5, 6], [1, 14, 5, 8, 12], [1, 14, 5, 8, 10, 11]], "covered_statements_linenumbers": [1, 4, 5, 8, 10, 11, 14], "missing_statements_linenumbers": [6, 12], "covered_prime_paths_linenumbers": [[1, 14, 5, 8, 10, 11]], "missing_prime_paths_linenumbers": [[10, 8, 12], [1, 14, 5, 6], [1, 14, 5, 8, 12]], "num_total_prime_paths": 4, "num_covered_paths": 1, "prime_path_coverage": 0.25, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_80__0_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_80__0_CFG.dot"}
{"humaneval_id": "HumanEval_154__0", "python_file": "HumanEval_154__0/main.py", "input_file": "HumanEval_154__0/input.txt", "prime_paths_nodes": [["11", "8", "5", "9"], ["1", "18", "3", "5", "9"], ["1", "18", "3", "5", "8", "11", "13"]], "prime_paths_statements": [["if a[i:i + l] == pat[j:j + l]:\\l", "for j in range(l + 1):\\l", "for i in range(len(a) - l + 1):\\l", "return False\\l"], ["from typing import *\\ldef cycpattern_check(a, b):...\\lcycpattern_check('winemtt', 'tinem')\\l", "cycpattern_check", "l = len(b)\\lpat = b + b\\l", "for i in range(len(a) - l + 1):\\l", "return False\\l"], ["from typing import *\\ldef cycpattern_check(a, b):...\\lcycpattern_check('winemtt', 'tinem')\\l", "cycpattern_check", "l = len(b)\\lpat = b + b\\l", "for i in range(len(a) - l + 1):\\l", "for j in range(l + 1):\\l", "if a[i:i + l] == pat[j:j + l]:\\l", "return True\\l"]], "prime_paths_linenumbers": [[9, 8, 7, 11], [1, 13, 5, 6, 7, 11], [1, 13, 5, 6, 7, 8, 9, 10]], "covered_statements_linenumbers": [1, 4, 5, 6, 7, 8, 9, 10, 13], "missing_statements_linenumbers": [11], "covered_prime_paths_linenumbers": [[1, 13, 5, 6, 7, 8, 9, 10]], "missing_prime_paths_linenumbers": [[9, 8, 7, 11], [1, 13, 5, 6, 7, 11]], "num_total_prime_paths": 3, "num_covered_paths": 1, "prime_path_coverage": 0.33, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_154__0_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_154__0_CFG.dot"}
{"humaneval_id": "HumanEval_26__1", "python_file": "HumanEval_26__1/main.py", "input_file": "HumanEval_26__1/input.txt", "prime_paths_nodes": [["1", "8", "3", "5"]], "prime_paths_statements": [["from typing import *\\ldef remove_duplicates(numbers: List[int]) ->List[int]:...\\lremove_duplicates([])\\l", "remove_duplicates", "import collections\\lc = collections.Counter(numbers)\\l", "return [n for n in numbers if c[n] <= 1]\\l"]], "prime_paths_linenumbers": [[1, 9, 5, 6, 7]], "covered_statements_linenumbers": [1, 4, 5, 6, 7, 9], "missing_statements_linenumbers": [], "covered_prime_paths_linenumbers": [[1, 9, 5, 6, 7]], "missing_prime_paths_linenumbers": [], "num_total_prime_paths": 1, "num_covered_paths": 1, "prime_path_coverage": 1.0, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_26__1_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_26__1_CFG.dot"}
{"humaneval_id": "HumanEval_94", "python_file": "HumanEval_94/main.py", "input_file": "HumanEval_94/input.txt", "prime_paths_nodes": [["5", "8", "10"], ["8", "5", "9"], ["16", "18", "19", "15", "17", "23"], ["16", "19", "15", "17", "23"], ["18", "19", "15", "16"], ["19", "15", "16", "18"], ["1", "26", "3", "15", "16", "18", "19"], ["1", "26", "3", "15", "16", "19"], ["1", "26", "3", "15", "17", "23"]], "prime_paths_statements": [["for i in range(2, int(n ** 0.5) + 1):\\l", "if n % i == 0:\\l", "return False\\l"], ["if n % i == 0:\\l", "for i in range(2, int(n ** 0.5) + 1):\\l", "return True\\l"], ["if lst[i] > maxx and isPrime(lst[i]):\\l", "maxx = lst[i]\\l", "i += 1\\l", "while i < len(lst):\\l", "result = sum(int(digit) for digit in str(maxx))\\l", "return result\\l"], ["if lst[i] > maxx and isPrime(lst[i]):\\l", "i += 1\\l", "while i < len(lst):\\l", "result = sum(int(digit) for digit in str(maxx))\\l", "return result\\l"], ["maxx = lst[i]\\l", "i += 1\\l", "while i < len(lst):\\l", "if lst[i] > maxx and isPrime(lst[i]):\\l"], ["i += 1\\l", "while i < len(lst):\\l", "if lst[i] > maxx and isPrime(lst[i]):\\l", "maxx = lst[i]\\l"], ["from typing import *\\ldef skjkasdkd(lst):...\\lskjkasdkd([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, \\l    324, 4, 3])\\l", "skjkasdkd", "def isPrime(n):...\\lmaxx = 0\\li = 0\\l", "while i < len(lst):\\l", "if lst[i] > maxx and isPrime(lst[i]):\\l", "maxx = lst[i]\\l", "i += 1\\l"], ["from typing import *\\ldef skjkasdkd(lst):...\\lskjkasdkd([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, \\l    324, 4, 3])\\l", "skjkasdkd", "def isPrime(n):...\\lmaxx = 0\\li = 0\\l", "while i < len(lst):\\l", "if lst[i] > maxx and isPrime(lst[i]):\\l", "i += 1\\l"], ["from typing import *\\ldef skjkasdkd(lst):...\\lskjkasdkd([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, \\l    324, 4, 3])\\l", "skjkasdkd", "def isPrime(n):...\\lmaxx = 0\\li = 0\\l", "while i < len(lst):\\l", "result = sum(int(digit) for digit in str(maxx))\\l", "return result\\l"]], "prime_paths_linenumbers": [[4, 5, 6], [5, 4, 8], [12, 13, 14, 11, 15, 16], [12, 14, 11, 15, 16], [13, 14, 11, 12], [14, 11, 12, 13], [1, 19, 3, 9, 10, 11, 12, 13, 14], [1, 19, 3, 9, 10, 11, 12, 14], [1, 19, 3, 9, 10, 11, 15, 16]], "covered_statements_linenumbers": [1, 2, 3, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 19], "missing_statements_linenumbers": [], "covered_prime_paths_linenumbers": [[4, 5, 6], [5, 4, 8], [12, 13, 14, 11, 15, 16], [12, 14, 11, 15, 16], [13, 14, 11, 12], [14, 11, 12, 13], [1, 19, 3, 9, 10, 11, 12, 13, 14], [1, 19, 3, 9, 10, 11, 12, 14], [1, 19, 3, 9, 10, 11, 15, 16]], "missing_prime_paths_linenumbers": [], "num_total_prime_paths": 9, "num_covered_paths": 9, "prime_path_coverage": 1.0, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_94_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_94_CFG.dot"}
{"humaneval_id": "HumanEval_117__0", "python_file": "HumanEval_117__0/main.py", "input_file": "HumanEval_117__0/input.txt", "prime_paths_nodes": [["6", "8", "12", "4", "7"], ["6", "8", "12", "16", "4", "7"], ["11", "8", "12", "4", "6"], ["11", "8", "12", "16", "4", "6"], ["11", "14", "8", "12", "4", "6"], ["11", "14", "8", "12", "16", "4", "6"], ["11", "8", "12", "4", "7"], ["11", "8", "12", "16", "4", "7"], ["11", "14", "8", "12", "4", "7"], ["11", "14", "8", "12", "16", "4", "7"], ["12", "4", "6", "8", "11", "14"], ["12", "16", "4", "6", "8", "11", "14"], ["14", "8", "11"], ["16", "4", "6", "8", "12"], ["1", "21", "3", "4", "7"], ["1", "21", "3", "4", "6", "8", "11", "14"], ["1", "21", "3", "4", "6", "8", "12", "16"]], "prime_paths_statements": [["n_consonants = 0\\l", "for i in range(0, len(word)):\\l", "if n_consonants == n:\\l", "for word in s.split():\\l", "return result\\l"], ["n_consonants = 0\\l", "for i in range(0, len(word)):\\l", "if n_consonants == n:\\l", "result.append(word)\\l", "for word in s.split():\\l", "return result\\l"], ["if word[i].lower() not in ['a', 'e', 'i', 'o', 'u']:\\l", "for i in range(0, len(word)):\\l", "if n_consonants == n:\\l", "for word in s.split():\\l", "n_consonants = 0\\l"], ["if word[i].lower() not in ['a', 'e', 'i', 'o', 'u']:\\l", "for i in range(0, len(word)):\\l", "if n_consonants == n:\\l", "result.append(word)\\l", "for word in s.split():\\l", "n_consonants = 0\\l"], ["if word[i].lower() not in ['a', 'e', 'i', 'o', 'u']:\\l", "n_consonants += 1\\l", "for i in range(0, len(word)):\\l", "if n_consonants == n:\\l", "for word in s.split():\\l", "n_consonants = 0\\l"], ["if word[i].lower() not in ['a', 'e', 'i', 'o', 'u']:\\l", "n_consonants += 1\\l", "for i in range(0, len(word)):\\l", "if n_consonants == n:\\l", "result.append(word)\\l", "for word in s.split():\\l", "n_consonants = 0\\l"], ["if word[i].lower() not in ['a', 'e', 'i', 'o', 'u']:\\l", "for i in range(0, len(word)):\\l", "if n_consonants == n:\\l", "for word in s.split():\\l", "return result\\l"], ["if word[i].lower() not in ['a', 'e', 'i', 'o', 'u']:\\l", "for i in range(0, len(word)):\\l", "if n_consonants == n:\\l", "result.append(word)\\l", "for word in s.split():\\l", "return result\\l"], ["if word[i].lower() not in ['a', 'e', 'i', 'o', 'u']:\\l", "n_consonants += 1\\l", "for i in range(0, len(word)):\\l", "if n_consonants == n:\\l", "for word in s.split():\\l", "return result\\l"], ["if word[i].lower() not in ['a', 'e', 'i', 'o', 'u']:\\l", "n_consonants += 1\\l", "for i in range(0, len(word)):\\l", "if n_consonants == n:\\l", "result.append(word)\\l", "for word in s.split():\\l", "return result\\l"], ["if n_consonants == n:\\l", "for word in s.split():\\l", "n_consonants = 0\\l", "for i in range(0, len(word)):\\l", "if word[i].lower() not in ['a', 'e', 'i', 'o', 'u']:\\l", "n_consonants += 1\\l"], ["if n_consonants == n:\\l", "result.append(word)\\l", "for word in s.split():\\l", "n_consonants = 0\\l", "for i in range(0, len(word)):\\l", "if word[i].lower() not in ['a', 'e', 'i', 'o', 'u']:\\l", "n_consonants += 1\\l"], ["n_consonants += 1\\l", "for i in range(0, len(word)):\\l", "if word[i].lower() not in ['a', 'e', 'i', 'o', 'u']:\\l"], ["result.append(word)\\l", "for word in s.split():\\l", "n_consonants = 0\\l", "for i in range(0, len(word)):\\l", "if n_consonants == n:\\l"], ["from typing import *\\ldef select_words(s, n):...\\lselect_words('Hello world', 4)\\l", "select_words", "result = []\\l", "for word in s.split():\\l", "return result\\l"], ["from typing import *\\ldef select_words(s, n):...\\lselect_words('Hello world', 4)\\l", "select_words", "result = []\\l", "for word in s.split():\\l", "n_consonants = 0\\l", "for i in range(0, len(word)):\\l", "if word[i].lower() not in ['a', 'e', 'i', 'o', 'u']:\\l", "n_consonants += 1\\l"], ["from typing import *\\ldef select_words(s, n):...\\lselect_words('Hello world', 4)\\l", "select_words", "result = []\\l", "for word in s.split():\\l", "n_consonants = 0\\l", "for i in range(0, len(word)):\\l", "if n_consonants == n:\\l", "result.append(word)\\l"]], "prime_paths_linenumbers": [[7, 8, 11, 6, 13], [7, 8, 11, 12, 6, 13], [9, 8, 11, 6, 7], [9, 8, 11, 12, 6, 7], [9, 10, 8, 11, 6, 7], [9, 10, 8, 11, 12, 6, 7], [9, 8, 11, 6, 13], [9, 8, 11, 12, 6, 13], [9, 10, 8, 11, 6, 13], [9, 10, 8, 11, 12, 6, 13], [11, 6, 7, 8, 9, 10], [11, 12, 6, 7, 8, 9, 10], [10, 8, 9], [12, 6, 7, 8, 11], [1, 15, 5, 6, 13], [1, 15, 5, 6, 7, 8, 9, 10], [1, 15, 5, 6, 7, 8, 11, 12]], "covered_statements_linenumbers": [1, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15], "missing_statements_linenumbers": [], "covered_prime_paths_linenumbers": [[7, 8, 11, 6, 13], [7, 8, 11, 12, 6, 13], [9, 8, 11, 6, 7], [9, 8, 11, 12, 6, 7], [9, 10, 8, 11, 6, 7], [9, 10, 8, 11, 12, 6, 7], [9, 8, 11, 6, 13], [9, 8, 11, 12, 6, 13], [9, 10, 8, 11, 6, 13], [9, 10, 8, 11, 12, 6, 13], [11, 6, 7, 8, 9, 10], [11, 12, 6, 7, 8, 9, 10], [10, 8, 9], [12, 6, 7, 8, 11], [1, 15, 5, 6, 13], [1, 15, 5, 6, 7, 8, 9, 10], [1, 15, 5, 6, 7, 8, 11, 12]], "missing_prime_paths_linenumbers": [], "num_total_prime_paths": 17, "num_covered_paths": 17, "prime_path_coverage": 1.0, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_117__0_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_117__0_CFG.dot"}
{"humaneval_id": "HumanEval_98__0", "python_file": "HumanEval_98__0/main.py", "input_file": "HumanEval_98__0/input.txt", "prime_paths_nodes": [["7", "4", "8"], ["7", "9", "4", "8"], ["9", "4", "7"], ["1", "13", "3", "4", "8"], ["1", "13", "3", "4", "7", "9"]], "prime_paths_statements": [["if s[i] in 'AEIOU':\\l", "for i in range(0, len(s), 2):\\l", "return count\\l"], ["if s[i] in 'AEIOU':\\l", "count += 1\\l", "for i in range(0, len(s), 2):\\l", "return count\\l"], ["count += 1\\l", "for i in range(0, len(s), 2):\\l", "if s[i] in 'AEIOU':\\l"], ["from typing import *\\ldef count_upper(s):...\\lcount_upper('dBBE')\\l", "count_upper", "count = 0\\l", "for i in range(0, len(s), 2):\\l", "return count\\l"], ["from typing import *\\ldef count_upper(s):...\\lcount_upper('dBBE')\\l", "count_upper", "count = 0\\l", "for i in range(0, len(s), 2):\\l", "if s[i] in 'AEIOU':\\l", "count += 1\\l"]], "prime_paths_linenumbers": [[7, 6, 9], [7, 8, 6, 9], [8, 6, 7], [1, 11, 5, 6, 9], [1, 11, 5, 6, 7, 8]], "covered_statements_linenumbers": [1, 4, 5, 6, 7, 9, 11], "missing_statements_linenumbers": [8], "covered_prime_paths_linenumbers": [[7, 6, 9], [1, 11, 5, 6, 9]], "missing_prime_paths_linenumbers": [[7, 8, 6, 9], [8, 6, 7], [1, 11, 5, 6, 7, 8]], "num_total_prime_paths": 5, "num_covered_paths": 2, "prime_path_coverage": 0.4, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_98__0_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_98__0_CFG.dot"}
{"humaneval_id": "HumanEval_97", "python_file": "HumanEval_97/main.py", "input_file": "HumanEval_97/input.txt", "prime_paths_nodes": [["1", "6", "3"]], "prime_paths_statements": [["from typing import *\\ldef multiply(a, b):...\\lmultiply(148, 412)\\l", "multiply", "return abs(a % 10) * abs(b % 10)\\l"]], "prime_paths_linenumbers": [[1, 5, 3]], "covered_statements_linenumbers": [1, 2, 3, 5], "missing_statements_linenumbers": [], "covered_prime_paths_linenumbers": [[1, 5, 3]], "missing_prime_paths_linenumbers": [], "num_total_prime_paths": 1, "num_covered_paths": 1, "prime_path_coverage": 1.0, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_97_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_97_CFG.dot"}
{"humaneval_id": "HumanEval_73", "python_file": "HumanEval_73/main.py", "input_file": "HumanEval_73/input.txt", "prime_paths_nodes": [["7", "4", "8"], ["7", "10", "4", "8"], ["10", "4", "7"], ["1", "14", "3", "4", "8"], ["1", "14", "3", "4", "7", "10"]], "prime_paths_statements": [["if arr[i] != arr[len(arr) - i - 1]:\\l", "for i in range(len(arr) // 2):\\l", "return ans\\l"], ["if arr[i] != arr[len(arr) - i - 1]:\\l", "ans += 1\\l", "for i in range(len(arr) // 2):\\l", "return ans\\l"], ["ans += 1\\l", "for i in range(len(arr) // 2):\\l", "if arr[i] != arr[len(arr) - i - 1]:\\l"], ["from typing import *\\ldef smallest_change(arr):...\\lsmallest_change([1, 2, 3, 5, 4, 7, 9, 6])\\l", "smallest_change", "ans = 0\\l", "for i in range(len(arr) // 2):\\l", "return ans\\l"], ["from typing import *\\ldef smallest_change(arr):...\\lsmallest_change([1, 2, 3, 5, 4, 7, 9, 6])\\l", "smallest_change", "ans = 0\\l", "for i in range(len(arr) // 2):\\l", "if arr[i] != arr[len(arr) - i - 1]:\\l", "ans += 1\\l"]], "prime_paths_linenumbers": [[5, 4, 7], [5, 6, 4, 7], [6, 4, 5], [1, 9, 3, 4, 7], [1, 9, 3, 4, 5, 6]], "covered_statements_linenumbers": [1, 2, 3, 4, 5, 6, 7, 9], "missing_statements_linenumbers": [], "covered_prime_paths_linenumbers": [[5, 4, 7], [5, 6, 4, 7], [6, 4, 5], [1, 9, 3, 4, 7], [1, 9, 3, 4, 5, 6]], "missing_prime_paths_linenumbers": [], "num_total_prime_paths": 5, "num_covered_paths": 5, "prime_path_coverage": 1.0, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_73_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_73_CFG.dot"}
{"humaneval_id": "HumanEval_23__0", "python_file": "HumanEval_23__0/main.py", "input_file": "HumanEval_23__0/input.txt", "prime_paths_nodes": [["1", "6", "3"]], "prime_paths_statements": [["from typing import *\\ldef strlen(string: str) ->int:...\\lstrlen('x')\\l", "strlen", "return len(string)\\l"]], "prime_paths_linenumbers": [[1, 7, 5]], "covered_statements_linenumbers": [1, 4, 5, 7], "missing_statements_linenumbers": [], "covered_prime_paths_linenumbers": [[1, 7, 5]], "missing_prime_paths_linenumbers": [], "num_total_prime_paths": 1, "num_covered_paths": 1, "prime_path_coverage": 1.0, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_23__0_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_23__0_CFG.dot"}
{"humaneval_id": "HumanEval_39__0", "python_file": "HumanEval_39__0/main.py", "input_file": "HumanEval_39__0/input.txt", "prime_paths_nodes": [["5", "6"], ["5", "7", "14"], ["5", "7", "13", "15"], ["13", "7", "14"], ["21", "24", "26", "27", "20"], ["21", "24", "27", "20"], ["24", "26", "27", "20", "21"], ["24", "27", "20", "21"], ["26", "27", "20", "21", "24"], ["27", "20", "21", "24", "26"], ["1", "32", "3", "20", "21", "24", "26", "27", "28"], ["1", "32", "3", "20", "21", "24", "27", "28"]], "prime_paths_statements": [["if p < 2:\\l", "return False\\l"], ["if p < 2:\\l", "for k in range(2, min(int(math.sqrt(p)) + 1, p - 1)):\\l", "return True\\l"], ["if p < 2:\\l", "for k in range(2, min(int(math.sqrt(p)) + 1, p - 1)):\\l", "if p % k == 0:\\l", "return False\\l"], ["if p % k == 0:\\l", "for k in range(2, min(int(math.sqrt(p)) + 1, p - 1)):\\l", "return True\\l"], ["f.append(f[-1] + f[-2])\\l", "if is_prime(f[-1]):\\l", "n -= 1\\l", "if n == 0:\\l", "while True:\\l"], ["f.append(f[-1] + f[-2])\\l", "if is_prime(f[-1]):\\l", "if n == 0:\\l", "while True:\\l"], ["if is_prime(f[-1]):\\l", "n -= 1\\l", "if n == 0:\\l", "while True:\\l", "f.append(f[-1] + f[-2])\\l"], ["if is_prime(f[-1]):\\l", "if n == 0:\\l", "while True:\\l", "f.append(f[-1] + f[-2])\\l"], ["n -= 1\\l", "if n == 0:\\l", "while True:\\l", "f.append(f[-1] + f[-2])\\l", "if is_prime(f[-1]):\\l"], ["if n == 0:\\l", "while True:\\l", "f.append(f[-1] + f[-2])\\l", "if is_prime(f[-1]):\\l", "n -= 1\\l"], ["from typing import *\\ldef prime_fib(n: int):...\\lprime_fib(9)\\l", "prime_fib", "import math\\ldef is_prime(p):...\\lf = [0, 1]\\l", "while True:\\l", "f.append(f[-1] + f[-2])\\l", "if is_prime(f[-1]):\\l", "n -= 1\\l", "if n == 0:\\l", "return f[-1]\\l"], ["from typing import *\\ldef prime_fib(n: int):...\\lprime_fib(9)\\l", "prime_fib", "import math\\ldef is_prime(p):...\\lf = [0, 1]\\l", "while True:\\l", "f.append(f[-1] + f[-2])\\l", "if is_prime(f[-1]):\\l", "if n == 0:\\l", "return f[-1]\\l"]], "prime_paths_linenumbers": [[8, 9], [8, 10, 13], [8, 10, 11, 12], [11, 10, 13], [16, 17, 18, 19, 15], [16, 17, 19, 15], [17, 18, 19, 15, 16], [17, 19, 15, 16], [18, 19, 15, 16, 17], [19, 15, 16, 17, 18], [1, 22, 5, 7, 14, 15, 16, 17, 18, 19, 20], [1, 22, 5, 7, 14, 15, 16, 17, 19, 20]], "covered_statements_linenumbers": [1, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22], "missing_statements_linenumbers": [], "covered_prime_paths_linenumbers": [[8, 9], [8, 10, 13], [8, 10, 11, 12], [11, 10, 13], [16, 17, 18, 19, 15], [16, 17, 19, 15], [17, 18, 19, 15, 16], [17, 19, 15, 16], [18, 19, 15, 16, 17], [19, 15, 16, 17, 18], [1, 22, 5, 7, 14, 15, 16, 17, 18, 19, 20], [1, 22, 5, 7, 14, 15, 16, 17, 19, 20]], "missing_prime_paths_linenumbers": [], "num_total_prime_paths": 12, "num_covered_paths": 12, "prime_path_coverage": 1.0, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_39__0_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_39__0_CFG.dot"}
{"humaneval_id": "HumanEval_65", "python_file": "HumanEval_65/main.py", "input_file": "HumanEval_65/input.txt", "prime_paths_nodes": [["1", "13", "3", "5", "7"], ["1", "13", "3", "5", "9"]], "prime_paths_statements": [["from typing import *\\ldef circular_shift(x, shift):...\\lcircular_shift(100, 2)\\l", "circular_shift", "s = str(x)\\l", "if shift > len(s):\\l", "return s[::-1]\\l"], ["from typing import *\\ldef circular_shift(x, shift):...\\lcircular_shift(100, 2)\\l", "circular_shift", "s = str(x)\\l", "if shift > len(s):\\l", "return s[len(s) - shift:] + s[:len(s) - shift]\\l"]], "prime_paths_linenumbers": [[1, 9, 3, 4, 5], [1, 9, 3, 4, 7]], "covered_statements_linenumbers": [1, 2, 3, 4, 7, 9], "missing_statements_linenumbers": [5], "covered_prime_paths_linenumbers": [[1, 9, 3, 4, 7]], "missing_prime_paths_linenumbers": [[1, 9, 3, 4, 5]], "num_total_prime_paths": 2, "num_covered_paths": 1, "prime_path_coverage": 0.5, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_65_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_65_CFG.dot"}
{"humaneval_id": "HumanEval_163__0", "python_file": "HumanEval_163__0/main.py", "input_file": "HumanEval_163__0/input.txt", "prime_paths_nodes": [["1", "11", "3", "8"]], "prime_paths_statements": [["from typing import *\\ldef generate_integers(a, b):...\\lgenerate_integers(17, 89)\\l", "generate_integers", "lower = max(2, min(a, b))\\lupper = min(8, max(a, b))\\l", "return [i for i in range(lower, upper + 1) if i % 2 == 0]\\l"]], "prime_paths_linenumbers": [[1, 10, 5, 6, 8]], "covered_statements_linenumbers": [1, 4, 5, 6, 8, 10], "missing_statements_linenumbers": [], "covered_prime_paths_linenumbers": [[1, 10, 5, 6, 8]], "missing_prime_paths_linenumbers": [], "num_total_prime_paths": 1, "num_covered_paths": 1, "prime_path_coverage": 1.0, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_163__0_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_163__0_CFG.dot"}
{"humaneval_id": "HumanEval_138__0", "python_file": "HumanEval_138__0/main.py", "input_file": "HumanEval_138__0/input.txt", "prime_paths_nodes": [["1", "6", "3"]], "prime_paths_statements": [["from typing import *\\ldef is_equal_to_sum_even(n):...\\lis_equal_to_sum_even(13)\\l", "is_equal_to_sum_even", "return n % 2 == 0 and n >= 8\\l"]], "prime_paths_linenumbers": [[1, 7, 5]], "covered_statements_linenumbers": [1, 4, 5, 7], "missing_statements_linenumbers": [], "covered_prime_paths_linenumbers": [[1, 7, 5]], "missing_prime_paths_linenumbers": [], "num_total_prime_paths": 1, "num_covered_paths": 1, "prime_path_coverage": 1.0, "cfg_png": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_138__0_CFG.png", "cfg_dot": "/home/yang/share_repo/StaticAnalysis/cfglogshumaneval/HumanEval_138__0_CFG.dot"}
