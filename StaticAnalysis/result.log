Prime Path: ['if idx != idx2:\\l', 'for idx2, elem2 in enumerate(numbers):\\l', 'for idx, elem in enumerate(numbers):\\l', 'enumerate']
Prime Path: ['if idx != idx2:\\l', 'distance = abs(elem - elem2)\\l', 'if distance < threshold:\\l', 'for idx2, elem2 in enumerate(numbers):\\l', 'for idx, elem in enumerate(numbers):\\l', 'enumerate']
Prime Path: ['if idx != idx2:\\l', 'for idx2, elem2 in enumerate(numbers):\\l', 'enumerate']
Prime Path: ['if idx != idx2:\\l', 'distance = abs(elem - elem2)\\l', 'if distance < threshold:\\l', 'for idx2, elem2 in enumerate(numbers):\\l', 'enumerate']
Prime Path: ['if idx != idx2:\\l', 'for idx2, elem2 in enumerate(numbers):\\l', 'for idx, elem in enumerate(numbers):\\l', 'return False\\l']
Prime Path: ['if idx != idx2:\\l', 'distance = abs(elem - elem2)\\l', 'if distance < threshold:\\l', 'for idx2, elem2 in enumerate(numbers):\\l', 'for idx, elem in enumerate(numbers):\\l', 'return False\\l']
Prime Path: ['distance = abs(elem - elem2)\\l', 'if distance < threshold:\\l', 'for idx2, elem2 in enumerate(numbers):\\l', 'if idx != idx2:\\l']
Prime Path: ['if distance < threshold:\\l', 'for idx2, elem2 in enumerate(numbers):\\l', 'if idx != idx2:\\l', 'distance = abs(elem - elem2)\\l', 'abs']
Prime Path: ['from typing import *\\ldef has_close_elements(numbers: List[float], threshold: float) ->bool:...\\lhas_close_elements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3)\\l', 'has_close_elements', 'for idx, elem in enumerate(numbers):\\l', 'enumerate']
Prime Path: ['from typing import *\\ldef has_close_elements(numbers: List[float], threshold: float) ->bool:...\\lhas_close_elements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3)\\l', 'has_close_elements', 'for idx, elem in enumerate(numbers):\\l', 'for idx2, elem2 in enumerate(numbers):\\l', 'enumerate']
Prime Path: ['from typing import *\\ldef has_close_elements(numbers: List[float], threshold: float) ->bool:...\\lhas_close_elements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3)\\l', 'has_close_elements', 'for idx, elem in enumerate(numbers):\\l', 'for idx2, elem2 in enumerate(numbers):\\l', 'if idx != idx2:\\l', 'distance = abs(elem - elem2)\\l', 'abs']
Prime Path: ['from typing import *\\ldef has_close_elements(numbers: List[float], threshold: float) ->bool:...\\lhas_close_elements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3)\\l', 'has_close_elements', 'for idx, elem in enumerate(numbers):\\l', 'return False\\l']
Prime Path: ['from typing import *\\ldef has_close_elements(numbers: List[float], threshold: float) ->bool:...\\lhas_close_elements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3)\\l', 'has_close_elements', 'for idx, elem in enumerate(numbers):\\l', 'for idx2, elem2 in enumerate(numbers):\\l', 'if idx != idx2:\\l', 'distance = abs(elem - elem2)\\l', 'if distance < threshold:\\l', 'return False\\l']
Covered statements in /home/yang/StaticAnalysis/test_1.py: [1, 2, 3, 4, 5, 6, 7, 8, 11] Missing statements: [10]
Missing paths (linenums): [5, 4, 3, 10]
Missing paths (linenums): [5, 6, 7, 4, 3, 10]
Missing paths (linenums): [1, 11, 3, 10]
#Covered prime paths: 10 
#Total prime paths: 13
