{"s949655009": {"id": "s949655009", "language": "Python", "dataset": "Codenet", "pass_before": 1, "pass_after": 0, "filepath_before": "/home/yang/contamination/Codenet_Python_Before/s949655009.py", "filepath_after": "/home/yang/contamination/Codenet_Python_After/s949655009.py", "code_before": "strn = input()\nn = int(strn)\nshichigolist = [\"3\", \"5\", \"7\"]\nshichigo = [[] for _ in range(len(strn))]\nfor i in range(len(strn)):\n    if i == 0:\n        for j in shichigolist:\n            shichigo[i].append(j)\n    else:\n        for j in shichigo[i-1]:\n            for k in shichigolist:\n                shichigo[i].append(j+k)\ntarget = len(strn)-1\nfor i in range(len(strn)):\n    for j in shichigo[i][:]:\n        if i == target:\n            if int(j) > n:\n                shichigo[target].remove(j)\n            elif j.count(\"3\") == 0 or j.count(\"5\") == 0 or j.count(\"7\") == 0:\n                shichigo[target].remove(j)\n        else:\n            if j.count(\"3\") == 0 or j.count(\"5\") == 0 or j.count(\"7\") == 0:\n                shichigo[i].remove(j)\n\nprint(sum([len(shichigo[i]) for i in range(len(strn))]))\n", "code_after": "strn = input()\nn = int(strn)\nshichigolist = ['3', '5', '7']\nshichigo = [[] for _ in range(len(strn))]\nrandom_inside_left_5 = 528\nrandom_inside_right_5 = 527\nrandom_outside_left_5 = 937\nrandom_outside_right_5 = 936\nrandom_inside_left_14 = 854\nrandom_inside_right_14 = 853\nrandom_outside_left_14 = 800\nrandom_outside_right_14 = 799\nfor loop_outside in range(random_outside_left_5 // random_outside_right_5):\n    for i in range(len(strn)):\n        for loop_inside in range(random_inside_left_5 % random_inside_right_5):\n            if i == 0:\n                for j in shichigolist:\n                    shichigo[i].append(j)\n            else:\n                for j in shichigo[i - 1]:\n                    for k in shichigolist:\n                        shichigo[i].append(j + k)\nvariable_1_23 = 1\ntarget = len(strn) - variable_1_23\nfor loop_outside in range(random_outside_left_14 // random_outside_right_14):\n    for i in range(len(strn)):\n        for loop_inside in range(random_inside_left_14 % random_inside_right_14):\n            for j in shichigo[i][:]:\n                if i == target:\n                    if int(j) > n:\n                        shichigo[target].remove(j)\n                    elif j.count('3') == 0 or j.count('5') == 0 or j.count('7') == 0:\n                        shichigo[target].remove(j)\n                elif j.count('3') == 0 or j.count('5') == 0 or j.count('7') == 0:\n                    shichigo[i].remove(j)\nprint(sum([len(shichigo[i]) for i in range(len(strn))]))", "effort_before": "738.6405271364574", "effort_after": "1293.3336222401474", "difficulty_before": "3.5714285714285716", "difficulty_after": "4.433333333333334", "calculated_length_before": "103.84830635279079", "calculated_length_after": "166.8582023226588", "length_before": "44", "length_after": "56", "vocabulary_before": "26", "vocabulary_after": "37", "mi_value_before": "50.87", "mi_value_after": "45.57", "Nloc_before": "24", "Nloc_after": "36", "AvgCCN_before": "18.0", "AvgCCN_after": "22.0"}, "s609392609": {"id": "s609392609", "language": "Python", "dataset": "Codenet", "pass_before": 3, "pass_after": 3, "filepath_before": "/home/yang/contamination/Codenet_Python_Before/s609392609.py", "filepath_after": "/home/yang/contamination/Codenet_Python_After/s609392609.py", "code_before": "n = int(input())\nt = list(map(int, input().split()))\nm = int(input())\nfor i in range(m):\n    p, x = map(int, input().split())\n    s = 0\n    for j in range(len(t)):\n        if j == p-1:\n            s += x\n        else:\n            s += t[j]\n    print(s)\n", "code_after": "n = int(input())\nt = list(map(int, input().split()))\nm = int(input())\nrandom_inside_left_4 = 623\nrandom_inside_right_4 = 622\nrandom_outside_left_4 = 680\nrandom_outside_right_4 = 679\nfor loop_outside in range(random_outside_left_4 // random_outside_right_4):\n    for i in range(m):\n        for loop_inside in range(random_inside_left_4 % random_inside_right_4):\n            (p, x) = map(int, input().split())\n            s = 0\n            for j in range(len(t)):\n                if j == p - 1:\n                    s += x\n                else:\n                    s += t[j]\n            print(s)", "effort_before": "68.33680652339717", "effort_after": "196.36363636363635", "difficulty_before": "1.7142857142857142", "difficulty_after": "2.727272727272727", "calculated_length_before": "24.406371956566698", "calculated_length_after": "49.663388279447084", "length_before": "12", "length_after": "18", "vocabulary_before": "10", "vocabulary_after": "16", "mi_value_before": "63.96", "mi_value_after": "58.29", "Nloc_before": "12", "Nloc_after": "18", "AvgCCN_before": "4.0", "AvgCCN_after": "6.0"}, "s621701371": {"id": "s621701371", "language": "Python", "dataset": "Codenet", "pass_before": 0, "pass_after": 0, "filepath_before": "/home/yang/contamination/Codenet_Python_Before/s621701371.py", "filepath_after": "/home/yang/contamination/Codenet_Python_After/s621701371.py", "code_before": "s = input()\nq = int(input())\nqs = [input().split() for i in range(q)]\nn = False\nleft = right = \"\"\nfor operation in qs:\n    if operation[0] == '1':\n        n = not n\n    if operation[0] == '2':\n        t, f, c = operation\n        f = int(f)\n        if n:\n            f = 1 if f != 1 else 2\n        if f == 1:\n            left = c+left\n        elif f == 2:\n            right += c\ns = left+s+right\nprint(s[::-1] if n else s)\n", "code_after": "s = input()\nq = int(input())\nqs = [input().split() for i in range(q)]\nn = False\nleft = right = ''\nrandom_inside_left_6 = 832\nrandom_inside_right_6 = 831\nrandom_outside_left_6 = 700\nrandom_outside_right_6 = 699\nfor loop_outside in range(random_outside_left_6 // random_outside_right_6):\n    for operation in qs:\n        for loop_inside in range(random_inside_left_6 % random_inside_right_6):\n            if operation[0] == '1':\n                n = not n\n            if operation[0] == '2':\n                (t, f, c) = operation\n                f = int(f)\n                if n:\n                    f = 1 if f != 1 else 2\n                if f == 1:\n                    left = c + left\n                elif f == 2:\n                    right += c\ns = left + s + right\nprint(s[::-1] if n else s)", "effort_before": "497.18336555658334", "effort_after": "838.2390266024327", "difficulty_before": "3.8461538461538463", "difficulty_after": "4.9411764705882355", "calculated_length_before": "59.715356810271004", "calculated_length_after": "89.13835275565901", "length_before": "31", "length_after": "37", "vocabulary_before": "18", "vocabulary_after": "24", "mi_value_before": "55.03", "mi_value_after": "51.55", "Nloc_before": "19", "Nloc_after": "25", "AvgCCN_before": "10.0", "AvgCCN_after": "12.0"}, "s028530838": {"id": "s028530838", "language": "Python", "dataset": "Codenet", "pass_before": 0, "pass_after": 0, "filepath_before": "/home/yang/contamination/Codenet_Python_Before/s028530838.py", "filepath_after": "/home/yang/contamination/Codenet_Python_After/s028530838.py", "code_before": "x = input()\nif x.islower():\n    print(\"a\")\nelse:\n    print(\"A\")\n", "code_after": "x = input()\nrandom_outside_if_left_2 = 454\nrandom_outside_if_right_2 = 453\nif random_outside_if_left_2 & random_outside_if_right_2:\n    if x.islower():\n        print('a')\n    else:\n        print('A')\nelse:\n    print('A')", "effort_before": "0", "effort_after": "2.3774437510817346", "difficulty_before": "0", "difficulty_after": "0.5", "calculated_length_before": "0", "calculated_length_after": "2.0", "length_before": "0", "length_after": "3", "vocabulary_before": "0", "vocabulary_after": "3", "mi_value_before": "100.00", "mi_value_after": "72.14", "Nloc_before": "5", "Nloc_after": "10", "AvgCCN_before": "2.0", "AvgCCN_after": "3.0"}, "s246280701": {"id": "s246280701", "language": "Python", "dataset": "Codenet", "pass_before": 3, "pass_after": 1, "filepath_before": "/home/yang/contamination/Codenet_Python_Before/s246280701.py", "filepath_after": "/home/yang/contamination/Codenet_Python_After/s246280701.py", "code_before": "n = int(input())\nx = list(map(int, input().split()))\nans = 10**10\nfor i in range(101):\n    tmp = [abs(i - x[j])**2 for j in range(n)]\n    if sum(tmp) < ans:\n        ans = sum(tmp)\n\nprint(ans)\n", "code_after": "n = int(input())\nx = list(map(int, input().split()))\nvariable_10_3 = 10\nvariable_10_3 = 10\nans = variable_10_3 ** variable_10_3\nrandom_inside_left_4 = 703\nrandom_inside_right_4 = 702\nrandom_outside_left_4 = 298\nrandom_outside_right_4 = 297\nfor loop_outside in range(random_outside_left_4 // random_outside_right_4):\n    for i in range(101):\n        for loop_inside in range(random_inside_left_4 % random_inside_right_4):\n            tmp = [abs(i - x[j]) ** 2 for j in range(n)]\n            if sum(tmp) < ans:\n                ans = sum(tmp)\nprint(ans)", "effort_before": "68.33680652339717", "effort_after": "196.36363636363635", "difficulty_before": "1.7142857142857142", "difficulty_after": "2.727272727272727", "calculated_length_before": "24.406371956566698", "calculated_length_after": "49.663388279447084", "length_before": "12", "length_after": "18", "vocabulary_before": "10", "vocabulary_after": "16", "mi_value_before": "67.44", "mi_value_after": "59.35", "Nloc_before": "8", "Nloc_after": "16", "AvgCCN_before": "4.0", "AvgCCN_after": "6.0"}, "s486032847": {"id": "s486032847", "language": "Python", "dataset": "Codenet", "pass_before": 3, "pass_after": 3, "filepath_before": "/home/yang/contamination/Codenet_Python_Before/s486032847.py", "filepath_after": "/home/yang/contamination/Codenet_Python_After/s486032847.py", "code_before": "import math\n\n\ndef keta(s):\n    if len(s) < 2:\n        return int(s)\n    n = sum(map(int, s))\n    return keta(str(n))\n\n\ndef main():\n    N = input()\n\n    if keta(N) % 9 == 0:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n\n\nif __name__ == \"__main__\":\n    main()\n", "code_after": "import math\n\ndef keta(s):\n    if len(s) < 2:\n        return int(s)\n    n = sum(map(int, s))\n    return keta(str(n))\n\ndef main():\n    N = input()\n    if keta(N) % 9 == 0:\n        print('Yes')\n    else:\n        print('No')\nmain()", "effort_before": "62.26976913547136", "effort_after": "42.793987519471216", "difficulty_before": "1.5", "difficulty_after": "1.5", "calculated_length_before": "28.75488750216347", "calculated_length_after": "20.264662506490406", "length_before": "12", "length_after": "9", "vocabulary_before": "11", "vocabulary_after": "9", "mi_value_before": "62.75", "mi_value_after": "64.67", "Nloc_before": "14", "Nloc_after": "13", "AvgCCN_before": "2.0", "AvgCCN_after": "1.0"}, "s404600540": {"id": "s404600540", "language": "Python", "dataset": "Codenet", "pass_before": 3, "pass_after": 3, "filepath_before": "/home/yang/contamination/Codenet_Python_Before/s404600540.py", "filepath_after": "/home/yang/contamination/Codenet_Python_After/s404600540.py", "code_before": "def main():\n    q, h, s, d = map(int, input().split())\n    n = int(input())\n    min_1 = min(q*4, h*2, q*2+h, s)\n    min_2 = min(min_1*2, d)\n\n    print((n % 2)*min_1 + (n // 2)*min_2)\n\n\nif __name__ == '__main__':\n    main()\n", "code_after": "def main():\n    (q, h, s, d) = map(int, input().split())\n    n = int(input())\n    min_1 = min(q * 4, h * 2, q * 2 + h, s)\n    min_2 = min(min_1 * 2, d)\n    print(n % 2 * min_1 + n // 2 * min_2)\nmain()", "effort_before": "550.713459778579", "effort_after": "400.0", "difficulty_before": "3.9285714285714284", "difficulty_after": "3.3333333333333335", "calculated_length_before": "64.91260938324326", "calculated_length_after": "51.01955000865388", "length_before": "33", "length_after": "30", "vocabulary_before": "19", "vocabulary_after": "16", "mi_value_before": "63.88", "mi_value_after": "65.61", "Nloc_before": "8", "Nloc_after": "7", "AvgCCN_before": "2.0", "AvgCCN_after": "1.0"}, "s238775098": {"id": "s238775098", "language": "Python", "dataset": "Codenet", "pass_before": 0, "pass_after": 0, "filepath_before": "/home/yang/contamination/Codenet_Python_Before/s238775098.py", "filepath_after": "/home/yang/contamination/Codenet_Python_After/s238775098.py", "code_before": "n = int(input())\nres = 0\nfor _ in range(n):\n    x, u = list(input().split())\n    if u == \"BTC\":\n        res += float(x) * 380000\n    else:\n        res += int(x)\nprint(res)\n", "code_after": "n = int(input())\nres = 0\nrandom_inside_left_3 = 312\nrandom_inside_right_3 = 311\nrandom_outside_left_3 = 420\nrandom_outside_right_3 = 419\nfor loop_outside in range(random_outside_left_3 // random_outside_right_3):\n    for _ in range(n):\n        for loop_inside in range(random_inside_left_3 % random_inside_right_3):\n            (x, u) = list(input().split())\n            if u == 'BTC':\n                res += float(x) * 380000\n            else:\n                res += int(x)\nprint(res)", "effort_before": "68.33680652339717", "effort_after": "196.36363636363635", "difficulty_before": "1.7142857142857142", "difficulty_after": "2.727272727272727", "calculated_length_before": "24.406371956566698", "calculated_length_after": "49.663388279447084", "length_before": "12", "length_after": "18", "vocabulary_before": "10", "vocabulary_after": "16", "mi_value_before": "66.58", "mi_value_after": "60.06", "Nloc_before": "9", "Nloc_after": "15", "AvgCCN_before": "3.0", "AvgCCN_after": "5.0"}, "s267172486": {"id": "s267172486", "language": "Python", "dataset": "Codenet", "pass_before": 3, "pass_after": 3, "filepath_before": "/home/yang/contamination/Codenet_Python_Before/s267172486.py", "filepath_after": "/home/yang/contamination/Codenet_Python_After/s267172486.py", "code_before": "h, a = map(int, input().strip().split())\n\nans = h // a\nama = h % a\n\nif ama != 0:\n    ans += 1\nprint(ans)\n", "code_after": "(h, a) = map(int, input().strip().split())\nans = h // a\nama = h % a\nrandom_outside_if_left_4 = 413\nrandom_outside_if_right_4 = 412\nif random_outside_if_left_4 & random_outside_if_right_4:\n    if ama != 0:\n        ans += 1\nprint(ans)", "effort_before": "106.3016990363956", "effort_after": "173.4581117878637", "difficulty_before": "2.6666666666666665", "difficulty_after": "3.125", "calculated_length_before": "23.509775004326936", "calculated_length_after": "35.60964047443681", "length_before": "12", "length_after": "15", "vocabulary_before": "10", "vocabulary_after": "13", "mi_value_before": "70.09", "mi_value_after": "65.57", "Nloc_before": "6", "Nloc_after": "9", "AvgCCN_before": "2.0", "AvgCCN_after": "3.0"}, "s763208424": {"id": "s763208424", "language": "Python", "dataset": "Codenet", "pass_before": 0, "pass_after": 0, "filepath_before": "/home/yang/contamination/Codenet_Python_Before/s763208424.py", "filepath_after": "/home/yang/contamination/Codenet_Python_After/s763208424.py", "code_before": "from math import floor\nfrom heapq import heappush, heappop\nn, m = map(int, input().split())\na = []\nfor i in map(int, input().split()):\n    heappush(a, -i)\n\n\ndef dis(x, y): return x // 2**y\n\n\nfor _ in range(m):\n    heappush(a, -dis(-heappop(a), 1))\nprint(-sum(a))\n", "code_after": "from math import floor\nfrom heapq import heappush, heappop\n(n, m) = map(int, input().split())\na = []\nrandom_inside_left_5 = 260\nrandom_inside_right_5 = 259\nrandom_outside_left_5 = 814\nrandom_outside_right_5 = 813\nrandom_inside_left_10 = 407\nrandom_inside_right_10 = 406\nrandom_outside_left_10 = 599\nrandom_outside_right_10 = 598\nfor loop_outside in range(random_outside_left_5 // random_outside_right_5):\n    for i in map(int, input().split()):\n        for loop_inside in range(random_inside_left_5 % random_inside_right_5):\n            heappush(a, -i)\n\ndef dis(x, y):\n    return x // 2 ** y\nfor loop_outside in range(random_outside_left_10 // random_outside_right_10):\n    for _ in range(m):\n        for loop_inside in range(random_inside_left_10 % random_inside_right_10):\n            heappush(a, -dis(-heappop(a), 1))\nprint(-sum(a))", "effort_before": "72.64806399138325", "effort_after": "224.74026093414287", "difficulty_before": "1.5", "difficulty_after": "2.0", "calculated_length_before": "28.75488750216347", "calculated_length_after": "72.0", "length_before": "14", "length_after": "26", "vocabulary_before": "11", "vocabulary_after": "20", "mi_value_before": "64.26", "mi_value_after": "54.59", "Nloc_before": "10", "Nloc_after": "23", "AvgCCN_before": "3.0", "AvgCCN_after": "7.0"}, "s122565091": {"id": "s122565091", "language": "Python", "dataset": "Codenet", "pass_before": 3, "pass_after": 2, "filepath_before": "/home/yang/contamination/Codenet_Python_Before/s122565091.py", "filepath_after": "/home/yang/contamination/Codenet_Python_After/s122565091.py", "code_before": "a, v = map(int, input().split())\nb, w = map(int, input().split())\nt = int(input())\nif a == b:\n    print('YES')\nelif v <= w:\n    print('NO')\nelse:\n    if t < abs(a - b) / (v - w):\n        print('NO')\n    else:\n        print('YES')\n", "code_after": "(a, v) = map(int, input().split())\n(b, w) = map(int, input().split())\nt = int(input())\nrandom_outside_if_left_4 = 171\nrandom_outside_if_right_4 = 170\nif random_outside_if_left_4 & random_outside_if_right_4:\n    if a == b:\n        print('YES')\n    elif v <= w:\n        print('NO')\n    elif t < abs(a - b) / (v - w):\n        print('NO')\n    else:\n        print('YES')\nelif v <= w:\n    print('NO')\nelif t < abs(a - b) / (v - w):\n    print('NO')\nelse:\n    print('YES')", "effort_before": "249.77968097452373", "effort_after": "846.9713934496748", "difficulty_before": "3.75", "difficulty_after": "5.538461538461538", "calculated_length_before": "35.60964047443681", "calculated_length_after": "63.61549134016113", "length_before": "18", "length_after": "36", "vocabulary_before": "13", "vocabulary_after": "19", "mi_value_before": "62.39", "mi_value_after": "54.92", "Nloc_before": "12", "Nloc_after": "20", "AvgCCN_before": "4.0", "AvgCCN_after": "7.0"}, "s642705424": {"id": "s642705424", "language": "Python", "dataset": "Codenet", "pass_before": 3, "pass_after": 3, "filepath_before": "/home/yang/contamination/Codenet_Python_Before/s642705424.py", "filepath_after": "/home/yang/contamination/Codenet_Python_After/s642705424.py", "code_before": "N = int(input())\nS = input()\nx = 1\nfor i in range(N-1):\n    if S[i] != S[i+1]:\n        x = x+1\nprint(x)\n", "code_after": "N = int(input())\nS = input()\nx = 1\nrandom_inside_left_4 = 248\nrandom_inside_right_4 = 247\nrandom_outside_left_4 = 571\nrandom_outside_right_4 = 570\nfor loop_outside in range(random_outside_left_4 // random_outside_right_4):\n    for i in range(N - 1):\n        for loop_inside in range(random_inside_left_4 % random_inside_right_4):\n            if S[i] != S[i + 1]:\n                x = x + 1\nprint(x)", "effort_before": "76.0782000346155", "effort_after": "210.97209216286", "difficulty_before": "2.0", "difficulty_after": "3.0", "calculated_length_before": "20.264662506490406", "calculated_length_after": "44.82892142331043", "length_before": "12", "length_after": "18", "vocabulary_before": "9", "vocabulary_after": "15", "mi_value_before": "68.83", "mi_value_after": "61.39", "Nloc_before": "7", "Nloc_after": "13", "AvgCCN_before": "3.0", "AvgCCN_after": "5.0"}, "s951169509": {"id": "s951169509", "language": "Python", "dataset": "Codenet", "pass_before": 0, "pass_after": 0, "filepath_before": "/home/yang/contamination/Codenet_Python_Before/s951169509.py", "filepath_after": "/home/yang/contamination/Codenet_Python_After/s951169509.py", "code_before": "from collections import deque\nH, W = map(int, input().split())\nG = []\nfor i in range(H+2):\n    if i == 0 or i == H+1:\n        G.append('#'*(W+2))\n    else:\n        G.append('#' + input() + '#')\n\nans = 0\nfor sx in range(W+2):\n    for sy in range(H+2):\n        if G[sy][sx] == '.':\n            dist = [[-float('inf') for i in range(W+2)] for i in range(H+2)]\n            visited = [[-1 for i in range(W+2)] for i in range(H+2)]\n            q = deque([])\n            q.append((sx, sy))\n            dist[sy][sx] = 0\n            visited[sy][sx] = 1\n            while q:\n                x, y = q.popleft()\n\n                if G[y][x+1] == '.' and visited[y][x+1] == -1:\n                    q.append((x+1, y))\n                    dist[y][x+1] = dist[y][x] + 1\n                    visited[y][x+1] = 1\n\n                if G[y][x-1] == '.' and visited[y][x-1] == -1:\n                    q.append((x-1, y))\n                    dist[y][x-1] = dist[y][x] + 1\n                    visited[y][x-1] = 1\n\n                if G[y+1][x] == '.' and visited[y+1][x] == -1:\n                    q.append((x, y+1))\n                    dist[y+1][x] = dist[y][x] + 1\n                    visited[y+1][x] = 1\n\n                if G[y-1][x] == '.' and visited[y-1][x] == -1:\n                    q.append((x, y-1))\n                    dist[y-1][x] = dist[y][x] + 1\n                    visited[y-1][x] = 1\n            for i in range(W+2):\n                for j in range(H+2):\n                    ans = max(ans, dist[j][i])\nprint(ans)\n", "code_after": "from collections import deque\n(H, W) = map(int, input().split())\nG = []\nrandom_inside_left_4 = 285\nrandom_inside_right_4 = 284\nrandom_outside_left_4 = 878\nrandom_outside_right_4 = 877\nrandom_inside_left_10 = 359\nrandom_inside_right_10 = 358\nrandom_outside_left_10 = 599\nrandom_outside_right_10 = 598\nfor loop_outside in range(random_outside_left_4 // random_outside_right_4):\n    for i in range(H + 2):\n        for loop_inside in range(random_inside_left_4 % random_inside_right_4):\n            if i == 0 or i == H + 1:\n                G.append('#' * (W + 2))\n            else:\n                G.append('#' + input() + '#')\nans = 0\nfor loop_outside in range(random_outside_left_10 // random_outside_right_10):\n    for sx in range(W + 2):\n        for loop_inside in range(random_inside_left_10 % random_inside_right_10):\n            for sy in range(H + 2):\n                if G[sy][sx] == '.':\n                    dist = [[-float('inf') for i in range(W + 2)] for i in range(H + 2)]\n                    visited = [[-1 for i in range(W + 2)] for i in range(H + 2)]\n                    q = deque([])\n                    q.append((sx, sy))\n                    dist[sy][sx] = 0\n                    visited[sy][sx] = 1\n                    while q:\n                        (x, y) = q.popleft()\n                        if G[y][x + 1] == '.' and visited[y][x + 1] == -1:\n                            q.append((x + 1, y))\n                            dist[y][x + 1] = dist[y][x] + 1\n                            visited[y][x + 1] = 1\n                        if G[y][x - 1] == '.' and visited[y][x - 1] == -1:\n                            q.append((x - 1, y))\n                            dist[y][x - 1] = dist[y][x] + 1\n                            visited[y][x - 1] = 1\n                        if G[y + 1][x] == '.' and visited[y + 1][x] == -1:\n                            q.append((x, y + 1))\n                            dist[y + 1][x] = dist[y][x] + 1\n                            visited[y + 1][x] = 1\n                        if G[y - 1][x] == '.' and visited[y - 1][x] == -1:\n                            q.append((x, y - 1))\n                            dist[y - 1][x] = dist[y][x] + 1\n                            visited[y - 1][x] = 1\n                    for i in range(W + 2):\n                        for j in range(H + 2):\n                            ans = max(ans, dist[j][i])\nprint(ans)", "effort_before": "9281.11537232244", "effort_after": "12014.004246850702", "difficulty_before": "9.5", "difficulty_after": "10.98", "calculated_length_before": "246.12881621111117", "calculated_length_after": "310.722134501717", "length_before": "174", "length_after": "186", "vocabulary_before": "49", "vocabulary_after": "59", "mi_value_before": "40.92", "mi_value_after": "37.61", "Nloc_before": "40", "Nloc_after": "52", "AvgCCN_before": "22.0", "AvgCCN_after": "26.0"}, "s875904659": {"id": "s875904659", "language": "Python", "dataset": "Codenet", "pass_before": 0, "pass_after": 0, "filepath_before": "/home/yang/contamination/Codenet_Python_Before/s875904659.py", "filepath_after": "/home/yang/contamination/Codenet_Python_After/s875904659.py", "code_before": "def bubbleSort(cards):\n    n = len(cards)\n    for i in range(0, n):\n        for j in range(n-1, i, -1):\n            if int(cards[j][1]) < int(cards[j-1][1]):\n                cards[j], cards[j-1] = cards[j-1], cards[j]\n\n    print(\" \".join(map(str, cards)))\n\n\ndef selectionSort(cards):\n    n = len(cards)\n    for i in range(0, n):\n        mini = i\n        for j in range(i, n):\n            if int(cards[j][1]) < int(cards[mini][1]):\n                mini = j\n        if mini != i:\n            cards[i], cards[mini] = cards[mini], cards[i]\n\n    print(\" \".join(map(str, cards)))\n\n\nn = int(input())\ncards = input().split(\" \")\ncards2 = list(cards)\nbubbleSort(cards)\nprint(\"Stable\")\nselectionSort(cards2)\nif \" \".join(map(str, cards2)) == \" \".join(map(str, cards)):\n    print(\"Stable\")\nelse:\n    print(\"Not stable\")\n", "code_after": "def bubbleSort(cards):\n    n = len(cards)\n    for i in range(0, n):\n        for j in range(n - 1, i, -1):\n            if int(cards[j][1]) < int(cards[j - 1][1]):\n                (cards[j], cards[j - 1]) = (cards[j - 1], cards[j])\n    print(' '.join(map(str, cards)))\n\ndef selectionSort(cards):\n    n = len(cards)\n    for i in range(0, n):\n        mini = i\n        for j in range(i, n):\n            if int(cards[j][1]) < int(cards[mini][1]):\n                mini = j\n        if mini != i:\n            (cards[i], cards[mini]) = (cards[mini], cards[i])\n    print(' '.join(map(str, cards)))\nn = int(input())\ncards = input().split(' ')\ncards2 = list(cards)\nbubbleSort(cards)\nprint('Stable')\nselectionSort(cards2)\nrandom_outside_if_left_25 = 501\nrandom_outside_if_right_25 = 500\nif random_outside_if_left_25 & random_outside_if_right_25:\n    if ' '.join(map(str, cards2)) == ' '.join(map(str, cards)):\n        print('Stable')\n    else:\n        print('Not stable')\nelse:\n    print('Not stable')", "effort_before": "401.8181818181818", "effort_after": "540.1403215170959", "difficulty_before": "3.8636363636363638", "difficulty_after": "4.384615384615385", "calculated_length_before": "49.663388279447084", "calculated_length_after": "63.61549134016113", "length_before": "26", "length_after": "29", "vocabulary_before": "16", "vocabulary_after": "19", "mi_value_before": "54.04", "mi_value_after": "51.83", "Nloc_before": "27", "Nloc_after": "32", "AvgCCN_before": "2.0", "AvgCCN_after": "3.0"}, "s993625131": {"id": "s993625131", "language": "Python", "dataset": "Codenet", "pass_before": 3, "pass_after": 0, "filepath_before": "/home/yang/contamination/Codenet_Python_Before/s993625131.py", "filepath_after": "/home/yang/contamination/Codenet_Python_After/s993625131.py", "code_before": "S = list(input())\n\ncount = 0\nrecord = 0\nfor i in range(len(S)):\n    if S[i] == \"A\" or S[i] == \"C\" or S[i] == \"G\" or S[i] == \"T\":\n        count += 1\n    else:\n        if count > record:\n            record = count\n        count = 0\nif count > record:\n    record = count\n\nprint(record)\n", "code_after": "S = list(input())\ncount = 0\nrecord = 0\nrandom_inside_left_4 = 630\nrandom_inside_right_4 = 629\nrandom_outside_left_4 = 325\nrandom_outside_right_4 = 324\nfor loop_outside in range(random_outside_left_4 // random_outside_right_4):\n    for i in range(len(S)):\n        for loop_inside in range(random_inside_left_4 % random_inside_right_4):\n            if S[i] == 'A' or S[i] == 'C' or S[i] == 'G' or (S[i] == 'T'):\n                count += 1\n            else:\n                if count > record:\n                    record = count\n                count = 0\nrandom_outside_if_left_17 = 491\nrandom_outside_if_right_17 = 490\nif random_outside_if_left_17 & random_outside_if_right_17:\n    if count > record:\n        record = count\nprint(record)", "effort_before": "265.0706768388797", "effort_after": "673.0296890880645", "difficulty_before": "2.4", "difficulty_after": "4.0", "calculated_length_before": "66.60335893412778", "calculated_length_after": "111.8901503327572", "length_before": "26", "length_after": "35", "vocabulary_before": "19", "vocabulary_after": "28", "mi_value_before": "59.62", "mi_value_after": "53.23", "Nloc_before": "13", "Nloc_after": "22", "AvgCCN_before": "8.0", "AvgCCN_after": "11.0"}, "s242961129": {"id": "s242961129", "language": "Python", "dataset": "Codenet", "pass_before": 1, "pass_after": 0, "filepath_before": "/home/yang/contamination/Codenet_Python_Before/s242961129.py", "filepath_after": "/home/yang/contamination/Codenet_Python_After/s242961129.py", "code_before": "N = int(input())\nA = [int(x) for x in input().split()]\nans = abs(A[-1])\nA = [0]+A+[0]\ndiff = [0 for x in range(N)]\nfor i in range(1, N+1):\n    dif = abs(A[i]-A[i-1])+abs(A[i]-A[i+1])-abs(A[i-1]-A[i+1])\n    ans += abs(A[i]-A[i-1])\n    diff[i-1] = dif\n\nfor i in range(N):\n    print(ans-diff[i])\n", "code_after": "N = int(input())\nA = [int(x) for x in input().split()]\nans = abs(A[-1])\nvariable_0_4 = 0\nvariable_0_4 = 0\nA = [variable_0_4] + A + [variable_0_4]\ndiff = [0 for x in range(N)]\nrandom_inside_left_6 = 299\nrandom_inside_right_6 = 298\nrandom_outside_left_6 = 544\nrandom_outside_right_6 = 543\nrandom_inside_left_10 = 432\nrandom_inside_right_10 = 431\nrandom_outside_left_10 = 817\nrandom_outside_right_10 = 816\nfor loop_outside in range(random_outside_left_6 // random_outside_right_6):\n    for i in range(1, N + 1):\n        for loop_inside in range(random_inside_left_6 % random_inside_right_6):\n            dif = abs(A[i] - A[i - 1]) + abs(A[i] - A[i + 1]) - abs(A[i - 1] - A[i + 1])\n            ans += abs(A[i] - A[i - 1])\n            diff[i - 1] = dif\nfor loop_outside in range(random_outside_left_10 // random_outside_right_10):\n    for i in range(N):\n        for loop_inside in range(random_inside_left_10 % random_inside_right_10):\n            print(ans - diff[i])", "effort_before": "587.3422658203714", "effort_after": "1194.695502696765", "difficulty_before": "2.3863636363636362", "difficulty_after": "3.5833333333333335", "calculated_length_before": "102.862383112184", "calculated_length_after": "158.81635834269238", "length_before": "53", "length_after": "65", "vocabulary_before": "25", "vocabulary_after": "35", "mi_value_before": "59.04", "mi_value_after": "50.26", "Nloc_before": "11", "Nloc_after": "25", "AvgCCN_before": "5.0", "AvgCCN_after": "9.0"}, "s964794058": {"id": "s964794058", "language": "Python", "dataset": "Codenet", "pass_before": 0, "pass_after": 0, "filepath_before": "/home/yang/contamination/Codenet_Python_Before/s964794058.py", "filepath_after": "/home/yang/contamination/Codenet_Python_After/s964794058.py", "code_before": "memTime = int(input())\nmemLate = input().split()\nmemLate = [int(i) for i in memLate]\ncolorList = []\nmemColor = 0\nhighLate = 0\nfor color in range(memTime):\n    member = memLate[color]\n    if member // 400 >= 8:\n        highLate += 1\n    elif ((member // 400) in colorList) == False:\n        colorList.append(member // 400)\nmaxColor = len(colorList) + highLate\nminColor = len(colorList)\nif minColor == 0:\n    minColor = 1\nprint(str(minColor) + \" \" + str(maxColor))\n", "code_after": "memTime = int(input())\nmemLate = input().split()\nmemLate = [int(i) for i in memLate]\ncolorList = []\nmemColor = 0\nhighLate = 0\nrandom_inside_left_7 = 393\nrandom_inside_right_7 = 392\nrandom_outside_left_7 = 981\nrandom_outside_right_7 = 980\nfor loop_outside in range(random_outside_left_7 // random_outside_right_7):\n    for color in range(memTime):\n        for loop_inside in range(random_inside_left_7 % random_inside_right_7):\n            member = memLate[color]\n            if member // 400 >= 8:\n                highLate += 1\n            elif (member // 400 in colorList) == False:\n                colorList.append(member // 400)\nmaxColor = len(colorList) + highLate\nminColor = len(colorList)\nrandom_outside_if_left_21 = 515\nrandom_outside_if_right_21 = 514\nif random_outside_if_left_21 & random_outside_if_right_21:\n    if minColor == 0:\n        minColor = 1\nprint(str(minColor) + ' ' + str(maxColor))", "effort_before": "498.2535076464657", "effort_after": "908.8840807247767", "difficulty_before": "3.4375", "difficulty_after": "4.454545454545454", "calculated_length_before": "75.60964047443682", "calculated_length_after": "117.75898006442377", "length_before": "33", "length_after": "42", "vocabulary_before": "21", "vocabulary_after": "29", "mi_value_before": "56.68", "mi_value_after": "51.39", "Nloc_before": "17", "Nloc_after": "26", "AvgCCN_before": "6.0", "AvgCCN_after": "9.0"}, "s146553386": {"id": "s146553386", "language": "Python", "dataset": "Codenet", "pass_before": 3, "pass_after": 0, "filepath_before": "/home/yang/contamination/Codenet_Python_Before/s146553386.py", "filepath_after": "/home/yang/contamination/Codenet_Python_After/s146553386.py", "code_before": "import numpy\nn = int(input())\na = []\nfor i in range(2):\n    a.append(list(map(int, input().split())))\na[1] = a[1][::-1]\nres_0 = numpy.cumsum(a[0])\nres_1 = numpy.cumsum(a[1])\nans = 0\nfor i in range(n):\n    check = res_0[i] + res_1[n-1-i]\n    ans = max(ans, check)\nprint(ans)\n", "code_after": "import numpy\nn = int(input())\na = []\nrandom_inside_left_4 = 137\nrandom_inside_right_4 = 136\nrandom_outside_left_4 = 454\nrandom_outside_right_4 = 453\nrandom_inside_left_10 = 116\nrandom_inside_right_10 = 115\nrandom_outside_left_10 = 701\nrandom_outside_right_10 = 700\nfor loop_outside in range(random_outside_left_4 // random_outside_right_4):\n    for i in range(2):\n        for loop_inside in range(random_inside_left_4 % random_inside_right_4):\n            a.append(list(map(int, input().split())))\na[1] = a[1][::-1]\nres_0 = numpy.cumsum(a[0])\nres_1 = numpy.cumsum(a[1])\nans = 0\nfor loop_outside in range(random_outside_left_10 // random_outside_right_10):\n    for i in range(n):\n        for loop_inside in range(random_inside_left_10 % random_inside_right_10):\n            check = res_0[i] + res_1[n - 1 - i]\n            ans = max(ans, check)\nprint(ans)", "effort_before": "61.021056277764515", "effort_after": "261.7026771675066", "difficulty_before": "1.75", "difficulty_after": "2.6785714285714284", "calculated_length_before": "20.264662506490406", "calculated_length_after": "64.91260938324326", "length_before": "11", "length_after": "23", "vocabulary_before": "9", "vocabulary_after": "19", "mi_value_before": "63.14", "mi_value_after": "53.90", "Nloc_before": "13", "Nloc_after": "25", "AvgCCN_before": "3.0", "AvgCCN_after": "7.0"}, "s287369394": {"id": "s287369394", "language": "Python", "dataset": "Codenet", "pass_before": 0, "pass_after": 0, "filepath_before": "/home/yang/contamination/Codenet_Python_Before/s287369394.py", "filepath_after": "/home/yang/contamination/Codenet_Python_After/s287369394.py", "code_before": "N = int(input())\nA = [int(x) for x in input().split()]\nB = [int(x) for x in input().split()]\n\nans = 0\nfor i in range(N):\n    d = min(A[i], B[i])\n    ans += d\n    A[i] -= d\n    B[i] -= d\n    d = min(A[i + 1], B[i])\n    ans += d\n    A[i + 1] -= d\n    B[i] -= d\n\nprint(ans)\n", "code_after": "N = int(input())\nA = [int(x) for x in input().split()]\nB = [int(x) for x in input().split()]\nans = 0\nrandom_inside_left_5 = 4\nrandom_inside_right_5 = 3\nrandom_outside_left_5 = 587\nrandom_outside_right_5 = 586\nfor loop_outside in range(random_outside_left_5 // random_outside_right_5):\n    for i in range(N):\n        for loop_inside in range(random_inside_left_5 % random_inside_right_5):\n            d = min(A[i], B[i])\n            ans += d\n            A[i] -= d\n            B[i] -= d\n            d = min(A[i + 1], B[i])\n            ans += d\n            A[i + 1] -= d\n            B[i] -= d\nprint(ans)", "effort_before": "159.45254855459342", "effort_after": "400.0", "difficulty_before": "2.0", "difficulty_after": "3.3333333333333335", "calculated_length_before": "26.0", "calculated_length_after": "51.01955000865388", "length_before": "24", "length_after": "30", "vocabulary_before": "10", "vocabulary_after": "16", "mi_value_before": "60.49", "mi_value_after": "55.79", "Nloc_before": "14", "Nloc_after": "20", "AvgCCN_before": "4.0", "AvgCCN_after": "6.0"}, "s110149598": {"id": "s110149598", "language": "Python", "dataset": "Codenet", "pass_before": 1, "pass_after": 0, "filepath_before": "/home/yang/contamination/Codenet_Python_Before/s110149598.py", "filepath_after": "/home/yang/contamination/Codenet_Python_After/s110149598.py", "code_before": "a, b = input().split()\nif a < b:\n    print(\"<\")\nelif a > b:\n    print(\">\")\nelse:\n    print(\"=\")\n", "code_after": "(a, b) = input().split()\nrandom_outside_if_left_2 = 995\nrandom_outside_if_right_2 = 994\nif random_outside_if_left_2 & random_outside_if_right_2:\n    if a < b:\n        print('<')\n    elif a > b:\n        print('>')\n    else:\n        print('=')\nelif a > b:\n    print('>')\nelse:\n    print('=')", "effort_before": "24.0", "effort_after": "101.06477719407376", "difficulty_before": "2.0", "difficulty_after": "3.0", "calculated_length_before": "4.0", "calculated_length_after": "12.75488750216347", "length_before": "6", "length_after": "12", "vocabulary_before": "4", "vocabulary_after": "7", "mi_value_before": "72.34", "mi_value_after": "62.98", "Nloc_before": "7", "Nloc_after": "14", "AvgCCN_before": "3.0", "AvgCCN_after": "5.0"}, "s764169243": {"id": "s764169243", "language": "Python", "dataset": "Codenet", "pass_before": 0, "pass_after": 0, "filepath_before": "/home/yang/contamination/Codenet_Python_Before/s764169243.py", "filepath_after": "/home/yang/contamination/Codenet_Python_After/s764169243.py", "code_before": "import sys\ninput = sys.stdin.buffer.readline\n\n\ndef main():\n\n    class SegmentTree:\n\n        def __init__(self, size, default):\n            self.size = 2**(size-1).bit_length()\n            self.default = default\n            self.seg = [default]*(2*self.size-1)\n\n        def segfunc(self, x, y):\n            return max(x, y)\n\n        def update(self, k, x):\n            k += self.size-1\n            self.seg[k] = x\n            while k:\n                k = (k-1)//2\n                self.seg[k] = self.segfunc(self.seg[2*k+1], self.seg[2*k+2])\n\n        def query(self, p, q):\n            if q <= p:\n                return self.default\n            p += self.size-1\n            q += self.size-2\n            ret = self.default\n            while q-p > 1:\n                if p & 1 == 0:\n                    ret = self.segfunc(ret, self.seg[p])\n                if q & 1 == 1:\n                    ret = self.segfunc(ret, self.seg[q])\n                    q -= 1\n                p = p//2\n                q = (q-1)//2\n            ret = self.segfunc(self.segfunc(ret, self.seg[p]), self.seg[q])\n            return ret\n\n        def seg_print(self):\n            print(self.seg)\n\n    N = int(input())\n    a = list(map(int, input().split()))\n    ans = [i+1 for i in range(N)]\n    left_seg = SegmentTree(N, 0)\n    for i, num in enumerate(a):\n        ans[num-1] *= i + 1 - left_seg.query(0, num)\n        left_seg.update(num-1, i+1)\n    right_seg = SegmentTree(N, 0)\n    for i, num in enumerate(a[::-1]):\n        ans[num-1] *= i + 1 - right_seg.query(0, num)\n        right_seg.update(num-1, i+1)\n\n    print(sum(ans))\n\n\nif __name__ == \"__main__\":\n    main()\n", "code_after": "import sys\ninput = sys.stdin.buffer.readline\n\ndef main():\n\n    class SegmentTree:\n\n        def __init__(self, size, default):\n            self.size = 2 ** (size - 1).bit_length()\n            self.default = default\n            self.seg = [default] * (2 * self.size - 1)\n\n        def segfunc(self, x, y):\n            return max(x, y)\n\n        def update(self, k, x):\n            k += self.size - 1\n            self.seg[k] = x\n            while k:\n                k = (k - 1) // 2\n                self.seg[k] = self.segfunc(self.seg[2 * k + 1], self.seg[2 * k + 2])\n\n        def query(self, p, q):\n            if q <= p:\n                return self.default\n            p += self.size - 1\n            q += self.size - 2\n            ret = self.default\n            while q - p > 1:\n                if p & 1 == 0:\n                    ret = self.segfunc(ret, self.seg[p])\n                if q & 1 == 1:\n                    ret = self.segfunc(ret, self.seg[q])\n                    q -= 1\n                p = p // 2\n                q = (q - 1) // 2\n            ret = self.segfunc(self.segfunc(ret, self.seg[p]), self.seg[q])\n            return ret\n\n        def seg_print(self):\n            print(self.seg)\n    N = int(input())\n    a = list(map(int, input().split()))\n    ans = [i + 1 for i in range(N)]\n    left_seg = SegmentTree(N, 0)\n    for (i, num) in enumerate(a):\n        ans[num - 1] *= i + 1 - left_seg.query(0, num)\n        left_seg.update(num - 1, i + 1)\n    right_seg = SegmentTree(N, 0)\n    for (i, num) in enumerate(a[::-1]):\n        ans[num - 1] *= i + 1 - right_seg.query(0, num)\n        right_seg.update(num - 1, i + 1)\n    print(sum(ans))\nmain()", "effort_before": "7675.644418093625", "effort_after": "7624.208676971316", "difficulty_before": "10.625", "difficulty_after": "10.921052631578947", "calculated_length_before": "246.09640474436813", "calculated_length_after": "232.64052645972987", "length_before": "128", "length_after": "125", "vocabulary_before": "50", "vocabulary_after": "48", "mi_value_before": "42.84", "mi_value_after": "43.28", "Nloc_before": "48", "Nloc_after": "47", "AvgCCN_before": "2.0", "AvgCCN_after": "1.0"}, "s760938927": {"id": "s760938927", "language": "Python", "dataset": "Codenet", "pass_before": 0, "pass_after": 0, "filepath_before": "/home/yang/contamination/Codenet_Python_Before/s760938927.py", "filepath_after": "/home/yang/contamination/Codenet_Python_After/s760938927.py", "code_before": "h, w, ka = map(int, input().split())\nmat = [list(input()) for i in range(h)]\nans = 0\nfor i in range(2**(h+w)):\n    b = bin(i)[2:].zfill(h+w)\n    rs = b[:h]\n    cs = b[h:]\n    ct = 0\n    for l in range(h):\n        for k in range(w):\n            if mat[l][k] == '#' and rs[l] == '0' and cs[k] == '0':\n                ct += 1\n    if ct == ka:\n        ans += 1\nprint(ans)\n", "code_after": "(h, w, ka) = map(int, input().split())\nmat = [list(input()) for i in range(h)]\nans = 0\nrandom_inside_left_4 = 544\nrandom_inside_right_4 = 543\nrandom_outside_left_4 = 991\nrandom_outside_right_4 = 990\nfor loop_outside in range(random_outside_left_4 // random_outside_right_4):\n    for i in range(2 ** (h + w)):\n        for loop_inside in range(random_inside_left_4 % random_inside_right_4):\n            b = bin(i)[2:].zfill(h + w)\n            rs = b[:h]\n            cs = b[h:]\n            ct = 0\n            for l in range(h):\n                for k in range(w):\n                    if mat[l][k] == '#' and rs[l] == '0' and (cs[k] == '0'):\n                        ct += 1\n            if ct == ka:\n                ans += 1\nprint(ans)", "effort_before": "351.6968987214591", "effort_after": "652.1860108920766", "difficulty_before": "2.625", "difficulty_after": "3.75", "calculated_length_before": "72.0", "calculated_length_after": "101.94833690207419", "length_before": "31", "length_after": "37", "vocabulary_before": "20", "vocabulary_after": "26", "mi_value_before": "56.00", "mi_value_after": "52.34", "Nloc_before": "15", "Nloc_after": "21", "AvgCCN_before": "9.0", "AvgCCN_after": "11.0"}, "s957164965": {"id": "s957164965", "language": "Python", "dataset": "Codenet", "pass_before": 0, "pass_after": 0, "filepath_before": "/home/yang/contamination/Codenet_Python_Before/s957164965.py", "filepath_after": "/home/yang/contamination/Codenet_Python_After/s957164965.py", "code_before": "X, N = list(map(int, input().split()))\np = list(map(int, input().split()))\n\np.sort()\n\ncandidates = {}\nfor i in range(-1, 102):\n\n    if i in p:\n        continue\n\n    if not (abs(X-i) in candidates.keys()):\n        candidates[abs(X-i)] = [i]\n    else:\n        candidates[abs(X-i)].append(i)\n\nsmallest = min(candidates.keys())\n\nminNum = min(candidates[smallest])\n\nprint(minNum)\n", "code_after": "(X, N) = list(map(int, input().split()))\np = list(map(int, input().split()))\np.sort()\ncandidates = {}\nrandom_inside_left_5 = 509\nrandom_inside_right_5 = 508\nrandom_outside_left_5 = 307\nrandom_outside_right_5 = 306\nfor loop_outside in range(random_outside_left_5 // random_outside_right_5):\n    for i in range(-1, 102):\n        for loop_inside in range(random_inside_left_5 % random_inside_right_5):\n            if i in p:\n                continue\n            if not abs(X - i) in candidates.keys():\n                candidates[abs(X - i)] = [i]\n            else:\n                candidates[abs(X - i)].append(i)\nsmallest = min(candidates.keys())\nminNum = min(candidates[smallest])\nprint(minNum)", "effort_before": "225.35725972837253", "effort_after": "445.9050372273098", "difficulty_before": "3.4285714285714284", "difficulty_after": "4.363636363636363", "calculated_length_before": "27.651484454403228", "calculated_length_after": "53.563522809337215", "length_before": "19", "length_after": "25", "vocabulary_before": "11", "vocabulary_after": "17", "mi_value_before": "61.08", "mi_value_after": "56.28", "Nloc_before": "14", "Nloc_after": "20", "AvgCCN_before": "4.0", "AvgCCN_after": "6.0"}, "s662673721": {"id": "s662673721", "language": "Python", "dataset": "Codenet", "pass_before": 2, "pass_after": 1, "filepath_before": "/home/yang/contamination/Codenet_Python_Before/s662673721.py", "filepath_after": "/home/yang/contamination/Codenet_Python_After/s662673721.py", "code_before": "import sys\ninput = sys.stdin.readline\n\nn = int(input())\n\nans = 10 ** 18\n\nfor i in range(1, int(n ** (1 / 2)) + 2):\n    if n % i != 0:\n        continue\n    j = n // i\n    ans = min(ans, i + j - 2)\n\nprint(ans)\n", "code_after": "import sys\ninput = sys.stdin.readline\nn = int(input())\nvariable_10_4 = 10\nvariable_18_4 = 18\nans = variable_10_4 ** variable_18_4\nrandom_inside_left_5 = 71\nrandom_inside_right_5 = 70\nrandom_outside_left_5 = 849\nrandom_outside_right_5 = 848\nfor loop_outside in range(random_outside_left_5 // random_outside_right_5):\n    for i in range(1, int(n ** (1 / 2)) + 2):\n        for loop_inside in range(random_inside_left_5 % random_inside_right_5):\n            if n % i != 0:\n                continue\n            j = n // i\n            ans = min(ans, i + j - 2)\nprint(ans)", "effort_before": "602.1437250306282", "effort_after": "718.3981831463044", "difficulty_before": "5.25", "difficulty_after": "4.8125", "calculated_length_before": "62.67103446305711", "calculated_length_after": "83.65148445440323", "length_before": "27", "length_after": "33", "vocabulary_before": "19", "vocabulary_after": "23", "mi_value_before": "62.46", "mi_value_after": "56.21", "Nloc_before": "10", "Nloc_after": "18", "AvgCCN_before": "3.0", "AvgCCN_after": "5.0"}, "s060838372": {"id": "s060838372", "language": "Python", "dataset": "Codenet", "pass_before": 3, "pass_after": 3, "filepath_before": "/home/yang/contamination/Codenet_Python_Before/s060838372.py", "filepath_after": "/home/yang/contamination/Codenet_Python_After/s060838372.py", "code_before": "N, K = map(int, input().split())\nS = list(input())\nif S[K-1] == \"A\":\n    S[K-1] = \"a\"\nelif S[K-1] == \"B\":\n    S[K-1] = \"b\"\nelse:\n    S[K-1] = \"c\"\nans = \"\".join(S)\nprint(ans)\n", "code_after": "(N, K) = map(int, input().split())\nS = list(input())\nrandom_outside_if_left_3 = 575\nrandom_outside_if_right_3 = 574\nif random_outside_if_left_3 & random_outside_if_right_3:\n    if S[K - 1] == 'A':\n        S[K - 1] = 'a'\n    elif S[K - 1] == 'B':\n        S[K - 1] = 'b'\n    else:\n        S[K - 1] = 'c'\nelif S[K - 1] == 'B':\n    S[K - 1] = 'b'\nelse:\n    S[K - 1] = 'c'\nans = ''.join(S)\nprint(ans)", "effort_before": "147.0", "effort_after": "516.2346001038466", "difficulty_before": "2.3333333333333335", "difficulty_after": "4.0", "calculated_length_before": "17.509775004326936", "calculated_length_after": "33.28421251514428", "length_before": "21", "length_after": "36", "vocabulary_before": "8", "vocabulary_after": "12", "mi_value_before": "64.28", "mi_value_after": "57.17", "Nloc_before": "10", "Nloc_after": "17", "AvgCCN_before": "3.0", "AvgCCN_after": "5.0"}, "s895229833": {"id": "s895229833", "language": "Python", "dataset": "Codenet", "pass_before": 3, "pass_after": 0, "filepath_before": "/home/yang/contamination/Codenet_Python_Before/s895229833.py", "filepath_after": "/home/yang/contamination/Codenet_Python_After/s895229833.py", "code_before": "N = int(input())\nH = list(map(int, list(input().split())))\n\ncount_best, count_tmp = 0, 0\n\nfor i in range(N-1):\n    if H[i] >= H[i+1]:\n        count_tmp += 1\n    else:\n        if count_tmp > count_best:\n            count_best = count_tmp\n\n        count_tmp = 0\n\nif count_tmp > count_best:\n    count_best = count_tmp\n\nprint(count_best)\n", "code_after": "N = int(input())\nH = list(map(int, list(input().split())))\n(count_best, count_tmp) = (0, 0)\nrandom_inside_left_4 = 318\nrandom_inside_right_4 = 317\nrandom_outside_left_4 = 734\nrandom_outside_right_4 = 733\nfor loop_outside in range(random_outside_left_4 // random_outside_right_4):\n    for i in range(N - 1):\n        for loop_inside in range(random_inside_left_4 % random_inside_right_4):\n            if H[i] >= H[i + 1]:\n                count_tmp += 1\n            else:\n                if count_tmp > count_best:\n                    count_best = count_tmp\n                count_tmp = 0\nrandom_outside_if_left_17 = 98\nrandom_outside_if_right_17 = 97\nif random_outside_if_left_17 & random_outside_if_right_17:\n    if count_tmp > count_best:\n        count_best = count_tmp\nprint(count_best)", "effort_before": "213.49635132161606", "effort_after": "565.5076684156464", "difficulty_before": "3.4285714285714284", "difficulty_after": "4.846153846153846", "calculated_length_before": "27.651484454403228", "calculated_length_after": "67.75720079023742", "length_before": "18", "length_after": "27", "vocabulary_before": "11", "vocabulary_after": "20", "mi_value_before": "61.76", "mi_value_after": "54.75", "Nloc_before": "13", "Nloc_after": "22", "AvgCCN_before": "5.0", "AvgCCN_after": "8.0"}, "s031459110": {"id": "s031459110", "language": "Python", "dataset": "Codenet", "pass_before": 0, "pass_after": 0, "filepath_before": "/home/yang/contamination/Codenet_Python_Before/s031459110.py", "filepath_after": "/home/yang/contamination/Codenet_Python_After/s031459110.py", "code_before": "N = int(input())\nc = input()\n\nnum_w = c.count(\"W\")\nnum_r = N - num_w\n\ncomp = \"R\"*num_r + \"W\"*num_w\nans = 0\nfor i in range(num_r):\n    if c[i] != comp[i]:\n        ans += 1\n\nans = min(num_w, num_r, ans)\nprint(ans)\n", "code_after": "N = int(input())\nc = input()\nnum_w = c.count('W')\nnum_r = N - num_w\nvariable_R_5 = 'R'\nvariable_W_5 = 'W'\ncomp = variable_R_5 * num_r + variable_W_5 * num_w\nans = 0\nrandom_inside_left_7 = 996\nrandom_inside_right_7 = 995\nrandom_outside_left_7 = 732\nrandom_outside_right_7 = 731\nfor loop_outside in range(random_outside_left_7 // random_outside_right_7):\n    for i in range(num_r):\n        for loop_inside in range(random_inside_left_7 % random_inside_right_7):\n            if c[i] != comp[i]:\n                ans += 1\nans = min(num_w, num_r, ans)\nprint(ans)", "effort_before": "153.43424884571635", "effort_after": "337.32997806940887", "difficulty_before": "2.1818181818181817", "difficulty_after": "3.2", "calculated_length_before": "46.053747805010275", "calculated_length_after": "74.11313393845472", "length_before": "18", "length_after": "24", "vocabulary_before": "15", "vocabulary_after": "21", "mi_value_before": "63.12", "mi_value_after": "56.78", "Nloc_before": "11", "Nloc_after": "19", "AvgCCN_before": "3.0", "AvgCCN_after": "5.0"}, "s355314304": {"id": "s355314304", "language": "Python", "dataset": "Codenet", "pass_before": 2, "pass_after": 0, "filepath_before": "/home/yang/contamination/Codenet_Python_Before/s355314304.py", "filepath_after": "/home/yang/contamination/Codenet_Python_After/s355314304.py", "code_before": "n = int(input())\n\nif n % 1000 == 0:\n    print(0)\nelse:\n    print(1000 - n % 1000)\n", "code_after": "n = int(input())\nrandom_outside_if_left_2 = 103\nrandom_outside_if_right_2 = 102\nif random_outside_if_left_2 & random_outside_if_right_2:\n    if n % 1000 == 0:\n        print(0)\n    else:\n        print(1000 - n % 1000)\nelse:\n    print(1000 - n % 1000)", "effort_before": "86.39999999999999", "effort_after": "263.494743803005", "difficulty_before": "2.4", "difficulty_after": "3.5", "calculated_length_before": "16.36452797660028", "calculated_length_after": "32.0", "length_before": "12", "length_after": "21", "vocabulary_before": "8", "vocabulary_after": "12", "mi_value_before": "71.86", "mi_value_after": "63.74", "Nloc_before": "5", "Nloc_after": "10", "AvgCCN_before": "2.0", "AvgCCN_after": "3.0"}, "s752993784": {"id": "s752993784", "language": "Python", "dataset": "Codenet", "pass_before": 2, "pass_after": 0, "filepath_before": "/home/yang/contamination/Codenet_Python_Before/s752993784.py", "filepath_after": "/home/yang/contamination/Codenet_Python_After/s752993784.py", "code_before": "s = list(input())\nmods = [0]*(len(s))\ncountRemainder = [0] * 2019\ncnt = 0\n\n\nm = 1\nmod = 0\nfor i in range(len(s)):\n    mod += int(s[len(s) - i - 1]) * m\n\n    mod %= 2019\n    m *= 10\n    m %= 2019\n\n    countRemainder[mod] += 1\n\ncountRemainder[0] += 1\n\nfor i in range(2019):\n    cnt += int(countRemainder[i] * (countRemainder[i] - 1) / 2)\n\nprint(cnt)\n", "code_after": "s = list(input())\nvariable_0_2 = 0\nmods = [variable_0_2] * len(s)\nvariable_2019_3 = 2019\nvariable_0_3 = 0\ncountRemainder = [variable_0_3] * variable_2019_3\ncnt = 0\nm = 1\nmod = 0\nrandom_inside_left_7 = 762\nrandom_inside_right_7 = 761\nrandom_outside_left_7 = 830\nrandom_outside_right_7 = 829\nrandom_inside_left_14 = 219\nrandom_inside_right_14 = 218\nrandom_outside_left_14 = 841\nrandom_outside_right_14 = 840\nfor loop_outside in range(random_outside_left_7 // random_outside_right_7):\n    for i in range(len(s)):\n        for loop_inside in range(random_inside_left_7 % random_inside_right_7):\n            mod += int(s[len(s) - i - 1]) * m\n            mod %= 2019\n            m *= 10\n            m %= 2019\n            countRemainder[mod] += 1\ncountRemainder[0] += 1\nfor loop_outside in range(random_outside_left_14 // random_outside_right_14):\n    for i in range(2019):\n        for loop_inside in range(random_inside_left_14 % random_inside_right_14):\n            cnt += int(countRemainder[i] * (countRemainder[i] - 1) / 2)\nprint(cnt)", "effort_before": "729.4429690818959", "effort_after": "1091.9686441889328", "difficulty_before": "3.409090909090909", "difficulty_after": "3.6774193548387095", "calculated_length_before": "109.71713608445735", "calculated_length_after": "169.0898606263201", "length_before": "45", "length_after": "57", "vocabulary_before": "27", "vocabulary_after": "37", "mi_value_before": "56.44", "mi_value_after": "48.91", "Nloc_before": "16", "Nloc_after": "31", "AvgCCN_before": "3.0", "AvgCCN_after": "7.0"}, "s676839884": {"id": "s676839884", "language": "Python", "dataset": "Codenet", "pass_before": 3, "pass_after": 0, "filepath_before": "/home/yang/contamination/Codenet_Python_Before/s676839884.py", "filepath_after": "/home/yang/contamination/Codenet_Python_After/s676839884.py", "code_before": "s = input()\nt = input()\n\nif t[:-1] == s:\n    print('Yes')\nelse:\n    print('No')\n", "code_after": "s = input()\nt = input()\nrandom_outside_if_left_3 = 466\nrandom_outside_if_right_3 = 465\nif random_outside_if_left_3 & random_outside_if_right_3:\n    if t[:-1] == s:\n        print('Yes')\n    else:\n        print('No')\nelse:\n    print('No')", "effort_before": "11.60964047443681", "effort_after": "36.0", "difficulty_before": "1.0", "difficulty_after": "1.5", "calculated_length_before": "6.754887502163469", "calculated_length_after": "16.36452797660028", "length_before": "5", "length_after": "8", "vocabulary_before": "5", "vocabulary_after": "8", "mi_value_before": "73.84", "mi_value_after": "66.39", "Nloc_before": "6", "Nloc_after": "11", "AvgCCN_before": "2.0", "AvgCCN_after": "3.0"}, "s923405856": {"id": "s923405856", "language": "Python", "dataset": "Codenet", "pass_before": 3, "pass_after": 3, "filepath_before": "/home/yang/contamination/Codenet_Python_Before/s923405856.py", "filepath_after": "/home/yang/contamination/Codenet_Python_After/s923405856.py", "code_before": "while True:\n    n = int(input())\n\n    if n == 0:\n        break\n\n    res = -1111111111\n    s = 0\n    for i in range(n):\n        a = int(input())\n        s = max(s + a, a)\n        res = max(s, res)\n\n    print(res)\n", "code_after": "random_inside_left_1 = 187\nrandom_inside_right_1 = 186\nrandom_outside_left_1 = 128\nrandom_outside_right_1 = 127\nfor loop_outside in range(random_outside_left_1 // random_outside_right_1):\n    while True:\n        for loop_inside in range(random_inside_left_1 % random_inside_right_1):\n            n = int(input())\n            if n == 0:\n                break\n            res = -1111111111\n            s = 0\n            for i in range(n):\n                a = int(input())\n                s = max(s + a, a)\n                res = max(s, res)\n            print(res)", "effort_before": "36.0", "effort_after": "133.25742227201613", "difficulty_before": "1.5", "difficulty_after": "2.5", "calculated_length_before": "16.36452797660028", "calculated_length_after": "40.13896548741762", "length_before": "8", "length_after": "14", "vocabulary_before": "8", "vocabulary_after": "14", "mi_value_before": "66.26", "mi_value_after": "59.72", "Nloc_before": "11", "Nloc_after": "17", "AvgCCN_before": "4.0", "AvgCCN_after": "6.0"}, "s344468705": {"id": "s344468705", "language": "Python", "dataset": "Codenet", "pass_before": 0, "pass_after": 0, "filepath_before": "/home/yang/contamination/Codenet_Python_Before/s344468705.py", "filepath_after": "/home/yang/contamination/Codenet_Python_After/s344468705.py", "code_before": "import sys\n\n\nfrom bisect import bisect_left, bisect_right\n\n\ninput = sys.stdin.readline\n\n\ndef getS(): return input().strip()\ndef getN(): return int(input())\ndef getList(): return list(map(int, input().split()))\ndef getZList(): return [int(x) - 1 for x in input().split()]\n\n\nINF = 10 ** 20\nMOD = 1000000007\n\n\ndef solve():\n    n = getN()\n    dp = [-INF]\n    for i in range(n):\n        num = getN()\n        num = -num\n        if num >= dp[-1]:\n            dp.append(num)\n        else:\n            idx = bisect_right(dp, num)\n            dp[idx] = num\n\n    print(len(dp) - 1)\n    return\n\n\ndef main():\n    n = getN()\n    for _ in range(n):\n        solve()\n\n\nif __name__ == \"__main__\":\n\n    solve()\n", "code_after": "import sys\nfrom bisect import bisect_left, bisect_right\ninput = sys.stdin.readline\n\ndef getS():\n    return input().strip()\n\ndef getN():\n    return int(input())\n\ndef getList():\n    return list(map(int, input().split()))\n\ndef getZList():\n    return [int(x) - 1 for x in input().split()]\nvariable_10_16 = 10\nvariable_20_16 = 20\nINF = variable_10_16 ** variable_20_16\nMOD = 1000000007\n\ndef solve():\n    n = getN()\n    dp = [-INF]\n    for i in range(n):\n        num = getN()\n        num = -num\n        if num >= dp[-1]:\n            dp.append(num)\n        else:\n            idx = bisect_right(dp, num)\n            dp[idx] = num\n    print(len(dp) - 1)\n    return\n\ndef main():\n    n = getN()\n    for _ in range(n):\n        solve()\nsolve()", "effort_before": "248.1818181818182", "effort_after": "162.81934759820808", "difficulty_before": "2.9545454545454546", "difficulty_after": "2.4444444444444446", "calculated_length_before": "49.663388279447084", "calculated_length_after": "36.52932501298081", "length_before": "21", "length_after": "18", "vocabulary_before": "16", "vocabulary_after": "13", "mi_value_before": "53.13", "mi_value_after": "53.69", "Nloc_before": "28", "Nloc_after": "33", "AvgCCN_before": "2.0", "AvgCCN_after": "1.0"}, "s441028271": {"id": "s441028271", "language": "Python", "dataset": "Codenet", "pass_before": 3, "pass_after": 0, "filepath_before": "/home/yang/contamination/Codenet_Python_Before/s441028271.py", "filepath_after": "/home/yang/contamination/Codenet_Python_After/s441028271.py", "code_before": "(a, b, c, k) = list(map(int, input().split()))\nif k % 2 == 0:\n    print(a-b)\nelse:\n    print(b-a)\n", "code_after": "(a, b, c, k) = list(map(int, input().split()))\nrandom_outside_if_left_2 = 65\nrandom_outside_if_right_2 = 64\nif random_outside_if_left_2 & random_outside_if_right_2:\n    if k % 2 == 0:\n        print(a - b)\n    else:\n        print(b - a)\nelse:\n    print(b - a)", "effort_before": "76.0782000346155", "effort_after": "193.58797503894246", "difficulty_before": "2.0", "difficulty_after": "3.0", "calculated_length_before": "20.264662506490406", "calculated_length_after": "32.0", "length_before": "12", "length_after": "18", "vocabulary_before": "9", "vocabulary_after": "12", "mi_value_before": "71.69", "mi_value_after": "64.21", "Nloc_before": "5", "Nloc_after": "10", "AvgCCN_before": "2.0", "AvgCCN_after": "3.0"}, "s897879131": {"id": "s897879131", "language": "Python", "dataset": "Codenet", "pass_before": 3, "pass_after": 3, "filepath_before": "/home/yang/contamination/Codenet_Python_Before/s897879131.py", "filepath_after": "/home/yang/contamination/Codenet_Python_After/s897879131.py", "code_before": "R, G, B, N = map(int, input().split())\n\nscore = 0\nfor i in range(N // R + 1):\n    for j in range((N-i * R) // G + 1):\n        if N - i * R - j * G >= 0 and (N - i * R - j * G) % B == 0:\n            score += 1\n\nprint(score)\n", "code_after": "(R, G, B, N) = map(int, input().split())\nscore = 0\nrandom_inside_left_3 = 563\nrandom_inside_right_3 = 562\nrandom_outside_left_3 = 355\nrandom_outside_right_3 = 354\nfor loop_outside in range(random_outside_left_3 // random_outside_right_3):\n    for i in range(N // R + 1):\n        for loop_inside in range(random_inside_left_3 % random_inside_right_3):\n            for j in range((N - i * R) // G + 1):\n                if N - i * R - j * G >= 0 and (N - i * R - j * G) % B == 0:\n                    score += 1\nprint(score)", "effort_before": "1805.0", "effort_after": "1954.231650545194", "difficulty_before": "6.333333333333333", "difficulty_after": "6.0", "calculated_length_before": "134.03910001730776", "calculated_length_after": "158.6059378176129", "length_before": "57", "length_after": "63", "vocabulary_before": "32", "vocabulary_after": "36", "mi_value_before": "62.44", "mi_value_after": "56.46", "Nloc_before": "7", "Nloc_after": "13", "AvgCCN_before": "5.0", "AvgCCN_after": "7.0"}, "s790754864": {"id": "s790754864", "language": "Python", "dataset": "Codenet", "pass_before": 0, "pass_after": 0, "filepath_before": "/home/yang/contamination/Codenet_Python_Before/s790754864.py", "filepath_after": "/home/yang/contamination/Codenet_Python_After/s790754864.py", "code_before": "import math\nN, K = (int(x) for x in input().split())\nR = N - K\nmod = 10**9 + 7\n\n\ndef fact(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\n\n\nfor i in range(1, K+1):\n    if N - K + 1 < i:\n        ans = 0\n    else:\n        ans = fact(R+1, i)*fact(K-1, i-1)\n    print(int(ans) % mod)\n", "code_after": "import math\n(N, K) = (int(x) for x in input().split())\nR = N - K\nvariable_7_4 = 7\nvariable_10_4 = 10\nvariable_9_4 = 9\nmod = variable_10_4 ** variable_9_4 + variable_7_4\n\ndef fact(n, r):\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\nrandom_inside_left_8 = 993\nrandom_inside_right_8 = 992\nrandom_outside_left_8 = 935\nrandom_outside_right_8 = 934\nfor loop_outside in range(random_outside_left_8 // random_outside_right_8):\n    for i in range(1, K + 1):\n        for loop_inside in range(random_inside_left_8 % random_inside_right_8):\n            if N - K + 1 < i:\n                ans = 0\n            else:\n                ans = fact(R + 1, i) * fact(K - 1, i - 1)\n            print(int(ans) % mod)", "effort_before": "1081.6548574629608", "effort_after": "1213.8", "difficulty_before": "5.0", "difficulty_after": "4.76", "calculated_length_before": "111.8901503327572", "calculated_length_after": "135.74788919877133", "length_before": "45", "length_after": "51", "vocabulary_before": "28", "vocabulary_after": "32", "mi_value_before": "58.81", "mi_value_after": "53.06", "Nloc_before": "12", "Nloc_after": "21", "AvgCCN_before": "4.0", "AvgCCN_after": "6.0"}, "s423256012": {"id": "s423256012", "language": "Python", "dataset": "Codenet", "pass_before": 3, "pass_after": 3, "filepath_before": "/home/yang/contamination/Codenet_Python_Before/s423256012.py", "filepath_after": "/home/yang/contamination/Codenet_Python_After/s423256012.py", "code_before": "A, B = map(int, input().split())\n\nif (A+B) % 2 == 1:\n    print('IMPOSSIBLE')\nelse:\n    print((A+B)//2)\n", "code_after": "(A, B) = map(int, input().split())\nrandom_outside_if_left_2 = 951\nrandom_outside_if_right_2 = 950\nif random_outside_if_left_2 & random_outside_if_right_2:\n    if (A + B) % 2 == 1:\n        print('IMPOSSIBLE')\n    else:\n        print((A + B) // 2)\nelse:\n    print((A + B) // 2)", "effort_before": "148.26135508445563", "effort_after": "375.06149717841777", "difficulty_before": "2.857142857142857", "difficulty_after": "4.0", "calculated_length_before": "27.651484454403228", "calculated_length_after": "44.82892142331043", "length_before": "15", "length_after": "24", "vocabulary_before": "11", "vocabulary_after": "15", "mi_value_before": "70.75", "mi_value_after": "63.07", "Nloc_before": "5", "Nloc_after": "10", "AvgCCN_before": "2.0", "AvgCCN_after": "3.0"}, "s664563518": {"id": "s664563518", "language": "Python", "dataset": "Codenet", "pass_before": 3, "pass_after": 3, "filepath_before": "/home/yang/contamination/Codenet_Python_Before/s664563518.py", "filepath_after": "/home/yang/contamination/Codenet_Python_After/s664563518.py", "code_before": "from heapq import heappush, heappop, heapify\nfrom collections import deque, defaultdict, Counter\nimport itertools\nfrom itertools import permutations, combinations, accumulate\nimport sys\nimport bisect\nimport string\nimport math\nimport time\n\n\ndef I(): return int(input())\n\n\ndef MI(): return map(int, input().split())\n\n\ndef LI(): return [int(i) for i in input().split()]\n\n\ndef LI_(): return [int(i)-1 for i in input().split()]\n\n\ndef StoI(): return [ord(i)-97 for i in input()]\n\n\ndef ItoS(nn): return chr(nn+97)\n\n\ndef input(): return sys.stdin.readline().rstrip()\n\n\ndef show(*inp, end='\\n'):\n    if show_flg:\n        print(*inp, end=end)\n\n\nYN = ['No', 'Yes']\nMOD = 10**9+7\ninf = float('inf')\nIINF = 10**10\nl_alp = string.ascii_lowercase\nu_alp = string.ascii_uppercase\nts = time.time()\nsys.setrecursionlimit(10**6)\nnums = ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10']\n\nshow_flg = False\n\n\ndef main():\n    N = I()\n    s = [0] * N\n    t = [0] * N\n\n    for i in range(N):\n        s[i], t[i] = map(str, input().split())\n        t[i] = int(t[i])\n\n    X = input()\n    xi = 0\n\n    for i in range(N):\n        if s[i] == X:\n            xi = i\n            break\n\n    ans = 0\n\n    for i in range(N):\n        if xi < i:\n            ans += t[i]\n\n    print(ans)\n\n\nif __name__ == '__main__':\n    main()\n", "code_after": "from heapq import heappush, heappop, heapify\nfrom collections import deque, defaultdict, Counter\nimport itertools\nfrom itertools import permutations, combinations, accumulate\nimport sys\nimport bisect\nimport string\nimport math\nimport time\n\ndef I():\n    return int(input())\n\ndef MI():\n    return map(int, input().split())\n\ndef LI():\n    return [int(i) for i in input().split()]\n\ndef LI_():\n    return [int(i) - 1 for i in input().split()]\n\ndef StoI():\n    return [ord(i) - 97 for i in input()]\n\ndef ItoS(nn):\n    return chr(nn + 97)\n\ndef input():\n    return sys.stdin.readline().rstrip()\n\ndef show(*inp, end='\\n'):\n    if show_flg:\n        print(*inp, end=end)\nYN = ['No', 'Yes']\nvariable_7_36 = 7\nvariable_10_36 = 10\nvariable_9_36 = 9\nMOD = variable_10_36 ** variable_9_36 + variable_7_36\ninf = float('inf')\nvariable_10_38 = 10\nvariable_10_38 = 10\nIINF = variable_10_38 ** variable_10_38\nl_alp = string.ascii_lowercase\nu_alp = string.ascii_uppercase\nts = time.time()\nsys.setrecursionlimit(10 ** 6)\nnums = ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10']\nshow_flg = False\n\ndef main():\n    N = I()\n    s = [0] * N\n    t = [0] * N\n    for i in range(N):\n        (s[i], t[i]) = map(str, input().split())\n        t[i] = int(t[i])\n    X = input()\n    xi = 0\n    for i in range(N):\n        if s[i] == X:\n            xi = i\n            break\n    ans = 0\n    for i in range(N):\n        if xi < i:\n            ans += t[i]\n    print(ans)\nmain()", "effort_before": "664.7260760408741", "effort_after": "566.3938162715141", "difficulty_before": "3.5454545454545454", "difficulty_after": "3.272727272727273", "calculated_length_before": "113.61727061434748", "calculated_length_after": "113.61727061434748", "length_before": "39", "length_after": "36", "vocabulary_before": "28", "vocabulary_after": "28", "mi_value_before": "45.51", "mi_value_after": "45.25", "Nloc_before": "49", "Nloc_after": "60", "AvgCCN_before": "2.0", "AvgCCN_after": "1.0"}, "s814885508": {"id": "s814885508", "language": "Python", "dataset": "Codenet", "pass_before": 3, "pass_after": 3, "filepath_before": "/home/yang/contamination/Codenet_Python_Before/s814885508.py", "filepath_after": "/home/yang/contamination/Codenet_Python_After/s814885508.py", "code_before": "def main():\n    X, K, D = map(int, input().split())\n\n    r = X // D\n    if abs(r) > K:\n        print(abs(X) - K * D)\n        exit()\n    a = X - r * D\n    if (K - r) % 2 == 0:\n        print(a)\n    else:\n        print(abs(D - a))\n\n\nif __name__ == '__main__':\n    main()\n", "code_after": "def main():\n    (X, K, D) = map(int, input().split())\n    r = X // D\n    if abs(r) > K:\n        print(abs(X) - K * D)\n        exit()\n    a = X - r * D\n    if (K - r) % 2 == 0:\n        print(a)\n    else:\n        print(abs(D - a))\nmain()", "effort_before": "637.7644897874761", "effort_after": "588.1745787844964", "difficulty_before": "4.4", "difficulty_after": "4.615384615384615", "calculated_length_before": "74.11313393845472", "calculated_length_after": "63.61549134016113", "length_before": "33", "length_after": "30", "vocabulary_before": "21", "vocabulary_after": "19", "mi_value_before": "59.60", "mi_value_after": "60.82", "Nloc_before": "13", "Nloc_after": "12", "AvgCCN_before": "2.0", "AvgCCN_after": "1.0"}, "s708549466": {"id": "s708549466", "language": "Python", "dataset": "Codenet", "pass_before": 3, "pass_after": 3, "filepath_before": "/home/yang/contamination/Codenet_Python_Before/s708549466.py", "filepath_after": "/home/yang/contamination/Codenet_Python_After/s708549466.py", "code_before": "N, x = map(int, input().split())\na = list(map(int, input().split()))\ncnt = 0\nfor i in range(1, N):\n    tmp = a[i - 1] + a[i]\n    if tmp > x:\n        if tmp - x > a[i]:\n            a[i - 1] = tmp - a[i] - x\n            a[i] = 0\n        else:\n            a[i] = a[i] - (tmp - x)\n        cnt += tmp - x\n\nprint(cnt)\n", "code_after": "(N, x) = map(int, input().split())\na = list(map(int, input().split()))\ncnt = 0\nrandom_inside_left_4 = 413\nrandom_inside_right_4 = 412\nrandom_outside_left_4 = 817\nrandom_outside_right_4 = 816\nfor loop_outside in range(random_outside_left_4 // random_outside_right_4):\n    for i in range(1, N):\n        for loop_inside in range(random_inside_left_4 % random_inside_right_4):\n            tmp = a[i - 1] + a[i]\n            if tmp > x:\n                if tmp - x > a[i]:\n                    a[i - 1] = tmp - a[i] - x\n                    a[i] = 0\n                else:\n                    a[i] = a[i] - (tmp - x)\n                cnt += tmp - x\nprint(cnt)", "effort_before": "378.3822744471744", "effort_after": "738.8484528226455", "difficulty_before": "2.5714285714285716", "difficulty_after": "3.888888888888889", "calculated_length_before": "58.05785641096992", "calculated_length_after": "86.66829050039843", "length_before": "36", "length_after": "42", "vocabulary_before": "17", "vocabulary_after": "23", "mi_value_before": "59.28", "mi_value_after": "54.86", "Nloc_before": "13", "Nloc_after": "19", "AvgCCN_before": "4.0", "AvgCCN_after": "6.0"}, "s546174362": {"id": "s546174362", "language": "Python", "dataset": "Codenet", "pass_before": 3, "pass_after": 3, "filepath_before": "/home/yang/contamination/Codenet_Python_Before/s546174362.py", "filepath_after": "/home/yang/contamination/Codenet_Python_After/s546174362.py", "code_before": "N, M = map(int, input().split())\n*A, = map(int, input().split())\nA = sorted(A)\n\nwhile M:\n    A[-1] //= 2\n    M -= 1\n    i = -2\n    while M and (-N <= i and A[i] >= A[-1]):\n        A[i] //= 2\n        M -= 1\n        i -= 1\n    A.sort()\n\nprint(sum(A))\n", "code_after": "(N, M) = map(int, input().split())\n(*A,) = map(int, input().split())\nA = sorted(A)\nrandom_inside_left_4 = 349\nrandom_inside_right_4 = 348\nrandom_outside_left_4 = 805\nrandom_outside_right_4 = 804\nfor loop_outside in range(random_outside_left_4 // random_outside_right_4):\n    while M:\n        for loop_inside in range(random_inside_left_4 % random_inside_right_4):\n            A[-1] //= 2\n            M -= 1\n            i = -2\n            while M and (-N <= i and A[i] >= A[-1]):\n                A[i] //= 2\n                M -= 1\n                i -= 1\n            A.sort()\nprint(sum(A))", "effort_before": "754.824042773437", "effort_after": "1006.2644170700374", "difficulty_before": "5.076923076923077", "difficulty_after": "5.352941176470588", "calculated_length_before": "63.61549134016113", "calculated_length_after": "89.13835275565901", "length_before": "35", "length_after": "41", "vocabulary_before": "19", "vocabulary_after": "24", "mi_value_before": "59.12", "mi_value_after": "54.75", "Nloc_before": "13", "Nloc_after": "19", "AvgCCN_before": "5.0", "AvgCCN_after": "7.0"}, "s232279435": {"id": "s232279435", "language": "Python", "dataset": "Codenet", "pass_before": 0, "pass_after": 0, "filepath_before": "/home/yang/contamination/Codenet_Python_Before/s232279435.py", "filepath_after": "/home/yang/contamination/Codenet_Python_After/s232279435.py", "code_before": "n = int(input())\ns = str(input())\n\nans = 0\n\nfor i in range(n):\n    x = set(s[:i+1])\n    y = set(s[i+1:])\n\n    z = 0\n    for w in x:\n        if w in y:\n            z += 1\n    if z > ans:\n        ans = z\nprint(ans)\n", "code_after": "n = int(input())\ns = str(input())\nans = 0\nrandom_inside_left_4 = 590\nrandom_inside_right_4 = 589\nrandom_outside_left_4 = 605\nrandom_outside_right_4 = 604\nfor loop_outside in range(random_outside_left_4 // random_outside_right_4):\n    for i in range(n):\n        for loop_inside in range(random_inside_left_4 % random_inside_right_4):\n            x = set(s[:i + 1])\n            y = set(s[i + 1:])\n            z = 0\n            for w in x:\n                if w in y:\n                    z += 1\n            if z > ans:\n                ans = z\nprint(ans)", "effort_before": "118.87218755408671", "effort_after": "287.15645877722613", "difficulty_before": "2.5", "difficulty_after": "3.5", "calculated_length_before": "20.264662506490406", "calculated_length_after": "44.82892142331043", "length_before": "15", "length_after": "21", "vocabulary_before": "9", "vocabulary_after": "15", "mi_value_before": "61.32", "mi_value_after": "56.37", "Nloc_before": "13", "Nloc_after": "19", "AvgCCN_before": "5.0", "AvgCCN_after": "7.0"}, "s453478465": {"id": "s453478465", "language": "Python", "dataset": "Codenet", "pass_before": 3, "pass_after": 0, "filepath_before": "/home/yang/contamination/Codenet_Python_Before/s453478465.py", "filepath_after": "/home/yang/contamination/Codenet_Python_After/s453478465.py", "code_before": "a, b = map(int, input().split())\nif a <= 8 and b <= 8:\n    print(\"Yay!\")\nelse:\n    print(\":(\")\n", "code_after": "(a, b) = map(int, input().split())\nrandom_outside_if_left_2 = 132\nrandom_outside_if_right_2 = 131\nif random_outside_if_left_2 & random_outside_if_right_2:\n    if a <= 8 and b <= 8:\n        print('Yay!')\n    else:\n        print(':(')\nelse:\n    print(':(')", "effort_before": "30.319433158222125", "effort_after": "68.33680652339717", "difficulty_before": "1.2", "difficulty_after": "1.7142857142857142", "calculated_length_before": "13.60964047443681", "calculated_length_after": "24.406371956566698", "length_before": "9", "length_after": "12", "vocabulary_before": "7", "vocabulary_after": "10", "mi_value_before": "72.80", "mi_value_after": "65.54", "Nloc_before": "5", "Nloc_after": "10", "AvgCCN_before": "3.0", "AvgCCN_after": "4.0"}, "s233116196": {"id": "s233116196", "language": "Python", "dataset": "Codenet", "pass_before": 0, "pass_after": 0, "filepath_before": "/home/yang/contamination/Codenet_Python_Before/s233116196.py", "filepath_after": "/home/yang/contamination/Codenet_Python_After/s233116196.py", "code_before": "from collections import deque\nN, M = map(int, input().split())\nG = {i: [] for i in range(1, N+1)}\nfor _ in range(M):\n    a, b = map(int, input().split())\n    G[a].append(b)\n    G[b].append(a)\ncol = [-1 for _ in range(N+1)]\ncnt = 0\nfor i in range(1, N+1):\n    if col[i] < 0:\n        col[i] = cnt\n        que = deque([i])\n        while que:\n            x = que.popleft()\n            for y in G[x]:\n                if col[y] < 0:\n                    col[y] = cnt\n                    que.append(y)\n        cnt += 1\ncmax = max(col)\nprint(cmax)\n", "code_after": "from collections import deque\n(N, M) = map(int, input().split())\nG = {i: [] for i in range(1, N + 1)}\nrandom_inside_left_4 = 516\nrandom_inside_right_4 = 515\nrandom_outside_left_4 = 385\nrandom_outside_right_4 = 384\nrandom_inside_left_10 = 581\nrandom_inside_right_10 = 580\nrandom_outside_left_10 = 868\nrandom_outside_right_10 = 867\nfor loop_outside in range(random_outside_left_4 // random_outside_right_4):\n    for _ in range(M):\n        for loop_inside in range(random_inside_left_4 % random_inside_right_4):\n            (a, b) = map(int, input().split())\n            G[a].append(b)\n            G[b].append(a)\ncol = [-1 for _ in range(N + 1)]\ncnt = 0\nfor loop_outside in range(random_outside_left_10 // random_outside_right_10):\n    for i in range(1, N + 1):\n        for loop_inside in range(random_inside_left_10 % random_inside_right_10):\n            if col[i] < 0:\n                col[i] = cnt\n                que = deque([i])\n                while que:\n                    x = que.popleft()\n                    for y in G[x]:\n                        if col[y] < 0:\n                            col[y] = cnt\n                            que.append(y)\n                cnt += 1\ncmax = max(col)\nprint(cmax)", "effort_before": "206.0451250937503", "effort_after": "509.7513016132302", "difficulty_before": "3.25", "difficulty_after": "3.75", "calculated_length_before": "20.264662506490406", "calculated_length_after": "64.91260938324326", "length_before": "20", "length_after": "32", "vocabulary_before": "9", "vocabulary_after": "19", "mi_value_before": "56.06", "mi_value_after": "49.36", "Nloc_before": "22", "Nloc_after": "34", "AvgCCN_before": "9.0", "AvgCCN_after": "13.0"}, "s855969677": {"id": "s855969677", "language": "Python", "dataset": "Codenet", "pass_before": 3, "pass_after": 0, "filepath_before": "/home/yang/contamination/Codenet_Python_Before/s855969677.py", "filepath_after": "/home/yang/contamination/Codenet_Python_After/s855969677.py", "code_before": "s = input()\n\nif s == 'RRR':\n    print(3)\nelif s == 'SSS':\n    print(0)\nelif s == 'RRS' or s == 'SRR':\n    print(2)\nelse:\n    print(1)\n", "code_after": "s = input()\nrandom_outside_if_left_2 = 468\nrandom_outside_if_right_2 = 467\nif random_outside_if_left_2 & random_outside_if_right_2:\n    if s == 'RRR':\n        print(3)\n    elif s == 'SSS':\n        print(0)\n    elif s == 'RRS' or s == 'SRR':\n        print(2)\n    else:\n        print(1)\nelif s == 'SSS':\n    print(0)\nelif s == 'RRS' or s == 'SRR':\n    print(2)\nelse:\n    print(1)", "effort_before": "67.92696431662098", "effort_after": "311.51085725925844", "difficulty_before": "1.4285714285714286", "difficulty_after": "2.727272727272727", "calculated_length_before": "21.651484454403228", "calculated_length_after": "42.808635307173745", "length_before": "15", "length_after": "30", "vocabulary_before": "9", "vocabulary_after": "14", "mi_value_before": "65.77", "mi_value_after": "56.49", "Nloc_before": "9", "Nloc_after": "18", "AvgCCN_before": "5.0", "AvgCCN_after": "9.0"}, "s124725275": {"id": "s124725275", "language": "Python", "dataset": "Codenet", "pass_before": 0, "pass_after": 0, "filepath_before": "/home/yang/contamination/Codenet_Python_Before/s124725275.py", "filepath_after": "/home/yang/contamination/Codenet_Python_After/s124725275.py", "code_before": "from collections import deque\nfrom itertools import product, permutations, combinations\nimport sys\nsys.setrecursionlimit(1 << 25)\nreadline = sys.stdin.buffer.readline\nread = sys.stdin.readline\nra = range\nenu = enumerate\n\n\ndef exit(*argv, **kwarg):\n    print(*argv, **kwarg)\n    sys.exit()\n\n\ndef mina(*argv, sub=1): return list(map(lambda x: x - sub, argv))\n\n\ndef a_int(): return int(readline())\n\n\ndef ints(): return list(map(int, readline().split()))\n\n\ndef read_col(H):\n\n    ret = []\n    for _ in range(H):\n        ret.append(list(map(int, readline().split())))\n    return tuple(map(list, zip(*ret)))\n\n\ndef read_map_as(H, replace={'#': 1, '.': 0}, pad=None):\n\n    if pad is None:\n        ret = []\n        for _ in range(H):\n            ret.append([replace[s] for s in read()[:-1]])\n\n    else:\n        ret = [[pad] * (W + 2)]\n        for _ in range(H):\n            ret.append([pad] + [replace[s] for s in read()[:-1]] + [pad])\n        ret.append([pad] * (W + 2))\n\n    return ret\n\n\ndef grid_dijkstra(grid, si: int, sj: int):\n\n    from heapq import heappop, heappush\n    H = len(grid)\n    W = len(grid[0])\n    D = [[-1] * W for _ in [0] * H]\n    que = [(0, si, sj)]\n    while que:\n        c, i, j = heappop(que)\n        if D[i][j] != -1:\n            continue\n        D[i][j] = c\n        for di, dj in product([-2, -1, 0, 1, 2], repeat=2):\n            ni, nj = i + di, j + dj\n            if not (0 <= ni < H and 0 <= nj < W) or D[ni][nj] != -1 or ni == nj == 0 or grid[ni][nj] == 1:\n                continue\n            if (di == 0 and abs(dj) == 1) or (dj == 0 and abs(di) == 1):\n                nc = c\n            else:\n                nc = c + 1\n            heappush(que, (nc, ni, nj))\n    return D\n\n\nMOD = 10**9 + 7\nINF = 2**31\n\n\nH, W = ints()\nsi, sj = mina(*ints())\nti, tj = mina(*ints())\n\nS = read_map_as(H)\nD = [[-1] * W for _ in [0] * H]\nque = deque([(0, si, sj)])\nwhile que:\n    c, i, j = que.popleft()\n    if D[i][j] != -1:\n        continue\n    D[i][j] = c\n    for di, dj in product([-2, -1, 0, 1, 2], repeat=2):\n        ni, nj = i + di, j + dj\n        if not (0 <= ni < H and 0 <= nj < W) or D[ni][nj] != -1 or ni == nj == 0 or S[ni][nj] == 1:\n            continue\n        if (di == 0 and abs(dj) == 1) or (dj == 0 and abs(di) == 1):\n            que.appendleft((c, ni, nj))\n        else:\n            que.append((c + 1, ni, nj))\n\nprint(D[ti][tj])\n", "code_after": "from collections import deque\nfrom itertools import product, permutations, combinations\nimport sys\nsys.setrecursionlimit(1 << 25)\nreadline = sys.stdin.buffer.readline\nread = sys.stdin.readline\nra = range\nenu = enumerate\n\ndef exit(*argv, **kwarg):\n    print(*argv, **kwarg)\n    sys.exit()\n\ndef mina(*argv, sub=1):\n    return list(map(lambda x: x - sub, argv))\n\ndef a_int():\n    return int(readline())\n\ndef ints():\n    return list(map(int, readline().split()))\n\ndef read_col(H):\n    ret = []\n    for _ in range(H):\n        ret.append(list(map(int, readline().split())))\n    return tuple(map(list, zip(*ret)))\n\ndef read_map_as(H, replace={'#': 1, '.': 0}, pad=None):\n    if pad is None:\n        ret = []\n        for _ in range(H):\n            ret.append([replace[s] for s in read()[:-1]])\n    else:\n        ret = [[pad] * (W + 2)]\n        for _ in range(H):\n            ret.append([pad] + [replace[s] for s in read()[:-1]] + [pad])\n        ret.append([pad] * (W + 2))\n    return ret\n\ndef grid_dijkstra(grid, si: int, sj: int):\n    from heapq import heappop, heappush\n    H = len(grid)\n    W = len(grid[0])\n    D = [[-1] * W for _ in [0] * H]\n    que = [(0, si, sj)]\n    while que:\n        (c, i, j) = heappop(que)\n        if D[i][j] != -1:\n            continue\n        D[i][j] = c\n        for (di, dj) in product([-2, -1, 0, 1, 2], repeat=2):\n            (ni, nj) = (i + di, j + dj)\n            if not (0 <= ni < H and 0 <= nj < W) or D[ni][nj] != -1 or ni == nj == 0 or (grid[ni][nj] == 1):\n                continue\n            if di == 0 and abs(dj) == 1 or (dj == 0 and abs(di) == 1):\n                nc = c\n            else:\n                nc = c + 1\n            heappush(que, (nc, ni, nj))\n    return D\nvariable_7_62 = 7\nvariable_10_62 = 10\nvariable_9_62 = 9\nMOD = variable_10_62 ** variable_9_62 + variable_7_62\nvariable_2_63 = 2\nvariable_31_63 = 31\nINF = variable_2_63 ** variable_31_63\n(H, W) = ints()\n(si, sj) = mina(*ints())\n(ti, tj) = mina(*ints())\nS = read_map_as(H)\nD = [[-1] * W for _ in [0] * H]\nque = deque([(0, si, sj)])\nrandom_inside_left_70 = 960\nrandom_inside_right_70 = 959\nrandom_outside_left_70 = 861\nrandom_outside_right_70 = 860\nfor loop_outside in range(random_outside_left_70 // random_outside_right_70):\n    while que:\n        for loop_inside in range(random_inside_left_70 % random_inside_right_70):\n            (c, i, j) = que.popleft()\n            if D[i][j] != -1:\n                continue\n            D[i][j] = c\n            for (di, dj) in product([-2, -1, 0, 1, 2], repeat=2):\n                (ni, nj) = (i + di, j + dj)\n                if not (0 <= ni < H and 0 <= nj < W) or D[ni][nj] != -1 or ni == nj == 0 or (S[ni][nj] == 1):\n                    continue\n                if di == 0 and abs(dj) == 1 or (dj == 0 and abs(di) == 1):\n                    que.appendleft((c, ni, nj))\n                else:\n                    que.append((c + 1, ni, nj))\nprint(D[ti][tj])", "effort_before": "13463.1561176543", "effort_after": "15693.5092195883", "difficulty_before": "10.067415730337078", "difficulty_after": "11.23404255319149", "calculated_length_before": "629.6432442648158", "calculated_length_after": "680.1313520576979", "length_before": "200", "length_after": "206", "vocabulary_before": "103", "vocabulary_after": "110", "mi_value_before": "34.83", "mi_value_after": "33.09", "Nloc_before": "73", "Nloc_after": "87", "AvgCCN_before": "14.0", "AvgCCN_after": "16.0"}, "s013976107": {"id": "s013976107", "language": "Python", "dataset": "Codenet", "pass_before": 0, "pass_after": 0, "filepath_before": "/home/yang/contamination/Codenet_Python_Before/s013976107.py", "filepath_after": "/home/yang/contamination/Codenet_Python_After/s013976107.py", "code_before": "A, B = map(int, input().split())\nS = list(input())\nif S[A] == '-' and S.count('-') == 1:\n    print(\"Yes\")\nelse:\n    print(\"No\")\n", "code_after": "(A, B) = map(int, input().split())\nS = list(input())\nrandom_outside_if_left_3 = 443\nrandom_outside_if_right_3 = 442\nif random_outside_if_left_3 & random_outside_if_right_3:\n    if S[A] == '-' and S.count('-') == 1:\n        print('Yes')\n    else:\n        print('No')\nelse:\n    print('No')", "effort_before": "27.0", "effort_after": "62.26976913547136", "difficulty_before": "1.0", "difficulty_after": "1.5", "calculated_length_before": "17.509775004326936", "calculated_length_after": "28.75488750216347", "length_before": "9", "length_after": "12", "vocabulary_before": "8", "vocabulary_after": "11", "mi_value_before": "71.14", "mi_value_after": "64.59", "Nloc_before": "6", "Nloc_after": "11", "AvgCCN_before": "3.0", "AvgCCN_after": "4.0"}, "s331817031": {"id": "s331817031", "language": "Python", "dataset": "Codenet", "pass_before": 0, "pass_after": 0, "filepath_before": "/home/yang/contamination/Codenet_Python_Before/s331817031.py", "filepath_after": "/home/yang/contamination/Codenet_Python_After/s331817031.py", "code_before": "h, w = map(int, input().split())\nl = []\nfor _ in range(h):\n    a = list(map(str, input()))\n    l.append(a)\n\ntmp = 0\n\nfor i in range(h):\n    for j in range(w):\n        if l[i][j] == \"#\":\n            if j < tmp:\n                print(\"Impossible\")\n                exit()\n            else:\n                tmp = j\n\n\nprint(\"Possible\")\n", "code_after": "(h, w) = map(int, input().split())\nl = []\nrandom_inside_left_3 = 486\nrandom_inside_right_3 = 485\nrandom_outside_left_3 = 252\nrandom_outside_right_3 = 251\nrandom_inside_left_7 = 869\nrandom_inside_right_7 = 868\nrandom_outside_left_7 = 572\nrandom_outside_right_7 = 571\nfor loop_outside in range(random_outside_left_3 // random_outside_right_3):\n    for _ in range(h):\n        for loop_inside in range(random_inside_left_3 % random_inside_right_3):\n            a = list(map(str, input()))\n            l.append(a)\ntmp = 0\nfor loop_outside in range(random_outside_left_7 // random_outside_right_7):\n    for i in range(h):\n        for loop_inside in range(random_inside_left_7 % random_inside_right_7):\n            for j in range(w):\n                if l[i][j] == '#':\n                    if j < tmp:\n                        print('Impossible')\n                        exit()\n                    else:\n                        tmp = j\nprint('Possible')", "effort_before": "15.509775004326936", "effort_after": "144.0", "difficulty_before": "1.0", "difficulty_after": "2.0", "calculated_length_before": "10.0", "calculated_length_after": "51.01955000865388", "length_before": "6", "length_after": "18", "vocabulary_before": "6", "vocabulary_after": "16", "mi_value_before": "64.59", "mi_value_after": "54.08", "Nloc_before": "15", "Nloc_after": "27", "AvgCCN_before": "6.0", "AvgCCN_after": "10.0"}, "s785944322": {"id": "s785944322", "language": "Python", "dataset": "Codenet", "pass_before": 1, "pass_after": 0, "filepath_before": "/home/yang/contamination/Codenet_Python_Before/s785944322.py", "filepath_after": "/home/yang/contamination/Codenet_Python_After/s785944322.py", "code_before": "import sys\ninput = sys.stdin.readline\n\na, b = map(int, input().split())\n\nif a >= 13:\n    print(b)\nelif a >= 6:\n    print(int(b/2))\nelse:\n    print(0)\n", "code_after": "import sys\ninput = sys.stdin.readline\n(a, b) = map(int, input().split())\nrandom_outside_if_left_4 = 194\nrandom_outside_if_right_4 = 193\nif random_outside_if_left_4 & random_outside_if_right_4:\n    if a >= 13:\n        print(b)\n    elif a >= 6:\n        print(int(b / 2))\n    else:\n        print(0)\nelif a >= 6:\n    print(int(b / 2))\nelse:\n    print(0)", "effort_before": "30.319433158222125", "effort_after": "153.75781467764364", "difficulty_before": "1.2", "difficulty_after": "2.5714285714285716", "calculated_length_before": "13.60964047443681", "calculated_length_after": "24.406371956566698", "length_before": "9", "length_after": "18", "vocabulary_before": "7", "vocabulary_after": "10", "mi_value_before": "67.96", "mi_value_after": "60.05", "Nloc_before": "9", "Nloc_after": "16", "AvgCCN_before": "3.0", "AvgCCN_after": "5.0"}, "s411244720": {"id": "s411244720", "language": "Python", "dataset": "Codenet", "pass_before": 3, "pass_after": 3, "filepath_before": "/home/yang/contamination/Codenet_Python_Before/s411244720.py", "filepath_after": "/home/yang/contamination/Codenet_Python_After/s411244720.py", "code_before": "N, K = [int(_) for _ in input().split()]\nS = set()\nfor i in range(K):\n    d = int(input())\n    A = [int(_) for _ in input().split()]\n    S = S | set(A)\nprint(N - len(S))\n", "code_after": "(N, K) = [int(_) for _ in input().split()]\nS = set()\nrandom_inside_left_3 = 624\nrandom_inside_right_3 = 623\nrandom_outside_left_3 = 455\nrandom_outside_right_3 = 454\nfor loop_outside in range(random_outside_left_3 // random_outside_right_3):\n    for i in range(K):\n        for loop_inside in range(random_inside_left_3 % random_inside_right_3):\n            d = int(input())\n            A = [int(_) for _ in input().split()]\n            S = S | set(A)\nprint(N - len(S))", "effort_before": "15.509775004326936", "effort_after": "86.03910001730776", "difficulty_before": "1.0", "difficulty_after": "2.0", "calculated_length_before": "10.0", "calculated_length_after": "32.0", "length_before": "6", "length_after": "12", "vocabulary_before": "6", "vocabulary_after": "12", "mi_value_before": "71.43", "mi_value_after": "62.75", "Nloc_before": "7", "Nloc_after": "13", "AvgCCN_before": "4.0", "AvgCCN_after": "6.0"}, "s997947249": {"id": "s997947249", "language": "Python", "dataset": "Codenet", "pass_before": 3, "pass_after": 3, "filepath_before": "/home/yang/contamination/Codenet_Python_Before/s997947249.py", "filepath_after": "/home/yang/contamination/Codenet_Python_After/s997947249.py", "code_before": "N, K = map(int, input().split())\nif N % K == 0:\n    print(0)\nelse:\n    print(1)\n", "code_after": "(N, K) = map(int, input().split())\nrandom_outside_if_left_2 = 307\nrandom_outside_if_right_2 = 306\nif random_outside_if_left_2 & random_outside_if_right_2:\n    if N % K == 0:\n        print(0)\n    else:\n        print(1)\nelse:\n    print(1)", "effort_before": "15.509775004326936", "effort_after": "42.793987519471216", "difficulty_before": "1.0", "difficulty_after": "1.5", "calculated_length_before": "10.0", "calculated_length_after": "20.264662506490406", "length_before": "6", "length_after": "9", "vocabulary_before": "6", "vocabulary_after": "9", "mi_value_before": "74.42", "mi_value_after": "66.69", "Nloc_before": "5", "Nloc_after": "10", "AvgCCN_before": "2.0", "AvgCCN_after": "3.0"}, "s195311365": {"id": "s195311365", "language": "Python", "dataset": "Codenet", "pass_before": 3, "pass_after": 0, "filepath_before": "/home/yang/contamination/Codenet_Python_Before/s195311365.py", "filepath_after": "/home/yang/contamination/Codenet_Python_After/s195311365.py", "code_before": "s = input()\n\nif len(s) == 2:\n    print(s)\nelse:\n    print(s[::-1])\n", "code_after": "s = input()\nrandom_outside_if_left_2 = 677\nrandom_outside_if_right_2 = 676\nif random_outside_if_left_2 & random_outside_if_right_2:\n    if len(s) == 2:\n        print(s)\n    else:\n        print(s[::-1])\nelse:\n    print(s[::-1])", "effort_before": "11.60964047443681", "effort_after": "54.0", "difficulty_before": "1.0", "difficulty_after": "1.8", "calculated_length_before": "6.754887502163469", "calculated_length_after": "16.36452797660028", "length_before": "5", "length_after": "10", "vocabulary_before": "5", "vocabulary_after": "8", "mi_value_before": "73.84", "mi_value_after": "64.95", "Nloc_before": "5", "Nloc_after": "10", "AvgCCN_before": "2.0", "AvgCCN_after": "3.0"}, "s504709360": {"id": "s504709360", "language": "Python", "dataset": "Codenet", "pass_before": 3, "pass_after": 0, "filepath_before": "/home/yang/contamination/Codenet_Python_Before/s504709360.py", "filepath_after": "/home/yang/contamination/Codenet_Python_After/s504709360.py", "code_before": "s = input()\nif len(s) < 26:\n    for i in range(26):\n        c = chr(ord(\"a\")+i)\n        if c not in s:\n            print(s+c)\n            exit()\nelse:\n    for i in reversed(range(1, 26)):\n        if s[i-1] < s[i]:\n            s1 = s[0:i-1]\n            for j in range(26):\n                c = chr(ord(\"a\")+j)\n                if c > s[i-1] and c not in s1:\n                    print(s1+c)\n                    exit()\n    print(-1)\n", "code_after": "s = input()\nrandom_outside_if_left_2 = 239\nrandom_outside_if_right_2 = 238\nif random_outside_if_left_2 & random_outside_if_right_2:\n    if len(s) < 26:\n        for i in range(26):\n            c = chr(ord('a') + i)\n            if c not in s:\n                print(s + c)\n                exit()\n    else:\n        for i in reversed(range(1, 26)):\n            if s[i - 1] < s[i]:\n                s1 = s[0:i - 1]\n                for j in range(26):\n                    c = chr(ord('a') + j)\n                    if c > s[i - 1] and c not in s1:\n                        print(s1 + c)\n                        exit()\n        print(-1)\nelse:\n    for i in reversed(range(1, 26)):\n        if s[i - 1] < s[i]:\n            s1 = s[0:i - 1]\n            for j in range(26):\n                c = chr(ord('a') + j)\n                if c > s[i - 1] and c not in s1:\n                    print(s1 + c)\n                    exit()\n    print(-1)", "effort_before": "1151.8711870940137", "effort_after": "3019.0441515818457", "difficulty_before": "6.3", "difficulty_after": "8.347826086956522", "calculated_length_before": "78.25484338853101", "calculated_length_after": "128.0419249893113", "length_before": "41", "length_after": "73", "vocabulary_before": "22", "vocabulary_after": "31", "mi_value_before": "55.06", "mi_value_after": "46.94", "Nloc_before": "17", "Nloc_after": "30", "AvgCCN_before": "9.0", "AvgCCN_after": "15.0"}, "s908812767": {"id": "s908812767", "language": "Python", "dataset": "Codenet", "pass_before": 0, "pass_after": 0, "filepath_before": "/home/yang/contamination/Codenet_Python_Before/s908812767.py", "filepath_after": "/home/yang/contamination/Codenet_Python_After/s908812767.py", "code_before": "import sys\nsys.setrecursionlimit(100000)\n\n\ndef dfs(i):\n    for v, w in V.get(i, []):\n        if (w % 2) == 0:\n            if color[v] == -1:\n                color[v] = color[i]\n            elif color[v] == color[i]:\n                continue\n            elif color[v] != color[i]:\n                return False\n        else:\n            if color[v] == -1:\n                color[v] = 0 if color[i] else 1\n            elif color[v] == color[i]:\n                return False\n            elif color[v] != color[i]:\n                continue\n        dfs(v)\n    return True\n\n\nif __name__ == '__main__':\n    n = int(input())\n    V = {}\n    color = {}\n    for i in range(1, n):\n        u, v, w = map(int, input().split())\n        if not V.get(u, False):\n            V[u] = [[v, w]]\n        else:\n            V[u].append([v, w])\n\n        if not V.get(v, False):\n            V[v] = [[u, w]]\n        else:\n            V[v].append([u, w])\n\n    for i in range(1, n+1):\n        color[i] = -1\n\n    while True:\n        i = 0\n        for j in range(1, n+1):\n            if color[j] == -1:\n                i = j\n                color[i] = 0\n                break\n        if i == 0:\n            for j in range(1, n+1):\n                print(color[j])\n            break\n        else:\n            if not dfs(i):\n                print('No')\n                break\n", "code_after": "import sys\nsys.setrecursionlimit(100000)\n\ndef dfs(i):\n    for (v, w) in V.get(i, []):\n        if w % 2 == 0:\n            if color[v] == -1:\n                color[v] = color[i]\n            elif color[v] == color[i]:\n                continue\n            elif color[v] != color[i]:\n                return False\n        elif color[v] == -1:\n            color[v] = 0 if color[i] else 1\n        elif color[v] == color[i]:\n            return False\n        elif color[v] != color[i]:\n            continue\n        dfs(v)\n    return True\nn = int(input())\nV = {}\ncolor = {}\nrandom_inside_left_24 = 419\nrandom_inside_right_24 = 418\nrandom_outside_left_24 = 834\nrandom_outside_right_24 = 833\nrandom_inside_left_34 = 792\nrandom_inside_right_34 = 791\nrandom_outside_left_34 = 259\nrandom_outside_right_34 = 258\nfor loop_outside in range(random_outside_left_24 // random_outside_right_24):\n    for i in range(1, n):\n        for loop_inside in range(random_inside_left_24 % random_inside_right_24):\n            (u, v, w) = map(int, input().split())\n            if not V.get(u, False):\n                V[u] = [[v, w]]\n            else:\n                V[u].append([v, w])\n            if not V.get(v, False):\n                V[v] = [[u, w]]\n            else:\n                V[v].append([u, w])\nfor loop_outside in range(random_outside_left_34 // random_outside_right_34):\n    for i in range(1, n + 1):\n        for loop_inside in range(random_inside_left_34 % random_inside_right_34):\n            color[i] = -1\nrandom_inside_left_48 = 529\nrandom_inside_right_48 = 528\nrandom_outside_left_48 = 411\nrandom_outside_right_48 = 410\nfor loop_outside in range(random_outside_left_48 // random_outside_right_48):\n    while True:\n        for loop_inside in range(random_inside_left_48 % random_inside_right_48):\n            i = 0\n            for j in range(1, n + 1):\n                if color[j] == -1:\n                    i = j\n                    color[i] = 0\n                    break\n            if i == 0:\n                for j in range(1, n + 1):\n                    print(color[j])\n                break\n            elif not dfs(i):\n                print('No')\n                break", "effort_before": "1068.3671966625714", "effort_after": "1616.1222960449102", "difficulty_before": "3.75", "difficulty_after": "4.144736842105263", "calculated_length_before": "150.11571282193984", "calculated_length_after": "219.07272996525947", "length_before": "56", "length_after": "71", "vocabulary_before": "34", "vocabulary_after": "45", "mi_value_before": "43.77", "mi_value_after": "39.74", "Nloc_before": "51", "Nloc_after": "66", "AvgCCN_before": "12.0", "AvgCCN_after": "17.0"}, "s554858080": {"id": "s554858080", "language": "Python", "dataset": "Codenet", "pass_before": 3, "pass_after": 2, "filepath_before": "/home/yang/contamination/Codenet_Python_Before/s554858080.py", "filepath_after": "/home/yang/contamination/Codenet_Python_After/s554858080.py", "code_before": "input = list(map(str, input().split()))\nnum = ''.join(input)\n\nif (int(num) % 4 == 0):\n    print('YES')\nelse:\n    print('NO')\n", "code_after": "input = list(map(str, input().split()))\nnum = ''.join(input)\nrandom_outside_if_left_3 = 823\nrandom_outside_if_right_3 = 822\nif random_outside_if_left_3 & random_outside_if_right_3:\n    if int(num) % 4 == 0:\n        print('YES')\n    else:\n        print('NO')\nelse:\n    print('NO')", "effort_before": "15.509775004326936", "effort_after": "42.793987519471216", "difficulty_before": "1.0", "difficulty_after": "1.5", "calculated_length_before": "10.0", "calculated_length_after": "20.264662506490406", "length_before": "6", "length_after": "9", "vocabulary_before": "6", "vocabulary_after": "9", "mi_value_before": "72.96", "mi_value_after": "65.87", "Nloc_before": "6", "Nloc_after": "11", "AvgCCN_before": "2.0", "AvgCCN_after": "3.0"}, "s419623944": {"id": "s419623944", "language": "Python", "dataset": "Codenet", "pass_before": 3, "pass_after": 3, "filepath_before": "/home/yang/contamination/Codenet_Python_Before/s419623944.py", "filepath_after": "/home/yang/contamination/Codenet_Python_After/s419623944.py", "code_before": "N, R = map(int, input().split())\nif N >= 10:\n    print(R)\nelse:\n    print(R+100*(10-N))\n", "code_after": "(N, R) = map(int, input().split())\nrandom_outside_if_left_2 = 282\nrandom_outside_if_right_2 = 281\nif random_outside_if_left_2 & random_outside_if_right_2:\n    if N >= 10:\n        print(R)\n    else:\n        print(R + 100 * (10 - N))\nelse:\n    print(R + 100 * (10 - N))", "effort_before": "106.3016990363956", "effort_after": "375.06149717841777", "difficulty_before": "2.6666666666666665", "difficulty_after": "4.0", "calculated_length_before": "23.509775004326936", "calculated_length_after": "44.82892142331043", "length_before": "12", "length_after": "24", "vocabulary_before": "10", "vocabulary_after": "15", "mi_value_before": "71.55", "mi_value_after": "63.07", "Nloc_before": "5", "Nloc_after": "10", "AvgCCN_before": "2.0", "AvgCCN_after": "3.0"}, "s952876397": {"id": "s952876397", "language": "Python", "dataset": "Codenet", "pass_before": 3, "pass_after": 0, "filepath_before": "/home/yang/contamination/Codenet_Python_Before/s952876397.py", "filepath_after": "/home/yang/contamination/Codenet_Python_After/s952876397.py", "code_before": "n = int(input())\ns = input()\n\nleft = 0\nfor i in s:\n    if i == \")\":\n        left += 1\n    else:\n        break\n\nleft1 = 0\nright1 = 0\n\nfor i in range(left, n):\n    if s[i] == \"(\":\n        right1 += 1\n    elif right1 > 0:\n        right1 -= 1\n    else:\n        left1 += 1\n\nleft1 += left\nfor i in range(right1):\n    s += \")\"\nfor i in range(left1):\n    s = \"(\" + s\n\nprint(s)\n", "code_after": "n = int(input())\ns = input()\nleft = 0\nrandom_inside_left_4 = 129\nrandom_inside_right_4 = 128\nrandom_outside_left_4 = 146\nrandom_outside_right_4 = 145\nrandom_inside_left_11 = 755\nrandom_inside_right_11 = 754\nrandom_outside_left_11 = 953\nrandom_outside_right_11 = 952\nrandom_inside_left_19 = 907\nrandom_inside_right_19 = 906\nrandom_outside_left_19 = 641\nrandom_outside_right_19 = 640\nrandom_inside_left_21 = 931\nrandom_inside_right_21 = 930\nrandom_outside_left_21 = 234\nrandom_outside_right_21 = 233\nfor loop_outside in range(random_outside_left_4 // random_outside_right_4):\n    for i in s:\n        for loop_inside in range(random_inside_left_4 % random_inside_right_4):\n            if i == ')':\n                left += 1\n            else:\n                break\nleft1 = 0\nright1 = 0\nfor loop_outside in range(random_outside_left_11 // random_outside_right_11):\n    for i in range(left, n):\n        for loop_inside in range(random_inside_left_11 % random_inside_right_11):\n            if s[i] == '(':\n                right1 += 1\n            elif right1 > 0:\n                right1 -= 1\n            else:\n                left1 += 1\nleft1 += left\nfor loop_outside in range(random_outside_left_19 // random_outside_right_19):\n    for i in range(right1):\n        for loop_inside in range(random_inside_left_19 % random_inside_right_19):\n            s += ')'\nfor loop_outside in range(random_outside_left_21 // random_outside_right_21):\n    for i in range(left1):\n        for loop_inside in range(random_inside_left_21 % random_inside_right_21):\n            s = '(' + s\nprint(s)", "effort_before": "456.88259064691243", "effort_after": "1121.5384615384617", "difficulty_before": "4.0", "difficulty_after": "4.153846153846154", "calculated_length_before": "41.219280948873624", "calculated_length_after": "137.72120767599534", "length_before": "30", "length_after": "54", "vocabulary_before": "14", "vocabulary_after": "32", "mi_value_before": "54.41", "mi_value_after": "44.15", "Nloc_before": "23", "Nloc_after": "47", "AvgCCN_before": "8.0", "AvgCCN_after": "16.0"}, "s542358243": {"id": "s542358243", "language": "Python", "dataset": "Codenet", "pass_before": 3, "pass_after": 0, "filepath_before": "/home/yang/contamination/Codenet_Python_Before/s542358243.py", "filepath_after": "/home/yang/contamination/Codenet_Python_After/s542358243.py", "code_before": "N = int(input())\n\nif N % 9 == 0:\n    print('Yes')\nelse:\n    print('No')\n", "code_after": "N = int(input())\nrandom_outside_if_left_2 = 822\nrandom_outside_if_right_2 = 821\nif random_outside_if_left_2 & random_outside_if_right_2:\n    if N % 9 == 0:\n        print('Yes')\n    else:\n        print('No')\nelse:\n    print('No')", "effort_before": "15.509775004326936", "effort_after": "42.793987519471216", "difficulty_before": "1.0", "difficulty_after": "1.5", "calculated_length_before": "10.0", "calculated_length_after": "20.264662506490406", "length_before": "6", "length_after": "9", "vocabulary_before": "6", "vocabulary_after": "9", "mi_value_before": "74.42", "mi_value_after": "66.69", "Nloc_before": "5", "Nloc_after": "10", "AvgCCN_before": "2.0", "AvgCCN_after": "3.0"}, "s225521100": {"id": "s225521100", "language": "Python", "dataset": "Codenet", "pass_before": 3, "pass_after": 3, "filepath_before": "/home/yang/contamination/Codenet_Python_Before/s225521100.py", "filepath_after": "/home/yang/contamination/Codenet_Python_After/s225521100.py", "code_before": "N, K = map(int, input().split())\nA = []\n\nfor i in range(N):\n    A.append(0)\n\nfor i in range(K):\n    d = int(input())\n    AA = list(map(int, input().split()))\n    for j in range(d):\n        A[AA[j] - 1] = 1\n\nn = 0\nfor i in range(N):\n    if A[i] == 0:\n        n += 1\nprint(n)\n", "code_after": "(N, K) = map(int, input().split())\nA = []\nrandom_inside_left_3 = 491\nrandom_inside_right_3 = 490\nrandom_outside_left_3 = 805\nrandom_outside_right_3 = 804\nrandom_inside_left_5 = 849\nrandom_inside_right_5 = 848\nrandom_outside_left_5 = 5\nrandom_outside_right_5 = 4\nrandom_inside_left_11 = 359\nrandom_inside_right_11 = 358\nrandom_outside_left_11 = 295\nrandom_outside_right_11 = 294\nfor loop_outside in range(random_outside_left_3 // random_outside_right_3):\n    for i in range(N):\n        for loop_inside in range(random_inside_left_3 % random_inside_right_3):\n            A.append(0)\nfor loop_outside in range(random_outside_left_5 // random_outside_right_5):\n    for i in range(K):\n        for loop_inside in range(random_inside_left_5 % random_inside_right_5):\n            d = int(input())\n            AA = list(map(int, input().split()))\n            for j in range(d):\n                A[AA[j] - 1] = 1\nn = 0\nfor loop_outside in range(random_outside_left_11 // random_outside_right_11):\n    for i in range(N):\n        for loop_inside in range(random_inside_left_11 % random_inside_right_11):\n            if A[i] == 0:\n                n += 1\nprint(n)", "effort_before": "48.6", "effort_after": "318.71820097907744", "difficulty_before": "1.8", "difficulty_after": "2.6470588235294117", "calculated_length_before": "16.36452797660028", "calculated_length_after": "81.0965087756926", "length_before": "9", "length_after": "27", "vocabulary_before": "8", "vocabulary_after": "22", "mi_value_before": "63.52", "mi_value_after": "50.69", "Nloc_before": "14", "Nloc_after": "32", "AvgCCN_before": "6.0", "AvgCCN_after": "12.0"}, "s813548165": {"id": "s813548165", "language": "Python", "dataset": "Codenet", "pass_before": 2, "pass_after": 2, "filepath_before": "/home/yang/contamination/Codenet_Python_Before/s813548165.py", "filepath_after": "/home/yang/contamination/Codenet_Python_After/s813548165.py", "code_before": "N = int(input())\nS, T = input().split()\n\nchar_lists = []\n\nfor i, char in enumerate(S):\n    char_lists.append(char)\n    char_lists.append(T[i])\n\nprint(\"\".join(char_lists))\n", "code_after": "N = int(input())\n(S, T) = input().split()\nchar_lists = []\nrandom_inside_left_4 = 250\nrandom_inside_right_4 = 249\nrandom_outside_left_4 = 13\nrandom_outside_right_4 = 12\nfor loop_outside in range(random_outside_left_4 // random_outside_right_4):\n    for (i, char) in enumerate(S):\n        for loop_inside in range(random_inside_left_4 % random_inside_right_4):\n            char_lists.append(char)\n            char_lists.append(T[i])\nprint(''.join(char_lists))", "effort_before": "0", "effort_after": "15.509775004326936", "difficulty_before": "0", "difficulty_after": "1.0", "calculated_length_before": "0", "calculated_length_after": "10.0", "length_before": "0", "length_after": "6", "vocabulary_before": "0", "vocabulary_after": "6", "mi_value_before": "100.00", "mi_value_after": "66.12", "Nloc_before": "7", "Nloc_after": "13", "AvgCCN_before": "2.0", "AvgCCN_after": "4.0"}, "s398580870": {"id": "s398580870", "language": "Python", "dataset": "Codenet", "pass_before": 3, "pass_after": 2, "filepath_before": "/home/yang/contamination/Codenet_Python_Before/s398580870.py", "filepath_after": "/home/yang/contamination/Codenet_Python_After/s398580870.py", "code_before": "n, k = map(int, input().split())\nif k % 2 == 1:\n    print((n//k)**3)\nelse:\n    print((n//k)**3+((n+k//2)//k)**3)\n", "code_after": "(n, k) = map(int, input().split())\nrandom_outside_if_left_2 = 390\nrandom_outside_if_right_2 = 389\nif random_outside_if_left_2 & random_outside_if_right_2:\n    if k % 2 == 1:\n        print((n // k) ** 3)\n    else:\n        print((n // k) ** 3 + ((n + k // 2) // k) ** 3)\nelse:\n    print((n // k) ** 3 + ((n + k // 2) // k) ** 3)", "effort_before": "582.1856828936767", "effort_after": "1471.2980470980106", "difficulty_before": "4.230769230769231", "difficulty_after": "5.428571428571429", "calculated_length_before": "59.715356810271004", "calculated_length_after": "107.74844088268091", "length_before": "33", "length_after": "57", "vocabulary_before": "18", "vocabulary_after": "27", "mi_value_before": "67.78", "mi_value_after": "59.84", "Nloc_before": "5", "Nloc_after": "10", "AvgCCN_before": "2.0", "AvgCCN_after": "3.0"}, "s826716211": {"id": "s826716211", "language": "Python", "dataset": "Codenet", "pass_before": 0, "pass_after": 0, "filepath_before": "/home/yang/contamination/Codenet_Python_Before/s826716211.py", "filepath_after": "/home/yang/contamination/Codenet_Python_After/s826716211.py", "code_before": "import copy\n\n\ndef solve():\n    S_d = list(input())\n    T = list(input())\n\n    end = len(S_d) - 1\n    first = end - len(T) + 1\n    while first >= 0:\n        t_i = 0\n        for s_i in range(first, end+1):\n            if T[t_i] != S_d[s_i] and S_d[s_i] != '?':\n                break\n            t_i += 1\n        else:\n            break\n\n        first -= 1\n        end -= 1\n\n    else:\n        print('UNRESTORABLE')\n        exit(0)\n\n    ans = copy.deepcopy(S_d)\n    t_i = 0\n    for i in range(first, end+1):\n        ans[i] = T[t_i]\n        t_i += 1\n\n    ans = ''.join(ans).replace('?', 'a')\n    print(ans)\n\n\nif __name__ == '__main__':\n    solve()\n", "code_after": "import copy\n\ndef solve():\n    S_d = list(input())\n    T = list(input())\n    end = len(S_d) - 1\n    first = end - len(T) + 1\n    while first >= 0:\n        t_i = 0\n        for s_i in range(first, end + 1):\n            if T[t_i] != S_d[s_i] and S_d[s_i] != '?':\n                break\n            t_i += 1\n        else:\n            break\n        first -= 1\n        end -= 1\n    else:\n        print('UNRESTORABLE')\n        exit(0)\n    ans = copy.deepcopy(S_d)\n    t_i = 0\n    for i in range(first, end + 1):\n        ans[i] = T[t_i]\n        t_i += 1\n    ans = ''.join(ans).replace('?', 'a')\n    print(ans)\nsolve()", "effort_before": "983.304671909524", "effort_after": "769.1783033271064", "difficulty_before": "5.25", "difficulty_after": "4.642857142857143", "calculated_length_before": "79.50977500432694", "calculated_length_after": "64.91260938324326", "length_before": "42", "length_after": "39", "vocabulary_before": "22", "vocabulary_after": "19", "mi_value_before": "51.92", "mi_value_after": "52.76", "Nloc_before": "28", "Nloc_after": "27", "AvgCCN_before": "2.0", "AvgCCN_after": "1.0"}, "s522872163": {"id": "s522872163", "language": "Python", "dataset": "Codenet", "pass_before": 2, "pass_after": 0, "filepath_before": "/home/yang/contamination/Codenet_Python_Before/s522872163.py", "filepath_after": "/home/yang/contamination/Codenet_Python_After/s522872163.py", "code_before": "X, A = list(map(int, input().split()))\nif X < A:\n    print(0)\nelse:\n    print(10)\n", "code_after": "(X, A) = list(map(int, input().split()))\nrandom_outside_if_left_2 = 811\nrandom_outside_if_right_2 = 810\nif random_outside_if_left_2 & random_outside_if_right_2:\n    if X < A:\n        print(0)\n    else:\n        print(10)\nelse:\n    print(10)", "effort_before": "2.3774437510817346", "effort_after": "15.509775004326936", "difficulty_before": "0.5", "difficulty_after": "1.0", "calculated_length_before": "2.0", "calculated_length_after": "10.0", "length_before": "3", "length_after": "6", "vocabulary_before": "3", "vocabulary_after": "6", "mi_value_before": "78.02", "mi_value_after": "68.54", "Nloc_before": "5", "Nloc_after": "10", "AvgCCN_before": "2.0", "AvgCCN_after": "3.0"}, "s002779582": {"id": "s002779582", "language": "Python", "dataset": "Codenet", "pass_before": 3, "pass_after": 3, "filepath_before": "/home/yang/contamination/Codenet_Python_Before/s002779582.py", "filepath_after": "/home/yang/contamination/Codenet_Python_After/s002779582.py", "code_before": "N = int(input())\nHs = list(map(int, input().split()))\n\nans = 0\nmaxH = 0\nfor H in Hs:\n    if maxH <= H:\n        ans += 1\n        maxH = H\n\nprint(ans)\n", "code_after": "N = int(input())\nHs = list(map(int, input().split()))\nans = 0\nmaxH = 0\nrandom_inside_left_5 = 783\nrandom_inside_right_5 = 782\nrandom_outside_left_5 = 786\nrandom_outside_right_5 = 785\nfor loop_outside in range(random_outside_left_5 // random_outside_right_5):\n    for H in Hs:\n        for loop_inside in range(random_inside_left_5 % random_inside_right_5):\n            if maxH <= H:\n                ans += 1\n                maxH = H\nprint(ans)", "effort_before": "15.509775004326936", "effort_after": "86.03910001730776", "difficulty_before": "1.0", "difficulty_after": "2.0", "calculated_length_before": "10.0", "calculated_length_after": "32.0", "length_before": "6", "length_after": "12", "vocabulary_before": "6", "vocabulary_after": "12", "mi_value_before": "69.45", "mi_value_after": "61.62", "Nloc_before": "9", "Nloc_after": "15", "AvgCCN_before": "3.0", "AvgCCN_after": "5.0"}, "s759547301": {"id": "s759547301", "language": "Python", "dataset": "Codenet", "pass_before": 2, "pass_after": 0, "filepath_before": "/home/yang/contamination/Codenet_Python_Before/s759547301.py", "filepath_after": "/home/yang/contamination/Codenet_Python_After/s759547301.py", "code_before": "S = input()\n\nif S == 'Sunny':\n    print('Cloudy')\n\nif S == 'Cloudy':\n    print('Rainy')\n\nif S == 'Rainy':\n    print('Sunny')\n", "code_after": "S = input()\nrandom_outside_if_left_2 = 475\nrandom_outside_if_right_2 = 474\nrandom_outside_if_left_4 = 153\nrandom_outside_if_right_4 = 152\nrandom_outside_if_left_6 = 783\nrandom_outside_if_right_6 = 782\nif random_outside_if_left_2 & random_outside_if_right_2:\n    if S == 'Sunny':\n        print('Cloudy')\nif random_outside_if_left_4 & random_outside_if_right_4:\n    if S == 'Cloudy':\n        print('Rainy')\nif random_outside_if_left_6 & random_outside_if_right_6:\n    if S == 'Rainy':\n        print('Sunny')", "effort_before": "15.673014640489694", "effort_after": "77.43519001557698", "difficulty_before": "0.75", "difficulty_after": "1.2", "calculated_length_before": "8.0", "calculated_length_after": "35.219280948873624", "length_before": "9", "length_after": "18", "vocabulary_before": "5", "vocabulary_after": "12", "mi_value_before": "70.52", "mi_value_after": "59.55", "Nloc_before": "7", "Nloc_after": "16", "AvgCCN_before": "4.0", "AvgCCN_after": "7.0"}, "s733189960": {"id": "s733189960", "language": "Python", "dataset": "Codenet", "pass_before": 3, "pass_after": 3, "filepath_before": "/home/yang/contamination/Codenet_Python_Before/s733189960.py", "filepath_after": "/home/yang/contamination/Codenet_Python_After/s733189960.py", "code_before": "def main():\n    n = int(input())\n    sdic = {}\n    for _ in range(n):\n        s = [_s for _s in sorted(input().strip())]\n        s = ''.join(s)\n        if s in sdic:\n            sdic[s] += 1\n        else:\n            sdic[s] = 1\n    ans = 0\n    for k, v in sdic.items():\n        ans += v*(v-1)//2\n    print(ans)\n\n\nif __name__ == '__main__':\n    main()\n", "code_after": "def main():\n    n = int(input())\n    sdic = {}\n    for _ in range(n):\n        s = [_s for _s in sorted(input().strip())]\n        s = ''.join(s)\n        if s in sdic:\n            sdic[s] += 1\n        else:\n            sdic[s] = 1\n    ans = 0\n    for (k, v) in sdic.items():\n        ans += v * (v - 1) // 2\n    print(ans)\nmain()", "effort_before": "306.4894876060099", "effort_after": "210.97209216286", "difficulty_before": "3.5", "difficulty_after": "3.0", "calculated_length_before": "58.52932501298082", "calculated_length_after": "44.82892142331043", "length_before": "21", "length_after": "18", "vocabulary_before": "18", "vocabulary_after": "15", "mi_value_before": "59.29", "mi_value_after": "60.67", "Nloc_before": "16", "Nloc_after": "15", "AvgCCN_before": "2.0", "AvgCCN_after": "1.0"}, "s205112814": {"id": "s205112814", "language": "Python", "dataset": "Codenet", "pass_before": 0, "pass_after": 0, "filepath_before": "/home/yang/contamination/Codenet_Python_Before/s205112814.py", "filepath_after": "/home/yang/contamination/Codenet_Python_After/s205112814.py", "code_before": "n, m = map(int, input().split())\n\ngate_cond = [[int(x) for x in input().split()] for _ in range(m)]\nmax_under_th = max([l[0] for l in gate_cond])\nmin_upper_th = min([l[1] for l in gate_cond])\nif min_upper_th - max_under_th >= 0:\n    print(min_upper_th - max_under_th + 1)\nelse:\n    print(0)\n", "code_after": "(n, m) = map(int, input().split())\ngate_cond = [[int(x) for x in input().split()] for _ in range(m)]\nmax_under_th = max([l[0] for l in gate_cond])\nmin_upper_th = min([l[1] for l in gate_cond])\nrandom_outside_if_left_5 = 228\nrandom_outside_if_right_5 = 227\nif random_outside_if_left_5 & random_outside_if_right_5:\n    if min_upper_th - max_under_th >= 0:\n        print(min_upper_th - max_under_th + 1)\n    else:\n        print(0)\nelse:\n    print(0)", "effort_before": "76.0782000346155", "effort_after": "134.43609377704337", "difficulty_before": "2.0", "difficulty_after": "2.5", "calculated_length_before": "20.264662506490406", "calculated_length_after": "32.0", "length_before": "12", "length_after": "15", "vocabulary_before": "9", "vocabulary_after": "12", "mi_value_before": "67.31", "mi_value_after": "61.94", "Nloc_before": "8", "Nloc_after": "13", "AvgCCN_before": "6.0", "AvgCCN_after": "7.0"}, "s838619850": {"id": "s838619850", "language": "Python", "dataset": "Codenet", "pass_before": 3, "pass_after": 3, "filepath_before": "/home/yang/contamination/Codenet_Python_Before/s838619850.py", "filepath_after": "/home/yang/contamination/Codenet_Python_After/s838619850.py", "code_before": "S = input()\nT = input()\n\nN = len(S)\nM = len(T)\nans = M\nfor i in range(N-M+1):\n    S_2 = S[i:i+M]\n    cnt = 0\n    for j in range(M):\n        if T[j] != S_2[j]:\n            cnt += 1\n    ans = min(ans, cnt)\n\nprint(ans)\n", "code_after": "S = input()\nT = input()\nN = len(S)\nM = len(T)\nans = M\nrandom_inside_left_6 = 963\nrandom_inside_right_6 = 962\nrandom_outside_left_6 = 159\nrandom_outside_right_6 = 158\nfor loop_outside in range(random_outside_left_6 // random_outside_right_6):\n    for i in range(N - M + 1):\n        for loop_inside in range(random_inside_left_6 % random_inside_right_6):\n            S_2 = S[i:i + M]\n            cnt = 0\n            for j in range(M):\n                if T[j] != S_2[j]:\n                    cnt += 1\n            ans = min(ans, cnt)\nprint(ans)", "effort_before": "97.296514274174", "effort_after": "250.3570990265833", "difficulty_before": "1.875", "difficulty_after": "2.9166666666666665", "calculated_length_before": "28.75488750216347", "calculated_length_after": "54.62919048309069", "length_before": "15", "length_after": "21", "vocabulary_before": "11", "vocabulary_after": "17", "mi_value_before": "61.80", "mi_value_after": "56.81", "Nloc_before": "13", "Nloc_after": "19", "AvgCCN_before": "4.0", "AvgCCN_after": "6.0"}, "s289483518": {"id": "s289483518", "language": "Python", "dataset": "Codenet", "pass_before": 0, "pass_after": 0, "filepath_before": "/home/yang/contamination/Codenet_Python_Before/s289483518.py", "filepath_after": "/home/yang/contamination/Codenet_Python_After/s289483518.py", "code_before": "n, m = map(int, input().split())\na = list(map(int, input().split()))\na.sort()\nope = [list(map(int, input().split())) for _ in range(m)]\nope = sorted(ope, key=lambda x: x[1], reverse=True)\nj = 0\nfor i in range(n):\n    if a[i] < ope[j][1]:\n        a[i] = ope[j][1]\n        ope[j][0] -= 1\n        if ope[j][0] == 0:\n            j += 1\n            if j == len(ope):\n                break\n    else:\n        break\nprint(sum(a))\n", "code_after": "(n, m) = map(int, input().split())\na = list(map(int, input().split()))\na.sort()\nope = [list(map(int, input().split())) for _ in range(m)]\nope = sorted(ope, key=lambda x: x[1], reverse=True)\nj = 0\nrandom_inside_left_7 = 64\nrandom_inside_right_7 = 63\nrandom_outside_left_7 = 159\nrandom_outside_right_7 = 158\nfor loop_outside in range(random_outside_left_7 // random_outside_right_7):\n    for i in range(n):\n        for loop_inside in range(random_inside_left_7 % random_inside_right_7):\n            if a[i] < ope[j][1]:\n                a[i] = ope[j][1]\n                ope[j][0] -= 1\n                if ope[j][0] == 0:\n                    j += 1\n                    if j == len(ope):\n                        break\n            else:\n                break\nprint(sum(a))", "effort_before": "134.43609377704337", "effort_after": "306.4894876060099", "difficulty_before": "2.5", "difficulty_after": "3.5", "calculated_length_before": "32.0", "calculated_length_after": "58.52932501298082", "length_before": "15", "length_after": "21", "vocabulary_before": "12", "vocabulary_after": "18", "mi_value_before": "59.18", "mi_value_after": "54.83", "Nloc_before": "17", "Nloc_after": "23", "AvgCCN_before": "6.0", "AvgCCN_after": "8.0"}, "s961772658": {"id": "s961772658", "language": "Python", "dataset": "Codenet", "pass_before": 3, "pass_after": 1, "filepath_before": "/home/yang/contamination/Codenet_Python_Before/s961772658.py", "filepath_after": "/home/yang/contamination/Codenet_Python_After/s961772658.py", "code_before": "s = input()\nalphabets = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\",\n             \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]\nfor i in range(len(alphabets)):\n    if alphabets[i] == s:\n        print(alphabets[i+1])\n", "code_after": "s = input()\nalphabets = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']\nrandom_inside_left_3 = 125\nrandom_inside_right_3 = 124\nrandom_outside_left_3 = 289\nrandom_outside_right_3 = 288\nfor loop_outside in range(random_outside_left_3 // random_outside_right_3):\n    for i in range(len(alphabets)):\n        for loop_inside in range(random_inside_left_3 % random_inside_right_3):\n            if alphabets[i] == s:\n                print(alphabets[i + 1])", "effort_before": "15.509775004326936", "effort_after": "86.03910001730776", "difficulty_before": "1.0", "difficulty_after": "2.0", "calculated_length_before": "10.0", "calculated_length_after": "32.0", "length_before": "6", "length_after": "12", "vocabulary_before": "6", "vocabulary_after": "12", "mi_value_before": "74.29", "mi_value_after": "64.35", "Nloc_before": "6", "Nloc_after": "11", "AvgCCN_before": "3.0", "AvgCCN_after": "5.0"}, "s960572618": {"id": "s960572618", "language": "Python", "dataset": "Codenet", "pass_before": 3, "pass_after": 2, "filepath_before": "/home/yang/contamination/Codenet_Python_Before/s960572618.py", "filepath_after": "/home/yang/contamination/Codenet_Python_After/s960572618.py", "code_before": "a, b, c = input().strip().split()\n\nif a == b and b == c:\n    print(\"Yes\")\nelse:\n    print(\"No\")\n", "code_after": "(a, b, c) = input().strip().split()\nrandom_outside_if_left_2 = 310\nrandom_outside_if_right_2 = 309\nif random_outside_if_left_2 & random_outside_if_right_2:\n    if a == b and b == c:\n        print('Yes')\n    else:\n        print('No')\nelse:\n    print('No')", "effort_before": "30.319433158222125", "effort_after": "68.33680652339717", "difficulty_before": "1.2", "difficulty_after": "1.7142857142857142", "calculated_length_before": "13.60964047443681", "calculated_length_after": "24.406371956566698", "length_before": "9", "length_after": "12", "vocabulary_before": "7", "vocabulary_after": "10", "mi_value_before": "72.80", "mi_value_after": "65.54", "Nloc_before": "5", "Nloc_after": "10", "AvgCCN_before": "3.0", "AvgCCN_after": "4.0"}, "s986062252": {"id": "s986062252", "language": "Python", "dataset": "Codenet", "pass_before": 3, "pass_after": 3, "filepath_before": "/home/yang/contamination/Codenet_Python_Before/s986062252.py", "filepath_after": "/home/yang/contamination/Codenet_Python_After/s986062252.py", "code_before": "from sys import stdin\ndef il(func=int): return list(map(func, stdin.readline().rstrip().split()))\n\n\nils = lambda n, s=\"int(input())\": [eval(s) for _ in range(n)]\n\n\ndef gcd(a, b):\n    if a < b:\n        return gcd(b, a)\n    if b == 0:\n        return a\n    return gcd(b, a % b)\n\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\n\n\nn, m = il()\ns = input()\nt = input()\naa = gcd(n, m)\nbb = lcm(n, m)\ncc = aa // bb\nfor i in range(aa):\n    if s[n//aa*i] != t[m//aa*i]:\n        print(-1)\n        exit()\nprint(bb)\n", "code_after": "from sys import stdin\n\ndef il(func=int):\n    return list(map(func, stdin.readline().rstrip().split()))\nils = lambda n, s='int(input())': [eval(s) for _ in range(n)]\n\ndef gcd(a, b):\n    if a < b:\n        return gcd(b, a)\n    if b == 0:\n        return a\n    return gcd(b, a % b)\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\n(n, m) = il()\ns = input()\nt = input()\naa = gcd(n, m)\nbb = lcm(n, m)\ncc = aa // bb\nrandom_inside_left_22 = 298\nrandom_inside_right_22 = 297\nrandom_outside_left_22 = 8\nrandom_outside_right_22 = 7\nfor loop_outside in range(random_outside_left_22 // random_outside_right_22):\n    for i in range(aa):\n        for loop_inside in range(random_inside_left_22 % random_inside_right_22):\n            if s[n // aa * i] != t[m // aa * i]:\n                print(-1)\n                exit()\nprint(bb)", "effort_before": "759.8901085754036", "effort_after": "886.9569831196279", "difficulty_before": "4.735294117647059", "difficulty_after": "4.5", "calculated_length_before": "89.13835275565901", "calculated_length_after": "111.8901503327572", "length_before": "35", "length_after": "41", "vocabulary_before": "24", "vocabulary_after": "28", "mi_value_before": "53.53", "mi_value_after": "50.59", "Nloc_before": "22", "Nloc_after": "29", "AvgCCN_before": "4.0", "AvgCCN_after": "6.0"}, "s870744379": {"id": "s870744379", "language": "Python", "dataset": "Codenet", "pass_before": 3, "pass_after": 0, "filepath_before": "/home/yang/contamination/Codenet_Python_Before/s870744379.py", "filepath_after": "/home/yang/contamination/Codenet_Python_After/s870744379.py", "code_before": "n = int(input())\n\nif n >= 1000:\n    print('ABD')\nelse:\n    print('ABC')\n", "code_after": "n = int(input())\nrandom_outside_if_left_2 = 151\nrandom_outside_if_right_2 = 150\nif random_outside_if_left_2 & random_outside_if_right_2:\n    if n >= 1000:\n        print('ABD')\n    else:\n        print('ABC')\nelse:\n    print('ABC')", "effort_before": "2.3774437510817346", "effort_after": "15.509775004326936", "difficulty_before": "0.5", "difficulty_after": "1.0", "calculated_length_before": "2.0", "calculated_length_after": "10.0", "length_before": "3", "length_after": "6", "vocabulary_before": "3", "vocabulary_after": "6", "mi_value_before": "78.02", "mi_value_after": "68.54", "Nloc_before": "5", "Nloc_after": "10", "AvgCCN_before": "2.0", "AvgCCN_after": "3.0"}, "s764356857": {"id": "s764356857", "language": "Python", "dataset": "Codenet", "pass_before": 3, "pass_after": 2, "filepath_before": "/home/yang/contamination/Codenet_Python_Before/s764356857.py", "filepath_after": "/home/yang/contamination/Codenet_Python_After/s764356857.py", "code_before": "A, B = map(int, input().split())\n\nmin = B * 10\nmax = (B+1) * 10 - 1\n\nans = -1\nfor i in range(min, max+1):\n    if int(i * 0.08) == A:\n        ans = i\n        break\n\nprint(ans)\n", "code_after": "(A, B) = map(int, input().split())\nvariable_10_2 = 10\nmin = B * variable_10_2\nvariable_1_3 = 1\nvariable_10_3 = 10\nvariable_1_3 = 1\nmax = (B + variable_1_3) * variable_10_3 - variable_1_3\nans = -1\nrandom_inside_left_5 = 845\nrandom_inside_right_5 = 844\nrandom_outside_left_5 = 65\nrandom_outside_right_5 = 64\nfor loop_outside in range(random_outside_left_5 // random_outside_right_5):\n    for i in range(min, max + 1):\n        for loop_inside in range(random_inside_left_5 % random_inside_right_5):\n            if int(i * 0.08) == A:\n                ans = i\n                break\nprint(ans)", "effort_before": "336.9693138712347", "effort_after": "545.2305770159968", "difficulty_before": "3.75", "difficulty_after": "4.15625", "calculated_length_before": "44.82892142331043", "calculated_length_after": "83.65148445440323", "length_before": "23", "length_after": "29", "vocabulary_before": "15", "vocabulary_after": "23", "mi_value_before": "64.10", "mi_value_after": "56.12", "Nloc_before": "9", "Nloc_after": "19", "AvgCCN_before": "3.0", "AvgCCN_after": "5.0"}, "s817205687": {"id": "s817205687", "language": "Python", "dataset": "Codenet", "pass_before": 0, "pass_after": 0, "filepath_before": "/home/yang/contamination/Codenet_Python_Before/s817205687.py", "filepath_after": "/home/yang/contamination/Codenet_Python_After/s817205687.py", "code_before": "from functools import reduce\nimport math\n\n\ndef lcm(x, y):\n    return (x * y) // math.gcd(x, y)\n\n\ndef lcm_list(numbers):\n    return reduce(lcm, numbers, 1)\n\n\nN, M = map(int, input().split())\nA = list(map(int, input().split()))\n\n\nA = [a // 2 for a in A]\n\n\ncount_div_2 = None\nfor a in A:\n    cnt = 0\n    while a % 2 == 0:\n        a //= 2\n        cnt += 1\n\n    if count_div_2 is None:\n        count_div_2 = cnt\n\n    elif cnt != count_div_2:\n        print(0)\n        exit()\n\n\nmy_lcm = lcm_list(A)\nif my_lcm > M:\n    print(0)\n    exit()\n\ntmp = M // my_lcm\n\n\nans = (tmp + 1) // 2\nprint(ans)\n", "code_after": "from functools import reduce\nimport math\n\ndef lcm(x, y):\n    return x * y // math.gcd(x, y)\n\ndef lcm_list(numbers):\n    return reduce(lcm, numbers, 1)\n(N, M) = map(int, input().split())\nA = list(map(int, input().split()))\nA = [a // 2 for a in A]\ncount_div_2 = None\nrandom_inside_left_13 = 440\nrandom_inside_right_13 = 439\nrandom_outside_left_13 = 428\nrandom_outside_right_13 = 427\nfor loop_outside in range(random_outside_left_13 // random_outside_right_13):\n    for a in A:\n        for loop_inside in range(random_inside_left_13 % random_inside_right_13):\n            cnt = 0\n            while a % 2 == 0:\n                a //= 2\n                cnt += 1\n            if count_div_2 is None:\n                count_div_2 = cnt\n            elif cnt != count_div_2:\n                print(0)\n                exit()\nmy_lcm = lcm_list(A)\nrandom_outside_if_left_30 = 810\nrandom_outside_if_right_30 = 809\nif random_outside_if_left_30 & random_outside_if_right_30:\n    if my_lcm > M:\n        print(0)\n        exit()\ntmp = M // my_lcm\nvariable_2_37 = 2\nvariable_1_37 = 1\nans = (tmp + variable_1_37) // variable_2_37\nprint(ans)", "effort_before": "1162.2879939328134", "effort_after": "1452.7855063752345", "difficulty_before": "6.5", "difficulty_after": "6.0", "calculated_length_before": "88.0", "calculated_length_after": "138.56842503028858", "length_before": "39", "length_after": "48", "vocabulary_before": "24", "vocabulary_after": "33", "mi_value_before": "51.72", "mi_value_after": "47.25", "Nloc_before": "27", "Nloc_after": "38", "AvgCCN_before": "7.0", "AvgCCN_after": "10.0"}, "s804484425": {"id": "s804484425", "language": "Python", "dataset": "Codenet", "pass_before": 0, "pass_after": 0, "filepath_before": "/home/yang/contamination/Codenet_Python_Before/s804484425.py", "filepath_after": "/home/yang/contamination/Codenet_Python_After/s804484425.py", "code_before": "from operator import itemgetter\n\n\nn, k = map(int, input().split())\ninfo = [list(map(int, input().split())) for i in range(n)]\n\ninfo = sorted(info, key=itemgetter(1), reverse=True)\n\nselected = info[0:k]\nselected_only = []\nselected_chohuku = []\nunselected_only = []\nmemo = {}\nfor t, d in selected:\n    if t not in memo:\n        memo[t] = 1\n        selected_only.append(d)\n    else:\n        selected_chohuku.append(d)\n\ncnt_type = len(memo)\nfor t, d in info[k:]:\n    if t not in memo:\n        memo[t] = 1\n        unselected_only.append(d)\n\n\nsum_select = sum(selected_chohuku) + sum(selected_only)\nans = cnt_type*cnt_type + sum_select\n\nunselected_only = unselected_only[::-1]\nfor i in range(min(len(selected_chohuku), len(unselected_only))):\n    cnt_type += 1\n    sum_select += unselected_only[-1]\n    sum_select -= selected_chohuku[-1]\n    del unselected_only[-1]\n    del selected_chohuku[-1]\n    tmp = cnt_type*cnt_type + sum_select\n    ans = max(ans, tmp)\nprint(ans)\n", "code_after": "from operator import itemgetter\n(n, k) = map(int, input().split())\ninfo = [list(map(int, input().split())) for i in range(n)]\ninfo = sorted(info, key=itemgetter(1), reverse=True)\nselected = info[0:k]\nselected_only = []\nselected_chohuku = []\nunselected_only = []\nmemo = {}\nrandom_inside_left_10 = 346\nrandom_inside_right_10 = 345\nrandom_outside_left_10 = 631\nrandom_outside_right_10 = 630\nrandom_inside_left_17 = 126\nrandom_inside_right_17 = 125\nrandom_outside_left_17 = 351\nrandom_outside_right_17 = 350\nrandom_inside_left_24 = 16\nrandom_inside_right_24 = 15\nrandom_outside_left_24 = 430\nrandom_outside_right_24 = 429\nfor loop_outside in range(random_outside_left_10 // random_outside_right_10):\n    for (t, d) in selected:\n        for loop_inside in range(random_inside_left_10 % random_inside_right_10):\n            if t not in memo:\n                memo[t] = 1\n                selected_only.append(d)\n            else:\n                selected_chohuku.append(d)\ncnt_type = len(memo)\nfor loop_outside in range(random_outside_left_17 // random_outside_right_17):\n    for (t, d) in info[k:]:\n        for loop_inside in range(random_inside_left_17 % random_inside_right_17):\n            if t not in memo:\n                memo[t] = 1\n                unselected_only.append(d)\nsum_select = sum(selected_chohuku) + sum(selected_only)\nans = cnt_type * cnt_type + sum_select\nunselected_only = unselected_only[::-1]\nfor loop_outside in range(random_outside_left_24 // random_outside_right_24):\n    for i in range(min(len(selected_chohuku), len(unselected_only))):\n        for loop_inside in range(random_inside_left_24 % random_inside_right_24):\n            cnt_type += 1\n            sum_select += unselected_only[-1]\n            sum_select -= selected_chohuku[-1]\n            del unselected_only[-1]\n            del selected_chohuku[-1]\n            tmp = cnt_type * cnt_type + sum_select\n            ans = max(ans, tmp)\nprint(ans)", "effort_before": "909.090909090909", "effort_after": "1602.4197940702427", "difficulty_before": "5.681818181818182", "difficulty_after": "5.630434782608695", "calculated_length_before": "49.663388279447084", "calculated_length_after": "123.69340944371453", "length_before": "40", "length_after": "58", "vocabulary_before": "16", "vocabulary_after": "30", "mi_value_before": "49.94", "mi_value_after": "43.45", "Nloc_before": "32", "Nloc_after": "50", "AvgCCN_before": "7.0", "AvgCCN_after": "13.0"}, "s430322735": {"id": "s430322735", "language": "Python", "dataset": "Codenet", "pass_before": 0, "pass_after": 0, "filepath_before": "/home/yang/contamination/Codenet_Python_Before/s430322735.py", "filepath_after": "/home/yang/contamination/Codenet_Python_After/s430322735.py", "code_before": "n = int(input())\nlst = []\npair = 0\nfor i in range(n):\n    st = ''.join(sorted(list(input())))\n    lst.append(st)\nlst = sorted(lst)\nlst += ['end']\npre = ''\ntmp_cnt = 0\ncnt = 0\nfor i in lst:\n    if i == pre:\n        tmp_cnt += 1\n    else:\n        cnt += sum([j for j in range(tmp_cnt + 1)])\n        tmp_cnt = 0\n    pre = i\nprint(cnt)\n", "code_after": "n = int(input())\nlst = []\npair = 0\nrandom_inside_left_4 = 26\nrandom_inside_right_4 = 25\nrandom_outside_left_4 = 212\nrandom_outside_right_4 = 211\nrandom_inside_left_12 = 210\nrandom_inside_right_12 = 209\nrandom_outside_left_12 = 908\nrandom_outside_right_12 = 907\nfor loop_outside in range(random_outside_left_4 // random_outside_right_4):\n    for i in range(n):\n        for loop_inside in range(random_inside_left_4 % random_inside_right_4):\n            st = ''.join(sorted(list(input())))\n            lst.append(st)\nlst = sorted(lst)\nlst += ['end']\npre = ''\ntmp_cnt = 0\ncnt = 0\nfor loop_outside in range(random_outside_left_12 // random_outside_right_12):\n    for i in lst:\n        for loop_inside in range(random_inside_left_12 % random_inside_right_12):\n            if i == pre:\n                tmp_cnt += 1\n            else:\n                cnt += sum([j for j in range(tmp_cnt + 1)])\n                tmp_cnt = 0\n            pre = i\nprint(cnt)", "effort_before": "62.28615177913805", "effort_after": "262.55713176440725", "difficulty_before": "1.25", "difficulty_after": "2.25", "calculated_length_before": "26.0", "calculated_length_after": "72.0", "length_before": "15", "length_after": "27", "vocabulary_before": "10", "vocabulary_after": "20", "mi_value_before": "59.06", "mi_value_after": "51.48", "Nloc_before": "19", "Nloc_after": "31", "AvgCCN_before": "5.0", "AvgCCN_after": "9.0"}, "s040517919": {"id": "s040517919", "language": "Python", "dataset": "Codenet", "pass_before": 3, "pass_after": 0, "filepath_before": "/home/yang/contamination/Codenet_Python_Before/s040517919.py", "filepath_after": "/home/yang/contamination/Codenet_Python_After/s040517919.py", "code_before": "A, B = map(int, input().split())\nif A == B:\n    print(\"Draw\")\nelif A == 1:\n    print(\"Alice\")\nelif B == 1:\n    print(\"Bob\")\nelif A > B:\n    print(\"Alice\")\nelse:\n    print(\"Bob\")\n", "code_after": "(A, B) = map(int, input().split())\nrandom_outside_if_left_2 = 588\nrandom_outside_if_right_2 = 587\nif random_outside_if_left_2 & random_outside_if_right_2:\n    if A == B:\n        print('Draw')\n    elif A == 1:\n        print('Alice')\n    elif B == 1:\n        print('Bob')\n    elif A > B:\n        print('Alice')\n    else:\n        print('Bob')\nelif A == 1:\n    print('Alice')\nelif B == 1:\n    print('Bob')\nelif A > B:\n    print('Alice')\nelse:\n    print('Bob')", "effort_before": "74.30169903639559", "effort_after": "345.59999999999997", "difficulty_before": "2.6666666666666665", "difficulty_after": "4.8", "calculated_length_before": "6.754887502163469", "calculated_length_after": "16.36452797660028", "length_before": "12", "length_after": "24", "vocabulary_before": "5", "vocabulary_after": "8", "mi_value_before": "65.67", "mi_value_after": "56.08", "Nloc_before": "11", "Nloc_after": "22", "AvgCCN_before": "5.0", "AvgCCN_after": "9.0"}, "s273727373": {"id": "s273727373", "language": "Python", "dataset": "Codenet", "pass_before": 3, "pass_after": 0, "filepath_before": "/home/yang/contamination/Codenet_Python_Before/s273727373.py", "filepath_after": "/home/yang/contamination/Codenet_Python_After/s273727373.py", "code_before": "N = int(input())\nA = list(map(int, input().split()))\nB = list(A)\ncount = 1\nfor i in A:\n    B[i-1] = count\n    count += 1\n\n\nprint(*B)\n", "code_after": "N = int(input())\nA = list(map(int, input().split()))\nB = list(A)\ncount = 1\nrandom_inside_left_5 = 681\nrandom_inside_right_5 = 680\nrandom_outside_left_5 = 414\nrandom_outside_right_5 = 413\nfor loop_outside in range(random_outside_left_5 // random_outside_right_5):\n    for i in A:\n        for loop_inside in range(random_inside_left_5 % random_inside_right_5):\n            B[i - 1] = count\n            count += 1\nprint(*B)", "effort_before": "18.575424759098897", "effort_after": "94.88726725405158", "difficulty_before": "1.3333333333333333", "difficulty_after": "2.2857142857142856", "calculated_length_before": "6.754887502163469", "calculated_length_after": "27.651484454403228", "length_before": "6", "length_after": "12", "vocabulary_before": "5", "vocabulary_after": "11", "mi_value_before": "70.90", "mi_value_after": "62.48", "Nloc_before": "8", "Nloc_after": "14", "AvgCCN_before": "2.0", "AvgCCN_after": "4.0"}, "s869207096": {"id": "s869207096", "language": "Python", "dataset": "Codenet", "pass_before": 3, "pass_after": 3, "filepath_before": "/home/yang/contamination/Codenet_Python_Before/s869207096.py", "filepath_after": "/home/yang/contamination/Codenet_Python_After/s869207096.py", "code_before": "n = int(input())\ns = input()\ncnt = 1\nfor i in range(n-1):\n    if s[i] == s[i+1]:\n        continue\n\n    else:\n        cnt += 1\n\nprint(cnt)\n", "code_after": "n = int(input())\ns = input()\ncnt = 1\nrandom_inside_left_4 = 194\nrandom_inside_right_4 = 193\nrandom_outside_left_4 = 667\nrandom_outside_right_4 = 666\nfor loop_outside in range(random_outside_left_4 // random_outside_right_4):\n    for i in range(n - 1):\n        for loop_inside in range(random_inside_left_4 % random_inside_right_4):\n            if s[i] == s[i + 1]:\n                continue\n            else:\n                cnt += 1\nprint(cnt)", "effort_before": "76.0782000346155", "effort_after": "210.97209216286", "difficulty_before": "2.0", "difficulty_after": "3.0", "calculated_length_before": "20.264662506490406", "calculated_length_after": "44.82892142331043", "length_before": "12", "length_after": "18", "vocabulary_before": "9", "vocabulary_after": "15", "mi_value_before": "66.72", "mi_value_after": "60.13", "Nloc_before": "9", "Nloc_after": "15", "AvgCCN_before": "3.0", "AvgCCN_after": "5.0"}, "s048491063": {"id": "s048491063", "language": "Python", "dataset": "Codenet", "pass_before": 1, "pass_after": 0, "filepath_before": "/home/yang/contamination/Codenet_Python_Before/s048491063.py", "filepath_after": "/home/yang/contamination/Codenet_Python_After/s048491063.py", "code_before": "def main():\n\n    N, M, Q = map(int, input().split())\n    train = [[0 for _ in range(N)] for _ in range(N)]\n    for _ in range(M):\n        l, r = map(int, input().split())\n        train[l-1][r-1] += 1\n\n    accum = [[0 for _ in range(N+1)]]\n    for i in range(N):\n        temp = [0]\n        v = 0\n        for j in range(N):\n            v += train[i][j]\n            temp.append(accum[-1][j+1]+v)\n        accum.append(temp)\n\n    for _ in range(Q):\n        p, q = map(int, input().split())\n        v = accum[q][q] - accum[p-1][q] - accum[q][p-1] + accum[p-1][p-1]\n        print(v)\n\n\nif __name__ == '__main__':\n    main()\n", "code_after": "def main():\n    (N, M, Q) = map(int, input().split())\n    train = [[0 for _ in range(N)] for _ in range(N)]\n    for _ in range(M):\n        (l, r) = map(int, input().split())\n        train[l - 1][r - 1] += 1\n    accum = [[0 for _ in range(N + 1)]]\n    for i in range(N):\n        temp = [0]\n        v = 0\n        for j in range(N):\n            v += train[i][j]\n            temp.append(accum[-1][j + 1] + v)\n        accum.append(temp)\n    for _ in range(Q):\n        (p, q) = map(int, input().split())\n        v = accum[q][q] - accum[p - 1][q] - accum[q][p - 1] + accum[p - 1][p - 1]\n        print(v)\nmain()", "effort_before": "721.9324298171714", "effort_after": "508.1583287956889", "difficulty_before": "3.4444444444444446", "difficulty_after": "2.71875", "calculated_length_before": "83.05865002596161", "calculated_length_after": "68.75488750216347", "length_before": "47", "length_after": "44", "vocabulary_before": "22", "vocabulary_after": "19", "mi_value_before": "54.63", "mi_value_after": "55.58", "Nloc_before": "20", "Nloc_after": "19", "AvgCCN_before": "2.0", "AvgCCN_after": "1.0"}, "s893778513": {"id": "s893778513", "language": "Python", "dataset": "Codenet", "pass_before": 3, "pass_after": 3, "filepath_before": "/home/yang/contamination/Codenet_Python_Before/s893778513.py", "filepath_after": "/home/yang/contamination/Codenet_Python_After/s893778513.py", "code_before": "n = input()\nl = list(map(int, input().split()))\n\nb = max(l)\ns = sum(l)\n\nif b < s - b:\n    print('Yes')\nelse:\n    print('No')\n", "code_after": "n = input()\nl = list(map(int, input().split()))\nb = max(l)\ns = sum(l)\nrandom_outside_if_left_5 = 392\nrandom_outside_if_right_5 = 391\nif random_outside_if_left_5 & random_outside_if_right_5:\n    if b < s - b:\n        print('Yes')\n    else:\n        print('No')\nelse:\n    print('No')", "effort_before": "18.575424759098897", "effort_after": "48.6", "difficulty_before": "1.3333333333333333", "difficulty_after": "1.8", "calculated_length_before": "6.754887502163469", "calculated_length_after": "16.36452797660028", "length_before": "6", "length_after": "9", "vocabulary_before": "5", "vocabulary_after": "8", "mi_value_before": "70.90", "mi_value_after": "64.57", "Nloc_before": "8", "Nloc_after": "13", "AvgCCN_before": "2.0", "AvgCCN_after": "3.0"}, "s267613210": {"id": "s267613210", "language": "Python", "dataset": "Codenet", "pass_before": 0, "pass_after": 0, "filepath_before": "/home/yang/contamination/Codenet_Python_Before/s267613210.py", "filepath_after": "/home/yang/contamination/Codenet_Python_After/s267613210.py", "code_before": "import sys\ndef input(): return sys.stdin.readline().rstrip()\ndef input_nums(): return list(map(int, input().split()))\n\n\ndef main():\n    K, N = input_nums()\n    A = input_nums()\n    dist = []\n    for i in range(len(A)-1):\n        dist.append(A[i+1]-A[i])\n    dist.append(K+A[0]-A[-1])\n    maxv = max(dist)\n    print(sum(dist) - maxv)\n\n\nif __name__ == '__main__':\n    main()\n", "code_after": "import sys\n\ndef input():\n    return sys.stdin.readline().rstrip()\n\ndef input_nums():\n    return list(map(int, input().split()))\n\ndef main():\n    (K, N) = input_nums()\n    A = input_nums()\n    dist = []\n    for i in range(len(A) - 1):\n        dist.append(A[i + 1] - A[i])\n    dist.append(K + A[0] - A[-1])\n    maxv = max(dist)\n    print(sum(dist) - maxv)\nmain()", "effort_before": "216.94995080482573", "effort_after": "134.9880381456787", "difficulty_before": "2.3076923076923075", "difficulty_after": "1.7727272727272727", "calculated_length_before": "56.105716335834195", "calculated_length_after": "42.808635307173745", "length_before": "23", "length_after": "20", "vocabulary_before": "17", "vocabulary_after": "14", "mi_value_before": "59.07", "mi_value_after": "60.42", "Nloc_before": "14", "Nloc_after": "15", "AvgCCN_before": "2.0", "AvgCCN_after": "1.0"}, "s491954463": {"id": "s491954463", "language": "Python", "dataset": "Codenet", "pass_before": 2, "pass_after": 1, "filepath_before": "/home/yang/contamination/Codenet_Python_Before/s491954463.py", "filepath_after": "/home/yang/contamination/Codenet_Python_After/s491954463.py", "code_before": "n, m = list(map(int, input().split()))\na = []\nb = []\nfor i in range(m):\n    a1, b1 = list(map(int, input().split()))\n    a.append(a1)\n    b.append(b1)\n\nfor i in range(1, n+1):\n    print(a.count(i)+b.count(i))\n", "code_after": "(n, m) = list(map(int, input().split()))\na = []\nb = []\nrandom_inside_left_4 = 331\nrandom_inside_right_4 = 330\nrandom_outside_left_4 = 899\nrandom_outside_right_4 = 898\nrandom_inside_left_8 = 681\nrandom_inside_right_8 = 680\nrandom_outside_left_8 = 678\nrandom_outside_right_8 = 677\nfor loop_outside in range(random_outside_left_4 // random_outside_right_4):\n    for i in range(m):\n        for loop_inside in range(random_inside_left_4 % random_inside_right_4):\n            (a1, b1) = list(map(int, input().split()))\n            a.append(a1)\n            b.append(b1)\nfor loop_outside in range(random_outside_left_8 // random_outside_right_8):\n    for i in range(1, n + 1):\n        for loop_inside in range(random_inside_left_8 % random_inside_right_8):\n            print(a.count(i) + b.count(i))", "effort_before": "6.965784284662087", "effort_after": "105.48604608143", "difficulty_before": "0.5", "difficulty_after": "1.5", "calculated_length_before": "8.0", "calculated_length_after": "47.77443751081735", "length_before": "6", "length_after": "18", "vocabulary_before": "5", "vocabulary_after": "15", "mi_value_before": "69.77", "mi_value_after": "56.84", "Nloc_before": "9", "Nloc_after": "21", "AvgCCN_before": "3.0", "AvgCCN_after": "7.0"}, "s663509070": {"id": "s663509070", "language": "Python", "dataset": "Codenet", "pass_before": 0, "pass_after": 0, "filepath_before": "/home/yang/contamination/Codenet_Python_Before/s663509070.py", "filepath_after": "/home/yang/contamination/Codenet_Python_After/s663509070.py", "code_before": "import math\nN, D = map(int, input().split())\nmat = []\nfor d in range(N):\n    mat.append([int(x) for x in input().split()])\n\nc = 0\nfor i in range(len(mat)-1):\n    for j in range(i+1, len(mat)):\n        dist = math.sqrt(sum([(x-y)**2 for x, y in zip(mat[i], mat[j])]))\n        if int(dist) == dist:\n            c += 1\nprint(c)\n", "code_after": "import math\n(N, D) = map(int, input().split())\nmat = []\nrandom_inside_left_4 = 917\nrandom_inside_right_4 = 916\nrandom_outside_left_4 = 176\nrandom_outside_right_4 = 175\nrandom_inside_left_7 = 32\nrandom_inside_right_7 = 31\nrandom_outside_left_7 = 729\nrandom_outside_right_7 = 728\nfor loop_outside in range(random_outside_left_4 // random_outside_right_4):\n    for d in range(N):\n        for loop_inside in range(random_inside_left_4 % random_inside_right_4):\n            mat.append([int(x) for x in input().split()])\nc = 0\nfor loop_outside in range(random_outside_left_7 // random_outside_right_7):\n    for i in range(len(mat) - 1):\n        for loop_inside in range(random_inside_left_7 % random_inside_right_7):\n            for j in range(i + 1, len(mat)):\n                dist = math.sqrt(sum([(x - y) ** 2 for (x, y) in zip(mat[i], mat[j])]))\n                if int(dist) == dist:\n                    c += 1\nprint(c)", "effort_before": "164.4777326328885", "effort_after": "458.4962500721157", "difficulty_before": "2.4", "difficulty_after": "3.3333333333333335", "calculated_length_before": "41.219280948873624", "calculated_length_after": "90.56842503028855", "length_before": "18", "length_after": "30", "vocabulary_before": "14", "vocabulary_after": "24", "mi_value_before": "61.90", "mi_value_after": "53.05", "Nloc_before": "12", "Nloc_after": "24", "AvgCCN_before": "7.0", "AvgCCN_after": "11.0"}, "s018260659": {"id": "s018260659", "language": "Python", "dataset": "Codenet", "pass_before": 0, "pass_after": 0, "filepath_before": "/home/yang/contamination/Codenet_Python_Before/s018260659.py", "filepath_after": "/home/yang/contamination/Codenet_Python_After/s018260659.py", "code_before": "N = int(input())\ncnt = 1\nwhile cnt <= 9:\n    if N % cnt == 0 and 1 <= N/cnt <= 9:\n        print('Yes')\n        break\n    else:\n        cnt += 1\nelse:\n    print('No')\n", "code_after": "N = int(input())\ncnt = 1\nrandom_inside_left_3 = 481\nrandom_inside_right_3 = 480\nrandom_outside_left_3 = 539\nrandom_outside_right_3 = 538\nfor loop_outside in range(random_outside_left_3 // random_outside_right_3):\n    while cnt <= 9:\n        for loop_inside in range(random_inside_left_3 % random_inside_right_3):\n            if N % cnt == 0 and 1 <= N / cnt <= 9:\n                print('Yes')\n                break\n            else:\n                cnt += 1\n    else:\n        print('No')", "effort_before": "449.29241849497964", "effort_after": "641.1414100761752", "difficulty_before": "5.0", "difficulty_after": "5.115384615384615", "calculated_length_before": "44.039100017307746", "calculated_length_after": "67.75720079023742", "length_before": "23", "length_after": "29", "vocabulary_before": "15", "vocabulary_after": "20", "mi_value_before": "62.93", "mi_value_after": "57.53", "Nloc_before": "10", "Nloc_after": "16", "AvgCCN_before": "5.0", "AvgCCN_after": "7.0"}, "s357377130": {"id": "s357377130", "language": "Python", "dataset": "Codenet", "pass_before": 1, "pass_after": 0, "filepath_before": "/home/yang/contamination/Codenet_Python_Before/s357377130.py", "filepath_after": "/home/yang/contamination/Codenet_Python_After/s357377130.py", "code_before": "A, B, K = map(int, input().split())\nif A+K-1 >= B-K+1:\n    while A <= B:\n        print(A)\n        A += 1\nelse:\n    i = 0\n    while i <= K-1:\n        print(A+i)\n        i += 1\n    while B-K+1 <= B:\n        print(B-K+1)\n        K -= 1\n", "code_after": "(A, B, K) = map(int, input().split())\nrandom_outside_if_left_2 = 649\nrandom_outside_if_right_2 = 648\nif random_outside_if_left_2 & random_outside_if_right_2:\n    if A + K - 1 >= B - K + 1:\n        while A <= B:\n            print(A)\n            A += 1\n    else:\n        i = 0\n        while i <= K - 1:\n            print(A + i)\n            i += 1\n        while B - K + 1 <= B:\n            print(B - K + 1)\n            K -= 1\nelse:\n    i = 0\n    while i <= K - 1:\n        print(A + i)\n        i += 1\n    while B - K + 1 <= B:\n        print(B - K + 1)\n        K -= 1", "effort_before": "1090.4093179581678", "effort_after": "2837.8504741305683", "difficulty_before": "5.230769230769231", "difficulty_after": "7.368421052631579", "calculated_length_before": "56.105716335834195", "calculated_length_after": "92.32026322986493", "length_before": "51", "length_after": "84", "vocabulary_before": "17", "vocabulary_after": "24", "mi_value_before": "58.09", "mi_value_after": "50.32", "Nloc_before": "13", "Nloc_after": "24", "AvgCCN_before": "5.0", "AvgCCN_after": "8.0"}, "s749244504": {"id": "s749244504", "language": "Python", "dataset": "Codenet", "pass_before": 0, "pass_after": 0, "filepath_before": "/home/yang/contamination/Codenet_Python_Before/s749244504.py", "filepath_after": "/home/yang/contamination/Codenet_Python_After/s749244504.py", "code_before": "from itertools import chain\nimport numpy as np\nimport networkx as nx\n\nX = iter(open(0).readlines())\nh, w = map(int, next(X).split())\nC = np.zeros((10, 10), dtype=int)\nfor i in range(10):\n    for j, c in enumerate(map(int, next(X).split())):\n        C[i, j] = c\nA = np.zeros((h, w), dtype=int)\nfor i in range(h):\n    for j, a in enumerate(map(int, next(X).split())):\n        A[i, j] = a\n\nG = nx.DiGraph(C)\nd = {}\nfor i in range(10):\n    if i == 1:\n        continue\n    d[i] = nx.shortest_path_length(G, i, 1, weight='weight')\n\ns = 0\nfor a in chain.from_iterable(A):\n    if a == -1 or a == 1:\n        continue\n    s += d[a]\nprint(s)\n", "code_after": "from itertools import chain\nimport numpy as np\nimport networkx as nx\nX = iter(open(0).readlines())\n(h, w) = map(int, next(X).split())\nC = np.zeros((10, 10), dtype=int)\nrandom_inside_left_7 = 497\nrandom_inside_right_7 = 496\nrandom_outside_left_7 = 84\nrandom_outside_right_7 = 83\nrandom_inside_left_11 = 862\nrandom_inside_right_11 = 861\nrandom_outside_left_11 = 108\nrandom_outside_right_11 = 107\nrandom_inside_left_16 = 917\nrandom_inside_right_16 = 916\nrandom_outside_left_16 = 727\nrandom_outside_right_16 = 726\nrandom_inside_left_21 = 551\nrandom_inside_right_21 = 550\nrandom_outside_left_21 = 742\nrandom_outside_right_21 = 741\nfor loop_outside in range(random_outside_left_7 // random_outside_right_7):\n    for i in range(10):\n        for loop_inside in range(random_inside_left_7 % random_inside_right_7):\n            for (j, c) in enumerate(map(int, next(X).split())):\n                C[i, j] = c\nA = np.zeros((h, w), dtype=int)\nfor loop_outside in range(random_outside_left_11 // random_outside_right_11):\n    for i in range(h):\n        for loop_inside in range(random_inside_left_11 % random_inside_right_11):\n            for (j, a) in enumerate(map(int, next(X).split())):\n                A[i, j] = a\nG = nx.DiGraph(C)\nd = {}\nfor loop_outside in range(random_outside_left_16 // random_outside_right_16):\n    for i in range(10):\n        for loop_inside in range(random_inside_left_16 % random_inside_right_16):\n            if i == 1:\n                continue\n            d[i] = nx.shortest_path_length(G, i, 1, weight='weight')\ns = 0\nfor loop_outside in range(random_outside_left_21 // random_outside_right_21):\n    for a in chain.from_iterable(A):\n        for loop_inside in range(random_inside_left_21 % random_inside_right_21):\n            if a == -1 or a == 1:\n                continue\n            s += d[a]\nprint(s)", "effort_before": "167.59699690871406", "effort_after": "678.9909861673287", "difficulty_before": "2.75", "difficulty_after": "3.375", "calculated_length_before": "32.0", "calculated_length_after": "125.5488750216347", "length_before": "17", "length_after": "41", "vocabulary_before": "12", "vocabulary_after": "30", "mi_value_before": "55.29", "mi_value_after": "44.39", "Nloc_before": "25", "Nloc_after": "49", "AvgCCN_before": "10.0", "AvgCCN_after": "18.0"}, "s103029464": {"id": "s103029464", "language": "Python", "dataset": "Codenet", "pass_before": 1, "pass_after": 0, "filepath_before": "/home/yang/contamination/Codenet_Python_Before/s103029464.py", "filepath_after": "/home/yang/contamination/Codenet_Python_After/s103029464.py", "code_before": "N = int(input())\nA = list(map(int, input().split()))\nB = [0] * N\n\nfor i in range(N - 1, -1, -1):\n    tmp_sum = 0\n    for j in range((i + 1) * 2 - 1, N, i + 1):\n        tmp_sum += B[j]\n        tmp_sum %= 2\n    B[i] = tmp_sum ^ A[i]\n\nprint(sum(B))\nprint(*[i + 1 for i, b in enumerate(B) if b == 1])\n", "code_after": "N = int(input())\nA = list(map(int, input().split()))\nvariable_0_3 = 0\nB = [variable_0_3] * N\nrandom_inside_left_4 = 756\nrandom_inside_right_4 = 755\nrandom_outside_left_4 = 587\nrandom_outside_right_4 = 586\nfor loop_outside in range(random_outside_left_4 // random_outside_right_4):\n    for i in range(N - 1, -1, -1):\n        for loop_inside in range(random_inside_left_4 % random_inside_right_4):\n            tmp_sum = 0\n            for j in range((i + 1) * 2 - 1, N, i + 1):\n                tmp_sum += B[j]\n                tmp_sum %= 2\n            B[i] = tmp_sum ^ A[i]\nprint(sum(B))\nprint(*[i + 1 for (i, b) in enumerate(B) if b == 1])", "effort_before": "1178.1933549529733", "effort_after": "1452.3649586913716", "difficulty_before": "7.636363636363637", "difficulty_after": "7.466666666666667", "calculated_length_before": "57.705232259413506", "calculated_length_after": "82.60335893412778", "length_before": "37", "length_after": "43", "vocabulary_before": "18", "vocabulary_after": "23", "mi_value_before": "60.46", "mi_value_after": "55.14", "Nloc_before": "11", "Nloc_after": "18", "AvgCCN_before": "5.0", "AvgCCN_after": "7.0"}, "s259116349": {"id": "s259116349", "language": "Python", "dataset": "Codenet", "pass_before": 0, "pass_after": 0, "filepath_before": "/home/yang/contamination/Codenet_Python_Before/s259116349.py", "filepath_after": "/home/yang/contamination/Codenet_Python_After/s259116349.py", "code_before": "from math import factorial as f\n\nN = int(input())\n\nprimes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47]\ndivs = []\nfor i in range(1, 101):\n    tmp = [0 for _ in range(len(primes))]\n    for j in range(len(primes)):\n        p = primes[j]\n        tmp[j] = 0\n        while (i//p == i/p):\n            i = i//p\n            tmp[j] += 1\n    divs.append(tmp)\n\n\ndivsum = [0 for _ in range(len(primes))]\nfor i in range(1, N+1):\n    for j in range(len(primes)):\n        divsum[j] += divs[i-1][j]\n\n\ndef num(n):\n    return len(list(filter(lambda x: x >= n-1, divsum)))\n\n\nans = 0\n\n\nans += num(75)\n\n\nans += num(15)*(num(5)-1)\n\n\nans += num(25)*(num(3)-1)\n\n\nans += num(5) * (num(5)-1) * (num(3)-2) // 2\nprint(int(ans))\n", "code_after": "from math import factorial as f\nN = int(input())\nprimes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47]\ndivs = []\nrandom_inside_left_5 = 769\nrandom_inside_right_5 = 768\nrandom_outside_left_5 = 180\nrandom_outside_right_5 = 179\nrandom_inside_left_15 = 665\nrandom_inside_right_15 = 664\nrandom_outside_left_15 = 903\nrandom_outside_right_15 = 902\nfor loop_outside in range(random_outside_left_5 // random_outside_right_5):\n    for i in range(1, 101):\n        for loop_inside in range(random_inside_left_5 % random_inside_right_5):\n            tmp = [0 for _ in range(len(primes))]\n            for j in range(len(primes)):\n                p = primes[j]\n                tmp[j] = 0\n                while i // p == i / p:\n                    i = i // p\n                    tmp[j] += 1\n            divs.append(tmp)\ndivsum = [0 for _ in range(len(primes))]\nfor loop_outside in range(random_outside_left_15 // random_outside_right_15):\n    for i in range(1, N + 1):\n        for loop_inside in range(random_inside_left_15 % random_inside_right_15):\n            for j in range(len(primes)):\n                divsum[j] += divs[i - 1][j]\n\ndef num(n):\n    return len(list(filter(lambda x: x >= n - 1, divsum)))\nans = 0\nans += num(75)\nans += num(15) * (num(5) - 1)\nans += num(25) * (num(3) - 1)\nans += num(5) * (num(5) - 1) * (num(3) - 2) // 2\nprint(int(ans))", "effort_before": "1834.8604140418975", "effort_after": "2442.862597815434", "difficulty_before": "5.03125", "difficulty_after": "5.4", "calculated_length_before": "179.65148445440323", "calculated_length_after": "236.8771237954945", "length_before": "69", "length_after": "81", "vocabulary_before": "39", "vocabulary_after": "48", "mi_value_before": "49.76", "mi_value_after": "45.08", "Nloc_before": "25", "Nloc_after": "37", "AvgCCN_before": "8.0", "AvgCCN_after": "12.0"}, "s724326345": {"id": "s724326345", "language": "Python", "dataset": "Codenet", "pass_before": 3, "pass_after": 3, "filepath_before": "/home/yang/contamination/Codenet_Python_Before/s724326345.py", "filepath_after": "/home/yang/contamination/Codenet_Python_After/s724326345.py", "code_before": "def main():\n    A, B, C, X, Y = map(int, input().split())\n    ans = 10 ** 10\n\n    for k in range(max(X, Y) + 1):\n        total = 2 * C * k + A * max(0, X - k) + B * max(0, Y - k)\n        if total < ans:\n            ans = total\n\n    print(ans)\n\n\nif __name__ == \"__main__\":\n    main()\n", "code_after": "def main():\n    (A, B, C, X, Y) = map(int, input().split())\n    ans = 10 ** 10\n    for k in range(max(X, Y) + 1):\n        total = 2 * C * k + A * max(0, X - k) + B * max(0, Y - k)\n        if total < ans:\n            ans = total\n    print(ans)\nmain()", "effort_before": "586.8889716956053", "effort_after": "437.9845757267842", "difficulty_before": "3.4285714285714284", "difficulty_after": "2.8947368421052633", "calculated_length_before": "107.74844088268091", "calculated_length_after": "92.32026322986493", "length_before": "36", "length_after": "33", "vocabulary_before": "27", "vocabulary_after": "24", "mi_value_before": "61.38", "mi_value_after": "62.79", "Nloc_before": "10", "Nloc_after": "9", "AvgCCN_before": "2.0", "AvgCCN_after": "1.0"}, "s101447419": {"id": "s101447419", "language": "Python", "dataset": "Codenet", "pass_before": 0, "pass_after": 0, "filepath_before": "/home/yang/contamination/Codenet_Python_Before/s101447419.py", "filepath_after": "/home/yang/contamination/Codenet_Python_After/s101447419.py", "code_before": "import collections\n\n\ndef main():\n    n = int(input())\n    v = list(map(int, input().split()))\n    ve = []\n    vo = []\n    for i in range(n//2):\n        ve.append(v[2*i])\n        vo.append(v[2*i+1])\n    ce = collections.Counter(ve)\n    co = collections.Counter(vo)\n    ans = n\n    if ce.most_common()[0][0] != co.most_common()[0][0]:\n        ans = n-ce.most_common()[0][1]-co.most_common()[0][1]\n    elif len(ce) == 1 and len(co) == 1:\n        ans = n-ce.most_common()[0][1]\n    elif len(ce) == 1:\n        ans = n-ce.most_common()[0][1]-co.most_common()[1][1]\n    elif len(co) == 1:\n        ans = n-ce.most_common()[1][1]-co.most_common()[0][1]\n    else:\n        ans = min(n-ce.most_common()[0][1]-co.most_common()[1]\n                  [1], n-ce.most_common()[1][1]-co.most_common()[0][1])\n    print(ans)\n\n\nif __name__ == \"__main__\":\n    main()\n", "code_after": "import collections\n\ndef main():\n    n = int(input())\n    v = list(map(int, input().split()))\n    ve = []\n    vo = []\n    for i in range(n // 2):\n        ve.append(v[2 * i])\n        vo.append(v[2 * i + 1])\n    ce = collections.Counter(ve)\n    co = collections.Counter(vo)\n    ans = n\n    if ce.most_common()[0][0] != co.most_common()[0][0]:\n        ans = n - ce.most_common()[0][1] - co.most_common()[0][1]\n    elif len(ce) == 1 and len(co) == 1:\n        ans = n - ce.most_common()[0][1]\n    elif len(ce) == 1:\n        ans = n - ce.most_common()[0][1] - co.most_common()[1][1]\n    elif len(co) == 1:\n        ans = n - ce.most_common()[1][1] - co.most_common()[0][1]\n    else:\n        ans = min(n - ce.most_common()[0][1] - co.most_common()[1][1], n - ce.most_common()[1][1] - co.most_common()[0][1])\n    print(ans)\nmain()", "effort_before": "1720.6430724722775", "effort_after": "1650.9888082192156", "difficulty_before": "4.967741935483871", "difficulty_after": "5.068965517241379", "calculated_length_before": "173.2315700763964", "calculated_length_after": "160.53293331310283", "length_before": "66", "length_after": "63", "vocabulary_before": "38", "vocabulary_after": "36", "mi_value_before": "51.08", "mi_value_after": "51.78", "Nloc_before": "26", "Nloc_after": "24", "AvgCCN_before": "2.0", "AvgCCN_after": "1.0"}, "s310981504": {"id": "s310981504", "language": "Python", "dataset": "Codenet", "pass_before": 3, "pass_after": 0, "filepath_before": "/home/yang/contamination/Codenet_Python_Before/s310981504.py", "filepath_after": "/home/yang/contamination/Codenet_Python_After/s310981504.py", "code_before": "a, b = map(int, input().split())\n\nif a <= b:\n    print(a)\nelse:\n    print(a-1)\n", "code_after": "(a, b) = map(int, input().split())\nrandom_outside_if_left_2 = 692\nrandom_outside_if_right_2 = 691\nif random_outside_if_left_2 & random_outside_if_right_2:\n    if a <= b:\n        print(a)\n    else:\n        print(a - 1)\nelse:\n    print(a - 1)", "effort_before": "18.575424759098897", "effort_after": "86.39999999999999", "difficulty_before": "1.3333333333333333", "difficulty_after": "2.4", "calculated_length_before": "6.754887502163469", "calculated_length_after": "16.36452797660028", "length_before": "6", "length_after": "12", "vocabulary_before": "5", "vocabulary_after": "8", "mi_value_before": "74.75", "mi_value_after": "65.98", "Nloc_before": "5", "Nloc_after": "10", "AvgCCN_before": "2.0", "AvgCCN_after": "3.0"}, "s636719275": {"id": "s636719275", "language": "Python", "dataset": "Codenet", "pass_before": 3, "pass_after": 3, "filepath_before": "/home/yang/contamination/Codenet_Python_Before/s636719275.py", "filepath_after": "/home/yang/contamination/Codenet_Python_After/s636719275.py", "code_before": "s = input()\nt = input()\n\n\ndef check(a, b):\n    s = 0\n    for i, j in zip(a, b):\n        s += i != j\n    return s\n\n\nans = 10**6\nfor i in range(len(s)):\n    a = s[i:]\n    if len(a) >= len(t):\n        ans = min(ans, check(t, a[:len(t)]))\nprint(ans)\n", "code_after": "s = input()\nt = input()\n\ndef check(a, b):\n    s = 0\n    for (i, j) in zip(a, b):\n        s += i != j\n    return s\nvariable_10_9 = 10\nvariable_6_9 = 6\nans = variable_10_9 ** variable_6_9\nrandom_inside_left_10 = 396\nrandom_inside_right_10 = 395\nrandom_outside_left_10 = 911\nrandom_outside_right_10 = 910\nfor loop_outside in range(random_outside_left_10 // random_outside_right_10):\n    for i in range(len(s)):\n        for loop_inside in range(random_inside_left_10 % random_inside_right_10):\n            a = s[i:]\n            if len(a) >= len(t):\n                ans = min(ans, check(t, a[:len(t)]))\nprint(ans)", "effort_before": "86.03910001730776", "effort_after": "225.17595007788483", "difficulty_before": "2.0", "difficulty_after": "3.0", "calculated_length_before": "32.0", "calculated_length_after": "58.52932501298082", "length_before": "12", "length_after": "18", "vocabulary_before": "12", "vocabulary_after": "18", "mi_value_before": "61.89", "mi_value_after": "56.09", "Nloc_before": "13", "Nloc_after": "21", "AvgCCN_before": "3.0", "AvgCCN_after": "5.0"}, "s137613418": {"id": "s137613418", "language": "Python", "dataset": "Codenet", "pass_before": 0, "pass_after": 0, "filepath_before": "/home/yang/contamination/Codenet_Python_Before/s137613418.py", "filepath_after": "/home/yang/contamination/Codenet_Python_After/s137613418.py", "code_before": "import sys\nimport math\n\nfrom collections import defaultdict\nfrom collections import deque\n\n\ndef load(vtype=int):\n    return vtype(input().strip())\n\n\ndef load_list(seplator=\" \", vtype=int):\n    return [vtype(v) for v in input().strip().split(seplator)]\n\n\ndef exit():\n    import sys\n    sys.exit(0)\n\n\ndef perm_sub(li, used):\n    if len(li) == len(used):\n        return [deque()]\n    k = []\n    for i in range(len(li)):\n        if i in used:\n            continue\n        used.add(i)\n        sub_list = perm_sub(li, used)\n        for sub in sub_list:\n            sub.appendleft(li[i])\n        k.extend(sub_list)\n        used.discard(i)\n    return k\n\n\ndef perm_li(li):\n    return perm_sub(li, set())\n\n\ndef perm_n(n):\n    return perm_sub(list(range(n)), set())\n\n\ndef join_i(li, sep=\"\"):\n    return sep.join([str(e) for e in li])\n\n\ndef li2n(li):\n    n, base = 0, 1\n    for i in range(len(li)-1, -1, -1):\n        n += li[i] * base\n        base *= 10\n    return n\n\n\ndef sli2ili(li):\n    return [int(s) for s in li]\n\n\ndef prime_list(n):\n    li = [i for i in range(2, n+1)]\n    for i in range(len(li)):\n        if li[i] >= int(math.sqrt(n)):\n            break\n        if li[i] == -1:\n            continue\n        for j in range(i+1, len(li)):\n            if li[j] % li[i] == 0:\n                li[j] = -1\n    return [n for n in li if n != -1]\n\n\ndef gcd(a, b):\n    a, b = max(a, b), min(a, b)\n    while True:\n        r = a % b\n        if r == 0:\n            return b\n        a, b = b, r\n\n\ndef lcm(a, b):\n    return int(a * b / gcd(a, b))\n\n\ndef all_subset(li):\n    s = []\n    n = len(li)\n    for bit in range(0, (1 << (n+1))):\n        ss = set()\n        for i in range(0, n):\n            if (bit & (1 << i)):\n                ss.add(li[i])\n        s.append(ss)\n    return s\n\n\ndef factorial(n):\n    if n == 1:\n        return 1\n    return n * factorial(n-1)\n\n\ndef mCn(m, n):\n    def factorial_ntimes(m, n):\n        r = 1\n        while n:\n            r *= m\n            m -= 1\n            n -= 1\n        return r\n    return int(factorial_ntimes(m, n) / factorial(n))\n\n\nn = load()\nA = load_list()\n\nif n == len(set(A)):\n    print('YES')\nelse:\n    print('NO')\n", "code_after": "import sys\nimport math\nfrom collections import defaultdict\nfrom collections import deque\n\ndef load(vtype=int):\n    return vtype(input().strip())\n\ndef load_list(seplator=' ', vtype=int):\n    return [vtype(v) for v in input().strip().split(seplator)]\n\ndef exit():\n    import sys\n    sys.exit(0)\n\ndef perm_sub(li, used):\n    if len(li) == len(used):\n        return [deque()]\n    k = []\n    for i in range(len(li)):\n        if i in used:\n            continue\n        used.add(i)\n        sub_list = perm_sub(li, used)\n        for sub in sub_list:\n            sub.appendleft(li[i])\n        k.extend(sub_list)\n        used.discard(i)\n    return k\n\ndef perm_li(li):\n    return perm_sub(li, set())\n\ndef perm_n(n):\n    return perm_sub(list(range(n)), set())\n\ndef join_i(li, sep=''):\n    return sep.join([str(e) for e in li])\n\ndef li2n(li):\n    (n, base) = (0, 1)\n    for i in range(len(li) - 1, -1, -1):\n        n += li[i] * base\n        base *= 10\n    return n\n\ndef sli2ili(li):\n    return [int(s) for s in li]\n\ndef prime_list(n):\n    li = [i for i in range(2, n + 1)]\n    for i in range(len(li)):\n        if li[i] >= int(math.sqrt(n)):\n            break\n        if li[i] == -1:\n            continue\n        for j in range(i + 1, len(li)):\n            if li[j] % li[i] == 0:\n                li[j] = -1\n    return [n for n in li if n != -1]\n\ndef gcd(a, b):\n    (a, b) = (max(a, b), min(a, b))\n    while True:\n        r = a % b\n        if r == 0:\n            return b\n        (a, b) = (b, r)\n\ndef lcm(a, b):\n    return int(a * b / gcd(a, b))\n\ndef all_subset(li):\n    s = []\n    n = len(li)\n    for bit in range(0, 1 << n + 1):\n        ss = set()\n        for i in range(0, n):\n            if bit & 1 << i:\n                ss.add(li[i])\n        s.append(ss)\n    return s\n\ndef factorial(n):\n    if n == 1:\n        return 1\n    return n * factorial(n - 1)\n\ndef mCn(m, n):\n\n    def factorial_ntimes(m, n):\n        r = 1\n        while n:\n            r *= m\n            m -= 1\n            n -= 1\n        return r\n    return int(factorial_ntimes(m, n) / factorial(n))\nn = load()\nA = load_list()\nrandom_outside_if_left_101 = 248\nrandom_outside_if_right_101 = 247\nif random_outside_if_left_101 & random_outside_if_right_101:\n    if n == len(set(A)):\n        print('YES')\n    else:\n        print('NO')\nelse:\n    print('NO')", "effort_before": "4512.126053720457", "effort_after": "4644.273122101763", "difficulty_before": "7.875", "difficulty_after": "7.8", "calculated_length_before": "311.0977500432694", "calculated_length_after": "325.2123594973901", "length_before": "97", "length_after": "100", "vocabulary_before": "60", "vocabulary_after": "62", "mi_value_before": "37.89", "mi_value_after": "37.13", "Nloc_before": "88", "Nloc_after": "93", "AvgCCN_before": "2.0", "AvgCCN_after": "3.0"}, "s652791025": {"id": "s652791025", "language": "Python", "dataset": "Codenet", "pass_before": 3, "pass_after": 3, "filepath_before": "/home/yang/contamination/Codenet_Python_Before/s652791025.py", "filepath_after": "/home/yang/contamination/Codenet_Python_After/s652791025.py", "code_before": "n = input()\nn = int(n[-1])\n\nif n == 2 or n == 4 or n == 5 or n == 7 or n == 9:\n    print(\"hon\")\nelif n == 0 or n == 1 or n == 6 or n == 8:\n    print(\"pon\")\nelse:\n    print(\"bon\")\n", "code_after": "n = input()\nn = int(n[-1])\nrandom_outside_if_left_3 = 886\nrandom_outside_if_right_3 = 885\nif random_outside_if_left_3 & random_outside_if_right_3:\n    if n == 2 or n == 4 or n == 5 or (n == 7) or (n == 9):\n        print('hon')\n    elif n == 0 or n == 1 or n == 6 or (n == 8):\n        print('pon')\n    else:\n        print('bon')\nelif n == 0 or n == 1 or n == 6 or (n == 8):\n    print('pon')\nelse:\n    print('bon')", "effort_before": "394.3076378584558", "effort_after": "979.3689686177186", "difficulty_before": "2.210526315789474", "difficulty_after": "3.36", "calculated_length_before": "85.46551025759159", "calculated_length_after": "124.09640474436812", "length_before": "40", "length_after": "60", "vocabulary_before": "22", "vocabulary_after": "29", "mi_value_before": "62.08", "mi_value_after": "54.46", "Nloc_before": "8", "Nloc_after": "15", "AvgCCN_before": "10.0", "AvgCCN_after": "15.0"}, "s000375264": {"id": "s000375264", "language": "Python", "dataset": "Codenet", "pass_before": 3, "pass_after": 3, "filepath_before": "/home/yang/contamination/Codenet_Python_Before/s000375264.py", "filepath_after": "/home/yang/contamination/Codenet_Python_After/s000375264.py", "code_before": "X, t = map(int, input().split())\n\nif X > t:\n    answer = X - t\nelif X <= t:\n    answer = 0\n\nprint(answer)\n", "code_after": "(X, t) = map(int, input().split())\nrandom_outside_if_left_2 = 607\nrandom_outside_if_right_2 = 606\nif random_outside_if_left_2 & random_outside_if_right_2:\n    if X > t:\n        answer = X - t\n    elif X <= t:\n        answer = 0\nelif X <= t:\n    answer = 0\nprint(answer)", "effort_before": "94.03808784293817", "effort_after": "225.0", "difficulty_before": "4.5", "difficulty_after": "5.0", "calculated_length_before": "6.754887502163469", "calculated_length_after": "16.0", "length_before": "9", "length_after": "15", "vocabulary_before": "5", "vocabulary_after": "8", "mi_value_before": "71.92", "mi_value_after": "64.21", "Nloc_before": "6", "Nloc_after": "11", "AvgCCN_before": "3.0", "AvgCCN_after": "5.0"}, "s777789287": {"id": "s777789287", "language": "Python", "dataset": "Codenet", "pass_before": 3, "pass_after": 2, "filepath_before": "/home/yang/contamination/Codenet_Python_Before/s777789287.py", "filepath_after": "/home/yang/contamination/Codenet_Python_After/s777789287.py", "code_before": "n, m = map(int, input().split())\na = list(map(int, input().split()))\na.sort(reverse=True)\ns = sum(a)/(4*m)\nif a[m-1] >= s:\n    print('Yes')\nelse:\n    print('No')\n", "code_after": "(n, m) = map(int, input().split())\na = list(map(int, input().split()))\na.sort(reverse=True)\nvariable_4_4 = 4\ns = sum(a) / (variable_4_4 * m)\nrandom_outside_if_left_5 = 466\nrandom_outside_if_right_5 = 465\nif random_outside_if_left_5 & random_outside_if_right_5:\n    if a[m - 1] >= s:\n        print('Yes')\n    else:\n        print('No')\nelse:\n    print('No')", "effort_before": "94.88726725405158", "effort_after": "158.6397884190668", "difficulty_before": "2.2857142857142856", "difficulty_after": "2.7777777777777777", "calculated_length_before": "27.651484454403228", "calculated_length_after": "40.13896548741762", "length_before": "12", "length_after": "15", "vocabulary_before": "11", "vocabulary_after": "14", "mi_value_before": "67.58", "mi_value_after": "61.64", "Nloc_before": "8", "Nloc_after": "14", "AvgCCN_before": "2.0", "AvgCCN_after": "3.0"}, "s240532461": {"id": "s240532461", "language": "Python", "dataset": "Codenet", "pass_before": 0, "pass_after": 0, "filepath_before": "/home/yang/contamination/Codenet_Python_Before/s240532461.py", "filepath_after": "/home/yang/contamination/Codenet_Python_After/s240532461.py", "code_before": "N, L = map(int, input().split())\naji = []\nfor i in range(1, N+1):\n    aji.append(L+i-1)\nif min(aji) >= 0:\n    aji.pop(aji.index(min(aji)))\nelif max(aji) <= 0:\n    aji.pop(aji.index(max(aji)))\nelse:\n    aji.pop(aji.index(min(aji, key=abs)))\nprint(sum(aji))\n", "code_after": "(N, L) = map(int, input().split())\naji = []\nrandom_inside_left_3 = 701\nrandom_inside_right_3 = 700\nrandom_outside_left_3 = 725\nrandom_outside_right_3 = 724\nfor loop_outside in range(random_outside_left_3 // random_outside_right_3):\n    for i in range(1, N + 1):\n        for loop_inside in range(random_inside_left_3 % random_inside_right_3):\n            aji.append(L + i - 1)\nrandom_outside_if_left_11 = 85\nrandom_outside_if_right_11 = 84\nif random_outside_if_left_11 & random_outside_if_right_11:\n    if min(aji) >= 0:\n        aji.pop(aji.index(min(aji)))\n    elif max(aji) <= 0:\n        aji.pop(aji.index(max(aji)))\n    else:\n        aji.pop(aji.index(min(aji, key=abs)))\nelif max(aji) <= 0:\n    aji.pop(aji.index(max(aji)))\nelse:\n    aji.pop(aji.index(min(aji, key=abs)))\nprint(sum(aji))", "effort_before": "134.43609377704337", "effort_after": "505.69954555346953", "difficulty_before": "2.5", "difficulty_after": "4.2", "calculated_length_before": "32.0", "calculated_length_after": "78.25484338853101", "length_before": "15", "length_after": "27", "vocabulary_before": "12", "vocabulary_after": "22", "mi_value_before": "63.80", "mi_value_after": "53.86", "Nloc_before": "11", "Nloc_after": "24", "AvgCCN_before": "4.0", "AvgCCN_after": "8.0"}, "s067092519": {"id": "s067092519", "language": "Python", "dataset": "Codenet", "pass_before": 0, "pass_after": 0, "filepath_before": "/home/yang/contamination/Codenet_Python_Before/s067092519.py", "filepath_after": "/home/yang/contamination/Codenet_Python_After/s067092519.py", "code_before": "N = int(input())\nm = []\nline = ''\nm = [[[0 for k in range(10)] for j in range(3)] for i in range(10)]\nfor i in range(N):\n    n = input().split()\n    b = int(n[0])\n    f = int(n[1])\n    r = int(n[2])\n    v = int(n[3])\n    m[b-1][f-1][r-1] += v\n\nfor i in range(4):\n    for j in range(3):\n        for k in range(10):\n            line += ' {0}'.format(m[i][j][k])\n        print(line)\n        line = ''\n    if i < 3:\n        print('#'*20)\n", "code_after": "N = int(input())\nm = []\nline = ''\nm = [[[0 for k in range(10)] for j in range(3)] for i in range(10)]\nrandom_inside_left_5 = 68\nrandom_inside_right_5 = 67\nrandom_outside_left_5 = 898\nrandom_outside_right_5 = 897\nrandom_inside_left_12 = 140\nrandom_inside_right_12 = 139\nrandom_outside_left_12 = 660\nrandom_outside_right_12 = 659\nfor loop_outside in range(random_outside_left_5 // random_outside_right_5):\n    for i in range(N):\n        for loop_inside in range(random_inside_left_5 % random_inside_right_5):\n            n = input().split()\n            b = int(n[0])\n            f = int(n[1])\n            r = int(n[2])\n            v = int(n[3])\n            m[b - 1][f - 1][r - 1] += v\nfor loop_outside in range(random_outside_left_12 // random_outside_right_12):\n    for i in range(4):\n        for loop_inside in range(random_inside_left_12 % random_inside_right_12):\n            for j in range(3):\n                for k in range(10):\n                    line += ' {0}'.format(m[i][j][k])\n                print(line)\n                line = ''\n            if i < 3:\n                print('#' * 20)", "effort_before": "196.0", "effort_after": "511.877885305565", "difficulty_before": "2.3333333333333335", "difficulty_after": "3.3", "calculated_length_before": "51.01955000865388", "calculated_length_after": "101.94833690207419", "length_before": "21", "length_after": "33", "vocabulary_before": "16", "vocabulary_after": "26", "mi_value_before": "56.94", "mi_value_after": "50.08", "Nloc_before": "19", "Nloc_after": "31", "AvgCCN_before": "9.0", "AvgCCN_after": "13.0"}, "s269975433": {"id": "s269975433", "language": "Python", "dataset": "Codenet", "pass_before": 0, "pass_after": 0, "filepath_before": "/home/yang/contamination/Codenet_Python_Before/s269975433.py", "filepath_after": "/home/yang/contamination/Codenet_Python_After/s269975433.py", "code_before": "from itertools import combinations_with_replacement\nimport sys\n\n\ndef LI(): return map(int, sys.stdin.readline().rstrip().split())\n\n\nN, M, Q = LI()\n\nQ_groups = []\nfor _ in range(Q):\n    Q_groups.append([*LI()])\n\nmax_score = 0\nfor p in combinations_with_replacement(range(1, M + 1), r=N):\n    temp_score = 0\n    for q in Q_groups:\n        if p[q[1] - 1] - p[q[0] - 1] == q[2]:\n            temp_score += q[3]\n    max_score = max(max_score, temp_score)\n\nprint(max_score)\n", "code_after": "from itertools import combinations_with_replacement\nimport sys\n\ndef LI():\n    return map(int, sys.stdin.readline().rstrip().split())\n(N, M, Q) = LI()\nQ_groups = []\nrandom_inside_left_8 = 277\nrandom_inside_right_8 = 276\nrandom_outside_left_8 = 251\nrandom_outside_right_8 = 250\nrandom_inside_left_11 = 563\nrandom_inside_right_11 = 562\nrandom_outside_left_11 = 407\nrandom_outside_right_11 = 406\nfor loop_outside in range(random_outside_left_8 // random_outside_right_8):\n    for _ in range(Q):\n        for loop_inside in range(random_inside_left_8 % random_inside_right_8):\n            Q_groups.append([*LI()])\nmax_score = 0\nfor loop_outside in range(random_outside_left_11 // random_outside_right_11):\n    for p in combinations_with_replacement(range(1, M + 1), r=N):\n        for loop_inside in range(random_inside_left_11 % random_inside_right_11):\n            temp_score = 0\n            for q in Q_groups:\n                if p[q[1] - 1] - p[q[0] - 1] == q[2]:\n                    temp_score += q[3]\n            max_score = max(max_score, temp_score)\nprint(max_score)", "effort_before": "119.8942468677714", "effort_after": "376.96349633808444", "difficulty_before": "1.8", "difficulty_after": "2.7777777777777777", "calculated_length_before": "37.974168451037094", "calculated_length_after": "86.66829050039843", "length_before": "18", "length_after": "30", "vocabulary_before": "13", "vocabulary_after": "23", "mi_value_before": "59.72", "mi_value_after": "51.96", "Nloc_before": "15", "Nloc_after": "28", "AvgCCN_before": "5.0", "AvgCCN_after": "9.0"}, "s174910557": {"id": "s174910557", "language": "Python", "dataset": "Codenet", "pass_before": 3, "pass_after": 3, "filepath_before": "/home/yang/contamination/Codenet_Python_Before/s174910557.py", "filepath_after": "/home/yang/contamination/Codenet_Python_After/s174910557.py", "code_before": "N = int(input())\nS = input()\n\nans = 1\ntmp = S[0]\nfor s in S:\n    if s != tmp:\n        ans += 1\n        tmp = s\n\nprint(ans)\n", "code_after": "N = int(input())\nS = input()\nans = 1\ntmp = S[0]\nrandom_inside_left_5 = 730\nrandom_inside_right_5 = 729\nrandom_outside_left_5 = 61\nrandom_outside_right_5 = 60\nfor loop_outside in range(random_outside_left_5 // random_outside_right_5):\n    for s in S:\n        for loop_inside in range(random_inside_left_5 % random_inside_right_5):\n            if s != tmp:\n                ans += 1\n                tmp = s\nprint(ans)", "effort_before": "15.509775004326936", "effort_after": "86.03910001730776", "difficulty_before": "1.0", "difficulty_after": "2.0", "calculated_length_before": "10.0", "calculated_length_after": "32.0", "length_before": "6", "length_after": "12", "vocabulary_before": "6", "vocabulary_after": "12", "mi_value_before": "69.45", "mi_value_after": "61.62", "Nloc_before": "9", "Nloc_after": "15", "AvgCCN_before": "3.0", "AvgCCN_after": "5.0"}, "s793709854": {"id": "s793709854", "language": "Python", "dataset": "Codenet", "pass_before": 1, "pass_after": 0, "filepath_before": "/home/yang/contamination/Codenet_Python_Before/s793709854.py", "filepath_after": "/home/yang/contamination/Codenet_Python_After/s793709854.py", "code_before": "N, T = map(int, input().split())\nL = [[int(l) for l in input().split()] for _ in range(N)]\n\ndp = [[0]*T for _ in range(N+1)]\n\nfor i in range(N):\n    for j in range(T):\n        if j < L[i][0]:\n            dp[i+1][j] = dp[i][j]\n        else:\n            dp[i+1][j] = max(dp[i][j], dp[i][j-L[i][0]]+L[i][1])\n\nused = []\nB = dp[N][T-1]\nj = T-1\nfor i in range(N-1, -1, -1):\n    if B == dp[i][j]:\n        continue\n    B -= L[i][1]\n    used.append(i)\n    j -= L[i][0]\n\nans = dp[N][T-1]\nc = 0\nfor i in range(N):\n    if i in used:\n        continue\n    c = max(c, L[i][1])\n\nprint(ans+c)\n", "code_after": "(N, T) = map(int, input().split())\nL = [[int(l) for l in input().split()] for _ in range(N)]\ndp = [[0] * T for _ in range(N + 1)]\nrandom_inside_left_4 = 367\nrandom_inside_right_4 = 366\nrandom_outside_left_4 = 163\nrandom_outside_right_4 = 162\nrandom_inside_left_13 = 865\nrandom_inside_right_13 = 864\nrandom_outside_left_13 = 910\nrandom_outside_right_13 = 909\nrandom_inside_left_21 = 738\nrandom_inside_right_21 = 737\nrandom_outside_left_21 = 214\nrandom_outside_right_21 = 213\nfor loop_outside in range(random_outside_left_4 // random_outside_right_4):\n    for i in range(N):\n        for loop_inside in range(random_inside_left_4 % random_inside_right_4):\n            for j in range(T):\n                if j < L[i][0]:\n                    dp[i + 1][j] = dp[i][j]\n                else:\n                    dp[i + 1][j] = max(dp[i][j], dp[i][j - L[i][0]] + L[i][1])\nused = []\nB = dp[N][T - 1]\nvariable_1_26 = 1\nj = T - variable_1_26\nfor loop_outside in range(random_outside_left_13 // random_outside_right_13):\n    for i in range(N - 1, -1, -1):\n        for loop_inside in range(random_inside_left_13 % random_inside_right_13):\n            if B == dp[i][j]:\n                continue\n            B -= L[i][1]\n            used.append(i)\n            j -= L[i][0]\nans = dp[N][T - 1]\nc = 0\nfor loop_outside in range(random_outside_left_21 // random_outside_right_21):\n    for i in range(N):\n        for loop_inside in range(random_inside_left_21 % random_inside_right_21):\n            if i in used:\n                continue\n            c = max(c, L[i][1])\nprint(ans + c)", "effort_before": "1668.9263502625013", "effort_after": "2552.8492717104664", "difficulty_before": "7.0", "difficulty_after": "6.9", "calculated_length_before": "89.13835275565901", "calculated_length_after": "175.7360428812364", "length_before": "52", "length_after": "70", "vocabulary_before": "24", "vocabulary_after": "39", "mi_value_before": "51.01", "mi_value_after": "43.67", "Nloc_before": "25", "Nloc_after": "44", "AvgCCN_before": "11.0", "AvgCCN_after": "17.0"}, "s906994739": {"id": "s906994739", "language": "Python", "dataset": "Codenet", "pass_before": 2, "pass_after": 0, "filepath_before": "/home/yang/contamination/Codenet_Python_Before/s906994739.py", "filepath_after": "/home/yang/contamination/Codenet_Python_After/s906994739.py", "code_before": "n = int(input())\nF = [tuple(map(int, input().split())) for _ in range(n)]\nP = [tuple(map(int, input().split())) for _ in range(n)]\nans = -10 ** 18\n\nfor i in range(1, 2**10):\n    tmp = 0\n    lst = [0]*n\n    for j in range(10):\n        if (i >> j) & 1:\n            for k in range(n):\n                lst[k] += F[k][j]\n    for k in range(n):\n        tmp += P[k][lst[k]]\n    ans = max(ans, tmp)\n\n\nprint(ans)\n", "code_after": "n = int(input())\nF = [tuple(map(int, input().split())) for _ in range(n)]\nP = [tuple(map(int, input().split())) for _ in range(n)]\nans = -10 ** 18\nrandom_inside_left_5 = 1000\nrandom_inside_right_5 = 999\nrandom_outside_left_5 = 254\nrandom_outside_right_5 = 253\nfor loop_outside in range(random_outside_left_5 // random_outside_right_5):\n    for i in range(1, 2 ** 10):\n        for loop_inside in range(random_inside_left_5 % random_inside_right_5):\n            tmp = 0\n            lst = [0] * n\n            for j in range(10):\n                if i >> j & 1:\n                    for k in range(n):\n                        lst[k] += F[k][j]\n            for k in range(n):\n                tmp += P[k][lst[k]]\n            ans = max(ans, tmp)\nprint(ans)", "effort_before": "319.51396987203003", "effort_after": "575.5427299323871", "difficulty_before": "3.2142857142857144", "difficulty_after": "4.222222222222222", "calculated_length_before": "68.81274391313339", "calculated_length_after": "99.05865002596161", "length_before": "23", "length_after": "29", "vocabulary_before": "20", "vocabulary_after": "26", "mi_value_before": "58.67", "mi_value_after": "54.43", "Nloc_before": "15", "Nloc_after": "21", "AvgCCN_before": "8.0", "AvgCCN_after": "10.0"}, "s922746568": {"id": "s922746568", "language": "Python", "dataset": "Codenet", "pass_before": 1, "pass_after": 1, "filepath_before": "/home/yang/contamination/Codenet_Python_Before/s922746568.py", "filepath_after": "/home/yang/contamination/Codenet_Python_After/s922746568.py", "code_before": "n = int(input())\ns = input()\n\nr_cnt = s.count('R')\ng_cnt = s.count('G')\nb_cnt = s.count('B')\n\nans = r_cnt * g_cnt * b_cnt\n\nfor i in range(n):\n    for d in range(n):\n        j = i + d\n        k = j + d\n        if k >= n:\n            break\n\n        if s[i] != s[j] and s[j] != s[k] and s[k] != s[i]:\n\n            ans -= 1\nprint(ans)\n", "code_after": "n = int(input())\ns = input()\nr_cnt = s.count('R')\ng_cnt = s.count('G')\nb_cnt = s.count('B')\nans = r_cnt * g_cnt * b_cnt\nrandom_inside_left_7 = 809\nrandom_inside_right_7 = 808\nrandom_outside_left_7 = 807\nrandom_outside_right_7 = 806\nfor loop_outside in range(random_outside_left_7 // random_outside_right_7):\n    for i in range(n):\n        for loop_inside in range(random_inside_left_7 % random_inside_right_7):\n            for d in range(n):\n                j = i + d\n                k = j + d\n                if k >= n:\n                    break\n                if s[i] != s[j] and s[j] != s[k] and (s[k] != s[i]):\n                    ans -= 1\nprint(ans)", "effort_before": "458.99793847647766", "effort_after": "770.8333333333334", "difficulty_before": "3.15", "difficulty_after": "4.166666666666667", "calculated_length_before": "101.94833690207419", "calculated_length_after": "134.03910001730776", "length_before": "31", "length_after": "37", "vocabulary_before": "26", "vocabulary_after": "32", "mi_value_before": "57.64", "mi_value_after": "53.63", "Nloc_before": "15", "Nloc_after": "21", "AvgCCN_before": "7.0", "AvgCCN_after": "9.0"}, "s975943078": {"id": "s975943078", "language": "Python", "dataset": "Codenet", "pass_before": 0, "pass_after": 0, "filepath_before": "/home/yang/contamination/Codenet_Python_Before/s975943078.py", "filepath_after": "/home/yang/contamination/Codenet_Python_After/s975943078.py", "code_before": "import sys\nfrom bisect import bisect_left\n\n\ndef solve():\n    input = sys.stdin.readline\n    N, K = map(int, input().split())\n    A = [(int(a) % K) - 1 for a in input().split()]\n    sum_A = [0 for _ in range(N + 1)]\n\n    count = 0\n    modK = dict()\n    modK[0] = [0]\n    for i in range(N):\n        sum_A[i + 1] = (sum_A[i] + A[i]) % K\n        if sum_A[i+1] not in modK:\n            modK[sum_A[i+1]] = [i + 1]\n        else:\n            modK[sum_A[i+1]].append(i+1)\n\n    for key in modK:\n        lenK = len(modK[key])\n        for i, a in enumerate(modK[key]):\n            count += bisect_left(modK[key], a + K, i, lenK) - i - 1\n\n    print(count)\n    return 0\n\n\nif __name__ == \"__main__\":\n    solve()\n", "code_after": "import sys\nfrom bisect import bisect_left\n\ndef solve():\n    input = sys.stdin.readline\n    (N, K) = map(int, input().split())\n    A = [int(a) % K - 1 for a in input().split()]\n    sum_A = [0 for _ in range(N + 1)]\n    count = 0\n    modK = dict()\n    modK[0] = [0]\n    for i in range(N):\n        sum_A[i + 1] = (sum_A[i] + A[i]) % K\n        if sum_A[i + 1] not in modK:\n            modK[sum_A[i + 1]] = [i + 1]\n        else:\n            modK[sum_A[i + 1]].append(i + 1)\n    for key in modK:\n        lenK = len(modK[key])\n        for (i, a) in enumerate(modK[key]):\n            count += bisect_left(modK[key], a + K, i, lenK) - i - 1\n    print(count)\n    return 0\nsolve()", "effort_before": "1089.4245044170639", "effort_after": "829.8101942183737", "difficulty_before": "4.722222222222222", "difficulty_after": "4.0", "calculated_length_before": "86.66829050039843", "calculated_length_after": "72.0", "length_before": "51", "length_after": "48", "vocabulary_before": "23", "vocabulary_after": "20", "mi_value_before": "52.69", "mi_value_after": "53.53", "Nloc_before": "24", "Nloc_after": "23", "AvgCCN_before": "2.0", "AvgCCN_after": "1.0"}, "s622795537": {"id": "s622795537", "language": "Python", "dataset": "Codenet", "pass_before": 3, "pass_after": 3, "filepath_before": "/home/yang/contamination/Codenet_Python_Before/s622795537.py", "filepath_after": "/home/yang/contamination/Codenet_Python_After/s622795537.py", "code_before": "n = int(input())\narr = {}\n\nfor i in range(n):\n    s = input()\n    if not s in arr:\n        arr[s] = 1\n    else:\n        arr[s] += 1\n\nmax_count = max(arr.values())\ndic = [key[0] for key in arr.items() if key[1] == max_count]\n\nout_sort = sorted(dic)\nfor i in out_sort:\n    print(i)\n", "code_after": "n = int(input())\narr = {}\nrandom_inside_left_3 = 300\nrandom_inside_right_3 = 299\nrandom_outside_left_3 = 542\nrandom_outside_right_3 = 541\nrandom_inside_left_12 = 719\nrandom_inside_right_12 = 718\nrandom_outside_left_12 = 380\nrandom_outside_right_12 = 379\nfor loop_outside in range(random_outside_left_3 // random_outside_right_3):\n    for i in range(n):\n        for loop_inside in range(random_inside_left_3 % random_inside_right_3):\n            s = input()\n            if not s in arr:\n                arr[s] = 1\n            else:\n                arr[s] += 1\nmax_count = max(arr.values())\ndic = [key[0] for key in arr.items() if key[1] == max_count]\nout_sort = sorted(dic)\nfor loop_outside in range(random_outside_left_12 // random_outside_right_12):\n    for i in out_sort:\n        for loop_inside in range(random_inside_left_12 % random_inside_right_12):\n            print(i)", "effort_before": "76.10749561002055", "effort_after": "303.0699021717345", "difficulty_before": "2.0", "difficulty_after": "3.0", "calculated_length_before": "27.651484454403228", "calculated_length_after": "74.11313393845472", "length_before": "11", "length_after": "23", "vocabulary_before": "11", "vocabulary_after": "21", "mi_value_before": "63.13", "mi_value_after": "53.75", "Nloc_before": "13", "Nloc_after": "25", "AvgCCN_before": "6.0", "AvgCCN_after": "10.0"}, "s086522214": {"id": "s086522214", "language": "Python", "dataset": "Codenet", "pass_before": 1, "pass_after": 0, "filepath_before": "/home/yang/contamination/Codenet_Python_Before/s086522214.py", "filepath_after": "/home/yang/contamination/Codenet_Python_After/s086522214.py", "code_before": "import collections\nimport scipy.misc\nimport sys\nimport numpy as np\nimport math\nfrom operator import itemgetter\nimport itertools\nimport copy\n\n\ndef prime_decomposition(n):\n    i = 2\n    table = []\n    while i * i <= n:\n        while n % i == 0:\n            n /= i\n            table.append(int(i))\n        i += 1\n    if n > 1:\n        table.append(int(n))\n    return table\n\n\ndef digit(i):\n    if i > 0:\n        return digit(i//10) + [i % 10]\n    else:\n        return []\n\n\ndef getNearestValueIndex(list, num):\n\n    idx = np.abs(np.asarray(list) - num).argmin()\n    return idx\n\n\nS = input()\nT = S.split('/')\n\ndate = int(T[1]+T[2])\nif date <= 430:\n    print('Heisei')\nelse:\n    print('TBD')\n", "code_after": "import collections\nimport scipy.misc\nimport sys\nimport numpy as np\nimport math\nfrom operator import itemgetter\nimport itertools\nimport copy\n\ndef prime_decomposition(n):\n    i = 2\n    table = []\n    while i * i <= n:\n        while n % i == 0:\n            n /= i\n            table.append(int(i))\n        i += 1\n    if n > 1:\n        table.append(int(n))\n    return table\n\ndef digit(i):\n    if i > 0:\n        return digit(i // 10) + [i % 10]\n    else:\n        return []\n\ndef getNearestValueIndex(list, num):\n    idx = np.abs(np.asarray(list) - num).argmin()\n    return idx\nS = input()\nT = S.split('/')\ndate = int(T[1] + T[2])\nrandom_outside_if_left_34 = 747\nrandom_outside_if_right_34 = 746\nif random_outside_if_left_34 & random_outside_if_right_34:\n    if date <= 430:\n        print('Heisei')\n    else:\n        print('TBD')\nelse:\n    print('TBD')", "effort_before": "1463.2192346119214", "effort_after": "1725.8616693216375", "difficulty_before": "7.411764705882353", "difficulty_after": "7.894736842105263", "calculated_length_before": "98.0161933142366", "calculated_length_after": "113.92990370430175", "length_before": "42", "length_after": "45", "vocabulary_before": "26", "vocabulary_after": "29", "mi_value_before": "49.98", "mi_value_after": "48.27", "Nloc_before": "34", "Nloc_after": "39", "AvgCCN_before": "2.0", "AvgCCN_after": "3.0"}, "s878873709": {"id": "s878873709", "language": "Python", "dataset": "Codenet", "pass_before": 3, "pass_after": 1, "filepath_before": "/home/yang/contamination/Codenet_Python_Before/s878873709.py", "filepath_after": "/home/yang/contamination/Codenet_Python_After/s878873709.py", "code_before": "import sys\n\nreadline = sys.stdin.readline\nMOD = 10 ** 9 + 7\nINF = float('INF')\nsys.setrecursionlimit(10 ** 5)\n\n\ndef main():\n    N = int(readline())\n    s = {1, 2, 4, 8, 16, 32, 64}\n    ans = 0\n\n    for i in range(1, N + 1):\n        if i in s:\n            ans = i\n\n    print(ans)\n\n\nif __name__ == '__main__':\n    main()\n", "code_after": "import sys\nreadline = sys.stdin.readline\nvariable_7_3 = 7\nvariable_10_3 = 10\nvariable_9_3 = 9\nMOD = variable_10_3 ** variable_9_3 + variable_7_3\nINF = float('INF')\nsys.setrecursionlimit(10 ** 5)\n\ndef main():\n    N = int(readline())\n    s = {1, 2, 4, 8, 16, 32, 64}\n    ans = 0\n    for i in range(1, N + 1):\n        if i in s:\n            ans = i\n    print(ans)\nmain()", "effort_before": "153.43424884571635", "effort_after": "83.25989365817458", "difficulty_before": "2.1818181818181817", "difficulty_after": "1.5", "calculated_length_before": "46.053747805010275", "calculated_length_after": "37.974168451037094", "length_before": "18", "length_after": "15", "vocabulary_before": "15", "vocabulary_after": "13", "mi_value_before": "60.53", "mi_value_after": "60.27", "Nloc_before": "15", "Nloc_after": "17", "AvgCCN_before": "2.0", "AvgCCN_after": "1.0"}, "s763097776": {"id": "s763097776", "language": "Python", "dataset": "Codenet", "pass_before": 3, "pass_after": 0, "filepath_before": "/home/yang/contamination/Codenet_Python_Before/s763097776.py", "filepath_after": "/home/yang/contamination/Codenet_Python_After/s763097776.py", "code_before": "n = int(input())\np = [int(x) for x in input().split()]\np_copy = p[:]\n\np.sort()\n\ncount = 0\nfor i in range(n):\n    if p[i] != p_copy[i]:\n        count += 1\n\nif count == 0 or count == 2:\n    print(\"YES\")\nelse:\n    print(\"NO\")\n", "code_after": "n = int(input())\np = [int(x) for x in input().split()]\np_copy = p[:]\np.sort()\ncount = 0\nrandom_inside_left_6 = 824\nrandom_inside_right_6 = 823\nrandom_outside_left_6 = 888\nrandom_outside_right_6 = 887\nfor loop_outside in range(random_outside_left_6 // random_outside_right_6):\n    for i in range(n):\n        for loop_inside in range(random_inside_left_6 % random_inside_right_6):\n            if p[i] != p_copy[i]:\n                count += 1\nrandom_outside_if_left_15 = 982\nrandom_outside_if_right_15 = 981\nif random_outside_if_left_15 & random_outside_if_right_15:\n    if count == 0 or count == 2:\n        print('YES')\n    else:\n        print('NO')\nelse:\n    print('NO')", "effort_before": "134.43609377704337", "effort_after": "421.66247258676106", "difficulty_before": "2.5", "difficulty_after": "4.0", "calculated_length_before": "32.0", "calculated_length_after": "72.95445336320968", "length_before": "15", "length_after": "24", "vocabulary_before": "12", "vocabulary_after": "21", "mi_value_before": "62.07", "mi_value_after": "54.13", "Nloc_before": "12", "Nloc_after": "23", "AvgCCN_before": "6.0", "AvgCCN_after": "9.0"}, "s208095748": {"id": "s208095748", "language": "Python", "dataset": "Codenet", "pass_before": 3, "pass_after": 0, "filepath_before": "/home/yang/contamination/Codenet_Python_Before/s208095748.py", "filepath_after": "/home/yang/contamination/Codenet_Python_After/s208095748.py", "code_before": "A, B, C = map(int, input().split())\nif B < C:\n    print(0)\nelif A * C < B:\n    print(C)\nelse:\n    print(B//A)\n", "code_after": "(A, B, C) = map(int, input().split())\nrandom_outside_if_left_2 = 679\nrandom_outside_if_right_2 = 678\nif random_outside_if_left_2 & random_outside_if_right_2:\n    if B < C:\n        print(0)\n    elif A * C < B:\n        print(C)\n    else:\n        print(B // A)\nelif A * C < B:\n    print(C)\nelse:\n    print(B // A)", "effort_before": "101.06477719407376", "effort_after": "379.5490690162063", "difficulty_before": "3.0", "difficulty_after": "4.571428571428571", "calculated_length_before": "12.75488750216347", "calculated_length_after": "27.651484454403228", "length_before": "12", "length_after": "24", "vocabulary_before": "7", "vocabulary_after": "11", "mi_value_before": "69.20", "mi_value_after": "60.23", "Nloc_before": "7", "Nloc_after": "14", "AvgCCN_before": "3.0", "AvgCCN_after": "5.0"}, "s846046431": {"id": "s846046431", "language": "Python", "dataset": "Codenet", "pass_before": 3, "pass_after": 2, "filepath_before": "/home/yang/contamination/Codenet_Python_Before/s846046431.py", "filepath_after": "/home/yang/contamination/Codenet_Python_After/s846046431.py", "code_before": "import sys\nN, M = map(int, sys.stdin.readline().split())\nA = list(map(int, sys.stdin.readline().split()))\nA.sort(reverse=True)\nS = sum(A)\nfor a in A[:M]:\n    if a/S - 1/(4*M) < 0:\n        print('No')\n        break\nelse:\n    print('Yes')\n", "code_after": "import sys\n(N, M) = map(int, sys.stdin.readline().split())\nA = list(map(int, sys.stdin.readline().split()))\nA.sort(reverse=True)\nS = sum(A)\nrandom_inside_left_6 = 955\nrandom_inside_right_6 = 954\nrandom_outside_left_6 = 61\nrandom_outside_right_6 = 60\nfor loop_outside in range(random_outside_left_6 // random_outside_right_6):\n    for a in A[:M]:\n        for loop_inside in range(random_inside_left_6 % random_inside_right_6):\n            if a / S - 1 / (4 * M) < 0:\n                print('No')\n                break\n    else:\n        print('Yes')", "effort_before": "114.22064766172811", "effort_after": "272.28146997790384", "difficulty_before": "2.0", "difficulty_after": "3.0", "calculated_length_before": "41.219280948873624", "calculated_length_after": "68.81274391313339", "length_before": "15", "length_after": "21", "vocabulary_before": "14", "vocabulary_after": "20", "mi_value_before": "63.62", "mi_value_after": "58.10", "Nloc_before": "11", "Nloc_after": "17", "AvgCCN_before": "4.0", "AvgCCN_after": "6.0"}, "s828550015": {"id": "s828550015", "language": "Python", "dataset": "Codenet", "pass_before": 0, "pass_after": 0, "filepath_before": "/home/yang/contamination/Codenet_Python_Before/s828550015.py", "filepath_after": "/home/yang/contamination/Codenet_Python_After/s828550015.py", "code_before": "x, y, a, b, c = map(int, input().split())\np = sorted([int(i) for i in input().split()], reverse=True)[:x]\nq = sorted([int(i) for i in input().split()], reverse=True)[:y]\nr = sorted([int(i) for i in input().split()], reverse=True)\npq = sorted(p+q)\nfor i in range(min(x+y, a+b, c)):\n    if pq[i] < r[i]:\n        pq[i] = r[i]\nprint(sum(pq))\n", "code_after": "(x, y, a, b, c) = map(int, input().split())\np = sorted([int(i) for i in input().split()], reverse=True)[:x]\nq = sorted([int(i) for i in input().split()], reverse=True)[:y]\nr = sorted([int(i) for i in input().split()], reverse=True)\npq = sorted(p + q)\nrandom_inside_left_6 = 108\nrandom_inside_right_6 = 107\nrandom_outside_left_6 = 200\nrandom_outside_right_6 = 199\nfor loop_outside in range(random_outside_left_6 // random_outside_right_6):\n    for i in range(min(x + y, a + b, c)):\n        for loop_inside in range(random_inside_left_6 % random_inside_right_6):\n            if pq[i] < r[i]:\n                pq[i] = r[i]\nprint(sum(pq))", "effort_before": "39.863137138648355", "effort_after": "144.0", "difficulty_before": "1.0", "difficulty_after": "2.0", "calculated_length_before": "26.0", "calculated_length_after": "51.01955000865388", "length_before": "12", "length_after": "18", "vocabulary_before": "10", "vocabulary_after": "16", "mi_value_before": "64.44", "mi_value_after": "58.54", "Nloc_before": "9", "Nloc_after": "15", "AvgCCN_before": "6.0", "AvgCCN_after": "8.0"}, "s280552889": {"id": "s280552889", "language": "Python", "dataset": "Codenet", "pass_before": 3, "pass_after": 0, "filepath_before": "/home/yang/contamination/Codenet_Python_Before/s280552889.py", "filepath_after": "/home/yang/contamination/Codenet_Python_After/s280552889.py", "code_before": "N = int(input())\nif N % 2 == 0:\n    print(N//2)\nelse:\n    print(N//2+1)\n", "code_after": "N = int(input())\nrandom_outside_if_left_2 = 365\nrandom_outside_if_right_2 = 364\nif random_outside_if_left_2 & random_outside_if_right_2:\n    if N % 2 == 0:\n        print(N // 2)\n    else:\n        print(N // 2 + 1)\nelse:\n    print(N // 2 + 1)", "effort_before": "166.09640474436813", "effort_after": "406.1178583528111", "difficulty_before": "3.3333333333333335", "difficulty_after": "4.444444444444445", "calculated_length_before": "23.509775004326936", "calculated_length_after": "40.13896548741762", "length_before": "15", "length_after": "24", "vocabulary_before": "10", "vocabulary_after": "14", "mi_value_before": "70.87", "mi_value_after": "63.15", "Nloc_before": "5", "Nloc_after": "10", "AvgCCN_before": "2.0", "AvgCCN_after": "3.0"}, "s590045523": {"id": "s590045523", "language": "Python", "dataset": "Codenet", "pass_before": 3, "pass_after": 3, "filepath_before": "/home/yang/contamination/Codenet_Python_Before/s590045523.py", "filepath_after": "/home/yang/contamination/Codenet_Python_After/s590045523.py", "code_before": "N = int(input())\nL = list(map(int, input().split()))\n\nans = 0\nfor i in range(N-2):\n    for j in range(i+1, N-1):\n        for k in range(j+1, N):\n            a = L[i]\n            b = L[j]\n            c = L[k]\n            if a == b or b == c or c == a:\n                continue\n            if a+b > c and b+c > a and c+a > b:\n                ans += 1\n\nprint(ans)\n", "code_after": "N = int(input())\nL = list(map(int, input().split()))\nans = 0\nrandom_inside_left_4 = 517\nrandom_inside_right_4 = 516\nrandom_outside_left_4 = 62\nrandom_outside_right_4 = 61\nfor loop_outside in range(random_outside_left_4 // random_outside_right_4):\n    for i in range(N - 2):\n        for loop_inside in range(random_inside_left_4 % random_inside_right_4):\n            for j in range(i + 1, N - 1):\n                for k in range(j + 1, N):\n                    a = L[i]\n                    b = L[j]\n                    c = L[k]\n                    if a == b or b == c or c == a:\n                        continue\n                    if a + b > c and b + c > a and (c + a > b):\n                        ans += 1\nprint(ans)", "effort_before": "1299.0727085376611", "effort_after": "1898.5205795372597", "difficulty_before": "5.666666666666667", "difficulty_after": "6.909090909090909", "calculated_length_before": "90.56842503028855", "calculated_length_after": "122.10749561002054", "length_before": "50", "length_after": "56", "vocabulary_before": "24", "vocabulary_after": "30", "mi_value_before": "56.47", "mi_value_after": "52.47", "Nloc_before": "14", "Nloc_after": "20", "AvgCCN_before": "10.0", "AvgCCN_after": "12.0"}, "s704354119": {"id": "s704354119", "language": "Python", "dataset": "Codenet", "pass_before": 2, "pass_after": 0, "filepath_before": "/home/yang/contamination/Codenet_Python_Before/s704354119.py", "filepath_after": "/home/yang/contamination/Codenet_Python_After/s704354119.py", "code_before": "n = int(input())\nl = input().split()\nmax = -1e9\nmin = 1e9\nsum = 0\nfor i in range(n):\n    sum += int(l[i])\n    if max < int(l[i]):\n        max = int(l[i])\n    if min > int(l[i]):\n        min = int(l[i])\nprint(min, max, sum)\n", "code_after": "n = int(input())\nl = input().split()\nmax = -1000000000.0\nmin = 1000000000.0\nsum = 0\nrandom_inside_left_6 = 378\nrandom_inside_right_6 = 377\nrandom_outside_left_6 = 636\nrandom_outside_right_6 = 635\nfor loop_outside in range(random_outside_left_6 // random_outside_right_6):\n    for i in range(n):\n        for loop_inside in range(random_inside_left_6 % random_inside_right_6):\n            sum += int(l[i])\n            if max < int(l[i]):\n                max = int(l[i])\n            if min > int(l[i]):\n                min = int(l[i])\nprint(min, max, sum)", "effort_before": "76.10749561002055", "effort_after": "208.46060490376735", "difficulty_before": "2.0", "difficulty_after": "3.0", "calculated_length_before": "27.651484454403228", "calculated_length_after": "53.563522809337215", "length_before": "11", "length_after": "17", "vocabulary_before": "11", "vocabulary_after": "17", "mi_value_before": "64.10", "mi_value_after": "58.40", "Nloc_before": "12", "Nloc_after": "18", "AvgCCN_before": "4.0", "AvgCCN_after": "6.0"}, "s880494034": {"id": "s880494034", "language": "Python", "dataset": "Codenet", "pass_before": 0, "pass_after": 0, "filepath_before": "/home/yang/contamination/Codenet_Python_Before/s880494034.py", "filepath_after": "/home/yang/contamination/Codenet_Python_After/s880494034.py", "code_before": "import math\n\nN = input()\nXS = [int(i) for i in input().split()]\n\nm = 9999999999\nfor i in range(1, 101):\n    c = sum([(x - i) ** 2 for x in XS])\n    if m > c:\n        m = c\n\nprint(m)\n", "code_after": "import math\nN = input()\nXS = [int(i) for i in input().split()]\nm = 9999999999\nrandom_inside_left_5 = 590\nrandom_inside_right_5 = 589\nrandom_outside_left_5 = 689\nrandom_outside_right_5 = 688\nfor loop_outside in range(random_outside_left_5 // random_outside_right_5):\n    for i in range(1, 101):\n        for loop_inside in range(random_inside_left_5 % random_inside_right_5):\n            c = sum([(x - i) ** 2 for x in XS])\n            if m > c:\n                m = c\nprint(m)", "effort_before": "42.793987519471216", "effort_after": "146.50839733531944", "difficulty_before": "1.5", "difficulty_after": "2.5", "calculated_length_before": "20.264662506490406", "calculated_length_after": "44.82892142331043", "length_before": "9", "length_after": "15", "vocabulary_before": "9", "vocabulary_after": "15", "mi_value_before": "67.32", "mi_value_after": "60.41", "Nloc_before": "9", "Nloc_after": "15", "AvgCCN_before": "5.0", "AvgCCN_after": "7.0"}, "s896397037": {"id": "s896397037", "language": "Python", "dataset": "Codenet", "pass_before": 1, "pass_after": 0, "filepath_before": "/home/yang/contamination/Codenet_Python_Before/s896397037.py", "filepath_after": "/home/yang/contamination/Codenet_Python_After/s896397037.py", "code_before": "s = list(str(input()))\ns.sort()\nif s[0] == s[1] and s[0] != s[2] and s[2] == s[3]:\n    print(\"Yes\")\nelse:\n    print(\"No\")\n", "code_after": "s = list(str(input()))\ns.sort()\nrandom_outside_if_left_3 = 152\nrandom_outside_if_right_3 = 151\nif random_outside_if_left_3 & random_outside_if_right_3:\n    if s[0] == s[1] and s[0] != s[2] and (s[2] == s[3]):\n        print('Yes')\n    else:\n        print('No')\nelse:\n    print('No')", "effort_before": "69.90676876406255", "effort_after": "125.0204990594726", "difficulty_before": "1.5", "difficulty_after": "2.0", "calculated_length_before": "33.28421251514428", "calculated_length_after": "46.053747805010275", "length_before": "13", "length_after": "16", "vocabulary_before": "12", "vocabulary_after": "15", "mi_value_before": "69.34", "mi_value_after": "63.21", "Nloc_before": "6", "Nloc_after": "11", "AvgCCN_before": "4.0", "AvgCCN_after": "5.0"}, "s636592395": {"id": "s636592395", "language": "Python", "dataset": "Codenet", "pass_before": 1, "pass_after": 1, "filepath_before": "/home/yang/contamination/Codenet_Python_Before/s636592395.py", "filepath_after": "/home/yang/contamination/Codenet_Python_After/s636592395.py", "code_before": "N = int(input())\nA = list(map(int, input().split()))\n\n\ndef main():\n    A.sort()\n    ans = A[-1] - A[0]\n    print(ans)\n\n\nif __name__ == \"__main__\":\n    main()\n", "code_after": "N = int(input())\nA = list(map(int, input().split()))\n\ndef main():\n    A.sort()\n    ans = A[-1] - A[0]\n    print(ans)\nmain()", "effort_before": "36.0", "effort_after": "11.60964047443681", "difficulty_before": "1.5", "difficulty_after": "1.0", "calculated_length_before": "16.36452797660028", "calculated_length_after": "6.754887502163469", "length_before": "8", "length_after": "5", "vocabulary_before": "8", "vocabulary_after": "5", "mi_value_before": "69.25", "mi_value_after": "72.71", "Nloc_before": "8", "Nloc_after": "7", "AvgCCN_before": "2.0", "AvgCCN_after": "1.0"}, "s179314665": {"id": "s179314665", "language": "Python", "dataset": "Codenet", "pass_before": 3, "pass_after": 1, "filepath_before": "/home/yang/contamination/Codenet_Python_Before/s179314665.py", "filepath_after": "/home/yang/contamination/Codenet_Python_After/s179314665.py", "code_before": "A, B = [int(x) for x in input().split()]\nif A < 10 and B < 10:\n    print(A*B)\nelse:\n    print(-1)\n", "code_after": "(A, B) = [int(x) for x in input().split()]\nrandom_outside_if_left_2 = 82\nrandom_outside_if_right_2 = 81\nif random_outside_if_left_2 & random_outside_if_right_2:\n    if A < 10 and B < 10:\n        print(A * B)\n    else:\n        print(-1)\nelse:\n    print(-1)", "effort_before": "139.52097998526924", "effort_after": "263.6563299175528", "difficulty_before": "3.0", "difficulty_after": "3.75", "calculated_length_before": "23.509775004326936", "calculated_length_after": "35.60964047443681", "length_before": "14", "length_after": "19", "vocabulary_before": "10", "vocabulary_after": "13", "mi_value_before": "70.81", "mi_value_after": "63.68", "Nloc_before": "5", "Nloc_after": "10", "AvgCCN_before": "4.0", "AvgCCN_after": "5.0"}, "s761121328": {"id": "s761121328", "language": "Python", "dataset": "Codenet", "pass_before": 2, "pass_after": 2, "filepath_before": "/home/yang/contamination/Codenet_Python_Before/s761121328.py", "filepath_after": "/home/yang/contamination/Codenet_Python_After/s761121328.py", "code_before": "N = int(input())\nA = list(map(int, input().split()))\ns = A[0] ^ A[1]\nfor i in range(2, N):\n    s = s ^ A[i]\n\nB = [0]*N\nfor i in range(N):\n    B[i] = s ^ A[i]\n\nL = [str(a) for a in B]\nL = \" \".join(L)\nprint(L)\n", "code_after": "N = int(input())\nA = list(map(int, input().split()))\nvariable_0_3 = 0\nvariable_1_3 = 1\ns = A[variable_0_3] ^ A[variable_1_3]\nrandom_inside_left_4 = 860\nrandom_inside_right_4 = 859\nrandom_outside_left_4 = 677\nrandom_outside_right_4 = 676\nrandom_inside_left_7 = 797\nrandom_inside_right_7 = 796\nrandom_outside_left_7 = 936\nrandom_outside_right_7 = 935\nfor loop_outside in range(random_outside_left_4 // random_outside_right_4):\n    for i in range(2, N):\n        for loop_inside in range(random_inside_left_4 % random_inside_right_4):\n            s = s ^ A[i]\nvariable_0_16 = 0\nB = [variable_0_16] * N\nfor loop_outside in range(random_outside_left_7 // random_outside_right_7):\n    for i in range(N):\n        for loop_inside in range(random_inside_left_7 % random_inside_right_7):\n            B[i] = s ^ A[i]\nL = [str(a) for a in B]\nL = ' '.join(L)\nprint(L)", "effort_before": "43.47325716263743", "effort_after": "217.49388868831156", "difficulty_before": "1.1428571428571428", "difficulty_after": "2.1333333333333333", "calculated_length_before": "21.651484454403228", "calculated_length_after": "66.60335893412778", "length_before": "12", "length_after": "24", "vocabulary_before": "9", "vocabulary_after": "19", "mi_value_before": "64.86", "mi_value_after": "53.64", "Nloc_before": "11", "Nloc_after": "26", "AvgCCN_before": "4.0", "AvgCCN_after": "8.0"}, "s538657784": {"id": "s538657784", "language": "Python", "dataset": "Codenet", "pass_before": 2, "pass_after": 0, "filepath_before": "/home/yang/contamination/Codenet_Python_Before/s538657784.py", "filepath_after": "/home/yang/contamination/Codenet_Python_After/s538657784.py", "code_before": "import math\nN = int(input())\nsqN = int(math.sqrt(N))\nfor i in range(sqN):\n    if N % (sqN-i) == 0:\n        print(int(N/(sqN-i)+sqN-i)-2)\n        break\n", "code_after": "import math\nN = int(input())\nsqN = int(math.sqrt(N))\nrandom_inside_left_4 = 934\nrandom_inside_right_4 = 933\nrandom_outside_left_4 = 866\nrandom_outside_right_4 = 865\nfor loop_outside in range(random_outside_left_4 // random_outside_right_4):\n    for i in range(sqN):\n        for loop_inside in range(random_inside_left_4 % random_inside_right_4):\n            if N % (sqN - i) == 0:\n                print(int(N / (sqN - i) + sqN - i) - 2)\n                break", "effort_before": "349.09090909090907", "effort_after": "527.0780907334513", "difficulty_before": "3.6363636363636362", "difficulty_after": "4.0", "calculated_length_before": "49.663388279447084", "calculated_length_after": "74.11313393845472", "length_before": "24", "length_after": "30", "vocabulary_before": "16", "vocabulary_after": "21", "mi_value_before": "66.02", "mi_value_after": "59.48", "Nloc_before": "7", "Nloc_after": "13", "AvgCCN_before": "3.0", "AvgCCN_after": "5.0"}, "s759499751": {"id": "s759499751", "language": "Python", "dataset": "Codenet", "pass_before": 1, "pass_after": 0, "filepath_before": "/home/yang/contamination/Codenet_Python_Before/s759499751.py", "filepath_after": "/home/yang/contamination/Codenet_Python_After/s759499751.py", "code_before": "n, k = map(int, input().split())\na = [i for i in input()]\nc = [0]*n\nfor i in range(1, n):\n    if a[i] == \"C\" and a[i-1] == \"A\":\n        c[i] = c[i-1]+1\n    else:\n        c[i] = c[i-1]\nfor w in range(k):\n    l, r = map(int, input().split())\n    print(c[r-1]-c[l-1])\n", "code_after": "(n, k) = map(int, input().split())\na = [i for i in input()]\nvariable_0_3 = 0\nc = [variable_0_3] * n\nrandom_inside_left_4 = 253\nrandom_inside_right_4 = 252\nrandom_outside_left_4 = 652\nrandom_outside_right_4 = 651\nrandom_inside_left_9 = 168\nrandom_inside_right_9 = 167\nrandom_outside_left_9 = 601\nrandom_outside_right_9 = 600\nfor loop_outside in range(random_outside_left_4 // random_outside_right_4):\n    for i in range(1, n):\n        for loop_inside in range(random_inside_left_4 % random_inside_right_4):\n            if a[i] == 'C' and a[i - 1] == 'A':\n                c[i] = c[i - 1] + 1\n            else:\n                c[i] = c[i - 1]\nfor loop_outside in range(random_outside_left_9 // random_outside_right_9):\n    for w in range(k):\n        for loop_inside in range(random_inside_left_9 % random_inside_right_9):\n            (l, r) = map(int, input().split())\n            print(c[r - 1] - c[l - 1])", "effort_before": "522.9532994813709", "effort_after": "1008.0460027934892", "difficulty_before": "3.6666666666666665", "difficulty_after": "4.565217391304348", "calculated_length_before": "70.2129994085646", "calculated_length_after": "123.69340944371453", "length_before": "33", "length_after": "45", "vocabulary_before": "20", "vocabulary_after": "30", "mi_value_before": "60.57", "mi_value_after": "51.75", "Nloc_before": "11", "Nloc_after": "24", "AvgCCN_before": "6.0", "AvgCCN_after": "10.0"}, "s315467749": {"id": "s315467749", "language": "Python", "dataset": "Codenet", "pass_before": 3, "pass_after": 3, "filepath_before": "/home/yang/contamination/Codenet_Python_Before/s315467749.py", "filepath_after": "/home/yang/contamination/Codenet_Python_After/s315467749.py", "code_before": "n = int(input())\nS = list(map(int, input().split()))\nq = int(input())\nT = list(map(int, input().split()))\n\nans = 0\nfor i in T:\n    if i == S[-1] or i == S[0]:\n        ans += 1\n    else:\n        left = 0\n        right = n-1\n        while right-left > 1:\n            mid = (left+right)//2\n            if S[mid] == i:\n                ans += 1\n                break\n            elif S[mid] < i:\n                left = mid\n            else:\n                right = mid\n\nprint(ans)\n", "code_after": "n = int(input())\nS = list(map(int, input().split()))\nq = int(input())\nT = list(map(int, input().split()))\nans = 0\nrandom_inside_left_6 = 565\nrandom_inside_right_6 = 564\nrandom_outside_left_6 = 95\nrandom_outside_right_6 = 94\nfor loop_outside in range(random_outside_left_6 // random_outside_right_6):\n    for i in T:\n        for loop_inside in range(random_inside_left_6 % random_inside_right_6):\n            if i == S[-1] or i == S[0]:\n                ans += 1\n            else:\n                left = 0\n                right = n - 1\n                while right - left > 1:\n                    mid = (left + right) // 2\n                    if S[mid] == i:\n                        ans += 1\n                        break\n                    elif S[mid] < i:\n                        left = mid\n                    else:\n                        right = mid\nprint(ans)", "effort_before": "1145.9690288677766", "effort_after": "1452.8332611818294", "difficulty_before": "6.666666666666667", "difficulty_after": "6.868421052631579", "calculated_length_before": "82.60335893412778", "calculated_length_after": "109.23994776840894", "length_before": "38", "length_after": "44", "vocabulary_before": "23", "vocabulary_after": "28", "mi_value_before": "54.12", "mi_value_after": "50.94", "Nloc_before": "21", "Nloc_after": "27", "AvgCCN_before": "7.0", "AvgCCN_after": "9.0"}, "s182651529": {"id": "s182651529", "language": "Python", "dataset": "Codenet", "pass_before": 3, "pass_after": 3, "filepath_before": "/home/yang/contamination/Codenet_Python_Before/s182651529.py", "filepath_after": "/home/yang/contamination/Codenet_Python_After/s182651529.py", "code_before": "N, K = map(int, input().split())\nscore = list(map(int, input().split()))\nmae = 0\nusiro = K\nfor i in range(N-K):\n    if score[mae] < score[usiro]:\n        print('Yes')\n    else:\n        print('No')\n    mae += 1\n    usiro += 1\n", "code_after": "(N, K) = map(int, input().split())\nscore = list(map(int, input().split()))\nmae = 0\nusiro = K\nrandom_inside_left_5 = 678\nrandom_inside_right_5 = 677\nrandom_outside_left_5 = 210\nrandom_outside_right_5 = 209\nfor loop_outside in range(random_outside_left_5 // random_outside_right_5):\n    for i in range(N - K):\n        for loop_inside in range(random_inside_left_5 % random_inside_right_5):\n            if score[mae] < score[usiro]:\n                print('Yes')\n            else:\n                print('No')\n            mae += 1\n            usiro += 1", "effort_before": "68.33680652339717", "effort_after": "196.36363636363635", "difficulty_before": "1.7142857142857142", "difficulty_after": "2.727272727272727", "calculated_length_before": "24.406371956566698", "calculated_length_after": "49.663388279447084", "length_before": "12", "length_after": "18", "vocabulary_before": "10", "vocabulary_after": "16", "mi_value_before": "64.85", "mi_value_after": "58.94", "Nloc_before": "11", "Nloc_after": "17", "AvgCCN_before": "3.0", "AvgCCN_after": "5.0"}, "s668439281": {"id": "s668439281", "language": "Python", "dataset": "Codenet", "pass_before": 1, "pass_after": 0, "filepath_before": "/home/yang/contamination/Codenet_Python_Before/s668439281.py", "filepath_after": "/home/yang/contamination/Codenet_Python_After/s668439281.py", "code_before": "import collections\n\nn = int(input())\nls = [input() for i in range(n)]\nc = collections.Counter(ls)\n\ncount = c.most_common()[0][1]\nans = []\np = c.most_common()\nfor i in range(len(c)):\n    if p[i][1] == count:\n        ans.append(p[i][0])\n    else:\n        break\nans = sorted(ans)\nfor i in ans:\n    print(i)\n", "code_after": "import collections\nn = int(input())\nls = [input() for i in range(n)]\nc = collections.Counter(ls)\ncount = c.most_common()[0][1]\nans = []\np = c.most_common()\nrandom_inside_left_8 = 269\nrandom_inside_right_8 = 268\nrandom_outside_left_8 = 479\nrandom_outside_right_8 = 478\nrandom_inside_left_14 = 667\nrandom_inside_right_14 = 666\nrandom_outside_left_14 = 102\nrandom_outside_right_14 = 101\nfor loop_outside in range(random_outside_left_8 // random_outside_right_8):\n    for i in range(len(c)):\n        for loop_inside in range(random_inside_left_8 % random_inside_right_8):\n            if p[i][1] == count:\n                ans.append(p[i][0])\n            else:\n                break\nans = sorted(ans)\nfor loop_outside in range(random_outside_left_14 // random_outside_right_14):\n    for i in ans:\n        for loop_inside in range(random_inside_left_14 % random_inside_right_14):\n            print(i)", "effort_before": "2.3774437510817346", "effort_after": "83.25989365817458", "difficulty_before": "0.5", "difficulty_after": "1.5", "calculated_length_before": "2.0", "calculated_length_after": "37.974168451037094", "length_before": "3", "length_after": "15", "vocabulary_before": "3", "vocabulary_after": "13", "mi_value_before": "68.32", "mi_value_after": "55.01", "Nloc_before": "15", "Nloc_after": "27", "AvgCCN_before": "5.0", "AvgCCN_after": "9.0"}, "s225615697": {"id": "s225615697", "language": "Python", "dataset": "Codenet", "pass_before": 0, "pass_after": 0, "filepath_before": "/home/yang/contamination/Codenet_Python_Before/s225615697.py", "filepath_after": "/home/yang/contamination/Codenet_Python_After/s225615697.py", "code_before": "n = int(input())\na = list(map(int, input().split()))\n\nm1 = int(sum([a[i] * ((-1)**i) for i in range(n)]) / 2)\n\nresult = str(m1)\n\nm = [None] * n\nm[0] = m1\nfor i in range(1, n):\n    m[i] = a[i-1] - m[i-1]\n\nprint(' '.join([str(x*2) for x in m]))\n", "code_after": "n = int(input())\na = list(map(int, input().split()))\nm1 = int(sum([a[i] * (-1) ** i for i in range(n)]) / 2)\nresult = str(m1)\nvariable_None_5 = None\nm = [variable_None_5] * n\nm[0] = m1\nrandom_inside_left_7 = 667\nrandom_inside_right_7 = 666\nrandom_outside_left_7 = 810\nrandom_outside_right_7 = 809\nfor loop_outside in range(random_outside_left_7 // random_outside_right_7):\n    for i in range(1, n):\n        for loop_inside in range(random_inside_left_7 % random_inside_right_7):\n            m[i] = a[i - 1] - m[i - 1]\nprint(' '.join([str(x * 2) for x in m]))", "effort_before": "376.38720329846876", "effort_after": "664.963607540381", "difficulty_before": "3.5416666666666665", "difficulty_after": "4.59375", "calculated_length_before": "54.62919048309069", "calculated_length_after": "83.65148445440323", "length_before": "26", "length_after": "32", "vocabulary_before": "17", "vocabulary_after": "23", "mi_value_before": "63.46", "mi_value_after": "57.22", "Nloc_before": "9", "Nloc_after": "16", "AvgCCN_before": "4.0", "AvgCCN_after": "6.0"}, "s702834515": {"id": "s702834515", "language": "Python", "dataset": "Codenet", "pass_before": 1, "pass_after": 1, "filepath_before": "/home/yang/contamination/Codenet_Python_Before/s702834515.py", "filepath_after": "/home/yang/contamination/Codenet_Python_After/s702834515.py", "code_before": "n = int(input())\nr = 0\nfor ii in range(n):\n    if (ii+1) % 3 != 0 and (ii+1) % 5 != 0:\n        r += (ii+1)\nprint(r)\n", "code_after": "n = int(input())\nr = 0\nrandom_inside_left_3 = 484\nrandom_inside_right_3 = 483\nrandom_outside_left_3 = 472\nrandom_outside_right_3 = 471\nfor loop_outside in range(random_outside_left_3 // random_outside_right_3):\n    for ii in range(n):\n        for loop_inside in range(random_inside_left_3 % random_inside_right_3):\n            if (ii + 1) % 3 != 0 and (ii + 1) % 5 != 0:\n                r += ii + 1\nprint(r)", "effort_before": "305.6164524381023", "effort_after": "476.1099051662762", "difficulty_before": "2.769230769230769", "difficulty_after": "3.235294117647059", "calculated_length_before": "56.105716335834195", "calculated_length_after": "81.0965087756926", "length_before": "27", "length_after": "33", "vocabulary_before": "17", "vocabulary_after": "22", "mi_value_before": "66.72", "mi_value_after": "59.71", "Nloc_before": "6", "Nloc_after": "12", "AvgCCN_before": "4.0", "AvgCCN_after": "6.0"}, "s170274782": {"id": "s170274782", "language": "Python", "dataset": "Codenet", "pass_before": 0, "pass_after": 0, "filepath_before": "/home/yang/contamination/Codenet_Python_Before/s170274782.py", "filepath_after": "/home/yang/contamination/Codenet_Python_After/s170274782.py", "code_before": "N = int(input())\nA = []\nfor _ in range(2):\n    s = list(map(int, input().split()))\n    A.append(s)\n\n\nans = []\n\ncount = 0\nfor i in range(N):\n    baselis = A[0]\n    groundlis = A[1]\n    count = 0\n    count = count + sum(baselis[0:i+1]) + sum(groundlis[i:N+1])\n    ans.append(count)\n\nprint(max(ans))\n", "code_after": "N = int(input())\nA = []\nrandom_inside_left_3 = 699\nrandom_inside_right_3 = 698\nrandom_outside_left_3 = 855\nrandom_outside_right_3 = 854\nrandom_inside_left_8 = 375\nrandom_inside_right_8 = 374\nrandom_outside_left_8 = 719\nrandom_outside_right_8 = 718\nfor loop_outside in range(random_outside_left_3 // random_outside_right_3):\n    for _ in range(2):\n        for loop_inside in range(random_inside_left_3 % random_inside_right_3):\n            s = list(map(int, input().split()))\n            A.append(s)\nans = []\ncount = 0\nfor loop_outside in range(random_outside_left_8 // random_outside_right_8):\n    for i in range(N):\n        for loop_inside in range(random_inside_left_8 % random_inside_right_8):\n            baselis = A[0]\n            groundlis = A[1]\n            count = 0\n            count = count + sum(baselis[0:i + 1]) + sum(groundlis[i:N + 1])\n            ans.append(count)\nprint(max(ans))", "effort_before": "20.57142857142857", "effort_after": "160.1251200553848", "difficulty_before": "0.5714285714285714", "difficulty_after": "1.6", "calculated_length_before": "19.651484454403228", "calculated_length_after": "63.35824643629125", "length_before": "12", "length_after": "24", "vocabulary_before": "8", "vocabulary_after": "18", "mi_value_before": "62.43", "mi_value_after": "53.48", "Nloc_before": "14", "Nloc_after": "26", "AvgCCN_before": "3.0", "AvgCCN_after": "7.0"}, "s200092246": {"id": "s200092246", "language": "Python", "dataset": "Codenet", "pass_before": 2, "pass_after": 0, "filepath_before": "/home/yang/contamination/Codenet_Python_Before/s200092246.py", "filepath_after": "/home/yang/contamination/Codenet_Python_After/s200092246.py", "code_before": "N = int(input())\nans = []\n\nfor i in range(1, N+1):\n    if sum(range(1, i + 1)) < N:\n        continue\n    else:\n        ans = [i - 1, sum(range(1, i + 1)) - N]\n        break\nfor i in range(ans[0]+1):\n    if i + 1 != ans[1]:\n        print(i + 1)\n", "code_after": "N = int(input())\nans = []\nrandom_inside_left_3 = 364\nrandom_inside_right_3 = 363\nrandom_outside_left_3 = 574\nrandom_outside_right_3 = 573\nrandom_inside_left_9 = 283\nrandom_inside_right_9 = 282\nrandom_outside_left_9 = 789\nrandom_outside_right_9 = 788\nfor loop_outside in range(random_outside_left_3 // random_outside_right_3):\n    for i in range(1, N + 1):\n        for loop_inside in range(random_inside_left_3 % random_inside_right_3):\n            if sum(range(1, i + 1)) < N:\n                continue\n            else:\n                ans = [i - 1, sum(range(1, i + 1)) - N]\n                break\nfor loop_outside in range(random_outside_left_9 // random_outside_right_9):\n    for i in range(ans[0] + 1):\n        for loop_inside in range(random_inside_left_9 % random_inside_right_9):\n            if i + 1 != ans[1]:\n                print(i + 1)", "effort_before": "537.7443751081735", "effort_after": "983.304671909524", "difficulty_before": "5.0", "difficulty_after": "5.25", "calculated_length_before": "32.0", "calculated_length_after": "79.50977500432694", "length_before": "30", "length_after": "42", "vocabulary_before": "12", "vocabulary_after": "22", "mi_value_before": "61.56", "mi_value_after": "52.77", "Nloc_before": "11", "Nloc_after": "23", "AvgCCN_before": "5.0", "AvgCCN_after": "9.0"}, "s043545989": {"id": "s043545989", "language": "Python", "dataset": "Codenet", "pass_before": 0, "pass_after": 0, "filepath_before": "/home/yang/contamination/Codenet_Python_Before/s043545989.py", "filepath_after": "/home/yang/contamination/Codenet_Python_After/s043545989.py", "code_before": "import collections\nN = int(input())\na = list(map(int, input().split()))\nB = collections.Counter(a)\nk = list(B.keys())\nv = list(B.values())\n\nif len(B) == 3 and k[0] ^ k[1] ^ k[2] == 0 and v[0] == v[1] == v[2]:\n    print(\"Yes\")\nelif len(B) == 2 and 0 in k and (v[0] == 2*v[1] or v[1] == 2*v[0]):\n    print(\"Yes\")\nelif len(B) == 1 and 0 in k:\n    print(\"Yes\")\nelse:\n    print(\"No\")\n", "code_after": "import collections\nN = int(input())\na = list(map(int, input().split()))\nB = collections.Counter(a)\nk = list(B.keys())\nv = list(B.values())\nrandom_outside_if_left_7 = 747\nrandom_outside_if_right_7 = 746\nif random_outside_if_left_7 & random_outside_if_right_7:\n    if len(B) == 3 and k[0] ^ k[1] ^ k[2] == 0 and (v[0] == v[1] == v[2]):\n        print('Yes')\n    elif len(B) == 2 and 0 in k and (v[0] == 2 * v[1] or v[1] == 2 * v[0]):\n        print('Yes')\n    elif len(B) == 1 and 0 in k:\n        print('Yes')\n    else:\n        print('No')\nelif len(B) == 2 and 0 in k and (v[0] == 2 * v[1] or v[1] == 2 * v[0]):\n    print('Yes')\nelif len(B) == 1 and 0 in k:\n    print('Yes')\nelse:\n    print('No')", "effort_before": "1001.206170924159", "effort_after": "2366.082319672613", "difficulty_before": "3.46875", "difficulty_after": "4.428571428571429", "calculated_length_before": "175.50977500432694", "calculated_length_after": "294.7722668160484", "length_before": "55", "length_after": "92", "vocabulary_before": "38", "vocabulary_after": "56", "mi_value_before": "55.77", "mi_value_after": "48.51", "Nloc_before": "14", "Nloc_after": "23", "AvgCCN_before": "10.0", "AvgCCN_after": "17.0"}, "s001486412": {"id": "s001486412", "language": "Python", "dataset": "Codenet", "pass_before": 3, "pass_after": 0, "filepath_before": "/home/yang/contamination/Codenet_Python_Before/s001486412.py", "filepath_after": "/home/yang/contamination/Codenet_Python_After/s001486412.py", "code_before": "n = int(input())\na = list(map(int, input().split()))\nbelow = 0\nfor i in range(n):\n    below += 1/a[i]\nprint(1/below)\n", "code_after": "n = int(input())\na = list(map(int, input().split()))\nbelow = 0\nrandom_inside_left_4 = 922\nrandom_inside_right_4 = 921\nrandom_outside_left_4 = 775\nrandom_outside_right_4 = 774\nfor loop_outside in range(random_outside_left_4 // random_outside_right_4):\n    for i in range(n):\n        for loop_inside in range(random_inside_left_4 % random_inside_right_4):\n            below += 1 / a[i]\nprint(1 / below)", "effort_before": "34.89699375973561", "effort_after": "134.43609377704337", "difficulty_before": "1.5", "difficulty_after": "2.5", "calculated_length_before": "10.0", "calculated_length_after": "32.0", "length_before": "9", "length_after": "15", "vocabulary_before": "6", "vocabulary_after": "12", "mi_value_before": "71.73", "mi_value_after": "63.04", "Nloc_before": "6", "Nloc_after": "12", "AvgCCN_before": "2.0", "AvgCCN_after": "4.0"}, "s575946485": {"id": "s575946485", "language": "Python", "dataset": "Codenet", "pass_before": 0, "pass_after": 0, "filepath_before": "/home/yang/contamination/Codenet_Python_Before/s575946485.py", "filepath_after": "/home/yang/contamination/Codenet_Python_After/s575946485.py", "code_before": "a = [int(input()) for i in range(5)]\n\ndic = {}\n\nfor i in range(5):\n    if str(a[i])[-1] == \"0\":\n        dic.update({i: 0})\n    else:\n        dic.update({i: int(str(a[i])[-1]) - 10})\n\n\nmin_num = [i for i in dic if dic[i] == min(dic.values())][0]\na_sum = sum(a)\ndic.pop(min_num)\nprint(abs(sum(dic.values())) + a_sum)\n", "code_after": "a = [int(input()) for i in range(5)]\ndic = {}\nrandom_inside_left_3 = 89\nrandom_inside_right_3 = 88\nrandom_outside_left_3 = 999\nrandom_outside_right_3 = 998\nfor loop_outside in range(random_outside_left_3 // random_outside_right_3):\n    for i in range(5):\n        for loop_inside in range(random_inside_left_3 % random_inside_right_3):\n            if str(a[i])[-1] == '0':\n                dic.update({i: 0})\n            else:\n                dic.update({i: int(str(a[i])[-1]) - 10})\nmin_num = [i for i in dic if dic[i] == min(dic.values())][0]\na_sum = sum(a)\ndic.pop(min_num)\nprint(abs(sum(dic.values())) + a_sum)", "effort_before": "131.57118997834996", "effort_after": "301.9296171093748", "difficulty_before": "2.2222222222222223", "difficulty_after": "3.230769230769231", "calculated_length_before": "36.52932501298081", "calculated_length_after": "63.61549134016113", "length_before": "16", "length_after": "22", "vocabulary_before": "13", "vocabulary_after": "19", "mi_value_before": "61.78", "mi_value_after": "56.75", "Nloc_before": "11", "Nloc_after": "17", "AvgCCN_before": "6.0", "AvgCCN_after": "8.0"}, "s557080041": {"id": "s557080041", "language": "Python", "dataset": "Codenet", "pass_before": 3, "pass_after": 0, "filepath_before": "/home/yang/contamination/Codenet_Python_Before/s557080041.py", "filepath_after": "/home/yang/contamination/Codenet_Python_After/s557080041.py", "code_before": "N = input()\nif N == 0:\n    print('Yes')\nelse:\n    N = str(N)\n    L = list(N)\n    L = [int(s) for s in L]\n    X = sum(L)\n    if X % 9 == 0:\n        print('Yes')\n    else:\n        print('No')\n", "code_after": "N = input()\nrandom_outside_if_left_2 = 70\nrandom_outside_if_right_2 = 69\nif random_outside_if_left_2 & random_outside_if_right_2:\n    if N == 0:\n        print('Yes')\n    else:\n        N = str(N)\n        L = list(N)\n        L = [int(s) for s in L]\n        X = sum(L)\n        if X % 9 == 0:\n            print('Yes')\n        else:\n            print('No')\nelse:\n    N = str(N)\n    L = list(N)\n    L = [int(s) for s in L]\n    X = sum(L)\n    if X % 9 == 0:\n        print('Yes')\n    else:\n        print('No')", "effort_before": "30.319433158222125", "effort_after": "140.10698055481055", "difficulty_before": "1.2", "difficulty_after": "2.25", "calculated_length_before": "13.60964047443681", "calculated_length_after": "28.75488750216347", "length_before": "9", "length_after": "18", "vocabulary_before": "7", "vocabulary_after": "11", "mi_value_before": "65.34", "mi_value_after": "56.00", "Nloc_before": "12", "Nloc_after": "24", "AvgCCN_before": "4.0", "AvgCCN_after": "7.0"}, "s607161467": {"id": "s607161467", "language": "Python", "dataset": "Codenet", "pass_before": 3, "pass_after": 3, "filepath_before": "/home/yang/contamination/Codenet_Python_Before/s607161467.py", "filepath_after": "/home/yang/contamination/Codenet_Python_After/s607161467.py", "code_before": "R = int(input())\n\nif R < 1200:\n    print(\"ABC\")\nelif R < 2800:\n    print(\"ARC\")\nelse:\n    print(\"AGC\")\n", "code_after": "R = int(input())\nrandom_outside_if_left_2 = 296\nrandom_outside_if_right_2 = 295\nif random_outside_if_left_2 & random_outside_if_right_2:\n    if R < 1200:\n        print('ABC')\n    elif R < 2800:\n        print('ARC')\n    else:\n        print('AGC')\nelif R < 2800:\n    print('ARC')\nelse:\n    print('AGC')", "effort_before": "8.0", "effort_after": "53.901214503506004", "difficulty_before": "0.6666666666666666", "difficulty_after": "1.6", "calculated_length_before": "4.754887502163469", "calculated_length_after": "13.60964047443681", "length_before": "6", "length_after": "12", "vocabulary_before": "4", "vocabulary_after": "7", "mi_value_before": "72.34", "mi_value_after": "62.98", "Nloc_before": "7", "Nloc_after": "14", "AvgCCN_before": "3.0", "AvgCCN_after": "5.0"}, "s666154520": {"id": "s666154520", "language": "Python", "dataset": "Codenet", "pass_before": 3, "pass_after": 1, "filepath_before": "/home/yang/contamination/Codenet_Python_Before/s666154520.py", "filepath_after": "/home/yang/contamination/Codenet_Python_After/s666154520.py", "code_before": "n = int(input())\nfor i in range(1, 10 ** 5):\n    if i * i > n:\n        print((i-1) * (i-1))\n        exit()\n", "code_after": "n = int(input())\nrandom_inside_left_2 = 290\nrandom_inside_right_2 = 289\nrandom_outside_left_2 = 60\nrandom_outside_right_2 = 59\nfor loop_outside in range(random_outside_left_2 // random_outside_right_2):\n    for i in range(1, 10 ** 5):\n        for loop_inside in range(random_inside_left_2 % random_inside_right_2):\n            if i * i > n:\n                print((i - 1) * (i - 1))\n                exit()", "effort_before": "193.58797503894246", "effort_after": "400.31280013846197", "difficulty_before": "3.0", "difficulty_after": "4.0", "calculated_length_before": "32.0", "calculated_length_after": "58.52932501298082", "length_before": "18", "length_after": "24", "vocabulary_before": "12", "vocabulary_after": "18", "mi_value_before": "69.95", "mi_value_after": "61.78", "Nloc_before": "5", "Nloc_after": "11", "AvgCCN_before": "3.0", "AvgCCN_after": "5.0"}, "s103354654": {"id": "s103354654", "language": "Python", "dataset": "Codenet", "pass_before": 3, "pass_after": 1, "filepath_before": "/home/yang/contamination/Codenet_Python_Before/s103354654.py", "filepath_after": "/home/yang/contamination/Codenet_Python_After/s103354654.py", "code_before": "W, H, x, y, r = map(int, input().split())\n\nif x >= r and (W - r) >= x:\n    if y >= r and (H - r) >= y:\n        print('Yes')\n    else:\n        print('No')\nelse:\n    print('No')\n", "code_after": "(W, H, x, y, r) = map(int, input().split())\nrandom_outside_if_left_2 = 10\nrandom_outside_if_right_2 = 9\nif random_outside_if_left_2 & random_outside_if_right_2:\n    if x >= r and W - r >= x:\n        if y >= r and H - r >= y:\n            print('Yes')\n        else:\n            print('No')\n    else:\n        print('No')\nelse:\n    print('No')", "effort_before": "199.36694864592542", "effort_after": "305.6164524381023", "difficulty_before": "2.1818181818181817", "difficulty_after": "2.769230769230769", "calculated_length_before": "42.808635307173745", "calculated_length_after": "56.105716335834195", "length_before": "24", "length_after": "27", "vocabulary_before": "14", "vocabulary_after": "17", "mi_value_before": "64.78", "mi_value_after": "59.89", "Nloc_before": "8", "Nloc_after": "13", "AvgCCN_before": "5.0", "AvgCCN_after": "6.0"}, "s735480710": {"id": "s735480710", "language": "Python", "dataset": "Codenet", "pass_before": 0, "pass_after": 0, "filepath_before": "/home/yang/contamination/Codenet_Python_Before/s735480710.py", "filepath_after": "/home/yang/contamination/Codenet_Python_After/s735480710.py", "code_before": "from collections import deque\nn = int(input())\na = list(map(str, input().split()))\nb = []\n\nb = a[1::2][::-1]+a[::2]\nif len(a) % 2 == 0:\n    print(' '.join(b))\nelse:\n    print(' '.join(b[::-1]))\n", "code_after": "from collections import deque\nn = int(input())\na = list(map(str, input().split()))\nb = []\nvariable_2_5 = 2\nvariable_1_5 = 1\nvariable_2_5 = 2\nvariable_1_5 = 1\nb = a[variable_1_5::variable_2_5][::-variable_1_5] + a[::variable_2_5]\nrandom_outside_if_left_6 = 935\nrandom_outside_if_right_6 = 934\nif random_outside_if_left_6 & random_outside_if_right_6:\n    if len(a) % 2 == 0:\n        print(' '.join(b))\n    else:\n        print(' '.join(b[::-1]))\nelse:\n    print(' '.join(b[::-1]))", "effort_before": "102.79453952522255", "effort_after": "193.39108448262166", "difficulty_before": "2.2857142857142856", "difficulty_after": "2.75", "calculated_length_before": "27.651484454403228", "calculated_length_after": "44.82892142331043", "length_before": "13", "length_after": "18", "vocabulary_before": "11", "vocabulary_after": "15", "mi_value_before": "64.62", "mi_value_after": "57.38", "Nloc_before": "9", "Nloc_after": "18", "AvgCCN_before": "2.0", "AvgCCN_after": "3.0"}, "s591424993": {"id": "s591424993", "language": "Python", "dataset": "Codenet", "pass_before": 0, "pass_after": 0, "filepath_before": "/home/yang/contamination/Codenet_Python_Before/s591424993.py", "filepath_after": "/home/yang/contamination/Codenet_Python_After/s591424993.py", "code_before": "d, g = list(map(int, input().split()))\npc = [list(map(int, input().split())) for _ in range(d)]\n\nans = float(\"inf\")\n\nfor bit in range(1 << d):\n    count = 0\n    sum = 0\n    nokori = set(range(1, d + 1))\n\n    for i in range(d):\n        if bit & (1 << i):\n            sum += pc[i][0] * (i + 1) * 100 + pc[i][1]\n            count += pc[i][0]\n            nokori.discard(i + 1)\n\n    if sum < g:\n        use = max(nokori)\n        n = min(pc[use-1][0], -(-(g - sum) // (use * 100)))\n        count += n\n        sum += n * use * 100\n\n    if sum >= g:\n        ans = min(ans, count)\nprint(ans)\n", "code_after": "(d, g) = list(map(int, input().split()))\npc = [list(map(int, input().split())) for _ in range(d)]\nans = float('inf')\nrandom_inside_left_4 = 457\nrandom_inside_right_4 = 456\nrandom_outside_left_4 = 99\nrandom_outside_right_4 = 98\nfor loop_outside in range(random_outside_left_4 // random_outside_right_4):\n    for bit in range(1 << d):\n        for loop_inside in range(random_inside_left_4 % random_inside_right_4):\n            count = 0\n            sum = 0\n            nokori = set(range(1, d + 1))\n            for i in range(d):\n                if bit & 1 << i:\n                    sum += pc[i][0] * (i + 1) * 100 + pc[i][1]\n                    count += pc[i][0]\n                    nokori.discard(i + 1)\n            if sum < g:\n                use = max(nokori)\n                n = min(pc[use - 1][0], -(-(g - sum) // (use * 100)))\n                count += n\n                sum += n * use * 100\n            if sum >= g:\n                ans = min(ans, count)\nprint(ans)", "effort_before": "2788.288849475385", "effort_after": "3283.7032155547004", "difficulty_before": "8.25", "difficulty_after": "8.571428571428571", "calculated_length_before": "138.56842503028858", "calculated_length_after": "167.82521876648653", "length_before": "67", "length_after": "73", "vocabulary_before": "33", "vocabulary_after": "38", "mi_value_before": "52.51", "mi_value_after": "49.48", "Nloc_before": "20", "Nloc_after": "26", "AvgCCN_before": "7.0", "AvgCCN_after": "9.0"}, "s827462150": {"id": "s827462150", "language": "Python", "dataset": "Codenet", "pass_before": 3, "pass_after": 0, "filepath_before": "/home/yang/contamination/Codenet_Python_Before/s827462150.py", "filepath_after": "/home/yang/contamination/Codenet_Python_After/s827462150.py", "code_before": "import numpy as np\nn = int(input())\nA = np.zeros(n)\n\nx, y, z = 1, 1, 1\n\nwhile x**2 + y**2 + z**2 + x*y + y*z + z*x <= n:\n    while x ** 2 + y ** 2 + z ** 2 + x * y + y * z + z * x <= n:\n        while x ** 2 + y ** 2 + z ** 2 + x * y + y * z + z * x <= n:\n            i = x ** 2 + y ** 2 + z ** 2 + x * y + y * z + z * x\n            A[i - 1] += 1\n            z += 1\n        z = 1\n        y += 1\n    y, z = 1, 1\n    x += 1\nfor i in range(n):\n    print(int(A[i]))\n", "code_after": "import numpy as np\nn = int(input())\nA = np.zeros(n)\n(x, y, z) = (1, 1, 1)\nrandom_inside_left_5 = 37\nrandom_inside_right_5 = 36\nrandom_outside_left_5 = 655\nrandom_outside_right_5 = 654\nfor loop_outside in range(random_outside_left_5 // random_outside_right_5):\n    while x ** 2 + y ** 2 + z ** 2 + x * y + y * z + z * x <= n:\n        for loop_inside in range(random_inside_left_5 % random_inside_right_5):\n            while x ** 2 + y ** 2 + z ** 2 + x * y + y * z + z * x <= n:\n                while x ** 2 + y ** 2 + z ** 2 + x * y + y * z + z * x <= n:\n                    i = x ** 2 + y ** 2 + z ** 2 + x * y + y * z + z * x\n                    A[i - 1] += 1\n                    z += 1\n                z = 1\n                y += 1\n            (y, z) = (1, 1)\n            x += 1\nrandom_inside_left_15 = 828\nrandom_inside_right_15 = 827\nrandom_outside_left_15 = 840\nrandom_outside_right_15 = 839\nfor loop_outside in range(random_outside_left_15 // random_outside_right_15):\n    for i in range(n):\n        for loop_inside in range(random_inside_left_15 % random_inside_right_15):\n            print(int(A[i]))", "effort_before": "4618.555208601107", "effort_after": "6746.773205499497", "difficulty_before": "5.098039215686274", "difficulty_after": "6.6440677966101696", "calculated_length_before": "300.9033329149831", "calculated_length_after": "366.72742436675185", "length_before": "156", "length_after": "168", "vocabulary_before": "56", "vocabulary_after": "66", "mi_value_before": "51.78", "mi_value_after": "45.84", "Nloc_before": "16", "Nloc_after": "28", "AvgCCN_before": "5.0", "AvgCCN_after": "9.0"}, "s858647829": {"id": "s858647829", "language": "Python", "dataset": "Codenet", "pass_before": 3, "pass_after": 0, "filepath_before": "/home/yang/contamination/Codenet_Python_Before/s858647829.py", "filepath_after": "/home/yang/contamination/Codenet_Python_After/s858647829.py", "code_before": "a, b = map(int, input().split())\n\nif a % 3 == 0 or b % 3 == 0 or (a + b) % 3 == 0:\n    print('Possible')\nelse:\n    print('Impossible')\n", "code_after": "(a, b) = map(int, input().split())\nrandom_outside_if_left_2 = 303\nrandom_outside_if_right_2 = 302\nif random_outside_if_left_2 & random_outside_if_right_2:\n    if a % 3 == 0 or b % 3 == 0 or (a + b) % 3 == 0:\n        print('Possible')\n    else:\n        print('Impossible')\nelse:\n    print('Impossible')", "effort_before": "301.8960914788401", "effort_after": "426.61540399371347", "difficulty_before": "3.090909090909091", "difficulty_after": "3.6538461538461537", "calculated_length_before": "46.053747805010275", "calculated_length_after": "59.715356810271004", "length_before": "25", "length_after": "28", "vocabulary_before": "15", "vocabulary_after": "18", "mi_value_before": "68.56", "mi_value_after": "62.14", "Nloc_before": "5", "Nloc_after": "10", "AvgCCN_before": "4.0", "AvgCCN_after": "5.0"}, "s770408311": {"id": "s770408311", "language": "Python", "dataset": "Codenet", "pass_before": 3, "pass_after": 2, "filepath_before": "/home/yang/contamination/Codenet_Python_Before/s770408311.py", "filepath_after": "/home/yang/contamination/Codenet_Python_After/s770408311.py", "code_before": "n = int(input())\nres = []\nfor i in range(n):\n    a = input()\n    res.append(a)\nprint(len(set(res)))\n", "code_after": "n = int(input())\nres = []\nrandom_inside_left_3 = 624\nrandom_inside_right_3 = 623\nrandom_outside_left_3 = 638\nrandom_outside_right_3 = 637\nfor loop_outside in range(random_outside_left_3 // random_outside_right_3):\n    for i in range(n):\n        for loop_inside in range(random_inside_left_3 % random_inside_right_3):\n            a = input()\n            res.append(a)\nprint(len(set(res)))", "effort_before": "0", "effort_after": "15.509775004326936", "difficulty_before": "0", "difficulty_after": "1.0", "calculated_length_before": "0", "calculated_length_after": "10.0", "length_before": "0", "length_after": "6", "vocabulary_before": "0", "vocabulary_after": "6", "mi_value_before": "100.00", "mi_value_after": "66.83", "Nloc_before": "6", "Nloc_after": "12", "AvgCCN_before": "2.0", "AvgCCN_after": "4.0"}, "s462546732": {"id": "s462546732", "language": "Python", "dataset": "Codenet", "pass_before": 3, "pass_after": 1, "filepath_before": "/home/yang/contamination/Codenet_Python_Before/s462546732.py", "filepath_after": "/home/yang/contamination/Codenet_Python_After/s462546732.py", "code_before": "a, b = input().split(\" \")\na = int(a)\nb = int(b)\nif a <= b:\n    print(a)\nelse:\n    print(a-1)\n", "code_after": "(a, b) = input().split(' ')\na = int(a)\nb = int(b)\nrandom_outside_if_left_4 = 594\nrandom_outside_if_right_4 = 593\nif random_outside_if_left_4 & random_outside_if_right_4:\n    if a <= b:\n        print(a)\n    else:\n        print(a - 1)\nelse:\n    print(a - 1)", "effort_before": "18.575424759098897", "effort_after": "86.39999999999999", "difficulty_before": "1.3333333333333333", "difficulty_after": "2.4", "calculated_length_before": "6.754887502163469", "calculated_length_after": "16.36452797660028", "length_before": "6", "length_after": "12", "vocabulary_before": "5", "vocabulary_after": "8", "mi_value_before": "72.02", "mi_value_after": "64.40", "Nloc_before": "7", "Nloc_after": "12", "AvgCCN_before": "2.0", "AvgCCN_after": "3.0"}, "s554393427": {"id": "s554393427", "language": "Python", "dataset": "Codenet", "pass_before": 0, "pass_after": 0, "filepath_before": "/home/yang/contamination/Codenet_Python_Before/s554393427.py", "filepath_after": "/home/yang/contamination/Codenet_Python_After/s554393427.py", "code_before": "N = int(input())\nmo = []\nfor _ in range(N):\n    x, u = input().split()\n    x = float(x)\n    mo.append([x, u])\nokz = 0\nfor i in mo:\n    if i[1] == \"JPY\":\n        okz += i[0]\n    else:\n        okz += i[0]*380000\n\nprint(okz)\n", "code_after": "N = int(input())\nmo = []\nrandom_inside_left_3 = 905\nrandom_inside_right_3 = 904\nrandom_outside_left_3 = 483\nrandom_outside_right_3 = 482\nrandom_inside_left_8 = 612\nrandom_inside_right_8 = 611\nrandom_outside_left_8 = 807\nrandom_outside_right_8 = 806\nfor loop_outside in range(random_outside_left_3 // random_outside_right_3):\n    for _ in range(N):\n        for loop_inside in range(random_inside_left_3 % random_inside_right_3):\n            (x, u) = input().split()\n            x = float(x)\n            mo.append([x, u])\nokz = 0\nfor loop_outside in range(random_outside_left_8 // random_outside_right_8):\n    for i in mo:\n        for loop_inside in range(random_inside_left_8 % random_inside_right_8):\n            if i[1] == 'JPY':\n                okz += i[0]\n            else:\n                okz += i[0] * 380000\nprint(okz)", "effort_before": "68.33680652339717", "effort_after": "276.6033980727912", "difficulty_before": "1.7142857142857142", "difficulty_after": "2.6666666666666665", "calculated_length_before": "24.406371956566698", "calculated_length_after": "70.2129994085646", "length_before": "12", "length_after": "24", "vocabulary_before": "10", "vocabulary_after": "20", "mi_value_before": "63.25", "mi_value_after": "53.94", "Nloc_before": "13", "Nloc_after": "25", "AvgCCN_before": "4.0", "AvgCCN_after": "8.0"}, "s058944700": {"id": "s058944700", "language": "Python", "dataset": "Codenet", "pass_before": 3, "pass_after": 3, "filepath_before": "/home/yang/contamination/Codenet_Python_Before/s058944700.py", "filepath_after": "/home/yang/contamination/Codenet_Python_After/s058944700.py", "code_before": "import numpy as np\n\nn, k = map(int, input().split())\n\nif n > k:\n    tmp = n % k\n    if tmp >= k - tmp:\n        ans = k - tmp\n    else:\n        ans = tmp\nelif n < k:\n    if n >= k - n:\n        ans = k - n\n    else:\n        ans = n\nelse:\n    ans = 0\n\nprint(ans)\n", "code_after": "import numpy as np\n(n, k) = map(int, input().split())\nrandom_outside_if_left_3 = 260\nrandom_outside_if_right_3 = 259\nif random_outside_if_left_3 & random_outside_if_right_3:\n    if n > k:\n        tmp = n % k\n        if tmp >= k - tmp:\n            ans = k - tmp\n        else:\n            ans = tmp\n    elif n < k:\n        if n >= k - n:\n            ans = k - n\n        else:\n            ans = n\n    else:\n        ans = 0\nelif n < k:\n    if n >= k - n:\n        ans = k - n\n    else:\n        ans = n\nelse:\n    ans = 0\nprint(ans)", "effort_before": "807.2285270576291", "effort_after": "1679.0435206274033", "difficulty_before": "9.0", "difficulty_after": "10.5", "calculated_length_before": "23.21928094887362", "calculated_length_after": "39.50977500432694", "length_before": "27", "length_after": "42", "vocabulary_before": "10", "vocabulary_after": "14", "mi_value_before": "58.81", "mi_value_after": "52.27", "Nloc_before": "16", "Nloc_after": "26", "AvgCCN_before": "5.0", "AvgCCN_after": "8.0"}, "s016605598": {"id": "s016605598", "language": "Python", "dataset": "Codenet", "pass_before": 0, "pass_after": 0, "filepath_before": "/home/yang/contamination/Codenet_Python_Before/s016605598.py", "filepath_after": "/home/yang/contamination/Codenet_Python_After/s016605598.py", "code_before": "import heapq\nconst = 0\nleft = []\nright = []\n\nq = int(input())\ncnt = 0\nleft_sum = 0\nright_sum = 0\nfor _ in range(q):\n    t = list(map(int, input().split()))\n    if t[0] == 1:\n\n        a, b = t[1:]\n        const += b\n        if cnt % 2 == 0:\n            if not right:\n                heapq.heappush(left, -a)\n                left_sum += a\n                cnt += 1\n\n                continue\n\n            c = heapq.heappop(right)\n            right_sum -= c\n            if a <= c:\n                heapq.heappush(left, -a)\n                heapq.heappush(right, c)\n                left_sum += a\n                right_sum += c\n            else:\n                heapq.heappush(left, -c)\n                heapq.heappush(right, a)\n                left_sum += c\n                right_sum += a\n        else:\n            c = heapq.heappop(left)\n            left_sum += c\n            if a <= -c:\n                heapq.heappush(left, -a)\n                heapq.heappush(right, -c)\n                left_sum += a\n                right_sum -= c\n            else:\n                heapq.heappush(left, c)\n                heapq.heappush(right, a)\n                left_sum -= c\n                right_sum += a\n        cnt += 1\n\n    else:\n        tmp = -left[0]\n        print(tmp, const - left_sum + right_sum + tmp * (cnt % 2))\n", "code_after": "import heapq\nconst = 0\nleft = []\nright = []\nq = int(input())\ncnt = 0\nleft_sum = 0\nright_sum = 0\nrandom_inside_left_9 = 526\nrandom_inside_right_9 = 525\nrandom_outside_left_9 = 98\nrandom_outside_right_9 = 97\nfor loop_outside in range(random_outside_left_9 // random_outside_right_9):\n    for _ in range(q):\n        for loop_inside in range(random_inside_left_9 % random_inside_right_9):\n            t = list(map(int, input().split()))\n            if t[0] == 1:\n                (a, b) = t[1:]\n                const += b\n                if cnt % 2 == 0:\n                    if not right:\n                        heapq.heappush(left, -a)\n                        left_sum += a\n                        cnt += 1\n                        continue\n                    c = heapq.heappop(right)\n                    right_sum -= c\n                    if a <= c:\n                        heapq.heappush(left, -a)\n                        heapq.heappush(right, c)\n                        left_sum += a\n                        right_sum += c\n                    else:\n                        heapq.heappush(left, -c)\n                        heapq.heappush(right, a)\n                        left_sum += c\n                        right_sum += a\n                else:\n                    c = heapq.heappop(left)\n                    left_sum += c\n                    if a <= -c:\n                        heapq.heappush(left, -a)\n                        heapq.heappush(right, -c)\n                        left_sum += a\n                        right_sum -= c\n                    else:\n                        heapq.heappush(left, c)\n                        heapq.heappush(right, a)\n                        left_sum -= c\n                        right_sum += a\n                cnt += 1\n            else:\n                tmp = -left[0]\n                print(tmp, const - left_sum + right_sum + tmp * (cnt % 2))", "effort_before": "4738.1290111799735", "effort_after": "5334.446781221564", "difficulty_before": "11.2", "difficulty_after": "11.25", "calculated_length_before": "110.43856189774725", "calculated_length_after": "138.56842503028858", "length_before": "88", "length_after": "94", "vocabulary_before": "28", "vocabulary_after": "33", "mi_value_before": "43.61", "mi_value_after": "41.92", "Nloc_before": "48", "Nloc_after": "54", "AvgCCN_before": "7.0", "AvgCCN_after": "9.0"}}