{"file_id": "HumanEval_95", "source_file": "/home/yang/Benchmark/dataset/HumanEval/code//HumanEval_95.py", "target_file": "reasoning_transformation/HumanEval/fd66c3516bce230e83be1a538494feffb88dbb6f/Transformation/HumanEval_95.py", "evaluation_tests_dir": "/home/yang/Benchmark/dataset/HumanEval/", "single_rule": null, "genetic_algorithm": null, "patch_path": "reasoning_transformation/HumanEval/fd66c3516bce230e83be1a538494feffb88dbb6f/Transformation/HumanEval_95.patch", "applicable_rules": ["change_var_names", "add_nested_for_out", "add_nested_if", "add_try_except_inside_functions", "add_else_to_for", "add_nested_list", "transform_range_to_recursion", "add_decorator", "add_datetime", "add_time", "add_crypto", "add_sklearn", "add_http", "add_scipy", "add_base64", "add_dateutil"], "exception": null, "total_time": 4.808108, "test_results_before": ["tests_pass"], "test_results_after": ["tests_pass"], "diff_output": "reasoning_transformation/HumanEval/fd66c3516bce230e83be1a538494feffb88dbb6f/Transformation/HumanEval_95.patch", "original_code": "def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower\n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if len(dict.keys()) == 0:\n        return False\n    else:\n        state = 'start'\n        for key in dict.keys():\n            if isinstance(key, str) == False:\n                state = 'mixed'\n                break\n            if state == 'start':\n                if key.isupper():\n                    state = 'upper'\n                elif key.islower():\n                    state = 'lower'\n                else:\n                    break\n            elif state == 'upper' and (not key.isupper()) or (state == 'lower' and (not key.islower())):\n                state = 'mixed'\n                break\n            else:\n                break\n        return state == 'upper' or state == 'lower'", "transformed_code": "from dateutil.parser import parse\nimport base64\nfrom scipy.stats import ttest_ind\nfrom http.client import HTTPConnection\nfrom sklearn.utils import shuffle\nfrom cryptography.fernet import Fernet\nimport time\nimport datetime\n\ndef my_decorator(func):\n    time.sleep(0.15)\n    Fernet.generate_key()\n    ttest_ind([60, 31, 30], [20, 9, 25])\n    parse('2024-10-13 00:27:18')\n    HTTPConnection('google.com', port=80)\n\n    def dec_result(*args, **kwargs):\n        res = func(*args, **kwargs)\n        return res\n    return dec_result\nLoopChecker117 = [277][0]\nLoopChecker217 = 276\n\n@my_decorator\ndef check_dict_case(dict):\n    shuffle([51, 56, 64])\n    base64.b64encode(b'61072337864563400884')\n    datetime.datetime.now()\n    try:\n        '\\n    Given a dictionary, return True if all keys are strings in lower\\n    case or all keys are strings in upper case, else return False.\\n    The function should return False is the given dictionary is empty.\\n    Examples:\\n    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\\n    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\\n    check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\\n    check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\\n    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\\n    '\n        ConditionChecker122 = 117\n        ConditionChecker222 = 718\n        if len(dict.keys()) == 0:\n            return False\n        else:\n            state = 'start'\n\n            def loop_13_12(LoopIndexOut, stop, step):\n                nonlocal state\n                if step == 0 or (step > 0 and LoopIndexOut >= stop) or (step < 0 and LoopIndexOut <= stop):\n                    return\n                for newkey_1 in dict.keys():\n                    if ConditionChecker122 & ConditionChecker222:\n                        if isinstance(newkey_1, str) == False:\n                            state = 'mixed'\n                            break\n                    if state == 'start':\n                        if newkey_1.isupper():\n                            state = 'upper'\n                        elif newkey_1.islower():\n                            state = 'lower'\n                        else:\n                            break\n                    elif state == 'upper' and (not newkey_1.isupper()) or (state == 'lower' and (not newkey_1.islower())):\n                        state = 'mixed'\n                        break\n                    else:\n                        break\n                loop_13_12(LoopIndexOut + step, stop, step)\n            loop_13_12(0, LoopChecker117 // LoopChecker217, 1)\n            return state == 'upper' or state == 'lower'\n    except:\n        pass"}