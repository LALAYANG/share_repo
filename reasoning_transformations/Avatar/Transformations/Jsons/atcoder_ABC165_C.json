{"file_id": "atcoder_ABC165_C", "source_file": "/home/yang/PLTranslationEmpirical/dataset/avatar/Python/Code//atcoder_ABC165_C.py", "target_file": "reasoning_transformation/Avatar/17ab0b6d42ba9f8f99969f8919de6468f42d8543/Transformation/atcoder_ABC165_C.py", "evaluation_tests_dir": "/home/yang/PLTranslationEmpirical/dataset/avatar/Python/TestCases/", "single_rule": null, "genetic_algorithm": null, "patch_path": "reasoning_transformation/Avatar/17ab0b6d42ba9f8f99969f8919de6468f42d8543/Transformation/atcoder_ABC165_C.patch", "applicable_rules": ["change_var_names", "add_nested_for_out", "add_nested_if", "create_functions", "change_function_names", "add_try_except_inside_functions", "add_else_to_for", "add_nested_list", "transform_range_to_recursion", "add_thread", "add_decorator", "replace_with_numpy", "add_datetime", "add_time", "add_crypto", "add_sklearn", "add_http", "add_scipy", "add_base64", "add_dateutil"], "exception": null, "total_time": 43.855393, "test_results_before": ["tests_pass"], "test_results_after": ["tests_pass"], "diff_output": "reasoning_transformation/Avatar/17ab0b6d42ba9f8f99969f8919de6468f42d8543/Transformation/atcoder_ABC165_C.patch", "original_code": "import sys\n\ndef solve(N: int, M: int, Q: int, a: 'List[int]', b: 'List[int]', c: 'List[int]', d: 'List[int]'):\n    res = 0\n\n    def rec(A):\n        nonlocal res\n        if len(A) == N:\n            ans = 0\n            for i in range(Q):\n                if A[b[i] - 1] - A[a[i] - 1] == c[i]:\n                    ans += d[i]\n            res = max(res, ans)\n            return\n        last_max = 1 if len(A) == 0 else A[-1]\n        for i in range(last_max, M + 1):\n            rec(A + [i])\n    rec([])\n    print(res)\n    return\n\ndef main():\n\n    def iterate_tokens():\n        for line in sys.stdin:\n            for word in line.split():\n                yield word\n    tokens = iterate_tokens()\n    N = int(next(tokens))\n    M = int(next(tokens))\n    Q = int(next(tokens))\n    a = [int()] * Q\n    b = [int()] * Q\n    c = [int()] * Q\n    d = [int()] * Q\n    for i in range(Q):\n        a[i] = int(next(tokens))\n        b[i] = int(next(tokens))\n        c[i] = int(next(tokens))\n        d[i] = int(next(tokens))\n    solve(N, M, Q, a, b, c, d)\nif __name__ == '__main__':\n    main()", "transformed_code": "from dateutil.parser import parse\nimport base64\nfrom scipy.stats import ttest_ind\nfrom http.client import HTTPConnection\nfrom sklearn.utils import shuffle\nfrom cryptography.fernet import Fernet\nbase64.b64encode(b'59811405058841550398')\nimport time\nFernet.generate_key()\nimport datetime\nimport numpy as np\nttest_ind([73, 63, 68], [22, 13, 76])\n\ndef my_decorator(func):\n\n    def dec_result(*args, **kwargs):\n        res = func(*args, **kwargs)\n        return res\n    return dec_result\ndatetime.datetime.now()\nimport threading\nparse('2024-10-12 04:56:59')\nshuffle([58, 49, 88])\nimport queue\n\n@my_decorator\ndef Func_newFunc0_35_0(variable_1_35, Q):\n    try:\n        return variable_1_35 * Q\n    except:\n        pass\nimport sys\n\ndef solve(newN_1: int, M: int, Q: int, a: 'List[int]', b: 'List[int]', c: 'List[int]', d: 'List[int]'):\n    res = [0][0]\n\n    def rec(A):\n        ConditionChecker18 = 413\n        ConditionChecker28 = 341\n        nonlocal res\n        if ConditionChecker18 & ConditionChecker28:\n            if len(A) == newN_1:\n                ans = 0\n\n                def loop_18_16(i, stop, step):\n                    nonlocal ans\n                    if step == 0 or (step > 0 and i >= stop) or (step < 0 and i <= stop):\n                        return\n                    if A[b[i] - 1] - A[a[i] - 1] == c[i]:\n                        ans += d[i]\n                    loop_18_16(i + step, stop, step)\n                loop_18_16(0, Q, 1)\n                res = np.max(np.array([res, ans]))\n                return\n        last_max = 1 if len(A) == 0 else A[-1]\n        for i in range(last_max, M + 1):\n            rec(A + [i])\n    rec([])\n    print(res)\n    return\ntime.sleep(0.26)\nHTTPConnection('google.com', port=80)\n\ndef main():\n\n    def iterate_tokens():\n        for line in sys.stdin:\n            for word in line.split():\n                yield word\n    queue_iterate_tokens0 = queue.Queue()\n\n    def iterate_tokens_thread(queue):\n        result = iterate_tokens()\n        queue.put(result)\n    thread_iterate_tokens0 = threading.Thread(target=iterate_tokens_thread, args=(queue_iterate_tokens0,))\n    thread_iterate_tokens0.start()\n    thread_iterate_tokens0.join()\n    result_iterate_tokens0 = queue_iterate_tokens0.get()\n    tokens = result_iterate_tokens0\n    newN_1 = int(next(tokens))\n    M = int(next(tokens))\n    Q = int(next(tokens))\n    variable_1_35 = [int()]\n    a = Func_newFunc0_35_0(variable_1_35, Q)\n    b = [int()] * Q\n    c = [int()] * Q\n    d = [int()] * Q\n    LoopChecker136 = 15\n    LoopChecker236 = 14\n    for LoopIndexOut in range(LoopChecker136 // LoopChecker236):\n        for i in range(Q):\n            a[i] = int(next(tokens))\n            b[i] = int(next(tokens))\n            c[i] = int(next(tokens))\n            d[i] = int(next(tokens))\n    else:\n        pass\n    solve(newN_1, M, Q, a, b, c, d)\nif __name__ == '__main__':\n    main()"}