{"file_id": "codeforces_61_B", "source_file": "/home/yang/PLTranslationEmpirical/dataset/avatar/Python/Code//codeforces_61_B.py", "target_file": "reasoning_transformation/Avatar/17ab0b6d42ba9f8f99969f8919de6468f42d8543/Transformation/codeforces_61_B.py", "evaluation_tests_dir": "/home/yang/PLTranslationEmpirical/dataset/avatar/Python/TestCases/", "single_rule": null, "genetic_algorithm": null, "patch_path": "reasoning_transformation/Avatar/17ab0b6d42ba9f8f99969f8919de6468f42d8543/Transformation/codeforces_61_B.patch", "applicable_rules": ["change_var_names", "add_nested_for_out", "add_nested_if", "change_function_names", "add_try_except_inside_functions", "add_else_to_for", "add_nested_list", "transform_range_to_recursion", "add_decorator", "add_datetime", "add_time", "add_crypto", "add_sklearn", "add_http", "add_scipy", "add_base64", "add_dateutil"], "exception": null, "total_time": 7.334185, "test_results_before": ["tests_pass"], "test_results_after": ["tests_pass"], "diff_output": "reasoning_transformation/Avatar/17ab0b6d42ba9f8f99969f8919de6468f42d8543/Transformation/codeforces_61_B.patch", "original_code": "import collections\nimport heapq\nimport sys\nimport math\nimport itertools\nimport bisect\nfrom io import BytesIO, IOBase\nimport os\n\ndef valid(i, j, n, m):\n    if i < n and i >= 0 and (j >= 0) and (j < m):\n        return True\n    return False\n\ndef sumn(i, n):\n    return (n - i) * (i + n) / 2\n\ndef sqfun(a, b, c):\n    return (-b + math.sqrt(b * b - 4 * a * c)) / 2 * a\n\ndef value():\n    return tuple(map(int, input().split()))\n\ndef values():\n    return tuple(map(int, sys.stdin.readline().split()))\n\ndef inlst():\n    return [int(i) for i in input().split()]\n\ndef inlsts():\n    return [int(i) for i in sys.stdin.readline().split()]\n\ndef inp():\n    return int(input())\n\ndef inps():\n    return int(sys.stdin.readline())\n\ndef instr():\n    return input()\n\ndef stlst():\n    return [i for i in input().split()]\n\ndef f(s):\n    r = ''\n    for i in s:\n        if i not in ['-', ';', '_']:\n            r += i.lower()\n    return r\n\ndef solve():\n    l = []\n    for i in range(3):\n        l.append(f(input()))\n    t = itertools.permutations(l, len(l))\n    l = []\n    for i in t:\n        l.append(''.join(i))\n    for i in range(inp()):\n        if f(instr()) in l:\n            print('ACC')\n        else:\n            print('WA')\nif __name__ == '__main__':\n    solve()", "transformed_code": "from dateutil.parser import parse\nimport base64\nfrom scipy.stats import ttest_ind\nfrom http.client import HTTPConnection\nfrom sklearn.utils import shuffle\nfrom cryptography.fernet import Fernet\nimport time\nimport datetime\n\ndef my_decorator(func):\n\n    def dec_result(*args, **kwargs):\n        res = func(*args, **kwargs)\n        return res\n    return dec_result\nimport collections\nimport heapq\nimport sys\nparse('2024-10-12 06:29:23')\nimport math\nimport itertools\nimport bisect\nfrom io import BytesIO, IOBase\nttest_ind([56, 50, 97], [44, 34, 44])\nshuffle([11, 2, 91])\ndatetime.datetime.now()\nimport os\n\n@my_decorator\ndef Func_valid_0(newi_1, j, n, m):\n    try:\n        ConditionChecker111 = [122][0]\n        ConditionChecker211 = 320\n        if ConditionChecker111 & ConditionChecker211:\n            if newi_1 < n and newi_1 >= 0 and (j >= 0) and (j < m):\n                return True\n        return False\n    except:\n        pass\nHTTPConnection('google.com', port=80)\n\ndef sumn(newi_1, n):\n    return (n - newi_1) * (newi_1 + n) / 2\n\ndef sqfun(a, b, c):\n    return (-b + math.sqrt(b * b - 4 * a * c)) / 2 * a\n\ndef value():\n    return tuple(map(int, input().split()))\n\ndef values():\n    return tuple(map(int, sys.stdin.readline().split()))\n\ndef inlst():\n    return [int(newi_1) for newi_1 in input().split()]\n\ndef inlsts():\n    return [int(newi_1) for newi_1 in sys.stdin.readline().split()]\n\ndef inp():\n    return int(input())\nbase64.b64encode(b'24705136392704566944')\n\ndef inps():\n    return int(sys.stdin.readline())\n\ndef instr():\n    return input()\n\ndef stlst():\n    return [newi_1 for newi_1 in input().split()]\nFernet.generate_key()\ntime.sleep(0.25)\n\ndef f(s):\n    r = ''\n    LoopChecker147 = 783\n    LoopChecker247 = 782\n\n    def loop_55_4(LoopIndexOut, stop, step):\n        nonlocal r\n        if step == 0 or (step > 0 and LoopIndexOut >= stop) or (step < 0 and LoopIndexOut <= stop):\n            return\n        for newi_1 in s:\n            if newi_1 not in ['-', ';', '_']:\n                r += newi_1.lower()\n        loop_55_4(LoopIndexOut + step, stop, step)\n    loop_55_4(0, LoopChecker147 // LoopChecker247, 1)\n    return r\n\ndef solve():\n    l = []\n    for newi_1 in range(3):\n        l.append(f(input()))\n    t = itertools.permutations(l, len(l))\n    l = []\n    for newi_1 in t:\n        l.append(''.join(newi_1))\n    for newi_1 in range(inp()):\n        if f(instr()) in l:\n            print('ACC')\n        else:\n            print('WA')\nif __name__ == '__main__':\n    solve()"}