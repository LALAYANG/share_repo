{"file_id": "atcoder_ABC107_C", "source_file": "/home/yang/PLTranslationEmpirical/dataset/avatar/Python/Code//atcoder_ABC107_C.py", "target_file": "reasoning_transformation/Avatar/17ab0b6d42ba9f8f99969f8919de6468f42d8543/Transformation/atcoder_ABC107_C.py", "evaluation_tests_dir": "/home/yang/PLTranslationEmpirical/dataset/avatar/Python/TestCases/", "single_rule": null, "genetic_algorithm": null, "patch_path": "reasoning_transformation/Avatar/17ab0b6d42ba9f8f99969f8919de6468f42d8543/Transformation/atcoder_ABC107_C.patch", "applicable_rules": ["change_var_names", "add_nested_for_out", "add_nested_if", "create_functions", "change_function_names", "add_try_except_inside_functions", "add_else_to_for", "add_nested_list", "add_thread", "add_decorator", "add_datetime", "add_time", "add_crypto", "add_sklearn", "add_http", "add_scipy", "add_base64", "add_dateutil", "changing_AugAssign"], "exception": null, "total_time": 12.234232, "test_results_before": ["tests_pass"], "test_results_after": ["tests_pass"], "diff_output": "reasoning_transformation/Avatar/17ab0b6d42ba9f8f99969f8919de6468f42d8543/Transformation/atcoder_ABC107_C.patch", "original_code": "import sys\n(N, K) = map(int, input().split())\nlst = list(map(int, input().split()))\nlst_p = []\nlst_m = []\nfor i in range(N):\n    if lst[i] == 0:\n        K -= 1\n    if lst[i] > 0:\n        lst_p += [lst[i]]\n    elif lst[i] < 0:\n        lst_m += [lst[i]]\np = 0\nm = 0\n(x, y) = (0, len(lst_m) - 1)\nlastx = len(lst_p)\nlasty = len(lst_m)\n\ndef check(k):\n    ans = 10 ** 9\n    for j in range(0, k + 1):\n        if j > lastx or k - j > lasty:\n            pass\n        else:\n            if j == 0:\n                p = 0\n            else:\n                p = lst_p[j - 1]\n            if k - j == 0:\n                m = 0\n            else:\n                m = lst_m[lasty - (k - j)]\n            ans = min(ans, 2 * p + abs(m), p + 2 * abs(m))\n    return ans\nprint(check(K))", "transformed_code": "from dateutil.parser import parse\nimport base64\nfrom scipy.stats import ttest_ind\nfrom http.client import HTTPConnection\nfrom sklearn.utils import shuffle\nbase64.b64encode(b'66045388261040625462')\nfrom cryptography.fernet import Fernet\nimport time\nimport datetime\ndatetime.datetime.now()\n\ndef my_decorator(func):\n\n    def dec_result(*args, **kwargs):\n        res = func(*args, **kwargs)\n        return res\n    return dec_result\nimport threading\nimport queue\ntime.sleep(0.02)\n\n@my_decorator\ndef Func_newFunc0_26_0(variable_1_26, variable_3_26):\n    try:\n        return variable_1_26 ** variable_3_26\n    except:\n        pass\nimport sys\nttest_ind([21, 6, 70], [67, 33, 94])\n(N, K) = map(int, input().split())\nnewlst_1 = list(map(int, input().split()))\nlst_p = [[]][0]\nlst_m = []\nFernet.generate_key()\nLoopChecker16 = 226\nLoopChecker26 = 225\nparse('2024-10-12 01:42:59')\nConditionChecker110 = 253\nConditionChecker210 = 655\nfor LoopIndexOut in range(LoopChecker16 // LoopChecker26):\n    for i in range(N):\n        if ConditionChecker110 & ConditionChecker210:\n            if newlst_1[i] == 0:\n                K = K - 1\n        if newlst_1[i] > 0:\n            lst_p += [newlst_1[i]]\n        elif newlst_1[i] < 0:\n            lst_m += [newlst_1[i]]\nelse:\n    pass\nshuffle([51, 4, 89])\np = 0\nm = 0\n(x, y) = (0, len(lst_m) - 1)\nlastx = len(lst_p)\nHTTPConnection('google.com', port=80)\nlasty = len(lst_m)\n\ndef check(k):\n    variable_1_26 = 10\n    variable_3_26 = 9\n    queue_Func_newFunc0_26_00 = queue.Queue()\n\n    def Func_newFunc0_26_0_thread(queue):\n        result = Func_newFunc0_26_0(variable_1_26, variable_3_26)\n        queue.put(result)\n    thread_Func_newFunc0_26_00 = threading.Thread(target=Func_newFunc0_26_0_thread, args=(queue_Func_newFunc0_26_00,))\n    thread_Func_newFunc0_26_00.start()\n    thread_Func_newFunc0_26_00.join()\n    result_Func_newFunc0_26_00 = queue_Func_newFunc0_26_00.get()\n    ans = result_Func_newFunc0_26_00\n    for j in range(0, k + 1):\n        if j > lastx or k - j > lasty:\n            pass\n        else:\n            if j == 0:\n                p = 0\n            else:\n                p = lst_p[j - 1]\n            if k - j == 0:\n                m = 0\n            else:\n                m = lst_m[lasty - (k - j)]\n            ans = min(ans, 2 * p + abs(m), p + 2 * abs(m))\n    return ans\nprint(check(K))"}