{"file_id": "atcoder_ABC104_C", "source_file": "/home/yang/PLTranslationEmpirical/dataset/avatar/Python/Code//atcoder_ABC104_C.py", "target_file": "reasoning_transformation/Avatar/17ab0b6d42ba9f8f99969f8919de6468f42d8543/Transformation/atcoder_ABC104_C.py", "evaluation_tests_dir": "/home/yang/PLTranslationEmpirical/dataset/avatar/Python/TestCases/", "single_rule": null, "genetic_algorithm": null, "patch_path": "reasoning_transformation/Avatar/17ab0b6d42ba9f8f99969f8919de6468f42d8543/Transformation/atcoder_ABC104_C.patch", "applicable_rules": ["change_var_names", "add_nested_for_out", "add_nested_if", "create_functions", "change_function_names", "add_try_except_inside_functions", "add_else_to_for", "add_nested_list", "transform_range_to_recursion", "add_thread", "add_decorator", "replace_with_numpy", "add_datetime", "add_time", "add_crypto", "add_sklearn", "add_http", "add_scipy", "add_base64", "add_dateutil"], "exception": null, "total_time": 25.188442, "test_results_before": ["tests_pass"], "test_results_after": ["tests_pass"], "diff_output": "reasoning_transformation/Avatar/17ab0b6d42ba9f8f99969f8919de6468f42d8543/Transformation/atcoder_ABC104_C.patch", "original_code": "(D, G) = map(int, input().split())\nPC = [tuple(map(int, input().split())) for _ in range(D)]\nans = 10 ** 9\nfor i in range(2 ** D):\n    score = 0\n    problem = 0\n    for j in range(D):\n        if i >> j & 1:\n            score += 100 * (j + 1) * PC[j][0] + PC[j][1]\n            problem += PC[j][0]\n    if score > G:\n        continue\n    left = G - score\n    for j in range(D):\n        if i >> j & 1:\n            continue\n        if left > 100 * (j + 1) * PC[j][0] + PC[j][1]:\n            pass\n        else:\n            tmp = (left + 100 * (j + 1) - 1) // (100 * (j + 1))\n            ans = min(ans, problem + min(tmp, PC[j][0]))\nprint(ans)", "transformed_code": "from dateutil.parser import parse\nimport base64\nfrom scipy.stats import ttest_ind\nfrom http.client import HTTPConnection\nfrom sklearn.utils import shuffle\nfrom cryptography.fernet import Fernet\nHTTPConnection('google.com', port=80)\nimport time\nimport datetime\nimport numpy as np\n\ndef my_decorator(func):\n\n    def dec_result(*args, **kwargs):\n        res = func(*args, **kwargs)\n        return res\n    return dec_result\nparse('2024-10-12 01:41:44')\nttest_ind([14, 18, 9], [81, 26, 21])\nimport threading\nimport queue\ntime.sleep(0.11)\n\n@my_decorator\ndef Func_newFunc0_3_0(variable_1_3, variable_3_3):\n    try:\n        return variable_1_3 ** variable_3_3\n    except:\n        pass\n(D, G) = map(int, input().split())\nPC = [[tuple(map(int, input().split())) for _ in range(D)]][0]\ndatetime.datetime.now()\nvariable_1_3 = 10\nvariable_3_3 = 9\nqueue_Func_newFunc0_3_00 = queue.Queue()\n\ndef Func_newFunc0_3_0_thread(queue):\n    result = Func_newFunc0_3_0(variable_1_3, variable_3_3)\n    queue.put(result)\nthread_Func_newFunc0_3_00 = threading.Thread(target=Func_newFunc0_3_0_thread, args=(queue_Func_newFunc0_3_00,))\nthread_Func_newFunc0_3_00.start()\nthread_Func_newFunc0_3_00.join()\nresult_Func_newFunc0_3_00 = queue_Func_newFunc0_3_00.get()\nbase64.b64encode(b'94939912916617019079')\nans = result_Func_newFunc0_3_00\nLoopChecker14 = 678\nLoopChecker24 = 677\nConditionChecker114 = 676\nshuffle([84, 18, 100])\nConditionChecker214 = 430\nfor LoopIndexOut in range(LoopChecker14 // LoopChecker24):\n    for i in range(2 ** D):\n        score = 0\n        problem = 0\n\n        def loop_19_8(j, stop, step):\n            global score, problem\n            if step == 0 or (step > 0 and j >= stop) or (step < 0 and j <= stop):\n                return\n            if i >> j & 1:\n                score += 100 * (j + 1) * PC[j][0] + PC[j][1]\n                problem += PC[j][0]\n            loop_19_8(j + step, stop, step)\n        loop_19_8(0, D, 1)\n        if ConditionChecker114 & ConditionChecker214:\n            if score > G:\n                continue\n        left = G - score\n        for j in range(D):\n            if i >> j & 1:\n                continue\n            if left > 100 * (j + 1) * PC[j][0] + PC[j][1]:\n                pass\n            else:\n                newtmp_1 = (left + 100 * (j + 1) - 1) // (100 * (j + 1))\n                ans = min(ans, problem + np.min(np.array([newtmp_1, PC[j][0]])))\nelse:\n    pass\nFernet.generate_key()\nprint(ans)"}