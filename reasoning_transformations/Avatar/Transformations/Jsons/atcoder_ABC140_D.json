{"file_id": "atcoder_ABC140_D", "source_file": "/home/yang/PLTranslationEmpirical/dataset/avatar/Python/Code//atcoder_ABC140_D.py", "target_file": "reasoning_transformation/Avatar/17ab0b6d42ba9f8f99969f8919de6468f42d8543/Transformation/atcoder_ABC140_D.py", "evaluation_tests_dir": "/home/yang/PLTranslationEmpirical/dataset/avatar/Python/TestCases/", "single_rule": null, "genetic_algorithm": null, "patch_path": "reasoning_transformation/Avatar/17ab0b6d42ba9f8f99969f8919de6468f42d8543/Transformation/atcoder_ABC140_D.patch", "applicable_rules": ["change_var_names", "add_nested_for_out", "add_nested_while_out", "add_nested_if", "create_functions", "change_function_names", "add_try_except_inside_functions", "add_else_to_for", "add_else_to_while", "add_nested_list", "add_thread", "add_decorator", "add_datetime", "add_time", "add_crypto", "add_sklearn", "add_http", "add_scipy", "add_base64", "add_dateutil", "changing_AugAssign"], "exception": null, "total_time": 42.525509, "test_results_before": ["tests_pass"], "test_results_after": ["tests_pass"], "diff_output": "reasoning_transformation/Avatar/17ab0b6d42ba9f8f99969f8919de6468f42d8543/Transformation/atcoder_ABC140_D.patch", "original_code": "from _collections import deque\n\ndef parser():\n    while 1:\n        data = list(input().split(' '))\n        for number in data:\n            if len(number) > 0:\n                yield number\ninput_parser = parser()\n\ndef gw():\n    global input_parser\n    return next(input_parser)\n\ndef gi():\n    data = gw()\n    return int(data)\nMOD = int(1000000000.0 + 7)\nimport numpy\nimport scipy\nfrom collections import deque\nN = gi()\nK = gi()\nS = gw()\nseg_cnt = 0\nfor i in range(0, N - 1):\n    if S[i] != S[i + 1]:\n        seg_cnt += 1\ncur_happy = N - 1 - seg_cnt\nif 2 * K >= seg_cnt:\n    ans = N - 1\nelse:\n    ans = cur_happy + 2 * K\nprint(ans)", "transformed_code": "from dateutil.parser import parse\nimport base64\nfrom scipy.stats import ttest_ind\nfrom http.client import HTTPConnection\nfrom sklearn.utils import shuffle\nfrom cryptography.fernet import Fernet\nimport time\nparse('2024-10-12 02:12:36')\nimport datetime\n\ndef my_decorator(func):\n\n    def dec_result(*args, **kwargs):\n        res = func(*args, **kwargs)\n        return res\n    return dec_result\nimport threading\nimport queue\n\n@my_decorator\ndef Func_newFunc0_38_0(variable_6_38, seg_cnt, N):\n    try:\n        return N - variable_6_38 - seg_cnt\n    except:\n        pass\nConditionChecker137 = [508][0]\nConditionChecker237 = 319\nFernet.generate_key()\nfrom _collections import deque\nshuffle([89, 28, 22])\n\ndef parser():\n    whileloopchecker14 = 372\n    whileloopchecker24 = 371\n    while whileloopchecker14 % whileloopchecker24 == 1:\n        whileloopchecker14 = whileloopchecker14 + 1\n        while 1:\n            newdata_1 = list(input().split(' '))\n            for number in newdata_1:\n                if len(number) > 0:\n                    yield number\n    else:\n        pass\nqueue_parser0 = queue.Queue()\n\ndef parser_thread(queue):\n    result = parser()\n    queue.put(result)\nbase64.b64encode(b'72730507359431654278')\nthread_parser0 = threading.Thread(target=parser_thread, args=(queue_parser0,))\nthread_parser0.start()\nthread_parser0.join()\nresult_parser0 = queue_parser0.get()\nttest_ind([55, 18, 32], [47, 98, 48])\ndatetime.datetime.now()\ninput_parser = result_parser0\ntime.sleep(0.09)\n\ndef gw():\n    global input_parser\n    return next(input_parser)\n\ndef gi():\n    newdata_1 = gw()\n    return int(newdata_1)\nMOD = int(1000000000.0 + 7)\nimport numpy\nimport scipy\nfrom collections import deque\nN = gi()\nK = gi()\nS = gw()\nseg_cnt = 0\nLoopChecker126 = 682\nHTTPConnection('google.com', port=80)\nLoopChecker226 = 681\nfor LoopIndexOut in range(LoopChecker126 // LoopChecker226):\n    for i in range(0, N - 1):\n        if S[i] != S[i + 1]:\n            seg_cnt += 1\nelse:\n    pass\nvariable_6_38 = 1\ncur_happy = Func_newFunc0_38_0(variable_6_38, seg_cnt, N)\nif ConditionChecker137 & ConditionChecker237:\n    if 2 * K >= seg_cnt:\n        ans = N - 1\n    else:\n        ans = cur_happy + 2 * K\nprint(ans)"}