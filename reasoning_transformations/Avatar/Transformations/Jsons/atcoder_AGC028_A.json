{"file_id": "atcoder_AGC028_A", "source_file": "/home/yang/PLTranslationEmpirical/dataset/avatar/Python/Code//atcoder_AGC028_A.py", "target_file": "reasoning_transformation/Avatar/17ab0b6d42ba9f8f99969f8919de6468f42d8543/Transformation/atcoder_AGC028_A.py", "evaluation_tests_dir": "/home/yang/PLTranslationEmpirical/dataset/avatar/Python/TestCases/", "single_rule": null, "genetic_algorithm": null, "patch_path": "reasoning_transformation/Avatar/17ab0b6d42ba9f8f99969f8919de6468f42d8543/Transformation/atcoder_AGC028_A.patch", "applicable_rules": ["change_var_names", "add_nested_for_out", "add_nested_while_out", "add_nested_if", "change_function_names", "add_try_except_inside_functions", "add_else_to_for", "add_else_to_while", "add_nested_list", "transform_range_to_recursion", "add_decorator", "add_datetime", "add_time", "add_crypto", "add_sklearn", "add_http", "add_scipy", "add_base64", "add_dateutil", "changing_AugAssign"], "exception": null, "total_time": 19.867721, "test_results_before": ["tests_pass"], "test_results_after": ["tests_pass"], "diff_output": "reasoning_transformation/Avatar/17ab0b6d42ba9f8f99969f8919de6468f42d8543/Transformation/atcoder_AGC028_A.patch", "original_code": "(N, M) = map(int, input().split())\nS = input()\nT = input()\nlist_S = list(S)\nlist_T = list(T)\nNumber_i = [i for i in range(N)]\nNumber_iMN = []\nfor i in Number_i:\n    Number_iMN.append(i * M / N)\nNumber_j = [j for j in range(M)]\nKaburi_j = list(set(Number_iMN) & set(Number_j))\nKaburi_i = []\nfor j in Kaburi_j:\n    Kaburi_i.append(int(j * N / M))\ncounter = 0\nFlag = 0\nKaburi_Size = len(Kaburi_i)\nwhile counter <= Kaburi_Size - 1:\n    if list_S[int(Kaburi_i[counter])] == list_T[int(Kaburi_j[counter])]:\n        pass\n    else:\n        Flag = 1\n        break\n    counter += 1\n\ndef gcd(a, b):\n    while b > 0:\n        (a, b) = (b, a % b)\n    return a\nif Flag == 1:\n    print(-1)\nelse:\n    print(int(N * M / gcd(N, M)))", "transformed_code": "from dateutil.parser import parse\nimport base64\nfrom scipy.stats import ttest_ind\nfrom http.client import HTTPConnection\nfrom sklearn.utils import shuffle\nfrom cryptography.fernet import Fernet\nimport time\nimport datetime\n\ndef my_decorator(func):\n\n    def dec_result(*args, **kwargs):\n        res = func(*args, **kwargs)\n        return res\n    return dec_result\nConditionChecker137 = [646][0]\nttest_ind([36, 13, 51], [84, 39, 5])\nConditionChecker237 = 900\n(N, M) = map(int, input().split())\nparse('2024-10-12 05:41:08')\nS = input()\nT = input()\nlist_S = list(S)\nlist_T = list(T)\nshuffle([94, 18, 68])\nNumber_i = [newi_1 for newi_1 in range(N)]\nNumber_iMN = []\nLoopChecker18 = 614\nFernet.generate_key()\nLoopChecker28 = 613\n\n@my_decorator\ndef loop_12_0(LoopIndexOut, stop, step):\n    if step == 0 or (step > 0 and LoopIndexOut >= stop) or (step < 0 and LoopIndexOut <= stop):\n        return\n    for newi_1 in Number_i:\n        Number_iMN.append(newi_1 * M / N)\n    loop_12_0(LoopIndexOut + step, stop, step)\nbase64.b64encode(b'51842105903512252628')\nloop_12_0(0, LoopChecker18 // LoopChecker28, 1)\nHTTPConnection('google.com', port=80)\nNumber_j = [j for j in range(M)]\nKaburi_j = list(set(Number_iMN) & set(Number_j))\nKaburi_i = []\nfor j in Kaburi_j:\n    Kaburi_i.append(int(j * N / M))\ncounter = 0\ndatetime.datetime.now()\nFlag = 0\nKaburi_Size = len(Kaburi_i)\nwhileloopchecker121 = 428\nwhileloopchecker221 = 427\nwhile whileloopchecker121 % whileloopchecker221 == 1:\n    whileloopchecker121 = whileloopchecker121 + 1\n    while counter <= Kaburi_Size - 1:\n        if list_S[int(Kaburi_i[counter])] == list_T[int(Kaburi_j[counter])]:\n            pass\n        else:\n            Flag = 1\n            break\n        counter += 1\nelse:\n    pass\n\ndef Func_gcd_0(a, b):\n    try:\n        while b > 0:\n            (a, b) = (b, a % b)\n        return a\n    except:\n        pass\ntime.sleep(0.22)\nif ConditionChecker137 & ConditionChecker237:\n    if Flag == 1:\n        print(-1)\n    else:\n        print(int(N * M / Func_gcd_0(N, M)))"}