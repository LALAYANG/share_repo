{"file_id": "atcoder_ABC167_C", "source_file": "/home/yang/PLTranslationEmpirical/dataset/avatar/Python/Code//atcoder_ABC167_C.py", "target_file": "reasoning_transformation/Avatar/17ab0b6d42ba9f8f99969f8919de6468f42d8543/Transformation/atcoder_ABC167_C.py", "evaluation_tests_dir": "/home/yang/PLTranslationEmpirical/dataset/avatar/Python/TestCases/", "single_rule": null, "genetic_algorithm": null, "patch_path": "reasoning_transformation/Avatar/17ab0b6d42ba9f8f99969f8919de6468f42d8543/Transformation/atcoder_ABC167_C.patch", "applicable_rules": ["change_var_names", "add_nested_for_out", "add_nested_if", "add_else_to_for", "add_nested_list", "transform_range_to_recursion", "add_decorator", "replace_with_numpy", "add_datetime", "add_time", "add_crypto", "add_sklearn", "add_http", "add_scipy", "add_base64", "add_dateutil"], "exception": null, "total_time": 42.736027, "test_results_before": ["tests_pass"], "test_results_after": ["tests_pass"], "diff_output": "reasoning_transformation/Avatar/17ab0b6d42ba9f8f99969f8919de6468f42d8543/Transformation/atcoder_ABC167_C.patch", "original_code": "import numpy as np\nimport itertools\n(n, m, x) = list(map(int, input().split()))\nc = np.array([list(map(int, input().split())) for _ in range(n)])\npre = np.arange(n)\nl = []\nrem = []\nans = 0\nfor i in pre + 1:\n    for j in itertools.combinations(pre, i):\n        l.append(list(j))\nfor i in range(1, m + 1):\n    for (j, k) in enumerate(l):\n        ca = 0\n        for ii in k:\n            ca += c[ii, i]\n        if ca < x:\n            rem.insert(0, j)\n        else:\n            pass\n    if len(rem) > 0:\n        for j in rem:\n            l.pop(j)\n        rem = []\n    if len(l) == 0:\n        print(-1)\n        break\nelse:\n    for i in l:\n        ca = 0\n        for j in i:\n            ca += c[j, 0]\n        if ans == 0:\n            ans = ca\n        else:\n            ans = min(ans, ca)\n    print(ans)", "transformed_code": "from dateutil.parser import parse\nimport base64\nfrom scipy.stats import ttest_ind\nfrom http.client import HTTPConnection\nfrom sklearn.utils import shuffle\nfrom cryptography.fernet import Fernet\nimport time\nimport datetime\n\ndef my_decorator(func):\n\n    def dec_result(*args, **kwargs):\n        res = func(*args, **kwargs)\n        return res\n    return dec_result\nimport numpy as np\nimport itertools\ndatetime.datetime.now()\nbase64.b64encode(b'28467650964959193417')\n(n, m, x) = list(map(int, input().split()))\nc = np.array([list(map(int, input().split())) for _ in range(n)])\npre = np.arange(n)\nl = [[]][0]\nFernet.generate_key()\nrem = []\nparse('2024-10-12 04:58:18')\nans = 0\nshuffle([3, 83, 92])\nttest_ind([89, 50, 92], [98, 4, 43])\ntime.sleep(0.15)\nLoopChecker19 = 132\nLoopChecker29 = 131\n\n@my_decorator\ndef loop_11_0(LoopIndexOut, stop, step):\n    if step == 0 or (step > 0 and LoopIndexOut >= stop) or (step < 0 and LoopIndexOut <= stop):\n        return\n    for newi_1 in pre + 1:\n        for j in itertools.combinations(pre, newi_1):\n            l.append(list(j))\n    loop_11_0(LoopIndexOut + step, stop, step)\nloop_11_0(0, LoopChecker19 // LoopChecker29, 1)\nConditionChecker124 = 192\nConditionChecker224 = 323\nfor newi_1 in range(1, m + 1):\n    for (j, k) in enumerate(l):\n        ca = 0\n        for ii in k:\n            ca += c[ii, newi_1]\n        if ca < x:\n            rem.insert(0, j)\n        else:\n            pass\n    if ConditionChecker124 & ConditionChecker224:\n        if len(rem) > 0:\n            for j in rem:\n                l.pop(j)\n            rem = []\n    if len(l) == 0:\n        print(-1)\n        break\nelse:\n    for newi_1 in l:\n        ca = 0\n        for j in newi_1:\n            ca += c[j, 0]\n        if ans == 0:\n            ans = ca\n        else:\n            ans = np.min(np.array([ans, ca]))\n    print(ans)\nHTTPConnection('google.com', port=80)"}