{"file_id": "atcoder_ABC143_D", "source_file": "/home/yang/PLTranslationEmpirical/dataset/avatar/Python/Code//atcoder_ABC143_D.py", "target_file": "reasoning_transformation/Avatar/17ab0b6d42ba9f8f99969f8919de6468f42d8543/Transformation/atcoder_ABC143_D.py", "evaluation_tests_dir": "/home/yang/PLTranslationEmpirical/dataset/avatar/Python/TestCases/", "single_rule": null, "genetic_algorithm": null, "patch_path": "reasoning_transformation/Avatar/17ab0b6d42ba9f8f99969f8919de6468f42d8543/Transformation/atcoder_ABC143_D.patch", "applicable_rules": ["change_var_names", "add_nested_for_out", "add_nested_if", "add_else_to_for", "add_nested_list", "replace_with_numpy", "add_datetime", "add_time", "add_crypto", "add_sklearn", "add_http", "add_scipy", "add_base64", "add_dateutil", "changing_AugAssign"], "exception": null, "total_time": 282.471297, "test_results_before": ["tests_pass"], "test_results_after": ["tests_pass"], "diff_output": "reasoning_transformation/Avatar/17ab0b6d42ba9f8f99969f8919de6468f42d8543/Transformation/atcoder_ABC143_D.patch", "original_code": "from bisect import bisect_right, bisect_left\n(n, *l) = map(int, open(0).read().split())\nl.sort()\nans = 0\nfor i in range(n):\n    for j in range(i + 1, n):\n        a = l[i]\n        b = l[j]\n        right = bisect_left(l, a + b)\n        left = bisect_right(l, max(a - b, b - a))\n        tmp = max(0, right - left)\n        if left <= i < right:\n            tmp -= 1\n        if left <= j < right:\n            tmp -= 1\n        ans += tmp\nprint(ans // 3)", "transformed_code": "from dateutil.parser import parse\nimport base64\nfrom scipy.stats import ttest_ind\nfrom http.client import HTTPConnection\nfrom sklearn.utils import shuffle\nfrom cryptography.fernet import Fernet\nimport time\nbase64.b64encode(b'46065751046513831021')\nHTTPConnection('google.com', port=80)\nimport datetime\nimport numpy as np\n\ndef my_decorator(func):\n\n    def dec_result(*args, **kwargs):\n        res = func(*args, **kwargs)\n        return res\n    return dec_result\nfrom bisect import bisect_right, bisect_left\n(n, *l) = map(int, open(0).read().split())\nttest_ind([71, 13, 21], [33, 24, 52])\nl.sort()\ndatetime.datetime.now()\nshuffle([61, 56, 75])\nans = [0][0]\nLoopChecker15 = 888\nparse('2024-10-12 02:17:47')\nLoopChecker25 = 887\nFernet.generate_key()\nConditionChecker115 = 920\ntime.sleep(0.16)\nConditionChecker215 = 537\nfor LoopIndexOut in range(LoopChecker15 // LoopChecker25):\n    for i in range(n):\n        for j in range(i + 1, n):\n            a = l[i]\n            newb_1 = l[j]\n            right = bisect_left(l, a + newb_1)\n            left = bisect_right(l, np.max(np.array([a - newb_1, newb_1 - a])))\n            tmp = max(0, right - left)\n            if ConditionChecker115 & ConditionChecker215:\n                if left <= i < right:\n                    tmp = tmp - 1\n            if left <= j < right:\n                tmp -= 1\n            ans += tmp\nelse:\n    pass\nprint(ans // 3)"}