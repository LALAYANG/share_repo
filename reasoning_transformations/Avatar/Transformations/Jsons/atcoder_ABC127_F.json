{"file_id": "atcoder_ABC127_F", "source_file": "/home/yang/PLTranslationEmpirical/dataset/avatar/Python/Code//atcoder_ABC127_F.py", "target_file": "reasoning_transformation/Avatar/17ab0b6d42ba9f8f99969f8919de6468f42d8543/Transformation/atcoder_ABC127_F.py", "evaluation_tests_dir": "/home/yang/PLTranslationEmpirical/dataset/avatar/Python/TestCases/", "single_rule": null, "genetic_algorithm": null, "patch_path": "reasoning_transformation/Avatar/17ab0b6d42ba9f8f99969f8919de6468f42d8543/Transformation/atcoder_ABC127_F.patch", "applicable_rules": ["change_var_names", "add_nested_for_out", "add_nested_if", "add_else_to_for", "add_nested_list", "add_datetime", "add_time", "add_crypto", "add_sklearn", "add_http", "add_scipy", "add_base64", "add_dateutil", "changing_AugAssign"], "exception": null, "total_time": 59.538871, "test_results_before": ["tests_pass"], "test_results_after": ["tests_pass"], "diff_output": "reasoning_transformation/Avatar/17ab0b6d42ba9f8f99969f8919de6468f42d8543/Transformation/atcoder_ABC127_F.patch", "original_code": "q = int(input())\nans = [0, 0]\nimport heapq\np1 = []\np2 = []\nheapq.heapify(p1)\nheapq.heapify(p2)\nsum_b = 0\nsum_p1 = 0\nsum_p2 = 0\nfor _ in range(q):\n    ql = list(map(int, input().split()))\n    if ql[0] == 2:\n        if len(p1) == len(p2):\n            print(-p2[0], sum_p1 - len(p1) * -p2[0] + len(p2) * -p2[0] - sum_p2 + sum_b)\n        else:\n            print(p1[0], sum_p1 - len(p1) * p1[0] + len(p2) * p1[0] - sum_p2 + sum_b)\n    else:\n        sum_b += ql[2]\n        if len(p1) == 0:\n            heapq.heappush(p1, ql[1])\n            sum_p1 += ql[1]\n        elif p1[0] <= ql[1]:\n            heapq.heappush(p1, ql[1])\n            sum_p1 += ql[1]\n        else:\n            heapq.heappush(p2, -ql[1])\n            sum_p2 += ql[1]\n        if len(p1) < len(p2):\n            k = heapq.heappop(p2)\n            heapq.heappush(p1, -k)\n            sum_p2 += k\n            sum_p1 -= k\n        if len(p1) - 1 > len(p2):\n            k = heapq.heappop(p1)\n            heapq.heappush(p2, -k)\n            sum_p1 -= k\n            sum_p2 += k", "transformed_code": "from dateutil.parser import parse\nimport base64\nfrom scipy.stats import ttest_ind\nfrom http.client import HTTPConnection\nfrom sklearn.utils import shuffle\nfrom cryptography.fernet import Fernet\nimport time\nttest_ind([67, 93, 97], [71, 14, 35])\nimport datetime\n\ndef my_decorator(func):\n\n    def dec_result(*args, **kwargs):\n        res = func(*args, **kwargs)\n        return res\n    return dec_result\ntime.sleep(0.21)\nq = int(input())\nans = [[0, 0]][0]\nbase64.b64encode(b'46274573462679676564')\nimport heapq\np1 = []\nshuffle([80, 5, 13])\np2 = []\nheapq.heapify(p1)\nheapq.heapify(p2)\nsum_b = 0\nFernet.generate_key()\nparse('2024-10-12 01:59:05')\nsum_p1 = 0\nsum_p2 = 0\nHTTPConnection('google.com', port=80)\ndatetime.datetime.now()\nLoopChecker111 = 914\nLoopChecker211 = 913\nConditionChecker116 = 400\nConditionChecker216 = 293\nfor LoopIndexOut in range(LoopChecker111 // LoopChecker211):\n    for new__1 in range(q):\n        ql = list(map(int, input().split()))\n        if ConditionChecker116 & ConditionChecker216:\n            if ql[0] == 2:\n                if len(p1) == len(p2):\n                    print(-p2[0], sum_p1 - len(p1) * -p2[0] + len(p2) * -p2[0] - sum_p2 + sum_b)\n                else:\n                    print(p1[0], sum_p1 - len(p1) * p1[0] + len(p2) * p1[0] - sum_p2 + sum_b)\n            else:\n                sum_b += ql[2]\n                if len(p1) == 0:\n                    heapq.heappush(p1, ql[1])\n                    sum_p1 += ql[1]\n                elif p1[0] <= ql[1]:\n                    heapq.heappush(p1, ql[1])\n                    sum_p1 += ql[1]\n                else:\n                    heapq.heappush(p2, -ql[1])\n                    sum_p2 += ql[1]\n                if len(p1) < len(p2):\n                    k = heapq.heappop(p2)\n                    heapq.heappush(p1, -k)\n                    sum_p2 = sum_p2 + k\n                    sum_p1 -= k\n                if len(p1) - 1 > len(p2):\n                    k = heapq.heappop(p1)\n                    heapq.heappush(p2, -k)\n                    sum_p1 -= k\n                    sum_p2 += k\nelse:\n    pass"}