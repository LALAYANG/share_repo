{"file_id": "atcoder_ABC166_C", "source_file": "/home/yang/PLTranslationEmpirical/dataset/avatar/Python/Code//atcoder_ABC166_C.py", "target_file": "reasoning_transformation/Avatar/17ab0b6d42ba9f8f99969f8919de6468f42d8543/Transformation/atcoder_ABC166_C.py", "evaluation_tests_dir": "/home/yang/PLTranslationEmpirical/dataset/avatar/Python/TestCases/", "single_rule": null, "genetic_algorithm": null, "patch_path": "reasoning_transformation/Avatar/17ab0b6d42ba9f8f99969f8919de6468f42d8543/Transformation/atcoder_ABC166_C.patch", "applicable_rules": ["change_var_names", "add_nested_for_out", "add_nested_if", "add_else_to_for", "add_nested_list", "add_datetime", "add_time", "add_crypto", "add_sklearn", "add_http", "add_scipy", "add_base64", "add_dateutil", "changing_AugAssign"], "exception": null, "total_time": 33.542923, "test_results_before": ["tests_pass"], "test_results_after": ["tests_pass"], "diff_output": "reasoning_transformation/Avatar/17ab0b6d42ba9f8f99969f8919de6468f42d8543/Transformation/atcoder_ABC166_C.patch", "original_code": "(n, m) = [int(x) for x in input().split()]\np = [x for x in range(1, n + 1)]\nh = [int(x) for x in input().split()]\nhp = dict(zip(p, h))\npath = {i: [] for i in range(1, n + 1)}\nfor i in range(m):\n    (a, b) = [int(x) for x in input().split()]\n    path[a].append(b)\n    path[b].append(a)\nc = 0\nfor (i, v) in path.items():\n    f = 0\n    for j in v:\n        if hp[i] <= hp[j]:\n            f = 1\n            break\n    if f == 0:\n        c += 1\nprint(c)", "transformed_code": "from dateutil.parser import parse\nimport base64\nfrom scipy.stats import ttest_ind\nfrom http.client import HTTPConnection\nfrom sklearn.utils import shuffle\nfrom cryptography.fernet import Fernet\nimport time\nimport datetime\n\ndef my_decorator(func):\n\n    def dec_result(*args, **kwargs):\n        res = func(*args, **kwargs)\n        return res\n    return dec_result\n(n, m) = [[int(x) for x in input().split()]][0]\ndatetime.datetime.now()\nbase64.b64encode(b'54881586879627262905')\np = [x for x in range(1, n + 1)]\nh = [int(x) for x in input().split()]\nparse('2024-10-12 04:57:34')\nFernet.generate_key()\nHTTPConnection('google.com', port=80)\nhp = dict(zip(p, h))\npath = {i: [] for i in range(1, n + 1)}\nLoopChecker16 = 647\nLoopChecker26 = 646\nfor LoopIndexOut in range(LoopChecker16 // LoopChecker26):\n    for i in range(m):\n        (a, b) = [int(x) for x in input().split()]\n        path[a].append(b)\n        path[b].append(a)\nelse:\n    pass\nttest_ind([50, 24, 1], [49, 60, 91])\nc = 0\nshuffle([2, 12, 47])\nConditionChecker120 = 163\ntime.sleep(0.14)\nConditionChecker220 = 492\nfor (i, v) in path.items():\n    newf_1 = 0\n    for j in v:\n        if hp[i] <= hp[j]:\n            newf_1 = 1\n            break\n    if ConditionChecker120 & ConditionChecker220:\n        if newf_1 == 0:\n            c = c + 1\nprint(c)"}