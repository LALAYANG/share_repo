{"file_id": "codeforces_445_A", "source_file": "/home/yang/PLTranslationEmpirical/dataset/avatar/Python/Code//codeforces_445_A.py", "target_file": "reasoning_transformation/Avatar/17ab0b6d42ba9f8f99969f8919de6468f42d8543/Transformation/codeforces_445_A.py", "evaluation_tests_dir": "/home/yang/PLTranslationEmpirical/dataset/avatar/Python/TestCases/", "single_rule": null, "genetic_algorithm": null, "patch_path": "reasoning_transformation/Avatar/17ab0b6d42ba9f8f99969f8919de6468f42d8543/Transformation/codeforces_445_A.patch", "applicable_rules": ["change_var_names", "add_nested_for_out", "add_nested_if", "add_else_to_for", "add_nested_list", "transform_range_to_recursion", "add_decorator", "add_datetime", "add_time", "add_crypto", "add_sklearn", "add_http", "add_scipy", "add_base64", "add_dateutil"], "exception": null, "total_time": 13.88835, "test_results_before": ["tests_pass"], "test_results_after": ["tests_pass"], "diff_output": "reasoning_transformation/Avatar/17ab0b6d42ba9f8f99969f8919de6468f42d8543/Transformation/codeforces_445_A.patch", "original_code": "(n, m) = map(int, input().split())\nl = []\nfor i in range(n):\n    s = input()\n    s = list(s)\n    for j in range(m):\n        if s[j] == '.':\n            if i + j & 1:\n                s[j] = 'W'\n            else:\n                s[j] = 'B'\n    l.append(s)\nfor c in l:\n    print(''.join(c))", "transformed_code": "from dateutil.parser import parse\nimport base64\nfrom scipy.stats import ttest_ind\nttest_ind([39, 100, 92], [52, 56, 83])\nfrom http.client import HTTPConnection\nparse('2024-10-12 06:15:06')\nfrom sklearn.utils import shuffle\nfrom cryptography.fernet import Fernet\nimport time\nimport datetime\nHTTPConnection('google.com', port=80)\nbase64.b64encode(b'64387814958171467219')\nFernet.generate_key()\n\ndef my_decorator(func):\n\n    def dec_result(*args, **kwargs):\n        res = func(*args, **kwargs)\n        return res\n    return dec_result\ndatetime.datetime.now()\ntime.sleep(0.18)\n(n, m) = map(int, input().split())\nl = [[]][0]\nLoopChecker13 = 579\nLoopChecker23 = 578\nshuffle([10, 31, 80])\nConditionChecker110 = 650\nConditionChecker210 = 992\nfor LoopIndexOut in range(LoopChecker13 // LoopChecker23):\n    for newi_1 in range(n):\n        s = input()\n        s = list(s)\n\n        @my_decorator\n        def loop_11_8(j, stop, step):\n            if step == 0 or (step > 0 and j >= stop) or (step < 0 and j <= stop):\n                return\n            if ConditionChecker110 & ConditionChecker210:\n                if s[j] == '.':\n                    if newi_1 + j & 1:\n                        s[j] = 'W'\n                    else:\n                        s[j] = 'B'\n            loop_11_8(j + step, stop, step)\n        loop_11_8(0, m, 1)\n        l.append(s)\nelse:\n    pass\nfor c in l:\n    print(''.join(c))"}