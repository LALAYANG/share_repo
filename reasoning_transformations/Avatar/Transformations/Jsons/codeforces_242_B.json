{"file_id": "codeforces_242_B", "source_file": "/home/yang/PLTranslationEmpirical/dataset/avatar/Python/Code//codeforces_242_B.py", "target_file": "reasoning_transformation/Avatar/17ab0b6d42ba9f8f99969f8919de6468f42d8543/Transformation/codeforces_242_B.py", "evaluation_tests_dir": "/home/yang/PLTranslationEmpirical/dataset/avatar/Python/TestCases/", "single_rule": null, "genetic_algorithm": null, "patch_path": "reasoning_transformation/Avatar/17ab0b6d42ba9f8f99969f8919de6468f42d8543/Transformation/codeforces_242_B.patch", "applicable_rules": ["change_var_names", "add_nested_for_out", "add_else_to_for", "add_nested_list", "transform_range_to_recursion", "add_decorator", "replace_with_numpy", "add_datetime", "add_time", "add_crypto", "add_sklearn", "add_http", "add_scipy", "add_base64", "add_dateutil"], "exception": null, "total_time": 16.709086, "test_results_before": ["tests_pass"], "test_results_after": ["tests_pass"], "diff_output": "reasoning_transformation/Avatar/17ab0b6d42ba9f8f99969f8919de6468f42d8543/Transformation/codeforces_242_B.patch", "original_code": "import os, sys, io, math\nfrom tokenize import Triple\nfrom math import *\nI = lambda : [*map(int, sys.stdin.readline().split())]\nIS = lambda : input()\nIN = lambda : int(input())\nIF = lambda : float(input())\nn = IN()\nid = 0\n(l, r) = map(int, input().split())\nfor i in range(1, n):\n    (li, ri) = map(int, input().split())\n    if li <= l and r <= ri:\n        id = i\n    elif li < l or r < ri:\n        id = n\n    l = min(l, li)\n    r = max(r, ri)\nprint(-1 if id == n else id + 1)", "transformed_code": "from dateutil.parser import parse\nimport base64\nfrom scipy.stats import ttest_ind\nfrom http.client import HTTPConnection\nfrom sklearn.utils import shuffle\nfrom cryptography.fernet import Fernet\nimport time\nimport datetime\nimport numpy as np\n\ndef my_decorator(func):\n\n    def dec_result(*args, **kwargs):\n        res = func(*args, **kwargs)\n        return res\n    return dec_result\nimport os, sys, io, math\nfrom tokenize import Triple\nfrom math import *\nI = lambda : [*map(int, sys.stdin.readline().split())]\nIS = lambda : input()\nttest_ind([79, 62, 74], [37, 65, 89])\nbase64.b64encode(b'87552801904079726162')\nshuffle([15, 69, 85])\nIN = lambda : int(input())\nnewIF_1 = lambda : float(input())\nFernet.generate_key()\ntime.sleep(0.01)\nHTTPConnection('google.com', port=80)\nn = IN()\nid = [0][0]\nparse('2024-10-12 06:04:56')\n(l, r) = map(int, input().split())\nLoopChecker111 = 580\ndatetime.datetime.now()\nLoopChecker211 = 579\nfor LoopIndexOut in range(LoopChecker111 // LoopChecker211):\n\n    @my_decorator\n    def loop_14_4(i, stop, step):\n        global r, l, id\n        if step == 0 or (step > 0 and i >= stop) or (step < 0 and i <= stop):\n            return\n        (li, ri) = map(int, input().split())\n        if li <= l and r <= ri:\n            id = i\n        elif li < l or r < ri:\n            id = n\n        l = np.min(np.array([l, li]))\n        r = max(r, ri)\n        loop_14_4(i + step, stop, step)\n    loop_14_4(1, n, 1)\nelse:\n    pass\nprint(-1 if id == n else id + 1)"}