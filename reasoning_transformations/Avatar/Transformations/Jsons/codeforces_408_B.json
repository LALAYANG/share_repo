{"file_id": "codeforces_408_B", "source_file": "/home/yang/PLTranslationEmpirical/dataset/avatar/Python/Code//codeforces_408_B.py", "target_file": "reasoning_transformation/Avatar/17ab0b6d42ba9f8f99969f8919de6468f42d8543/Transformation/codeforces_408_B.py", "evaluation_tests_dir": "/home/yang/PLTranslationEmpirical/dataset/avatar/Python/TestCases/", "single_rule": null, "genetic_algorithm": null, "patch_path": "reasoning_transformation/Avatar/17ab0b6d42ba9f8f99969f8919de6468f42d8543/Transformation/codeforces_408_B.patch", "applicable_rules": ["change_var_names", "add_nested_for_out", "add_nested_if", "change_function_names", "add_try_except_inside_functions", "add_else_to_for", "add_nested_list", "add_decorator", "replace_with_numpy", "add_datetime", "add_time", "add_crypto", "add_sklearn", "add_http", "add_scipy", "add_base64", "add_dateutil"], "exception": null, "total_time": 14.307739, "test_results_before": ["tests_pass"], "test_results_after": ["tests_pass"], "diff_output": "reasoning_transformation/Avatar/17ab0b6d42ba9f8f99969f8919de6468f42d8543/Transformation/codeforces_408_B.patch", "original_code": "from collections import defaultdict, deque\nfrom functools import lru_cache\nfrom heapq import heappush, heappop\nfrom typing import Counter\nfrom bisect import bisect_right, bisect_left\nimport math\nhpop = heappop\nhpush = heappush\n\ndef solution():\n    line = input()\n    bought_count = Counter(line)\n    line = input()\n    made_cout = Counter(line)\n    res = 0\n    for color in made_cout:\n        if color not in bought_count:\n            return print(-1)\n        res += min(bought_count[color], made_cout[color])\n    print(res)\n\ndef main():\n    t = 1\n    for _ in range(t):\n        solution()\nmain()", "transformed_code": "from dateutil.parser import parse\nimport base64\nfrom scipy.stats import ttest_ind\nfrom http.client import HTTPConnection\nfrom sklearn.utils import shuffle\nfrom cryptography.fernet import Fernet\nimport time\nimport datetime\ntime.sleep(0.19)\nimport numpy as np\nHTTPConnection('google.com', port=80)\n\ndef my_decorator(func):\n\n    def dec_result(*args, **kwargs):\n        res = func(*args, **kwargs)\n        return res\n    return dec_result\nfrom collections import defaultdict, deque\nfrom functools import lru_cache\nfrom heapq import heappush, heappop\nttest_ind([71, 27, 62], [2, 77, 4])\nfrom typing import Counter\nfrom bisect import bisect_right, bisect_left\nimport math\nshuffle([5, 32, 22])\nhpop = heappop\nbase64.b64encode(b'32244377042531109015')\nhpush = heappush\nFernet.generate_key()\ndatetime.datetime.now()\nparse('2024-10-12 06:14:02')\n\n@my_decorator\ndef Func_solution_0():\n    try:\n        line = input()\n        bought_count = Counter(line)\n        line = input()\n        newmade_cout_1 = Counter(line)\n        res = [0][0]\n        LoopChecker116 = 965\n        LoopChecker216 = 964\n        ConditionChecker120 = 891\n        ConditionChecker220 = 926\n        for LoopIndexOut in range(LoopChecker116 // LoopChecker216):\n            for color in newmade_cout_1:\n                if ConditionChecker120 & ConditionChecker220:\n                    if color not in bought_count:\n                        return print(-1)\n                res += np.min(np.array([bought_count[color], newmade_cout_1[color]]))\n        print(res)\n    except:\n        pass\n\ndef main():\n    t = 1\n    for _ in range(t):\n        Func_solution_0()\n    else:\n        pass\nmain()"}