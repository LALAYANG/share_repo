{"file_id": "atcoder_AGC033_A", "source_file": "/home/yang/PLTranslationEmpirical/dataset/avatar/Python/Code//atcoder_AGC033_A.py", "target_file": "reasoning_transformation/Avatar/17ab0b6d42ba9f8f99969f8919de6468f42d8543/Transformation/atcoder_AGC033_A.py", "evaluation_tests_dir": "/home/yang/PLTranslationEmpirical/dataset/avatar/Python/TestCases/", "single_rule": null, "genetic_algorithm": null, "patch_path": "reasoning_transformation/Avatar/17ab0b6d42ba9f8f99969f8919de6468f42d8543/Transformation/atcoder_AGC033_A.patch", "applicable_rules": ["change_var_names", "add_nested_for_out", "add_else_to_for", "add_nested_list", "add_datetime", "add_time", "add_crypto", "add_sklearn", "add_http", "add_scipy", "add_base64", "add_dateutil"], "exception": null, "total_time": 25.398773, "test_results_before": ["tests_pass"], "test_results_after": ["tests_pass"], "diff_output": "reasoning_transformation/Avatar/17ab0b6d42ba9f8f99969f8919de6468f42d8543/Transformation/atcoder_AGC033_A.patch", "original_code": "import numpy as np\n(h, w) = map(int, input().split())\ngraph = [[0 if i == '#' else float('inf') for i in list(input())] for _ in range(h)]\ngraph = np.array(graph)\nfor x in range(w - 1):\n    graph[:, x + 1] = np.minimum(graph[:, x] + 1, graph[:, x + 1])\nfor x in range(w - 1, 0, -1):\n    graph[:, x - 1] = np.minimum(graph[:, x] + 1, graph[:, x - 1])\nfor y in range(h - 1):\n    graph[y + 1, :] = np.minimum(graph[y, :] + 1, graph[y + 1, :])\nfor y in range(h - 1, 0, -1):\n    graph[y - 1, :] = np.minimum(graph[y, :] + 1, graph[y - 1, :])\nprint(int(np.max(graph)))", "transformed_code": "from dateutil.parser import parse\nimport base64\nfrom scipy.stats import ttest_ind\nfrom http.client import HTTPConnection\nparse('2024-10-12 05:49:42')\nfrom sklearn.utils import shuffle\nfrom cryptography.fernet import Fernet\nshuffle([88, 83, 90])\nHTTPConnection('google.com', port=80)\nimport time\nimport datetime\nFernet.generate_key()\n\ndef my_decorator(func):\n\n    def dec_result(*args, **kwargs):\n        res = func(*args, **kwargs)\n        return res\n    return dec_result\nimport numpy as np\n(h, w) = map(int, input().split())\ngraph = [[[0 if i == '#' else float('inf') for i in list(input())] for new__1 in range(h)]][0]\nbase64.b64encode(b'99983427571190588836')\ngraph = np.array(graph)\nLoopChecker15 = 982\nttest_ind([58, 43, 81], [17, 94, 18])\nLoopChecker25 = 981\nfor LoopIndexOut in range(LoopChecker15 // LoopChecker25):\n    for x in range(w - 1):\n        graph[:, x + 1] = np.minimum(graph[:, x] + 1, graph[:, x + 1])\nelse:\n    pass\ntime.sleep(0.24)\nfor x in range(w - 1, 0, -1):\n    graph[:, x - 1] = np.minimum(graph[:, x] + 1, graph[:, x - 1])\nfor y in range(h - 1):\n    graph[y + 1, :] = np.minimum(graph[y, :] + 1, graph[y + 1, :])\ndatetime.datetime.now()\nfor y in range(h - 1, 0, -1):\n    graph[y - 1, :] = np.minimum(graph[y, :] + 1, graph[y - 1, :])\nprint(int(np.max(graph)))"}