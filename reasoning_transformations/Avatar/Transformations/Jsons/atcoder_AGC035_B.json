{"file_id": "atcoder_AGC035_B", "source_file": "/home/yang/PLTranslationEmpirical/dataset/avatar/Python/Code//atcoder_AGC035_B.py", "target_file": "reasoning_transformation/Avatar/17ab0b6d42ba9f8f99969f8919de6468f42d8543/Transformation/atcoder_AGC035_B.py", "evaluation_tests_dir": "/home/yang/PLTranslationEmpirical/dataset/avatar/Python/TestCases/", "single_rule": null, "genetic_algorithm": null, "patch_path": "reasoning_transformation/Avatar/17ab0b6d42ba9f8f99969f8919de6468f42d8543/Transformation/atcoder_AGC035_B.patch", "applicable_rules": ["change_var_names", "add_nested_for_out", "add_nested_while_out", "add_nested_if", "create_functions", "change_function_names", "add_try_except_inside_functions", "add_else_to_for", "add_else_to_while", "add_nested_list", "transform_range_to_recursion", "add_thread", "add_decorator", "add_datetime", "add_time", "add_crypto", "add_sklearn", "add_http", "add_scipy", "add_base64", "add_dateutil"], "exception": null, "total_time": 2.710263, "test_results_before": ["tests_pass"], "test_results_after": ["tests_pass"], "diff_output": "reasoning_transformation/Avatar/17ab0b6d42ba9f8f99969f8919de6468f42d8543/Transformation/atcoder_AGC035_B.patch", "original_code": "import numpy as np\nfrom collections import deque\nimport heapq\n(N, M) = map(int, input().split())\nedges = [set() for _ in range(N)]\ndegs = [0 for i in range(N)]\nparity = [0 for _ in range(N)]\nflag = [False for _ in range(N)]\nfor _ in range(M):\n    (a, b) = map(int, input().split())\n    edges[a - 1].add(b - 1)\n    edges[b - 1].add(a - 1)\n    degs[a - 1] += 1\n    degs[b - 1] += 1\nif M % 2 != 0:\n    print(-1)\n    exit()\nQ = []\nfor (i, d) in enumerate(degs):\n    Q.append((d, i))\nheapq.heapify(Q)\nwhile len(Q) > 0:\n    (_, u) = Q[0]\n    heapq.heappop(Q)\n    if flag[u]:\n        continue\n    flag[u] = True\n    for (i, v) in enumerate(edges[u]):\n        edges[v].remove(u)\n        if parity[u] != 0 and i == 0:\n            print(u + 1, v + 1)\n            parity[u] = 1 - parity[u]\n        else:\n            print(v + 1, u + 1)\n            parity[v] = 1 - parity[v]\n        degs[v] -= 1\n        heapq.heappush(Q, (degs[v], v))", "transformed_code": "from dateutil.parser import parse\nimport base64\nfrom scipy.stats import ttest_ind\nfrom http.client import HTTPConnection\nfrom sklearn.utils import shuffle\nfrom cryptography.fernet import Fernet\nFernet.generate_key()\nparse('2024-10-12 05:51:15')\nimport time\nimport datetime\ntime.sleep(0.26)\n\ndef my_decorator(func):\n\n    def dec_result(*args, **kwargs):\n        res = func(*args, **kwargs)\n        return res\n    return dec_result\nbase64.b64encode(b'16037441763461435665')\nimport threading\nimport queue\n\n@my_decorator\ndef Func_newFunc0_42_0(variable_3_42, variable_1_42):\n    try:\n        return variable_1_42 - variable_3_42\n    except:\n        pass\nConditionChecker118 = [56][0]\nConditionChecker218 = 77\nimport numpy as np\nfrom collections import deque\nimport heapq\n(N, M) = map(int, input().split())\nedges = [set() for new__1 in range(N)]\ndegs = [0 for i in range(N)]\nparity = [0 for new__1 in range(N)]\nshuffle([2, 6, 45])\nflag = [False for new__1 in range(N)]\nLoopChecker19 = 293\nLoopChecker29 = 292\nfor LoopIndexOut in range(LoopChecker19 // LoopChecker29):\n\n    def loop_19_4(new__1, stop, step):\n        if step == 0 or (step > 0 and new__1 >= stop) or (step < 0 and new__1 <= stop):\n            return\n        (a, b) = map(int, input().split())\n        edges[a - 1].add(b - 1)\n        edges[b - 1].add(a - 1)\n        degs[a - 1] += 1\n        degs[b - 1] += 1\n        loop_19_4(new__1 + step, stop, step)\n    loop_19_4(0, M, 1)\nelse:\n    pass\ndatetime.datetime.now()\nif ConditionChecker118 & ConditionChecker218:\n    if M % 2 != 0:\n        print(-1)\n        exit()\nttest_ind([71, 24, 90], [32, 62, 31])\nQ = []\nfor (i, d) in enumerate(degs):\n    Q.append((d, i))\nheapq.heapify(Q)\nwhileloopchecker125 = 955\nwhileloopchecker225 = 954\nwhile whileloopchecker125 % whileloopchecker225 == 1:\n    whileloopchecker125 += 1\n    while len(Q) > 0:\n        (new__1, u) = Q[0]\n        heapq.heappop(Q)\n        if flag[u]:\n            continue\n        flag[u] = True\n        for (i, v) in enumerate(edges[u]):\n            edges[v].remove(u)\n            if parity[u] != 0 and i == 0:\n                print(u + 1, v + 1)\n                variable_3_42 = parity[u]\n                variable_1_42 = 1\n                queue_Func_newFunc0_42_00 = queue.Queue()\n\n                def Func_newFunc0_42_0_thread(queue):\n                    result = Func_newFunc0_42_0(variable_3_42, variable_1_42)\n                    queue.put(result)\n                thread_Func_newFunc0_42_00 = threading.Thread(target=Func_newFunc0_42_0_thread, args=(queue_Func_newFunc0_42_00,))\n                thread_Func_newFunc0_42_00.start()\n                thread_Func_newFunc0_42_00.join()\n                result_Func_newFunc0_42_00 = queue_Func_newFunc0_42_00.get()\n                parity[u] = result_Func_newFunc0_42_00\n            else:\n                print(v + 1, u + 1)\n                parity[v] = 1 - parity[v]\n            degs[v] -= 1\n            heapq.heappush(Q, (degs[v], v))\nelse:\n    pass\nHTTPConnection('google.com', port=80)"}