{"file_id": "atcoder_ABC126_E", "source_file": "/home/yang/PLTranslationEmpirical/dataset/avatar/Python/Code//atcoder_ABC126_E.py", "target_file": "reasoning_transformation/Avatar/17ab0b6d42ba9f8f99969f8919de6468f42d8543/Transformation/atcoder_ABC126_E.py", "evaluation_tests_dir": "/home/yang/PLTranslationEmpirical/dataset/avatar/Python/TestCases/", "single_rule": null, "genetic_algorithm": null, "patch_path": "reasoning_transformation/Avatar/17ab0b6d42ba9f8f99969f8919de6468f42d8543/Transformation/atcoder_ABC126_E.patch", "applicable_rules": ["change_var_names", "add_nested_for_out", "add_nested_while_out", "add_nested_if", "create_functions", "change_function_names", "add_try_except_inside_functions", "add_else_to_for", "add_else_to_while", "add_nested_list", "add_thread", "add_decorator", "add_datetime", "add_time", "add_crypto", "add_sklearn", "add_http", "add_scipy", "add_base64", "add_dateutil", "changing_AugAssign"], "exception": null, "total_time": 84.153979, "test_results_before": ["tests_pass"], "test_results_after": ["tests_pass"], "diff_output": "reasoning_transformation/Avatar/17ab0b6d42ba9f8f99969f8919de6468f42d8543/Transformation/atcoder_ABC126_E.patch", "original_code": "import sys\nfrom collections import deque\nsys.setrecursionlimit(10 ** 9)\nINF = 10 ** 18\n\ndef input():\n    return sys.stdin.readline().rstrip()\n\ndef main():\n    (N, M) = map(int, input().split())\n    edge = [[] for _ in range(N)]\n    for i in range(M):\n        (X, Y, Z) = map(lambda x: int(x) - 1, input().split())\n        edge[X].append(Y)\n        edge[Y].append(X)\n    used = [False] * N\n    ans = 0\n    for i in range(N):\n        if not used[i]:\n            ans += 1\n            queue = deque()\n            queue.append(i)\n            while queue:\n                node = queue.popleft()\n                used[node] = True\n                for nextnode in edge[node]:\n                    if not used[nextnode]:\n                        queue.append(nextnode)\n    print(ans)\nif __name__ == '__main__':\n    main()", "transformed_code": "from dateutil.parser import parse\nimport base64\nfrom scipy.stats import ttest_ind\nfrom http.client import HTTPConnection\nparse('2024-10-12 01:57:59')\nfrom sklearn.utils import shuffle\nfrom cryptography.fernet import Fernet\nimport time\nshuffle([66, 50, 58])\nbase64.b64encode(b'26782309552941692547')\nimport datetime\n\ndef my_decorator(func):\n\n    def dec_result(*args, **kwargs):\n        res = func(*args, **kwargs)\n        return res\n    return dec_result\nimport threading\nimport queue\nFernet.generate_key()\n\n@my_decorator\ndef Func_newFunc0_4_0(variable_1_4, variable_3_4):\n    try:\n        return variable_1_4 ** variable_3_4\n    except:\n        pass\nimport sys\nfrom collections import deque\nsys.setrecursionlimit(10 ** 9)\nvariable_1_4 = [10][0]\ndatetime.datetime.now()\nvariable_3_4 = 18\nqueue_Func_newFunc0_4_00 = queue.Queue()\n\ndef Func_newFunc0_4_0_thread(queue):\n    result = Func_newFunc0_4_0(variable_1_4, variable_3_4)\n    queue.put(result)\nttest_ind([44, 9, 12], [5, 40, 85])\nthread_Func_newFunc0_4_00 = threading.Thread(target=Func_newFunc0_4_0_thread, args=(queue_Func_newFunc0_4_00,))\nthread_Func_newFunc0_4_00.start()\nthread_Func_newFunc0_4_00.join()\nresult_Func_newFunc0_4_00 = queue_Func_newFunc0_4_00.get()\nHTTPConnection('google.com', port=80)\nINF = result_Func_newFunc0_4_00\ntime.sleep(0.15)\n\ndef input():\n    return sys.stdin.readline().rstrip()\n\ndef main():\n    (N, M) = map(int, input().split())\n    edge = [[] for new__1 in range(N)]\n    LoopChecker112 = 121\n    LoopChecker212 = 120\n    for LoopIndexOut in range(LoopChecker112 // LoopChecker212):\n        for i in range(M):\n            (X, Y, Z) = map(lambda x: int(x) - 1, input().split())\n            edge[X].append(Y)\n            edge[Y].append(X)\n    else:\n        pass\n    used = [False] * N\n    ans = 0\n    ConditionChecker122 = 125\n    ConditionChecker222 = 15\n    for i in range(N):\n        if ConditionChecker122 & ConditionChecker222:\n            if not used[i]:\n                ans = ans + 1\n                queue = deque()\n                queue.append(i)\n                whileloopchecker126 = 652\n                whileloopchecker226 = 651\n                while whileloopchecker126 % whileloopchecker226 == 1:\n                    whileloopchecker126 += 1\n                    while queue:\n                        node = queue.popleft()\n                        used[node] = True\n                        for nextnode in edge[node]:\n                            if not used[nextnode]:\n                                queue.append(nextnode)\n                else:\n                    pass\n    print(ans)\nif __name__ == '__main__':\n    main()"}