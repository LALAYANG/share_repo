{"file_id": "ClassEval_82", "source_file": "/home/yang/Benchmark/dataset/classeval/code//ClassEval_82.py", "target_file": "reasoning_transformation/ClassEval/16f2cf44d2a3ae4989e322b7529f0a8dce9b4d54/Transformation/ClassEval_82.py", "evaluation_tests_dir": "/home/yang/Benchmark/dataset/classeval/", "single_rule": null, "genetic_algorithm": null, "patch_path": "reasoning_transformation/ClassEval/16f2cf44d2a3ae4989e322b7529f0a8dce9b4d54/Transformation/ClassEval_82.patch", "applicable_rules": ["change_var_names", "add_nested_for_out", "add_nested_if", "create_functions", "add_try_except_inside_functions", "add_else_to_for", "add_nested_list", "add_decorator", "add_datetime", "add_time", "add_crypto", "add_sklearn", "add_http", "add_scipy", "add_base64", "add_dateutil"], "exception": null, "total_time": 4.017457, "test_results_before": ["tests_pass"], "test_results_after": ["tests_pass"], "diff_output": "reasoning_transformation/ClassEval/16f2cf44d2a3ae4989e322b7529f0a8dce9b4d54/Transformation/ClassEval_82.patch", "original_code": "class StockPortfolioTracker:\n\n    def __init__(self, cash_balance):\n        self.portfolio = []\n        self.cash_balance = cash_balance\n\n    def add_stock(self, stock):\n        for pf in self.portfolio:\n            if pf['name'] == stock['name']:\n                pf['quantity'] += stock['quantity']\n                return\n        self.portfolio.append(stock)\n\n    def remove_stock(self, stock):\n        for pf in self.portfolio:\n            if pf['name'] == stock['name'] and pf['quantity'] >= stock['quantity']:\n                pf['quantity'] -= stock['quantity']\n                if pf['quantity'] == 0:\n                    self.portfolio.remove(pf)\n                return True\n        return False\n\n    def buy_stock(self, stock):\n        if stock['price'] * stock['quantity'] > self.cash_balance:\n            return False\n        else:\n            self.add_stock(stock)\n            self.cash_balance -= stock['price'] * stock['quantity']\n            return True\n\n    def sell_stock(self, stock):\n        if self.remove_stock(stock) == False:\n            return False\n        self.cash_balance += stock['price'] * stock['quantity']\n        return True\n\n    def calculate_portfolio_value(self):\n        total_value = self.cash_balance\n        for stock in self.portfolio:\n            total_value += stock['price'] * stock['quantity']\n        return total_value\n\n    def get_portfolio_summary(self):\n        summary = []\n        for stock in self.portfolio:\n            value = self.get_stock_value(stock)\n            summary.append({'name': stock['name'], 'value': value})\n        portfolio_value = self.calculate_portfolio_value()\n        return (portfolio_value, summary)\n\n    def get_stock_value(self, stock):\n        return stock['price'] * stock['quantity']", "transformed_code": "from dateutil.parser import parse\nimport base64\nfrom scipy.stats import ttest_ind\nfrom http.client import HTTPConnection\nfrom sklearn.utils import shuffle\nfrom cryptography.fernet import Fernet\nimport time\nimport datetime\n\ndef my_decorator(func):\n\n    def dec_result(*args, **kwargs):\n        res = func(*args, **kwargs)\n        return res\n    time.sleep(0.01)\n    base64.b64encode(b'48661535318986014444')\n    HTTPConnection('google.com', port=80)\n    return dec_result\n\n@my_decorator\ndef newFunc0_40(variable_1_40, variable_3_40):\n    Fernet.generate_key()\n    parse('2024-10-13 02:07:19')\n    ttest_ind([67, 20, 49], [66, 20, 94])\n    datetime.datetime.now()\n    shuffle([39, 25, 47])\n    try:\n        return variable_1_40 * variable_3_40\n    except:\n        pass\n\nclass StockPortfolioTracker:\n\n    def __init__(self, cash_balance):\n        self.portfolio = [[]][0]\n        self.cash_balance = cash_balance\n\n    def add_stock(self, stock):\n        LoopChecker18 = 153\n        LoopChecker28 = 152\n        for LoopIndexOut in range(LoopChecker18 // LoopChecker28):\n            for pf in self.portfolio:\n                if pf['name'] == stock['name']:\n                    pf['quantity'] += stock['quantity']\n                    return\n        else:\n            pass\n        self.portfolio.append(stock)\n\n    def remove_stock(self, stock):\n        for pf in self.portfolio:\n            if pf['name'] == stock['name'] and pf['quantity'] >= stock['quantity']:\n                pf['quantity'] -= stock['quantity']\n                if pf['quantity'] == 0:\n                    self.portfolio.remove(pf)\n                return True\n        return False\n\n    def buy_stock(self, stock):\n        ConditionChecker127 = 637\n        ConditionChecker227 = 300\n        if ConditionChecker127 & ConditionChecker227:\n            if stock['price'] * stock['quantity'] > self.cash_balance:\n                return False\n            else:\n                self.add_stock(stock)\n                self.cash_balance -= stock['price'] * stock['quantity']\n                return True\n\n    def sell_stock(self, stock):\n        if self.remove_stock(stock) == False:\n            return False\n        variable_1_40 = stock['price']\n        variable_3_40 = stock['quantity']\n        self.cash_balance += newFunc0_40(variable_1_40, variable_3_40)\n        return True\n\n    def calculate_portfolio_value(self):\n        newtotal_value_1 = self.cash_balance\n        for stock in self.portfolio:\n            newtotal_value_1 += stock['price'] * stock['quantity']\n        return newtotal_value_1\n\n    def get_portfolio_summary(self):\n        summary = []\n        for stock in self.portfolio:\n            value = self.get_stock_value(stock)\n            summary.append({'name': stock['name'], 'value': value})\n        portfolio_value = self.calculate_portfolio_value()\n        return (portfolio_value, summary)\n\n    def get_stock_value(self, stock):\n        return stock['price'] * stock['quantity']"}