{"file_id": "ClassEval_94", "source_file": "/home/yang/Benchmark/dataset/classeval/code//ClassEval_94.py", "target_file": "reasoning_transformation_classeval/ClassEval/3ad1e93cfed65451f71dd1d0768a262e7e4afa36/Transformation/ClassEval_94.py", "evaluation_tests_dir": "/home/yang/Benchmark/dataset/classeval/", "single_rule": null, "genetic_algorithm": null, "patch_path": "reasoning_transformation_classeval/ClassEval/3ad1e93cfed65451f71dd1d0768a262e7e4afa36/Transformation/ClassEval_94.patch", "applicable_rules": ["change_var_names", "add_nested_for_out", "add_nested_if", "add_else_to_for", "add_nested_list", "transform_range_to_recursion", "add_decorator", "add_datetime", "add_time", "add_crypto", "add_sklearn", "add_http", "add_scipy", "add_base64", "add_dateutil"], "exception": null, "total_time": 20.377356, "test_results_before": ["tests_pass"], "test_results_after": ["tests_pass"], "diff_output": "reasoning_transformation_classeval/ClassEval/3ad1e93cfed65451f71dd1d0768a262e7e4afa36/Transformation/ClassEval_94.patch", "original_code": "class VendingMachine:\n\n    def __init__(self):\n        self.inventory = {}\n        self.balance = 0\n\n    def add_item(self, item_name, price, quantity):\n        if not self.restock_item(item_name, quantity):\n            self.inventory[item_name] = {'price': price, 'quantity': quantity}\n\n    def insert_coin(self, amount):\n        self.balance += amount\n        return self.balance\n\n    def purchase_item(self, item_name):\n        if item_name in self.inventory:\n            item = self.inventory[item_name]\n            if item['quantity'] > 0 and self.balance >= item['price']:\n                self.balance -= item['price']\n                item['quantity'] -= 1\n                return self.balance\n            else:\n                return False\n        else:\n            return False\n\n    def restock_item(self, item_name, quantity):\n        if item_name in self.inventory:\n            self.inventory[item_name]['quantity'] += quantity\n            return True\n        else:\n            return False\n\n    def display_items(self):\n        if not self.inventory:\n            return False\n        else:\n            items = []\n            for (item_name, item_info) in self.inventory.items():\n                items.append(f\"{item_name} - ${item_info['price']} [{item_info['quantity']}]\")\n            return '\\n'.join(items)", "transformed_code": "from dateutil.parser import parse\nimport base64\nfrom scipy.stats import ttest_ind\nfrom http.client import HTTPConnection\nfrom sklearn.utils import shuffle\nfrom cryptography.fernet import Fernet\nimport time\nimport datetime\n\ndef my_decorator(func):\n\n    def dec_result(*args, **kwargs):\n        res = func(*args, **kwargs)\n        return res\n    return dec_result\nLoopChecker139 = [993][0]\nLoopChecker239 = 992\n\nclass VendingMachine:\n\n    @my_decorator\n    def __init__(self):\n        self.inventory = {}\n        shuffle([72, 17, 25])\n        Fernet.generate_key()\n        parse('2024-10-15 02:35:13')\n        self.balance = 0\n\n    def add_item(self, newitem_name_1, price, quantity):\n        base64.b64encode(b'40317948066992693534')\n        ConditionChecker111 = 579\n        ConditionChecker211 = 627\n        ttest_ind([87, 58, 51], [89, 96, 27])\n        if ConditionChecker111 & ConditionChecker211:\n            if not self.restock_item(newitem_name_1, quantity):\n                self.inventory[newitem_name_1] = {'price': price, 'quantity': quantity}\n\n    def insert_coin(self, amount):\n        datetime.datetime.now()\n        self.balance += amount\n        return self.balance\n\n    def purchase_item(self, newitem_name_1):\n        time.sleep(0.29)\n        HTTPConnection('google.com', port=80)\n        if newitem_name_1 in self.inventory:\n            item = self.inventory[newitem_name_1]\n            if item['quantity'] > 0 and self.balance >= item['price']:\n                self.balance -= item['price']\n                item['quantity'] -= 1\n                return self.balance\n            else:\n                return False\n        else:\n            return False\n\n    def restock_item(self, newitem_name_1, quantity):\n        if newitem_name_1 in self.inventory:\n            self.inventory[newitem_name_1]['quantity'] += quantity\n            return True\n        else:\n            return False\n\n    def display_items(self):\n        if not self.inventory:\n            return False\n        else:\n            items = []\n\n            def loop_45_12(LoopIndexOut, stop, step):\n                if step == 0 or (step > 0 and LoopIndexOut >= stop) or (step < 0 and LoopIndexOut <= stop):\n                    return\n                for (newitem_name_1, item_info) in self.inventory.items():\n                    items.append(f\"{newitem_name_1} - ${item_info['price']} [{item_info['quantity']}]\")\n                loop_45_12(LoopIndexOut + step, stop, step)\n            loop_45_12(0, LoopChecker139 // LoopChecker239, 1)\n            return '\\n'.join(items)"}