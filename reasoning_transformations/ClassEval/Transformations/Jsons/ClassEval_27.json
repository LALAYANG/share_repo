{"file_id": "ClassEval_27", "source_file": "/home/yang/Benchmark/dataset/classeval/code//ClassEval_27.py", "target_file": "reasoning_transformation/ClassEval/16f2cf44d2a3ae4989e322b7529f0a8dce9b4d54/Transformation/ClassEval_27.py", "evaluation_tests_dir": "/home/yang/Benchmark/dataset/classeval/", "single_rule": null, "genetic_algorithm": null, "patch_path": "reasoning_transformation/ClassEval/16f2cf44d2a3ae4989e322b7529f0a8dce9b4d54/Transformation/ClassEval_27.patch", "applicable_rules": ["change_var_names", "add_nested_if", "create_functions", "add_try_except_inside_functions", "add_nested_list", "add_thread", "add_decorator", "add_datetime", "add_time", "add_crypto", "add_sklearn", "add_http", "add_scipy", "add_base64", "add_dateutil"], "exception": null, "total_time": 4.247844, "test_results_before": ["tests_pass"], "test_results_after": ["tests_pass"], "diff_output": "reasoning_transformation/ClassEval/16f2cf44d2a3ae4989e322b7529f0a8dce9b4d54/Transformation/ClassEval_27.patch", "original_code": "class CurrencyConverter:\n\n    def __init__(self):\n        self.rates = {'USD': 1.0, 'EUR': 0.85, 'GBP': 0.72, 'JPY': 110.15, 'CAD': 1.23, 'AUD': 1.34, 'CNY': 6.4}\n\n    def convert(self, amount, from_currency, to_currency):\n        if from_currency == to_currency:\n            return amount\n        if from_currency not in self.rates or to_currency not in self.rates:\n            return False\n        from_rate = self.rates[from_currency]\n        to_rate = self.rates[to_currency]\n        converted_amount = amount / from_rate * to_rate\n        return converted_amount\n\n    def get_supported_currencies(self):\n        return list(self.rates.keys())\n\n    def add_currency_rate(self, currency, rate):\n        if currency in self.rates:\n            return False\n        self.rates[currency] = rate\n\n    def update_currency_rate(self, currency, new_rate):\n        if currency not in self.rates:\n            return False\n        self.rates[currency] = new_rate", "transformed_code": "from dateutil.parser import parse\nimport base64\nfrom scipy.stats import ttest_ind\nfrom http.client import HTTPConnection\nfrom sklearn.utils import shuffle\nfrom cryptography.fernet import Fernet\nimport time\nimport datetime\n\ndef my_decorator(func):\n    datetime.datetime.now()\n    Fernet.generate_key()\n    time.sleep(0.11)\n\n    def dec_result(*args, **kwargs):\n        res = func(*args, **kwargs)\n        return res\n    ttest_ind([16, 98, 2], [32, 57, 22])\n    return dec_result\nimport threading\nimport queue\n\n@my_decorator\ndef newFunc0_16(from_rate, amount, to_rate):\n    HTTPConnection('google.com', port=80)\n    shuffle([91, 78, 12])\n    parse('2024-10-13 01:53:47')\n    base64.b64encode(b'25191700069563594577')\n    try:\n        return amount / from_rate * to_rate\n    except:\n        pass\n\nclass CurrencyConverter:\n\n    def __init__(self):\n        self.rates = {'USD': 1.0, 'EUR': 0.85, 'GBP': 0.72, 'JPY': 110.15, 'CAD': 1.23, 'AUD': 1.34, 'CNY': 6.4}\n\n    def convert(self, amount, from_currency, to_currency):\n        ConditionChecker17 = [578][0]\n        ConditionChecker27 = 200\n        if ConditionChecker17 & ConditionChecker27:\n            if from_currency == to_currency:\n                return amount\n        if from_currency not in self.rates or to_currency not in self.rates:\n            return False\n        from_rate = self.rates[from_currency]\n        to_rate = self.rates[to_currency]\n        queue_newFunc0_160 = queue.Queue()\n\n        def newFunc0_16_thread(queue):\n            result = newFunc0_16(from_rate, amount, to_rate)\n            queue.put(result)\n        thread_newFunc0_160 = threading.Thread(target=newFunc0_16_thread, args=(queue_newFunc0_160,))\n        thread_newFunc0_160.start()\n        thread_newFunc0_160.join()\n        result_newFunc0_160 = queue_newFunc0_160.get()\n        newconverted_amount_1 = result_newFunc0_160\n        return newconverted_amount_1\n\n    def get_supported_currencies(self):\n        return list(self.rates.keys())\n\n    def add_currency_rate(self, currency, rate):\n        if currency in self.rates:\n            return False\n        self.rates[currency] = rate\n\n    def update_currency_rate(self, currency, new_rate):\n        if currency not in self.rates:\n            return False\n        self.rates[currency] = new_rate"}