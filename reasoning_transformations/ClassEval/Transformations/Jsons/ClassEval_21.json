{"file_id": "ClassEval_21", "source_file": "/home/yang/Benchmark/dataset/classeval/code//ClassEval_21.py", "target_file": "reasoning_transformation_classeval/ClassEval/3ad1e93cfed65451f71dd1d0768a262e7e4afa36/Transformation/ClassEval_21.py", "evaluation_tests_dir": "/home/yang/Benchmark/dataset/classeval/", "single_rule": null, "genetic_algorithm": null, "patch_path": "reasoning_transformation_classeval/ClassEval/3ad1e93cfed65451f71dd1d0768a262e7e4afa36/Transformation/ClassEval_21.patch", "applicable_rules": ["change_var_names", "add_nested_for_out", "add_nested_if", "add_else_to_for", "add_nested_list", "add_decorator", "add_time", "add_crypto", "add_sklearn", "add_http", "add_scipy", "add_base64", "add_dateutil"], "exception": null, "total_time": 15.026283, "test_results_before": ["tests_pass"], "test_results_after": ["tests_pass"], "diff_output": "reasoning_transformation_classeval/ClassEval/3ad1e93cfed65451f71dd1d0768a262e7e4afa36/Transformation/ClassEval_21.patch", "original_code": "from datetime import datetime\n\nclass Classroom:\n\n    def __init__(self, id):\n        self.id = id\n        self.courses = []\n\n    def add_course(self, course):\n        if course not in self.courses:\n            self.courses.append(course)\n\n    def remove_course(self, course):\n        if course in self.courses:\n            self.courses.remove(course)\n\n    def is_free_at(self, check_time):\n        check_time = datetime.strptime(check_time, '%H:%M')\n        for course in self.courses:\n            if datetime.strptime(course['start_time'], '%H:%M') <= check_time <= datetime.strptime(course['end_time'], '%H:%M'):\n                return False\n        return True\n\n    def check_course_conflict(self, new_course):\n        new_start_time = datetime.strptime(new_course['start_time'], '%H:%M')\n        new_end_time = datetime.strptime(new_course['end_time'], '%H:%M')\n        flag = True\n        for course in self.courses:\n            start_time = datetime.strptime(course['start_time'], '%H:%M')\n            end_time = datetime.strptime(course['end_time'], '%H:%M')\n            if start_time <= new_start_time and end_time >= new_start_time:\n                flag = False\n            if start_time <= new_end_time and end_time >= new_end_time:\n                flag = False\n        return flag", "transformed_code": "from dateutil.parser import parse\nimport base64\nfrom scipy.stats import ttest_ind\nfrom http.client import HTTPConnection\nfrom sklearn.utils import shuffle\nfrom cryptography.fernet import Fernet\nimport time\n\ndef my_decorator(func):\n    shuffle([9, 22, 54])\n\n    def dec_result(*args, **kwargs):\n        res = func(*args, **kwargs)\n        return res\n    ttest_ind([27, 75, 59], [63, 100, 97])\n    return dec_result\nfrom datetime import datetime\n\nclass Classroom:\n\n    @my_decorator\n    def __init__(self, id):\n        self.id = id\n        HTTPConnection('google.com', port=80)\n        parse('2024-10-15 01:55:14')\n        self.courses = [[]][0]\n\n    def add_course(self, course):\n        ConditionChecker110 = 687\n        ConditionChecker210 = 790\n        Fernet.generate_key()\n        base64.b64encode(b'54120527356171094222')\n        time.sleep(0.07)\n        if ConditionChecker110 & ConditionChecker210:\n            if course not in self.courses:\n                self.courses.append(course)\n\n    def remove_course(self, course):\n        if course in self.courses:\n            self.courses.remove(course)\n\n    def is_free_at(self, check_time):\n        check_time = datetime.strptime(check_time, '%H:%M')\n        LoopChecker119 = 555\n        LoopChecker219 = 554\n        for LoopIndexOut in range(LoopChecker119 // LoopChecker219):\n            for course in self.courses:\n                if datetime.strptime(course['start_time'], '%H:%M') <= check_time <= datetime.strptime(course['end_time'], '%H:%M'):\n                    return False\n        else:\n            pass\n        return True\n\n    def check_course_conflict(self, new_course):\n        new_start_time = datetime.strptime(new_course['start_time'], '%H:%M')\n        new_end_time = datetime.strptime(new_course['end_time'], '%H:%M')\n        flag = True\n        for course in self.courses:\n            newstart_time_1 = datetime.strptime(course['start_time'], '%H:%M')\n            end_time = datetime.strptime(course['end_time'], '%H:%M')\n            if newstart_time_1 <= new_start_time and end_time >= new_start_time:\n                flag = False\n            if newstart_time_1 <= new_end_time and end_time >= new_end_time:\n                flag = False\n        return flag"}