{"file_id": "ClassEval_13", "source_file": "/home/yang/Benchmark/dataset/classeval/code//ClassEval_13.py", "target_file": "reasoning_transformation_classeval/ClassEval/3ad1e93cfed65451f71dd1d0768a262e7e4afa36/Transformation/ClassEval_13.py", "evaluation_tests_dir": "/home/yang/Benchmark/dataset/classeval/", "single_rule": null, "genetic_algorithm": null, "patch_path": "reasoning_transformation_classeval/ClassEval/3ad1e93cfed65451f71dd1d0768a262e7e4afa36/Transformation/ClassEval_13.patch", "applicable_rules": ["add_nested_if", "add_nested_list", "add_decorator", "add_datetime", "add_time", "add_crypto", "add_sklearn", "add_http", "add_scipy", "add_base64", "add_dateutil"], "exception": null, "total_time": 4.885837, "test_results_before": ["tests_pass"], "test_results_after": ["tests_pass"], "diff_output": "reasoning_transformation_classeval/ClassEval/3ad1e93cfed65451f71dd1d0768a262e7e4afa36/Transformation/ClassEval_13.patch", "original_code": "class BookManagement:\n\n    def __init__(self):\n        self.inventory = {}\n\n    def add_book(self, title, quantity=1):\n        if title in self.inventory:\n            self.inventory[title] += quantity\n        else:\n            self.inventory[title] = quantity\n\n    def remove_book(self, title, quantity):\n        if title not in self.inventory or self.inventory[title] < quantity:\n            raise False\n        self.inventory[title] -= quantity\n        if self.inventory[title] == 0:\n            del self.inventory[title]\n\n    def view_inventory(self):\n        return self.inventory\n\n    def view_book_quantity(self, title):\n        if title not in self.inventory:\n            return 0\n        return self.inventory[title]", "transformed_code": "from dateutil.parser import parse\nimport base64\nfrom scipy.stats import ttest_ind\nfrom http.client import HTTPConnection\nfrom sklearn.utils import shuffle\nfrom cryptography.fernet import Fernet\nimport time\nimport datetime\n\ndef my_decorator(func):\n\n    def dec_result(*args, **kwargs):\n        res = func(*args, **kwargs)\n        return res\n    shuffle([54, 69, 96])\n    return dec_result\n\nclass BookManagement:\n\n    @my_decorator\n    def __init__(self):\n        self.inventory = {}\n\n    def add_book(self, title, quantity=1):\n        parse('2024-10-15 01:52:42')\n        ConditionChecker17 = [141][0]\n        ConditionChecker27 = 246\n        HTTPConnection('google.com', port=80)\n        datetime.datetime.now()\n        if ConditionChecker17 & ConditionChecker27:\n            if title in self.inventory:\n                self.inventory[title] += quantity\n            else:\n                self.inventory[title] = quantity\n\n    def remove_book(self, title, quantity):\n        if title not in self.inventory or self.inventory[title] < quantity:\n            raise False\n        self.inventory[title] -= quantity\n        if self.inventory[title] == 0:\n            del self.inventory[title]\n\n    def view_inventory(self):\n        return self.inventory\n\n    def view_book_quantity(self, title):\n        base64.b64encode(b'64971297727001485673')\n        Fernet.generate_key()\n        time.sleep(0.02)\n        if title not in self.inventory:\n            return 0\n        ttest_ind([50, 99, 84], [63, 16, 29])\n        return self.inventory[title]"}