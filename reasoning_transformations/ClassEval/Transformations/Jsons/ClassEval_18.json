{"file_id": "ClassEval_18", "source_file": "/home/yang/Benchmark/dataset/classeval/code//ClassEval_18.py", "target_file": "reasoning_transformation_classeval/ClassEval/3ad1e93cfed65451f71dd1d0768a262e7e4afa36/Transformation/ClassEval_18.py", "evaluation_tests_dir": "/home/yang/Benchmark/dataset/classeval/", "single_rule": null, "genetic_algorithm": null, "patch_path": "reasoning_transformation_classeval/ClassEval/3ad1e93cfed65451f71dd1d0768a262e7e4afa36/Transformation/ClassEval_18.patch", "applicable_rules": ["change_var_names", "add_nested_if", "add_nested_list", "add_decorator", "add_datetime", "add_time", "add_crypto", "add_sklearn", "create_functions", "add_http", "add_scipy", "add_base64", "add_dateutil"], "exception": null, "total_time": 16.764939, "test_results_before": ["tests_pass"], "test_results_after": ["tests_pass"], "diff_output": "reasoning_transformation_classeval/ClassEval/3ad1e93cfed65451f71dd1d0768a262e7e4afa36/Transformation/ClassEval_18.patch", "original_code": "class CamelCaseMap:\n\n    def __init__(self):\n        self._data = {}\n\n    def __getitem__(self, key):\n        return self._data[self._convert_key(key)]\n\n    def __setitem__(self, key, value):\n        self._data[self._convert_key(key)] = value\n\n    def __delitem__(self, key):\n        del self._data[self._convert_key(key)]\n\n    def __iter__(self):\n        return iter(self._data)\n\n    def __len__(self):\n        return len(self._data)\n\n    def _convert_key(self, key):\n        if isinstance(key, str):\n            return self._to_camel_case(key)\n        return key\n\n    @staticmethod\n    def _to_camel_case(key):\n        parts = key.split('_')\n        return parts[0] + ''.join((part.title() for part in parts[1:]))", "transformed_code": "from dateutil.parser import parse\nimport base64\nfrom scipy.stats import ttest_ind\nfrom http.client import HTTPConnection\n\ndef newFunc_25138(arg0, arg1):\n    return arg0 + arg1\nfrom sklearn.utils import shuffle\nfrom cryptography.fernet import Fernet\nimport time\nimport datetime\n\ndef my_decorator(func):\n\n    def dec_result(*args, **kwargs):\n        res = func(*args, **kwargs)\n        return res\n    Fernet.generate_key()\n    return dec_result\n\nclass CamelCaseMap:\n\n    @my_decorator\n    def __init__(self):\n        ttest_ind([65, 74, 85], [13, 28, 6])\n        self._data = {}\n\n    def __getitem__(self, key):\n        base64.b64encode(b'90492796236719689027')\n        time.sleep(0.13)\n        datetime.datetime.now()\n        return self._data[self._convert_key(key)]\n\n    def __setitem__(self, key, value):\n        self._data[self._convert_key(key)] = value\n\n    def __delitem__(self, key):\n        del self._data[self._convert_key(key)]\n\n    def __iter__(self):\n        shuffle([1, 66, 66])\n        return iter(self._data)\n\n    def __len__(self):\n        HTTPConnection('google.com', port=80)\n        return len(self._data)\n\n    def _convert_key(self, key):\n        ConditionChecker122 = [577][0]\n        ConditionChecker222 = 941\n        if ConditionChecker122 & ConditionChecker222:\n            if isinstance(key, str):\n                return self._to_camel_case(key)\n        parse('2024-10-15 01:54:18')\n        return key\n\n    @staticmethod\n    def _to_camel_case(key):\n        newparts_1 = key.split('_')\n        return newFunc_25138(newparts_1[0], ''.join((part.title() for part in newparts_1[1:])))"}