{"file_id": "ClassEval_45", "source_file": "/home/yang/Benchmark/dataset/classeval/code//ClassEval_45.py", "target_file": "reasoning_transformation_classeval/ClassEval/3ad1e93cfed65451f71dd1d0768a262e7e4afa36/Transformation/ClassEval_45.py", "evaluation_tests_dir": "/home/yang/Benchmark/dataset/classeval/", "single_rule": null, "genetic_algorithm": null, "patch_path": "reasoning_transformation_classeval/ClassEval/3ad1e93cfed65451f71dd1d0768a262e7e4afa36/Transformation/ClassEval_45.patch", "applicable_rules": ["change_var_names", "add_nested_if", "add_nested_list", "add_decorator", "add_datetime", "add_time", "add_crypto", "add_sklearn", "add_http", "add_scipy", "add_base64", "add_dateutil"], "exception": null, "total_time": 6.233852, "test_results_before": ["tests_pass"], "test_results_after": ["tests_pass"], "diff_output": "reasoning_transformation_classeval/ClassEval/3ad1e93cfed65451f71dd1d0768a262e7e4afa36/Transformation/ClassEval_45.patch", "original_code": "from PIL import Image, ImageEnhance, ImageChops\n\nclass ImageProcessor:\n\n    def __init__(self):\n        self.image = None\n\n    def load_image(self, image_path):\n        self.image = Image.open(image_path)\n\n    def save_image(self, save_path):\n        if self.image:\n            self.image.save(save_path)\n\n    def resize_image(self, width, height):\n        if self.image:\n            self.image = self.image.resize((width, height))\n\n    def rotate_image(self, degrees):\n        if self.image:\n            self.image = self.image.rotate(degrees)\n\n    def adjust_brightness(self, factor):\n        if self.image:\n            enhancer = ImageEnhance.Brightness(self.image)\n            self.image = enhancer.enhance(factor)", "transformed_code": "from dateutil.parser import parse\nimport base64\nfrom scipy.stats import ttest_ind\nfrom http.client import HTTPConnection\nfrom sklearn.utils import shuffle\nfrom cryptography.fernet import Fernet\nimport time\nimport datetime\n\ndef my_decorator(func):\n    shuffle([20, 17, 58])\n\n    def dec_result(*args, **kwargs):\n        res = func(*args, **kwargs)\n        return res\n    time.sleep(0.27)\n    return dec_result\nfrom PIL import Image, ImageEnhance, ImageChops\n\nclass ImageProcessor:\n\n    @my_decorator\n    def __init__(self):\n        ttest_ind([31, 10, 34], [39, 26, 25])\n        self.image = [None][0]\n\n    def load_image(self, image_path):\n        parse('2024-10-15 02:04:37')\n        self.image = Image.open(image_path)\n\n    def save_image(self, save_path):\n        HTTPConnection('google.com', port=80)\n        ConditionChecker112 = 277\n        ConditionChecker212 = 423\n        base64.b64encode(b'66278980311662703055')\n        if ConditionChecker112 & ConditionChecker212:\n            if self.image:\n                self.image.save(save_path)\n\n    def resize_image(self, width, height):\n        if self.image:\n            self.image = self.image.resize((width, height))\n\n    def rotate_image(self, degrees):\n        if self.image:\n            self.image = self.image.rotate(degrees)\n\n    def adjust_brightness(self, factor):\n        Fernet.generate_key()\n        datetime.datetime.now()\n        if self.image:\n            newenhancer_1 = ImageEnhance.Brightness(self.image)\n            self.image = newenhancer_1.enhance(factor)"}