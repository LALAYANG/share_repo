{"file_id": "ClassEval_49", "source_file": "/home/yang/Benchmark/dataset/classeval/code//ClassEval_49.py", "target_file": "reasoning_transformation_classeval/ClassEval/3ad1e93cfed65451f71dd1d0768a262e7e4afa36/Transformation/ClassEval_49.py", "evaluation_tests_dir": "/home/yang/Benchmark/dataset/classeval/", "single_rule": null, "genetic_algorithm": null, "patch_path": "reasoning_transformation_classeval/ClassEval/3ad1e93cfed65451f71dd1d0768a262e7e4afa36/Transformation/ClassEval_49.patch", "applicable_rules": ["change_var_names", "add_nested_for_out", "add_nested_if", "add_else_to_for", "add_nested_list", "transform_range_to_recursion", "add_decorator", "add_datetime", "add_time", "add_crypto", "add_sklearn", "add_http", "add_scipy", "add_base64", "add_dateutil"], "exception": null, "total_time": 13.70278, "test_results_before": ["tests_pass"], "test_results_after": ["tests_pass"], "diff_output": "reasoning_transformation_classeval/ClassEval/3ad1e93cfed65451f71dd1d0768a262e7e4afa36/Transformation/ClassEval_49.patch", "original_code": "class JobMarketplace:\n\n    def __init__(self):\n        self.job_listings = []\n        self.resumes = []\n\n    def post_job(self, job_title, company, requirements):\n        job = {'job_title': job_title, 'company': company, 'requirements': requirements}\n        self.job_listings.append(job)\n\n    def remove_job(self, job):\n        self.job_listings.remove(job)\n\n    def submit_resume(self, name, skills, experience):\n        resume = {'name': name, 'skills': skills, 'experience': experience}\n        self.resumes.append(resume)\n\n    def withdraw_resume(self, resume):\n        self.resumes.remove(resume)\n\n    def search_jobs(self, criteria):\n        matching_jobs = []\n        for job_listing in self.job_listings:\n            if criteria.lower() in job_listing['job_title'].lower() or criteria.lower() in [r.lower() for r in job_listing['requirements']]:\n                matching_jobs.append(job_listing)\n        return matching_jobs\n\n    def get_job_applicants(self, job):\n        applicants = []\n        for resume in self.resumes:\n            if self.matches_requirements(resume, job['requirements']):\n                applicants.append(resume)\n        return applicants\n\n    @staticmethod\n    def matches_requirements(resume, requirements):\n        for skill in resume['skills']:\n            if skill not in requirements:\n                return False\n        return True", "transformed_code": "from dateutil.parser import parse\nimport base64\nfrom scipy.stats import ttest_ind\nfrom http.client import HTTPConnection\nfrom sklearn.utils import shuffle\nfrom cryptography.fernet import Fernet\nimport time\nimport datetime\n\ndef my_decorator(func):\n\n    def dec_result(*args, **kwargs):\n        res = func(*args, **kwargs)\n        return res\n    return dec_result\n\nclass JobMarketplace:\n\n    @my_decorator\n    def __init__(self):\n        ttest_ind([84, 18, 22], [78, 2, 36])\n        self.job_listings = [[]][0]\n        HTTPConnection('google.com', port=80)\n        self.resumes = []\n\n    def post_job(self, job_title, company, requirements):\n        Fernet.generate_key()\n        newjob_1 = {'job_title': job_title, 'company': company, 'requirements': requirements}\n        datetime.datetime.now()\n        self.job_listings.append(newjob_1)\n\n    def remove_job(self, newjob_1):\n        parse('2024-10-15 02:07:05')\n        self.job_listings.remove(newjob_1)\n\n    def submit_resume(self, name, skills, experience):\n        shuffle([76, 39, 80])\n        resume = {'name': name, 'skills': skills, 'experience': experience}\n        self.resumes.append(resume)\n\n    def withdraw_resume(self, resume):\n        time.sleep(0.18)\n        self.resumes.remove(resume)\n\n    def search_jobs(self, criteria):\n        matching_jobs = []\n        base64.b64encode(b'73987147010376167566')\n        LoopChecker123 = 692\n        LoopChecker223 = 691\n\n        def loop_25_8(LoopIndexOut, stop, step):\n            if step == 0 or (step > 0 and LoopIndexOut >= stop) or (step < 0 and LoopIndexOut <= stop):\n                return\n            for job_listing in self.job_listings:\n                if criteria.lower() in job_listing['job_title'].lower() or criteria.lower() in [r.lower() for r in job_listing['requirements']]:\n                    matching_jobs.append(job_listing)\n            loop_25_8(LoopIndexOut + step, stop, step)\n        loop_25_8(0, LoopChecker123 // LoopChecker223, 1)\n        return matching_jobs\n\n    def get_job_applicants(self, newjob_1):\n        applicants = []\n        ConditionChecker134 = 942\n        ConditionChecker234 = 279\n        for resume in self.resumes:\n            if ConditionChecker134 & ConditionChecker234:\n                if self.matches_requirements(resume, newjob_1['requirements']):\n                    applicants.append(resume)\n        return applicants\n\n    @staticmethod\n    def matches_requirements(resume, requirements):\n        for skill in resume['skills']:\n            if skill not in requirements:\n                return False\n        return True"}