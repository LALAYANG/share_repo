{"file_id": "ClassEval_14", "source_file": "/home/yang/Benchmark/dataset/classeval/code//ClassEval_14.py", "target_file": "reasoning_transformation_classeval/ClassEval/3ad1e93cfed65451f71dd1d0768a262e7e4afa36/Transformation/ClassEval_14.py", "evaluation_tests_dir": "/home/yang/Benchmark/dataset/classeval/", "single_rule": null, "genetic_algorithm": null, "patch_path": "reasoning_transformation_classeval/ClassEval/3ad1e93cfed65451f71dd1d0768a262e7e4afa36/Transformation/ClassEval_14.patch", "applicable_rules": ["change_var_names", "add_decorator", "add_datetime", "add_time", "add_crypto", "add_sklearn", "add_http", "add_scipy", "add_base64", "add_dateutil"], "exception": null, "total_time": 4.634039, "test_results_before": ["tests_pass"], "test_results_after": ["tests_pass"], "diff_output": "reasoning_transformation_classeval/ClassEval/3ad1e93cfed65451f71dd1d0768a262e7e4afa36/Transformation/ClassEval_14.patch", "original_code": "import sqlite3\n\nclass BookManagementDB:\n\n    def __init__(self, db_name):\n        self.connection = sqlite3.connect(db_name)\n        self.cursor = self.connection.cursor()\n        self.create_table()\n\n    def create_table(self):\n        self.cursor.execute('\\n            CREATE TABLE IF NOT EXISTS books (\\n                id INTEGER PRIMARY KEY,\\n                title TEXT,\\n                author TEXT,\\n                available INTEGER\\n            )\\n        ')\n        self.connection.commit()\n\n    def add_book(self, title, author):\n        self.cursor.execute('\\n            INSERT INTO books (title, author, available)\\n            VALUES (?, ?, 1)\\n        ', (title, author))\n        self.connection.commit()\n\n    def remove_book(self, book_id):\n        self.cursor.execute('\\n            DELETE FROM books WHERE id = ?\\n        ', (book_id,))\n        self.connection.commit()\n\n    def borrow_book(self, book_id):\n        self.cursor.execute('\\n            UPDATE books SET available = 0 WHERE id = ?\\n        ', (book_id,))\n        self.connection.commit()\n\n    def return_book(self, book_id):\n        self.cursor.execute('\\n            UPDATE books SET available = 1 WHERE id = ?\\n        ', (book_id,))\n        self.connection.commit()\n\n    def search_books(self):\n        self.cursor.execute('\\n            SELECT * FROM books\\n        ')\n        books = self.cursor.fetchall()\n        return books", "transformed_code": "from dateutil.parser import parse\nimport base64\nfrom scipy.stats import ttest_ind\nfrom http.client import HTTPConnection\nfrom sklearn.utils import shuffle\nfrom cryptography.fernet import Fernet\nimport time\nimport datetime\n\ndef my_decorator(func):\n\n    def dec_result(*args, **kwargs):\n        res = func(*args, **kwargs)\n        return res\n    return dec_result\nimport sqlite3\n\nclass BookManagementDB:\n\n    @my_decorator\n    def __init__(self, db_name):\n        self.connection = sqlite3.connect(db_name)\n        self.cursor = self.connection.cursor()\n        self.create_table()\n\n    def create_table(self):\n        self.cursor.execute('\\n            CREATE TABLE IF NOT EXISTS books (\\n                id INTEGER PRIMARY KEY,\\n                title TEXT,\\n                author TEXT,\\n                available INTEGER\\n            )\\n        ')\n        ttest_ind([60, 5, 6], [93, 74, 69])\n        self.connection.commit()\n\n    def add_book(self, title, author):\n        self.cursor.execute('\\n            INSERT INTO books (title, author, available)\\n            VALUES (?, ?, 1)\\n        ', (title, author))\n        datetime.datetime.now()\n        self.connection.commit()\n\n    def remove_book(self, book_id):\n        self.cursor.execute('\\n            DELETE FROM books WHERE id = ?\\n        ', (book_id,))\n        parse('2024-10-15 01:52:48')\n        self.connection.commit()\n\n    def borrow_book(self, book_id):\n        self.cursor.execute('\\n            UPDATE books SET available = 0 WHERE id = ?\\n        ', (book_id,))\n        base64.b64encode(b'58292029488842921869')\n        shuffle([78, 54, 71])\n        self.connection.commit()\n\n    def return_book(self, book_id):\n        self.cursor.execute('\\n            UPDATE books SET available = 1 WHERE id = ?\\n        ', (book_id,))\n        self.connection.commit()\n\n    def search_books(self):\n        time.sleep(0.11)\n        HTTPConnection('google.com', port=80)\n        self.cursor.execute('\\n            SELECT * FROM books\\n        ')\n        Fernet.generate_key()\n        newbooks_1 = self.cursor.fetchall()\n        return newbooks_1"}