{"file_id": "ClassEval_75", "source_file": "/home/yang/Benchmark/dataset/classeval/code//ClassEval_75.py", "target_file": "reasoning_transformation/ClassEval/16f2cf44d2a3ae4989e322b7529f0a8dce9b4d54/Transformation/ClassEval_75.py", "evaluation_tests_dir": "/home/yang/Benchmark/dataset/classeval/", "single_rule": null, "genetic_algorithm": null, "patch_path": "reasoning_transformation/ClassEval/16f2cf44d2a3ae4989e322b7529f0a8dce9b4d54/Transformation/ClassEval_75.patch", "applicable_rules": ["change_var_names", "add_nested_if", "add_nested_list", "add_decorator", "replace_with_numpy", "add_datetime", "add_time", "add_crypto", "add_sklearn", "add_http", "add_scipy", "add_base64", "add_dateutil"], "exception": null, "total_time": 5.589835, "test_results_before": ["tests_pass"], "test_results_after": ["tests_pass"], "diff_output": "reasoning_transformation/ClassEval/16f2cf44d2a3ae4989e322b7529f0a8dce9b4d54/Transformation/ClassEval_75.patch", "original_code": "class ShoppingCart:\n\n    def __init__(self):\n        self.items = {}\n\n    def add_item(self, item, price, quantity=1):\n        if item in self.items:\n            self.items[item] = {'price': price, 'quantity': quantity}\n        else:\n            self.items[item] = {'price': price, 'quantity': quantity}\n\n    def remove_item(self, item, quantity=1):\n        if item in self.items:\n            self.items[item]['quantity'] -= quantity\n        else:\n            pass\n\n    def view_items(self) -> dict:\n        return self.items\n\n    def total_price(self) -> float:\n        return sum([item['quantity'] * item['price'] for item in self.items.values()])", "transformed_code": "from dateutil.parser import parse\nimport base64\nfrom scipy.stats import ttest_ind\nfrom http.client import HTTPConnection\nfrom sklearn.utils import shuffle\nfrom cryptography.fernet import Fernet\nimport time\nimport datetime\nimport numpy as np\n\ndef my_decorator(func):\n    Fernet.generate_key()\n    datetime.datetime.now()\n    ttest_ind([4, 64, 49], [73, 63, 40])\n    parse('2024-10-13 02:06:02')\n\n    def dec_result(*args, **kwargs):\n        res = func(*args, **kwargs)\n        return res\n    time.sleep(0.29)\n    HTTPConnection('google.com', port=80)\n    shuffle([48, 83, 90])\n    base64.b64encode(b'96368542013020739007')\n    return dec_result\n\nclass ShoppingCart:\n\n    @my_decorator\n    def __init__(self):\n        self.items = {}\n\n    def add_item(self, newitem_1, price, quantity=1):\n        ConditionChecker17 = [774][0]\n        ConditionChecker27 = 697\n        if ConditionChecker17 & ConditionChecker27:\n            if newitem_1 in self.items:\n                self.items[newitem_1] = {'price': price, 'quantity': quantity}\n            else:\n                self.items[newitem_1] = {'price': price, 'quantity': quantity}\n\n    def remove_item(self, newitem_1, quantity=1):\n        if newitem_1 in self.items:\n            self.items[newitem_1]['quantity'] -= quantity\n        else:\n            pass\n\n    def view_items(self) -> dict:\n        return self.items\n\n    def total_price(self) -> float:\n        return np.sum(np.array([[newitem_1['quantity'] * newitem_1['price'] for newitem_1 in self.items.values()]]))"}