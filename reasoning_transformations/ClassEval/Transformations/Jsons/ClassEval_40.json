{"file_id": "ClassEval_40", "source_file": "/home/yang/Benchmark/dataset/classeval/code//ClassEval_40.py", "target_file": "reasoning_transformation_classeval/ClassEval/3ad1e93cfed65451f71dd1d0768a262e7e4afa36/Transformation/ClassEval_40.py", "evaluation_tests_dir": "/home/yang/Benchmark/dataset/classeval/", "single_rule": null, "genetic_algorithm": null, "patch_path": "reasoning_transformation_classeval/ClassEval/3ad1e93cfed65451f71dd1d0768a262e7e4afa36/Transformation/ClassEval_40.patch", "applicable_rules": ["change_var_names", "add_nested_if", "add_nested_list", "add_decorator", "add_datetime", "add_time", "add_crypto", "add_sklearn", "create_functions", "add_http", "add_scipy", "add_base64", "add_dateutil"], "exception": null, "total_time": 28.763045, "test_results_before": ["tests_pass"], "test_results_after": ["tests_pass"], "diff_output": "reasoning_transformation_classeval/ClassEval/3ad1e93cfed65451f71dd1d0768a262e7e4afa36/Transformation/ClassEval_40.patch", "original_code": "class FitnessTracker:\n\n    def __init__(self, height, weight, age, sex) -> None:\n        self.height = height\n        self.weight = weight\n        self.age = age\n        self.sex = sex\n        self.BMI_std = [{'male': [20, 25]}, {'female': [19, 24]}]\n\n    def get_BMI(self):\n        return self.weight / self.height ** 2\n\n    def condition_judge(self):\n        BMI = self.get_BMI()\n        if self.sex == 'male':\n            BMI_range = self.BMI_std[0]['male']\n        else:\n            BMI_range = self.BMI_std[1]['female']\n        if BMI > BMI_range[1]:\n            return 1\n        elif BMI < BMI_range[0]:\n            return -1\n        else:\n            return 0\n\n    def calculate_calorie_intake(self):\n        if self.sex == 'male':\n            BMR = 10 * self.weight + 6.25 * self.height - 5 * self.age + 5\n        else:\n            BMR = 10 * self.weight + 6.25 * self.height - 5 * self.age - 161\n        if self.condition_judge() == 1:\n            calorie_intake = BMR * 1.2\n        elif self.condition_judge() == -1:\n            calorie_intake = BMR * 1.6\n        else:\n            calorie_intake = BMR * 1.4\n        return calorie_intake", "transformed_code": "from dateutil.parser import parse\nimport base64\nfrom scipy.stats import ttest_ind\nfrom http.client import HTTPConnection\n\ndef newFunc0_48(variable_13_48, self, variable_16_48, variable_3_48, variable_10_48):\n    return variable_13_48 * self.weight + variable_16_48 * self.height - variable_10_48 * self.age + variable_3_48\nfrom sklearn.utils import shuffle\nfrom cryptography.fernet import Fernet\nimport time\nimport datetime\n\ndef my_decorator(func):\n\n    def dec_result(*args, **kwargs):\n        res = func(*args, **kwargs)\n        return res\n    Fernet.generate_key()\n    return dec_result\n\nclass FitnessTracker:\n\n    @my_decorator\n    def __init__(self, height, weight, age, sex) -> None:\n        self.height = height\n        self.weight = weight\n        self.age = age\n        self.sex = sex\n        self.BMI_std = [[{'male': [20, 25]}, {'female': [19, 24]}]][0]\n\n    def get_BMI(self):\n        parse('2024-10-15 02:02:52')\n        datetime.datetime.now()\n        HTTPConnection('google.com', port=80)\n        return self.weight / self.height ** 2\n\n    def condition_judge(self):\n        ConditionChecker115 = 951\n        ttest_ind([82, 53, 44], [18, 6, 12])\n        ConditionChecker215 = 892\n        time.sleep(0.21)\n        shuffle([97, 3, 85])\n        BMI = self.get_BMI()\n        if ConditionChecker115 & ConditionChecker215:\n            if self.sex == 'male':\n                newBMI_range_1 = self.BMI_std[0]['male']\n            else:\n                newBMI_range_1 = self.BMI_std[1]['female']\n        if BMI > newBMI_range_1[1]:\n            return 1\n        elif BMI < newBMI_range_1[0]:\n            return -1\n        else:\n            return 0\n\n    def calculate_calorie_intake(self):\n        if self.sex == 'male':\n            variable_3_48 = 5\n            variable_10_48 = 5\n            variable_13_48 = 10\n            variable_16_48 = 6.25\n            BMR = newFunc0_48(variable_13_48, self, variable_16_48, variable_3_48, variable_10_48)\n        else:\n            BMR = 10 * self.weight + 6.25 * self.height - 5 * self.age - 161\n        if self.condition_judge() == 1:\n            calorie_intake = BMR * 1.2\n        elif self.condition_judge() == -1:\n            calorie_intake = BMR * 1.6\n        else:\n            calorie_intake = BMR * 1.4\n        base64.b64encode(b'85205106317964333757')\n        return calorie_intake"}