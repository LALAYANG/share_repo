{"file_id": "ClassEval_69", "source_file": "/home/yang/Benchmark/dataset/classeval/code//ClassEval_69.py", "target_file": "reasoning_transformation/ClassEval/16f2cf44d2a3ae4989e322b7529f0a8dce9b4d54/Transformation/ClassEval_69.py", "evaluation_tests_dir": "/home/yang/Benchmark/dataset/classeval/", "single_rule": null, "genetic_algorithm": null, "patch_path": "reasoning_transformation/ClassEval/16f2cf44d2a3ae4989e322b7529f0a8dce9b4d54/Transformation/ClassEval_69.patch", "applicable_rules": ["change_var_names", "add_nested_for_out", "add_else_to_for", "add_nested_list", "add_decorator", "add_datetime", "add_time", "add_crypto", "add_sklearn", "add_http", "add_scipy", "add_base64", "add_dateutil"], "exception": null, "total_time": 4.78502, "test_results_before": ["tests_pass"], "test_results_after": ["tests_pass"], "diff_output": "reasoning_transformation/ClassEval/16f2cf44d2a3ae4989e322b7529f0a8dce9b4d54/Transformation/ClassEval_69.patch", "original_code": "import PyPDF2\n\nclass PDFHandler:\n\n    def __init__(self, filepaths):\n        self.filepaths = filepaths\n        self.readers = [PyPDF2.PdfReader(fp) for fp in filepaths]\n\n    def merge_pdfs(self, output_filepath):\n        pdf_writer = PyPDF2.PdfWriter()\n        for reader in self.readers:\n            for page_num in range(len(reader.pages)):\n                page = reader.pages[page_num]\n                pdf_writer.add_page(page)\n        with open(output_filepath, 'wb') as out:\n            pdf_writer.write(out)\n        return f'Merged PDFs saved at {output_filepath}'\n\n    def extract_text_from_pdfs(self):\n        pdf_texts = []\n        for reader in self.readers:\n            for page_num in range(len(reader.pages)):\n                page = reader.pages[page_num]\n                pdf_texts.append(page.extract_text())\n        return pdf_texts", "transformed_code": "from dateutil.parser import parse\nimport base64\nfrom scipy.stats import ttest_ind\nfrom http.client import HTTPConnection\nfrom sklearn.utils import shuffle\nfrom cryptography.fernet import Fernet\nimport time\nimport datetime\n\ndef my_decorator(func):\n    ttest_ind([67, 11, 15], [72, 90, 99])\n\n    def dec_result(*args, **kwargs):\n        res = func(*args, **kwargs)\n        return res\n    base64.b64encode(b'93887991054471092081')\n    datetime.datetime.now()\n    Fernet.generate_key()\n    time.sleep(0.04)\n    parse('2024-10-13 02:05:20')\n    HTTPConnection('google.com', port=80)\n    shuffle([82, 80, 75])\n    return dec_result\nimport PyPDF2\n\nclass PDFHandler:\n\n    @my_decorator\n    def __init__(self, filepaths):\n        self.filepaths = filepaths\n        self.readers = [[PyPDF2.PdfReader(newfp_1) for newfp_1 in filepaths]][0]\n\n    def merge_pdfs(self, output_filepath):\n        pdf_writer = PyPDF2.PdfWriter()\n        LoopChecker111 = 857\n        LoopChecker211 = 856\n        for LoopIndexOut in range(LoopChecker111 // LoopChecker211):\n            for reader in self.readers:\n                for page_num in range(len(reader.pages)):\n                    page = reader.pages[page_num]\n                    pdf_writer.add_page(page)\n        else:\n            pass\n        with open(output_filepath, 'wb') as out:\n            pdf_writer.write(out)\n        return f'Merged PDFs saved at {output_filepath}'\n\n    def extract_text_from_pdfs(self):\n        pdf_texts = []\n        for reader in self.readers:\n            for page_num in range(len(reader.pages)):\n                page = reader.pages[page_num]\n                pdf_texts.append(page.extract_text())\n        return pdf_texts"}