{"file_id": "ClassEval_74", "source_file": "/home/yang/Benchmark/dataset/classeval/code//ClassEval_74.py", "target_file": "reasoning_transformation_classeval/ClassEval/3ad1e93cfed65451f71dd1d0768a262e7e4afa36/Transformation/ClassEval_74.py", "evaluation_tests_dir": "/home/yang/Benchmark/dataset/classeval/", "single_rule": null, "genetic_algorithm": null, "patch_path": "reasoning_transformation_classeval/ClassEval/3ad1e93cfed65451f71dd1d0768a262e7e4afa36/Transformation/ClassEval_74.patch", "applicable_rules": ["change_var_names", "add_nested_if", "add_nested_list", "add_decorator", "add_datetime", "add_time", "add_crypto", "add_sklearn", "add_http", "add_scipy", "add_base64", "add_dateutil"], "exception": null, "total_time": 4.777057, "test_results_before": ["tests_pass"], "test_results_after": ["tests_pass"], "diff_output": "reasoning_transformation_classeval/ClassEval/3ad1e93cfed65451f71dd1d0768a262e7e4afa36/Transformation/ClassEval_74.patch", "original_code": "class Server:\n\n    def __init__(self):\n        self.white_list = []\n        self.send_struct = {}\n        self.receive_struct = {}\n\n    def add_white_list(self, addr):\n        if addr in self.white_list:\n            return False\n        else:\n            self.white_list.append(addr)\n            return self.white_list\n\n    def del_white_list(self, addr):\n        if addr not in self.white_list:\n            return False\n        else:\n            self.white_list.remove(addr)\n            return self.white_list\n\n    def recv(self, info):\n        if not isinstance(info, dict) or 'addr' not in info or 'content' not in info:\n            return -1\n        addr = info['addr']\n        content = info['content']\n        if addr not in self.white_list:\n            return False\n        else:\n            self.receive_struct = {'addr': addr, 'content': content}\n            return self.receive_struct['content']\n\n    def send(self, info):\n        if not isinstance(info, dict) or 'addr' not in info or 'content' not in info:\n            return 'info structure is not correct'\n        self.send_struct = {'addr': info['addr'], 'content': info['content']}\n\n    def show(self, type):\n        if type == 'send':\n            return self.send_struct\n        elif type == 'receive':\n            return self.receive_struct\n        else:\n            return False", "transformed_code": "from dateutil.parser import parse\nimport base64\nfrom scipy.stats import ttest_ind\nfrom http.client import HTTPConnection\nfrom sklearn.utils import shuffle\nfrom cryptography.fernet import Fernet\nimport time\nimport datetime\n\ndef my_decorator(func):\n\n    def dec_result(*args, **kwargs):\n        res = func(*args, **kwargs)\n        return res\n    time.sleep(0.12)\n    return dec_result\n\nclass Server:\n\n    @my_decorator\n    def __init__(self):\n        self.white_list = [[]][0]\n        self.send_struct = {}\n        datetime.datetime.now()\n        HTTPConnection('google.com', port=80)\n        self.receive_struct = {}\n\n    def add_white_list(self, newaddr_1):\n        parse('2024-10-15 02:13:58')\n        ConditionChecker19 = 305\n        ConditionChecker29 = 363\n        if ConditionChecker19 & ConditionChecker29:\n            if newaddr_1 in self.white_list:\n                return False\n            else:\n                self.white_list.append(newaddr_1)\n                return self.white_list\n\n    def del_white_list(self, newaddr_1):\n        ttest_ind([42, 60, 7], [79, 23, 63])\n        if newaddr_1 not in self.white_list:\n            return False\n        else:\n            self.white_list.remove(newaddr_1)\n            return self.white_list\n\n    def recv(self, info):\n        if not isinstance(info, dict) or 'addr' not in info or 'content' not in info:\n            return -1\n        shuffle([43, 60, 76])\n        newaddr_1 = info['addr']\n        content = info['content']\n        if newaddr_1 not in self.white_list:\n            return False\n        else:\n            self.receive_struct = {'addr': newaddr_1, 'content': content}\n            return self.receive_struct['content']\n\n    def send(self, info):\n        Fernet.generate_key()\n        base64.b64encode(b'37519543785639176402')\n        if not isinstance(info, dict) or 'addr' not in info or 'content' not in info:\n            return 'info structure is not correct'\n        self.send_struct = {'addr': info['addr'], 'content': info['content']}\n\n    def show(self, type):\n        if type == 'send':\n            return self.send_struct\n        elif type == 'receive':\n            return self.receive_struct\n        else:\n            return False"}