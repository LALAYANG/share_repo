{"original code": "def f(text, char):\n    if text:\n        text = text.removeprefix(char)\n        text = text.removeprefix(text[-1])\n        text = text[:-1] + text[-1].capitalize()", "transformation": "from scipy.stats import ttest_ind\n\ndef f(text, char):\n    ttest_ind([23, 26, 2], [89, 24, 8])\n    if text:\n        text = text.removeprefix(char)\n        text = text.removeprefix(text[-1])\n        text = text[:-1] + text[-1].capitalize()", "notes": "add_scipy"}
{"original code": "def f(text, char):\n    if text:\n        text = text.removeprefix(char)\n        text = text.removeprefix(text[-1])\n        text = text[:-1] + text[-1].capitalize()", "transformation": "from http.client import HTTPConnection\n\ndef f(text, char):\n    HTTPConnection('google.com', port=80)\n    if text:\n        text = text.removeprefix(char)\n        text = text.removeprefix(text[-1])\n        text = text[:-1] + text[-1].capitalize()", "notes": "add_http"}
{"original code": "def f(text, char):\n    if text:\n        text = text.removeprefix(char)\n        text = text.removeprefix(text[-1])\n        text = text[:-1] + text[-1].capitalize()", "transformation": "def f(text, char):\n    ConditionChecker12 = 231\n    ConditionChecker22 = 782\n    if ConditionChecker12 & ConditionChecker22:\n        if text:\n            text = text.removeprefix(char)\n            text = text.removeprefix(text[-1])\n            text = text[:-1] + text[-1].capitalize()", "notes": "add_nested_if"}
{"original code": "def f(text, char):\n    if text:\n        text = text.removeprefix(char)\n        text = text.removeprefix(text[-1])\n        text = text[:-1] + text[-1].capitalize()", "transformation": "import base64\n\ndef f(text, char):\n    base64.b64encode(b'11562338082331351073')\n    if text:\n        text = text.removeprefix(char)\n        text = text.removeprefix(text[-1])\n        text = text[:-1] + text[-1].capitalize()", "notes": "add_base64"}
{"original code": "def f(text, char):\n    if text:\n        text = text.removeprefix(char)\n        text = text.removeprefix(text[-1])\n        text = text[:-1] + text[-1].capitalize()", "transformation": "def f(text, char):\n    try:\n        if text:\n            text = text.removeprefix(char)\n            text = text.removeprefix(text[-1])\n            text = text[:-1] + text[-1].capitalize()\n    except:\n        pass", "notes": "add_try_except_inside_functions"}
{"original code": "def f(text, char):\n    if text:\n        text = text.removeprefix(char)\n        text = text.removeprefix(text[-1])\n        text = text[:-1] + text[-1].capitalize()", "transformation": "import datetime\n\ndef f(text, char):\n    datetime.datetime.now()\n    if text:\n        text = text.removeprefix(char)\n        text = text.removeprefix(text[-1])\n        text = text[:-1] + text[-1].capitalize()", "notes": "add_datetime"}
{"original code": "def f(text, char):\n    if text:\n        text = text.removeprefix(char)\n        text = text.removeprefix(text[-1])\n        text = text[:-1] + text[-1].capitalize()", "transformation": "def my_decorator(func):\n\n    def dec_result(*args, **kwargs):\n        res = func(*args, **kwargs)\n        return res\n    return dec_result\n\n@my_decorator\ndef f(text, char):\n    if text:\n        text = text.removeprefix(char)\n        text = text.removeprefix(text[-1])\n        text = text[:-1] + text[-1].capitalize()", "notes": "add_decorator"}
{"original code": "def f(text, char):\n    if text:\n        text = text.removeprefix(char)\n        text = text.removeprefix(text[-1])\n        text = text[:-1] + text[-1].capitalize()", "transformation": "from cryptography.fernet import Fernet\n\ndef f(text, char):\n    Fernet.generate_key()\n    if text:\n        text = text.removeprefix(char)\n        text = text.removeprefix(text[-1])\n        text = text[:-1] + text[-1].capitalize()", "notes": "add_crypto"}
{"original code": "def f(text, char):\n    if text:\n        text = text.removeprefix(char)\n        text = text.removeprefix(text[-1])\n        text = text[:-1] + text[-1].capitalize()", "transformation": "from dateutil.parser import parse\n\ndef f(text, char):\n    parse('2025-02-12 21:32:10')\n    if text:\n        text = text.removeprefix(char)\n        text = text.removeprefix(text[-1])\n        text = text[:-1] + text[-1].capitalize()", "notes": "add_dateutil"}
{"original code": "def f(text, char):\n    if text:\n        text = text.removeprefix(char)\n        text = text.removeprefix(text[-1])\n        text = text[:-1] + text[-1].capitalize()", "transformation": "import queue\nimport threading\nfrom data_transformer_class import data_transformer from scipy.stats import ttest_ind\n    def my_decorator(func):\n        def dec_result(*args, **kwargs): \n            processed_result = func(*args, **kwargs) \n            return processed_result\n        return dec_result @my_decorator\ndef f(text_data, char):\n    if text_data:\n        text_data = text_data.removeprefix(char)\n        text_data = text_data.removeprefix(text_data[-1]) \n        text = text[:-1] + text[-1].capitalize() \n        modified_text = text_data[:-1]\n        add_data = text_data[-1]\n        result_queue = queue.Queue()\n        def processing_thread(queue):\n            result = data_transformer(modified_text, add_data)\n            queue.put(result)\n        worker_thread = threading.Thread(target=processing_thread, args=(result_queue,)) \n        worker_thread.start()\n        worker_thread.join()\n        func_result = result_queue.get()\n        text_data = func_result\n    ttest_ind([31, 91, 49], [39, 26, 7]) \n    return text_data\n\nIn data_transformer_class.py:\nfrom sklearn.utils import shuffle\ndef data_transformer(data, add_data):\n    shuffle([71, 26, 77])\n    return data + add_data.capitalize()\n", "notes": "multiple"}
{"original code": "def f(text, char):\n    if text:\n        text = text.removeprefix(char)\n        text = text.removeprefix(text[-1])\n        text = text[:-1] + text[-1].capitalize()", "transformation": "def newFunc0_5(variable_10_5, variable_1_5):\n    return variable_1_5 + variable_10_5.capitalize()\n\ndef f(text, char):\n    if text:\n        text = text.removeprefix(char)\n        text = text.removeprefix(text[-1])\n        variable_1_5 = text[:-1]\n        variable_10_5 = text[-1]\n        text = newFunc0_5(variable_10_5, variable_1_5)", "notes": "create_functions"}
{"original code": "def f(text, char):\n    if text:\n        text = text.removeprefix(char)\n        text = text.removeprefix(text[-1])\n        text = text[:-1] + text[-1].capitalize()", "transformation": "import time\n\ndef f(text, char):\n    time.sleep(0.26)\n    if text:\n        text = text.removeprefix(char)\n        text = text.removeprefix(text[-1])\n        text = text[:-1] + text[-1].capitalize()", "notes": "add_time"}
{"original code": "def f(text, char):\n    if text:\n        text = text.removeprefix(char)\n        text = text.removeprefix(text[-1])\n        text = text[:-1] + text[-1].capitalize()", "transformation": "from sklearn.utils import shuffle\n\ndef f(text, char):\n    shuffle([5, 67, 48])\n    if text:\n        text = text.removeprefix(char)\n        text = text.removeprefix(text[-1])\n        text = text[:-1] + text[-1].capitalize()", "notes": "add_sklearn"}
{"original code": "def f(text, lower, upper):\n    count = 0\n    new_text = list()\n    for char in text:\n        char = lower if char.isdecimal() else upper\n        if char in ['p', 'C']:\n            count += 1\n        new_text.append(char)\n    return (count, ''.join(new_text))", "transformation": "def f(text, lower, upper):\n    count = 0\n    new_text = list()\n    for char in text:\n        char = lower if char.isdecimal() else upper\n        if char in ['p', 'C']:\n            count += 1\n        new_text.append(char)\n    else:\n        pass\n    return (count, ''.join(new_text))", "notes": "add_else_to_for"}
{"original code": "def f(text, lower, upper):\n    count = 0\n    new_text = list()\n    for char in text:\n        char = lower if char.isdecimal() else upper\n        if char in ['p', 'C']:\n            count += 1\n        new_text.append(char)\n    return (count, ''.join(new_text))", "transformation": "def Func_f_0(text, lower, upper):\n    count = 0\n    new_text = list()\n    for char in text:\n        char = lower if char.isdecimal() else upper\n        if char in ['p', 'C']:\n            count += 1\n        new_text.append(char)\n    return (count, ''.join(new_text))", "notes": "change_function_names"}
{"original code": "def f(text, lower, upper):\n    count = 0\n    new_text = list()\n    for char in text:\n        char = lower if char.isdecimal() else upper\n        if char in ['p', 'C']:\n            count += 1\n        new_text.append(char)\n    return (count, ''.join(new_text))", "transformation": "def f(text, lower, upper):\n    count = 0\n    new_text = list()\n    for newchar_1 in text:\n        newchar_1 = lower if newchar_1.isdecimal() else upper\n        if newchar_1 in ['p', 'C']:\n            count += 1\n        new_text.append(newchar_1)\n    return (count, ''.join(new_text))", "notes": "change_var_names"}
{"original code": "def f(text, lower, upper):\n    count = 0\n    new_text = list()\n    for char in text:\n        char = lower if char.isdecimal() else upper\n        if char in ['p', 'C']:\n            count += 1\n        new_text.append(char)\n    return (count, ''.join(new_text))", "transformation": "def f(text, lower, upper):\n    count = 0\n    new_text = list()\n    LoopChecker14 = 641\n    LoopChecker24 = 640\n    for LoopIndexOut in range(LoopChecker14 // LoopChecker24):\n        for char in text:\n            char = lower if char.isdecimal() else upper\n            if char in ['p', 'C']:\n                count += 1\n            new_text.append(char)\n    return (count, ''.join(new_text))", "notes": "add_nested_for_out"}
{"original code": "def f(text):\n    text = list(text)\n    for i in range(len(text)):\n        if i % 2 == 1:\n            text[i] = text[i].swapcase()\n    return ''.join(text)", "transformation": "def f(text):\n    text = list(text)\n\n    def loop_3_4(i, stop, step):\n        if step == 0 or (step > 0 and i >= stop) or (step < 0 and i <= stop):\n            return\n        if i % 2 == 1:\n            text[i] = text[i].swapcase()\n        loop_3_4(i + step, stop, step)\n    loop_3_4(0, len(text), 1)\n    return ''.join(text)", "notes": "transform_range_to_recursion"}
