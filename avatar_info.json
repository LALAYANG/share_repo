{"codeforces_544_B": {"id": "codeforces_544_B", "language": "Python", "dataset": "Avatar", "pass_before": 0, "pass_after": 0, "filepath_before": "/home/yang/contamination/Avatar_Python_Before/codeforces_544_B.py", "filepath_after": "/home/yang/contamination/Avatar_Python_After/codeforces_544_B.py", "code_before": "n, k = map(int, input().split())\nx = 0\nif k <= max(n ** 2 // 2, n ** 2 - (n ** 2 // 2)):\n    print('YES')\n    for i in range(n):\n        for j in range(n):\n            if i % 2 == j % 2 and x < k:\n                print('L', end='')\n                x += 1\n            else:\n                print('S', end='')\n        print()\nelse:\n    print('NO')\n", "code_after": "(n, k) = map(int, input().split())\nx = 0\nrandom_outside_if_left_3 = 762\nrandom_outside_if_right_3 = 761\nif random_outside_if_left_3 & random_outside_if_right_3:\n    if k <= max(n ** 2 // 2, n ** 2 - n ** 2 // 2):\n        print('YES')\n        for i in range(n):\n            for j in range(n):\n                if i % 2 == j % 2 and x < k:\n                    print('L', end='')\n                    x += 1\n                else:\n                    print('S', end='')\n            print()\n    else:\n        print('NO')\nelse:\n    print('NO')", "effort_before": "1324.3697371213793", "effort_after": "1570.4026078721506", "difficulty_before": "7.3125", "difficulty_after": "7.777777777777778", "calculated_length_before": "92.52932501298082", "calculated_length_after": "108.27793097483524", "length_before": "39", "length_after": "42", "vocabulary_before": "25", "vocabulary_after": "28", "mi_value_before": "57.73", "mi_value_after": "54.54", "Nloc_before": "14", "Nloc_after": "19", "AvgCCN_before": "6.0", "AvgCCN_after": "7.0"}, "codeforces_350_B": {"id": "codeforces_350_B", "language": "Python", "dataset": "Avatar", "pass_before": 0, "pass_after": 0, "filepath_before": "/home/yang/contamination/Avatar_Python_Before/codeforces_350_B.py", "filepath_after": "/home/yang/contamination/Avatar_Python_After/codeforces_350_B.py", "code_before": "n = int(input())\nt = [0] + list(map(int, input().split()))\na = [0] + list(map(int, input().split()))\nans, cnt = [], [0 for i in range(n + 1)]\nfor i in a:\n    cnt[i] += 1\nfor i in range(1, n + 1):\n    if t[i] == 1:\n        crt = [i]\n        x = a[i]\n        while cnt[x] == 1:\n            crt.append(x)\n            x = a[x]\n        if len(crt) > len(ans):\n            ans = crt[:]\nans.reverse()\nprint(len(ans))\nprint(' '.join(map(str, ans)))\n", "code_after": "n = int(input())\nvariable_0_2 = 0\nt = [variable_0_2] + list(map(int, input().split()))\nvariable_0_3 = 0\na = [variable_0_3] + list(map(int, input().split()))\n(ans, cnt) = ([], [0 for i in range(n + 1)])\nrandom_inside_left_5 = 245\nrandom_inside_right_5 = 244\nrandom_outside_left_5 = 459\nrandom_outside_right_5 = 458\nrandom_inside_left_7 = 77\nrandom_inside_right_7 = 76\nrandom_outside_left_7 = 411\nrandom_outside_right_7 = 410\nfor loop_outside in range(random_outside_left_5 // random_outside_right_5):\n    for i in a:\n        for loop_inside in range(random_inside_left_5 % random_inside_right_5):\n            cnt[i] += 1\nfor loop_outside in range(random_outside_left_7 // random_outside_right_7):\n    for i in range(1, n + 1):\n        for loop_inside in range(random_inside_left_7 % random_inside_right_7):\n            if t[i] == 1:\n                crt = [i]\n                x = a[i]\n                while cnt[x] == 1:\n                    crt.append(x)\n                    x = a[x]\n                if len(crt) > len(ans):\n                    ans = crt[:]\nans.reverse()\nprint(len(ans))\nprint(' '.join(map(str, ans)))", "effort_before": "199.36694864592542", "effort_after": "521.2378421872473", "difficulty_before": "2.1818181818181817", "difficulty_after": "3.1578947368421053", "calculated_length_before": "42.808635307173745", "calculated_length_after": "92.32026322986493", "length_before": "24", "length_after": "36", "vocabulary_before": "14", "vocabulary_after": "24", "mi_value_before": "56.95", "mi_value_after": "49.58", "Nloc_before": "18", "Nloc_after": "32", "AvgCCN_before": "7.0", "AvgCCN_after": "11.0"}, "atcoder_ARC102_C": {"id": "atcoder_ARC102_C", "language": "Python", "dataset": "Avatar", "pass_before": 0, "pass_after": 0, "filepath_before": "/home/yang/contamination/Avatar_Python_Before/atcoder_ARC102_C.py", "filepath_after": "/home/yang/contamination/Avatar_Python_After/atcoder_ARC102_C.py", "code_before": "K, N = list(map(int, input().split()))\ndprint = lambda * x: x\n\n\ndef cmb(n, r, mod):\n    if (r < 0 or r > n):\n        return 0\n    r = min(r, n - r)\n    return g1[n] * g2[r] * g2[n - r] % mod\n\n\nmod = 998244353\n__N = 8000\ng1 = [1, 1]\ng2 = [1, 1]\ninverse = [0, 1]\nfor i in range(2, __N + 1):\n    g1.append((g1[- 1] * i) % mod)\n    inverse.append((- inverse[mod % i] * (mod // i)) % mod)\n    g2.append((g2[- 1] * inverse[- 1]) % mod)\n\n\ndef kumiawase(p, q):\n    return cmb(p + q - 1, q - 1, mod)\n\n\ndef solve(n):\n    assert n <= K + 1\n    ans = 0\n    kumi = (n - 1) // 2\n    for p in range(kumi + 1):\n        if p > N:\n            break\n        ans += 2 ** p * cmb(kumi, p, mod) * kumiawase(N - p,\n                                                      p + (K - kumi * 2 - int(n % 2 == 0)))\n        if n % 2 == 0 and N - p - 1 >= 0:\n            ans += 2 ** p * cmb(kumi, p, mod) * kumiawase(N -\n                                                          p - 1, p + (K - kumi * 2 - int(n % 2 == 0)))\n    return ans\n\n\nans = []\nfor i in range(2, 2 * K + 1):\n    if i <= K + 1:\n        tmp = solve(i) % 998244353\n        ans.append(tmp)\n        print(tmp)\n    else:\n        print(ans[- i + K])\n", "code_after": "(K, N) = list(map(int, input().split()))\ndprint = lambda *x: x\n\ndef cmb(n, r, mod):\n    if r < 0 or r > n:\n        return 0\n    r = min(r, n - r)\n    return g1[n] * g2[r] * g2[n - r] % mod\nmod = 998244353\n__N = 8000\ng1 = [1, 1]\ng2 = [1, 1]\ninverse = [0, 1]\nrandom_inside_left_14 = 210\nrandom_inside_right_14 = 209\nrandom_outside_left_14 = 685\nrandom_outside_right_14 = 684\nrandom_inside_left_34 = 770\nrandom_inside_right_34 = 769\nrandom_outside_left_34 = 520\nrandom_outside_right_34 = 519\nfor loop_outside in range(random_outside_left_14 // random_outside_right_14):\n    for i in range(2, __N + 1):\n        for loop_inside in range(random_inside_left_14 % random_inside_right_14):\n            g1.append(g1[-1] * i % mod)\n            inverse.append(-inverse[mod % i] * (mod // i) % mod)\n            g2.append(g2[-1] * inverse[-1] % mod)\n\ndef kumiawase(p, q):\n    return cmb(p + q - 1, q - 1, mod)\n\ndef solve(n):\n    assert n <= K + 1\n    ans = 0\n    kumi = (n - 1) // 2\n    for p in range(kumi + 1):\n        if p > N:\n            break\n        ans += 2 ** p * cmb(kumi, p, mod) * kumiawase(N - p, p + (K - kumi * 2 - int(n % 2 == 0)))\n        if n % 2 == 0 and N - p - 1 >= 0:\n            ans += 2 ** p * cmb(kumi, p, mod) * kumiawase(N - p - 1, p + (K - kumi * 2 - int(n % 2 == 0)))\n    return ans\nans = []\nfor loop_outside in range(random_outside_left_34 // random_outside_right_34):\n    for i in range(2, 2 * K + 1):\n        for loop_inside in range(random_inside_left_34 % random_inside_right_34):\n            if i <= K + 1:\n                tmp = solve(i) % 998244353\n                ans.append(tmp)\n                print(tmp)\n            else:\n                print(ans[-i + K])", "effort_before": "15313.878164132248", "effort_after": "15872.34656614063", "difficulty_before": "12.347222222222221", "difficulty_after": "11.8125", "calculated_length_before": "497.5375690126529", "calculated_length_after": "559.0572164997953", "length_before": "193", "length_after": "205", "vocabulary_before": "86", "vocabulary_after": "94", "mi_value_before": "43.09", "mi_value_after": "39.77", "Nloc_before": "39", "Nloc_after": "49", "AvgCCN_before": "4.0", "AvgCCN_after": "8.0"}, "atcoder_ABC137_D": {"id": "atcoder_ABC137_D", "language": "Python", "dataset": "Avatar", "pass_before": 0, "pass_after": 0, "filepath_before": "/home/yang/contamination/Avatar_Python_Before/atcoder_ABC137_D.py", "filepath_after": "/home/yang/contamination/Avatar_Python_After/atcoder_ABC137_D.py", "code_before": "import heapq\nn, m = map(int, input().split())\nx = []\ny = []\nfor i in range(n):\n    day, salary = map(int, input().split())\n    heapq.heappush(x, (- day, - salary))\nwhile x:\n    d, s = heapq.heappop(x)\n    r = m - len(y)\n    if r >= - d:\n        heapq.heappush(y, - s)\n    else:\n        heapq.heappush(y, - s)\n        heapq.heappop(y)\nprint(sum(y))\n", "code_after": "import heapq\n(n, m) = map(int, input().split())\nx = []\ny = []\nrandom_inside_left_5 = 157\nrandom_inside_right_5 = 156\nrandom_outside_left_5 = 582\nrandom_outside_right_5 = 581\nfor loop_outside in range(random_outside_left_5 // random_outside_right_5):\n    for i in range(n):\n        for loop_inside in range(random_inside_left_5 % random_inside_right_5):\n            (day, salary) = map(int, input().split())\n            heapq.heappush(x, (-day, -salary))\nrandom_inside_left_14 = 916\nrandom_inside_right_14 = 915\nrandom_outside_left_14 = 538\nrandom_outside_right_14 = 537\nfor loop_outside in range(random_outside_left_14 // random_outside_right_14):\n    while x:\n        for loop_inside in range(random_inside_left_14 % random_inside_right_14):\n            (d, s) = heapq.heappop(x)\n            r = m - len(y)\n            if r >= -d:\n                heapq.heappush(y, -s)\n            else:\n                heapq.heappush(y, -s)\n                heapq.heappop(y)\nprint(sum(y))", "effort_before": "93.40465370320705", "effort_after": "326.67860831917034", "difficulty_before": "1.6875", "difficulty_after": "2.65625", "calculated_length_before": "28.75488750216347", "calculated_length_after": "75.60964047443682", "length_before": "16", "length_after": "28", "vocabulary_before": "11", "vocabulary_after": "21", "mi_value_before": "60.42", "mi_value_after": "52.39", "Nloc_before": "16", "Nloc_after": "28", "AvgCCN_before": "4.0", "AvgCCN_after": "8.0"}, "atcoder_ABC149_C": {"id": "atcoder_ABC149_C", "language": "Python", "dataset": "Avatar", "pass_before": 0, "pass_after": 0, "filepath_before": "/home/yang/contamination/Avatar_Python_Before/atcoder_ABC149_C.py", "filepath_after": "/home/yang/contamination/Avatar_Python_After/atcoder_ABC149_C.py", "code_before": "X = int(input())\nprime = [True] * (100010)\nprime[0] = False\nprime[1] = False\nfor i in range(4, 100010, 2):\n    prime[i] = False\ni = 3\nwhile (i * i <= 100008):\n    if prime[i]:\n        for j in range(i + i, 100008, i):\n            prime[j] = False\n    i += 2\nfor i in range(X, 100008):\n    if prime[i]:\n        print(i)\n        break\n", "code_after": "X = int(input())\nvariable_100010_2 = 100010\nvariable_True_2 = True\nprime = [variable_True_2] * variable_100010_2\nprime[0] = False\nprime[1] = False\nrandom_inside_left_5 = 995\nrandom_inside_right_5 = 994\nrandom_outside_left_5 = 700\nrandom_outside_right_5 = 699\nrandom_inside_left_13 = 194\nrandom_inside_right_13 = 193\nrandom_outside_left_13 = 174\nrandom_outside_right_13 = 173\nfor loop_outside in range(random_outside_left_5 // random_outside_right_5):\n    for i in range(4, 100010, 2):\n        for loop_inside in range(random_inside_left_5 % random_inside_right_5):\n            prime[i] = False\ni = 3\nrandom_inside_left_18 = 826\nrandom_inside_right_18 = 825\nrandom_outside_left_18 = 257\nrandom_outside_right_18 = 256\nfor loop_outside in range(random_outside_left_18 // random_outside_right_18):\n    while i * i <= 100008:\n        for loop_inside in range(random_inside_left_18 % random_inside_right_18):\n            if prime[i]:\n                for j in range(i + i, 100008, i):\n                    prime[j] = False\n            i += 2\nfor loop_outside in range(random_outside_left_13 // random_outside_right_13):\n    for i in range(X, 100008):\n        for loop_inside in range(random_inside_left_13 % random_inside_right_13):\n            if prime[i]:\n                print(i)\n                break", "effort_before": "118.87218755408671", "effort_after": "456.12583056908215", "difficulty_before": "2.5", "difficulty_after": "3.0555555555555554", "calculated_length_before": "20.264662506490406", "calculated_length_after": "86.66829050039843", "length_before": "15", "length_after": "33", "vocabulary_before": "9", "vocabulary_after": "23", "mi_value_before": "60.47", "mi_value_after": "48.82", "Nloc_before": "16", "Nloc_after": "36", "AvgCCN_before": "7.0", "AvgCCN_after": "13.0"}, "codeforces_79_A": {"id": "codeforces_79_A", "language": "Python", "dataset": "Avatar", "pass_before": 3, "pass_after": 0, "filepath_before": "/home/yang/contamination/Avatar_Python_Before/codeforces_79_A.py", "filepath_after": "/home/yang/contamination/Avatar_Python_After/codeforces_79_A.py", "code_before": "x, y = list(map(int, input().split()))\na = 0\nwhile x >= 0 and y >= 22 or x >= 1 and y >= 12 or x >= 2 and y >= 2:\n    if a:\n        if y >= 22:\n            y -= 22\n        elif x >= 1 and y >= 12:\n            x -= 1\n            y -= 12\n        else:\n            x -= 2\n            y -= 2\n    else:\n        if x >= 2 and y >= 2:\n            x -= 2\n            y -= 2\n        elif x >= 1 and y >= 12:\n            x -= 1\n            y -= 12\n        else:\n            y -= 22\n    a = 1 - a\nprint(['Ciel', 'Hanako'][1 - a])\n", "code_after": "(x, y) = list(map(int, input().split()))\na = 0\nrandom_inside_left_3 = 318\nrandom_inside_right_3 = 317\nrandom_outside_left_3 = 945\nrandom_outside_right_3 = 944\nfor loop_outside in range(random_outside_left_3 // random_outside_right_3):\n    while x >= 0 and y >= 22 or (x >= 1 and y >= 12) or (x >= 2 and y >= 2):\n        for loop_inside in range(random_inside_left_3 % random_inside_right_3):\n            if a:\n                if y >= 22:\n                    y -= 22\n                elif x >= 1 and y >= 12:\n                    x -= 1\n                    y -= 12\n                else:\n                    x -= 2\n                    y -= 2\n            elif x >= 2 and y >= 2:\n                x -= 2\n                y -= 2\n            elif x >= 1 and y >= 12:\n                x -= 1\n                y -= 12\n            else:\n                y -= 22\n            a = 1 - a\nprint(['Ciel', 'Hanako'][1 - a])", "effort_before": "2606.9187566209284", "effort_after": "3983.3898895867255", "difficulty_before": "5.6521739130434785", "difficulty_after": "7.666666666666667", "calculated_length_before": "112.0419249893113", "calculated_length_after": "143.89173756274062", "length_before": "97", "length_after": "103", "vocabulary_before": "27", "vocabulary_after": "33", "mi_value_before": "49.22", "mi_value_after": "46.80", "Nloc_before": "23", "Nloc_after": "28", "AvgCCN_before": "15.0", "AvgCCN_after": "17.0"}, "codeforces_665_A": {"id": "codeforces_665_A", "language": "Python", "dataset": "Avatar", "pass_before": 0, "pass_after": 0, "filepath_before": "/home/yang/contamination/Avatar_Python_Before/codeforces_665_A.py", "filepath_after": "/home/yang/contamination/Avatar_Python_After/codeforces_665_A.py", "code_before": "a, at = map(int, input().split())\nb, bt = map(int, input().split())\nt1, t2 = map(int, input().split(':'))\nst = t2 + (t1 - 5) * 60\nfin = st + at\nnow = 0\nans = 0\nwhile now < fin and now < 1140:\n    if now + bt > st:\n        ans += 1\n    now += b\nprint(ans)\n", "code_after": "(a, at) = map(int, input().split())\n(b, bt) = map(int, input().split())\n(t1, t2) = map(int, input().split(':'))\nvariable_60_4 = 60\nvariable_5_4 = 5\nst = t2 + (t1 - variable_5_4) * variable_60_4\nfin = st + at\nnow = 0\nans = 0\nrandom_inside_left_8 = 768\nrandom_inside_right_8 = 767\nrandom_outside_left_8 = 876\nrandom_outside_right_8 = 875\nfor loop_outside in range(random_outside_left_8 // random_outside_right_8):\n    while now < fin and now < 1140:\n        for loop_inside in range(random_inside_left_8 % random_inside_right_8):\n            if now + bt > st:\n                ans += 1\n            now += b\nprint(ans)", "effort_before": "554.78046258726", "effort_after": "904.6521934449161", "difficulty_before": "3.6666666666666665", "difficulty_after": "4.7272727272727275", "calculated_length_before": "90.56842503028855", "calculated_length_after": "122.10749561002054", "length_before": "33", "length_after": "39", "vocabulary_before": "24", "vocabulary_after": "30", "mi_value_before": "59.90", "mi_value_after": "54.37", "Nloc_before": "12", "Nloc_after": "20", "AvgCCN_before": "4.0", "AvgCCN_after": "6.0"}, "codeforces_518_B": {"id": "codeforces_518_B", "language": "Python", "dataset": "Avatar", "pass_before": 1, "pass_after": 0, "filepath_before": "/home/yang/contamination/Avatar_Python_Before/codeforces_518_B.py", "filepath_after": "/home/yang/contamination/Avatar_Python_After/codeforces_518_B.py", "code_before": "s, t = input(), input()\nfreqs = dict()\nfreqt = dict()\nyay, whoops = 0, 0\nfor letra in s:\n    if letra in freqs:\n        freqs[letra] += 1\n    else:\n        freqs[letra] = 1\nfor letra in t:\n    if letra in freqt:\n        freqt[letra] += 1\n    else:\n        freqt[letra] = 1\nfor letra in freqs.keys():\n    while (freqs[letra] > 0 and letra in freqt and freqt[letra] > 0):\n        yay += 1\n        freqs[letra] -= 1\n        freqt[letra] -= 1\nfor letra in freqs.keys():\n    while (freqs[letra] > 0):\n        if letra.islower() and letra.upper() in freqt.keys() and freqt[letra.upper()] > 0:\n            whoops += 1\n            freqs[letra] -= 1\n            freqt[letra.upper()] -= 1\n        elif letra.isupper() and letra.lower() in freqt.keys() and freqt[letra.lower()] > 0:\n            whoops += 1\n            freqs[letra] -= 1\n            freqt[letra.lower()] -= 1\n        else:\n            break\nprint(yay, whoops)\n", "code_after": "(s, t) = (input(), input())\nfreqs = dict()\nfreqt = dict()\n(yay, whoops) = (0, 0)\nrandom_inside_left_5 = 593\nrandom_inside_right_5 = 592\nrandom_outside_left_5 = 683\nrandom_outside_right_5 = 682\nrandom_inside_left_10 = 474\nrandom_inside_right_10 = 473\nrandom_outside_left_10 = 46\nrandom_outside_right_10 = 45\nrandom_inside_left_15 = 35\nrandom_inside_right_15 = 34\nrandom_outside_left_15 = 270\nrandom_outside_right_15 = 269\nrandom_inside_left_20 = 145\nrandom_inside_right_20 = 144\nrandom_outside_left_20 = 236\nrandom_outside_right_20 = 235\nfor loop_outside in range(random_outside_left_5 // random_outside_right_5):\n    for letra in s:\n        for loop_inside in range(random_inside_left_5 % random_inside_right_5):\n            if letra in freqs:\n                freqs[letra] += 1\n            else:\n                freqs[letra] = 1\nfor loop_outside in range(random_outside_left_10 // random_outside_right_10):\n    for letra in t:\n        for loop_inside in range(random_inside_left_10 % random_inside_right_10):\n            if letra in freqt:\n                freqt[letra] += 1\n            else:\n                freqt[letra] = 1\nfor loop_outside in range(random_outside_left_15 // random_outside_right_15):\n    for letra in freqs.keys():\n        for loop_inside in range(random_inside_left_15 % random_inside_right_15):\n            while freqs[letra] > 0 and letra in freqt and (freqt[letra] > 0):\n                yay += 1\n                freqs[letra] -= 1\n                freqt[letra] -= 1\nfor loop_outside in range(random_outside_left_20 // random_outside_right_20):\n    for letra in freqs.keys():\n        for loop_inside in range(random_inside_left_20 % random_inside_right_20):\n            while freqs[letra] > 0:\n                if letra.islower() and letra.upper() in freqt.keys() and (freqt[letra.upper()] > 0):\n                    whoops += 1\n                    freqs[letra] -= 1\n                    freqt[letra.upper()] -= 1\n                elif letra.isupper() and letra.lower() in freqt.keys() and (freqt[letra.lower()] > 0):\n                    whoops += 1\n                    freqs[letra] -= 1\n                    freqt[letra.lower()] -= 1\n                else:\n                    break\nprint(yay, whoops)", "effort_before": "1520.7062681001298", "effort_after": "2751.441799857721", "difficulty_before": "3.8636363636363638", "difficulty_after": "4.785714285714286", "calculated_length_before": "178.07464641326578", "calculated_length_after": "294.7722668160484", "length_before": "75", "length_after": "99", "vocabulary_before": "38", "vocabulary_after": "56", "mi_value_before": "46.42", "mi_value_after": "39.01", "Nloc_before": "32", "Nloc_after": "56", "AvgCCN_before": "17.0", "AvgCCN_after": "25.0"}, "codeforces_629_B": {"id": "codeforces_629_B", "language": "Python", "dataset": "Avatar", "pass_before": 0, "pass_after": 0, "filepath_before": "/home/yang/contamination/Avatar_Python_Before/codeforces_629_B.py", "filepath_after": "/home/yang/contamination/Avatar_Python_After/codeforces_629_B.py", "code_before": "import sys\ninput = sys.stdin.readline\nN = 368\nm = [0] * N\nf = [0] * N\nfor i in range(int(input())):\n    x, a, b = input()[: - 1].split()\n    a = int(a)\n    b = int(b) + 1\n    if x == 'M':\n        m[a] += 2\n        m[b] -= 2\n    else:\n        f[a] += 2\n        f[b] -= 2\na, b, c = 0, 0, 0\nfor i in range(N):\n    a += m[i]\n    b += f[i]\n    if min(a, b) > c:\n        c = min(a, b)\nprint(c)\n", "code_after": "import sys\ninput = sys.stdin.readline\nN = 368\nvariable_0_4 = 0\nm = [variable_0_4] * N\nvariable_0_5 = 0\nf = [variable_0_5] * N\nrandom_inside_left_6 = 212\nrandom_inside_right_6 = 211\nrandom_outside_left_6 = 480\nrandom_outside_right_6 = 479\nrandom_inside_left_17 = 688\nrandom_inside_right_17 = 687\nrandom_outside_left_17 = 944\nrandom_outside_right_17 = 943\nfor loop_outside in range(random_outside_left_6 // random_outside_right_6):\n    for i in range(int(input())):\n        for loop_inside in range(random_inside_left_6 % random_inside_right_6):\n            (x, a, b) = input()[:-1].split()\n            a = int(a)\n            b = int(b) + 1\n            if x == 'M':\n                m[a] += 2\n                m[b] -= 2\n            else:\n                f[a] += 2\n                f[b] -= 2\n(a, b, c) = (0, 0, 0)\nfor loop_outside in range(random_outside_left_17 // random_outside_right_17):\n    for i in range(N):\n        for loop_inside in range(random_inside_left_17 % random_inside_right_17):\n            a += m[i]\n            b += f[i]\n            if min(a, b) > c:\n                c = min(a, b)\nprint(c)", "effort_before": "615.1491355134219", "effort_after": "1140.3743630310378", "difficulty_before": "3.8333333333333335", "difficulty_after": "4.769230769230769", "calculated_length_before": "90.56842503028855", "calculated_length_after": "146.2114326716684", "length_before": "35", "length_after": "47", "vocabulary_before": "24", "vocabulary_after": "34", "mi_value_before": "53.78", "mi_value_after": "47.67", "Nloc_before": "22", "Nloc_after": "36", "AvgCCN_before": "5.0", "AvgCCN_after": "9.0"}, "codeforces_59_A": {"id": "codeforces_59_A", "language": "Python", "dataset": "Avatar", "pass_before": 3, "pass_after": 0, "filepath_before": "/home/yang/contamination/Avatar_Python_Before/codeforces_59_A.py", "filepath_after": "/home/yang/contamination/Avatar_Python_After/codeforces_59_A.py", "code_before": "txt = input()\ncu = 0\ncl = 0\nfor z in txt:\n    if z.islower():\n        cl = cl + 1\n    else:\n        cu = cu + 1\nif cu > cl:\n    out = txt.upper()\nelse:\n    out = txt.lower()\nprint(out)\n", "code_after": "txt = input()\ncu = 0\ncl = 0\nrandom_inside_left_4 = 999\nrandom_inside_right_4 = 998\nrandom_outside_left_4 = 107\nrandom_outside_right_4 = 106\nfor loop_outside in range(random_outside_left_4 // random_outside_right_4):\n    for z in txt:\n        for loop_inside in range(random_inside_left_4 % random_inside_right_4):\n            if z.islower():\n                cl = cl + 1\n            else:\n                cu = cu + 1\nrandom_outside_if_left_15 = 150\nrandom_outside_if_right_15 = 149\nif random_outside_if_left_15 & random_outside_if_right_15:\n    if cu > cl:\n        out = txt.upper()\n    else:\n        out = txt.lower()\nelse:\n    out = txt.lower()\nprint(out)", "effort_before": "41.79470570797252", "effort_after": "228.44129532345625", "difficulty_before": "2.0", "difficulty_after": "3.3333333333333335", "calculated_length_before": "6.754887502163469", "calculated_length_after": "40.13896548741762", "length_before": "9", "length_after": "18", "vocabulary_before": "5", "vocabulary_after": "14", "mi_value_before": "65.22", "mi_value_after": "55.71", "Nloc_before": "13", "Nloc_after": "24", "AvgCCN_before": "4.0", "AvgCCN_after": "7.0"}, "atcoder_ABC127_B": {"id": "atcoder_ABC127_B", "language": "Python", "dataset": "Avatar", "pass_before": 0, "pass_after": 0, "filepath_before": "/home/yang/contamination/Avatar_Python_Before/atcoder_ABC127_B.py", "filepath_after": "/home/yang/contamination/Avatar_Python_After/atcoder_ABC127_B.py", "code_before": "r, D, x = map(int, input().split())\nfor i in range(2, 12):\n    print(int((r ** (i - 1)) * (x + D / (1 - r)) - D / (1 - r)))\n", "code_after": "(r, D, x) = map(int, input().split())\nrandom_inside_left_2 = 93\nrandom_inside_right_2 = 92\nrandom_outside_left_2 = 773\nrandom_outside_right_2 = 772\nfor loop_outside in range(random_outside_left_2 // random_outside_right_2):\n    for i in range(2, 12):\n        for loop_inside in range(random_inside_left_2 % random_inside_right_2):\n            print(int(r ** (i - 1) * (x + D / (1 - r)) - D / (1 - r)))", "effort_before": "389.7276059040315", "effort_after": "685.3170420195564", "difficulty_before": "3.4615384615384617", "difficulty_after": "4.529411764705882", "calculated_length_before": "59.715356810271004", "calculated_length_after": "89.13835275565901", "length_before": "27", "length_after": "33", "vocabulary_before": "18", "vocabulary_after": "24", "mi_value_before": "72.23", "mi_value_after": "62.38", "Nloc_before": "3", "Nloc_after": "9", "AvgCCN_before": "2.0", "AvgCCN_after": "4.0"}, "atcoder_ABC139_B": {"id": "atcoder_ABC139_B", "language": "Python", "dataset": "Avatar", "pass_before": 3, "pass_after": 3, "filepath_before": "/home/yang/contamination/Avatar_Python_Before/atcoder_ABC139_B.py", "filepath_after": "/home/yang/contamination/Avatar_Python_After/atcoder_ABC139_B.py", "code_before": "a, b = map(int, input().split())\nhole = 1\ni = 0\ncheck = True\nwhile check:\n    if hole >= b:\n        check = False\n    else:\n        hole = a * (i + 1) - i\n        i += 1\nprint(i)\n", "code_after": "(a, b) = map(int, input().split())\nhole = 1\ni = 0\ncheck = True\nrandom_inside_left_5 = 995\nrandom_inside_right_5 = 994\nrandom_outside_left_5 = 676\nrandom_outside_right_5 = 675\nfor loop_outside in range(random_outside_left_5 // random_outside_right_5):\n    while check:\n        for loop_inside in range(random_inside_left_5 % random_inside_right_5):\n            if hole >= b:\n                check = False\n            else:\n                hole = a * (i + 1) - i\n                i += 1\nprint(i)", "effort_before": "148.26135508445563", "effort_after": "327.74020236207275", "difficulty_before": "2.857142857142857", "difficulty_after": "3.8181818181818183", "calculated_length_before": "27.651484454403228", "calculated_length_after": "53.563522809337215", "length_before": "15", "length_after": "21", "vocabulary_before": "11", "vocabulary_after": "17", "mi_value_before": "64.05", "mi_value_after": "58.41", "Nloc_before": "11", "Nloc_after": "17", "AvgCCN_before": "3.0", "AvgCCN_after": "5.0"}, "atcoder_ABC145_C": {"id": "atcoder_ABC145_C", "language": "Python", "dataset": "Avatar", "pass_before": 0, "pass_after": 0, "filepath_before": "/home/yang/contamination/Avatar_Python_Before/atcoder_ABC145_C.py", "filepath_after": "/home/yang/contamination/Avatar_Python_After/atcoder_ABC145_C.py", "code_before": "import sys\nimport itertools\n\n\ndef solve(N: int, x: \"List[int]\", y: \"List[int]\"):\n    indices = [i for i in range(N)]\n    permutations = itertools.permutations(indices)\n    distances = []\n    for permutation in permutations:\n        total_distance = 0\n        for i in range(0, N - 1):\n            f, t = permutation[i: i + 2]\n            distance = ((x[t] - x[f]) ** 2 + (y[t] - y[f]) ** 2) ** 0.5\n            total_distance += distance\n        distances.append(total_distance)\n    result = sum(distances) / len(distances)\n    print(result)\n    return\n\n\ndef main():\n    def iterate_tokens():\n        for line in sys.stdin:\n            for word in line.split():\n                yield word\n    tokens = iterate_tokens()\n    N = int(next(tokens))\n    x = [int()] * (N)\n    y = [int()] * (N)\n    for i in range(N):\n        x[i] = int(next(tokens))\n        y[i] = int(next(tokens))\n    solve(N, x, y)\n\n\nif __name__ == \"__main__\":\n    main()\n", "code_after": "import sys\nimport itertools\n\ndef solve(N: int, x: 'List[int]', y: 'List[int]'):\n    indices = [i for i in range(N)]\n    permutations = itertools.permutations(indices)\n    distances = []\n    for permutation in permutations:\n        total_distance = 0\n        for i in range(0, N - 1):\n            (f, t) = permutation[i:i + 2]\n            distance = ((x[t] - x[f]) ** 2 + (y[t] - y[f]) ** 2) ** 0.5\n            total_distance += distance\n        distances.append(total_distance)\n    result = sum(distances) / len(distances)\n    print(result)\n    return\n\ndef main():\n\n    def iterate_tokens():\n        for line in sys.stdin:\n            for word in line.split():\n                yield word\n    tokens = iterate_tokens()\n    N = int(next(tokens))\n    x = [int()] * N\n    y = [int()] * N\n    for i in range(N):\n        x[i] = int(next(tokens))\n        y[i] = int(next(tokens))\n    solve(N, x, y)\nmain()", "effort_before": "642.5207907468729", "effort_after": "483.4737995802267", "difficulty_before": "3.391304347826087", "difficulty_after": "2.857142857142857", "calculated_length_before": "119.55169999363824", "calculated_length_after": "103.84830635279079", "length_before": "39", "length_after": "36", "vocabulary_before": "29", "vocabulary_after": "26", "mi_value_before": "50.66", "mi_value_after": "51.43", "Nloc_before": "31", "Nloc_after": "30", "AvgCCN_before": "2.0", "AvgCCN_after": "1.0"}, "codeforces_49_A": {"id": "codeforces_49_A", "language": "Python", "dataset": "Avatar", "pass_before": 0, "pass_after": 0, "filepath_before": "/home/yang/contamination/Avatar_Python_Before/codeforces_49_A.py", "filepath_after": "/home/yang/contamination/Avatar_Python_After/codeforces_49_A.py", "code_before": "a = input()\nvo = ['a', 'e', 'i', 'o', 'u', 'y', 'A', 'E', 'I', 'O', 'U', 'Y']\nfor i in range(len(a) - 1, - 1, - 1):\n    if (a[i] == ' ' or a[i] == '?'):\n        continue\n    else:\n        if (a[i] in vo):\n            print(\"YES\")\n        else:\n            print(\"NO\")\n        break\n", "code_after": "a = input()\nvo = ['a', 'e', 'i', 'o', 'u', 'y', 'A', 'E', 'I', 'O', 'U', 'Y']\nrandom_inside_left_3 = 673\nrandom_inside_right_3 = 672\nrandom_outside_left_3 = 933\nrandom_outside_right_3 = 932\nfor loop_outside in range(random_outside_left_3 // random_outside_right_3):\n    for i in range(len(a) - 1, -1, -1):\n        for loop_inside in range(random_inside_left_3 % random_inside_right_3):\n            if a[i] == ' ' or a[i] == '?':\n                continue\n            else:\n                if a[i] in vo:\n                    print('YES')\n                else:\n                    print('NO')\n                break", "effort_before": "222.69276394968557", "effort_after": "439.2317422778761", "difficulty_before": "3.0", "difficulty_after": "4.0", "calculated_length_before": "44.82892142331043", "calculated_length_after": "72.95445336320968", "length_before": "19", "length_after": "25", "vocabulary_before": "15", "vocabulary_after": "21", "mi_value_before": "62.69", "mi_value_after": "57.39", "Nloc_before": "11", "Nloc_after": "17", "AvgCCN_before": "5.0", "AvgCCN_after": "7.0"}, "codeforces_567_A": {"id": "codeforces_567_A", "language": "Python", "dataset": "Avatar", "pass_before": 0, "pass_after": 0, "filepath_before": "/home/yang/contamination/Avatar_Python_Before/codeforces_567_A.py", "filepath_after": "/home/yang/contamination/Avatar_Python_After/codeforces_567_A.py", "code_before": "inp = int(input())\nlista = []\nlista = [int(x) for x in input().split()]\nfor i in range(len(lista)):\n    if i == 0:\n        print(f\"{lista[i+1] - lista[i]} {lista[len(lista)-1] - lista[i]}\")\n        continue\n    elif i == len(lista) - 1:\n        print(\n            f\"{lista[len(lista)-1] - lista[len(lista)-2]} {lista[len(lista)-1] - lista[0]}\")\n        continue\n    elif lista[i] - lista[i - 1] > lista[i + 1] - lista[i]:\n        print(lista[i + 1] - lista[i], end=\" \")\n    else:\n        print(lista[i] - lista[i - 1], end=\" \")\n    if lista[len(lista) - 1] - lista[i] > lista[i] - lista[0]:\n        print(lista[len(lista) - 1] - lista[i])\n    else:\n        print(lista[i] - lista[0])\n", "code_after": "inp = int(input())\nlista = []\nlista = [int(x) for x in input().split()]\nrandom_inside_left_4 = 719\nrandom_inside_right_4 = 718\nrandom_outside_left_4 = 600\nrandom_outside_right_4 = 599\nfor loop_outside in range(random_outside_left_4 // random_outside_right_4):\n    for i in range(len(lista)):\n        for loop_inside in range(random_inside_left_4 % random_inside_right_4):\n            if i == 0:\n                print(f'{lista[i + 1] - lista[i]} {lista[len(lista) - 1] - lista[i]}')\n                continue\n            elif i == len(lista) - 1:\n                print(f'{lista[len(lista) - 1] - lista[len(lista) - 2]} {lista[len(lista) - 1] - lista[0]}')\n                continue\n            elif lista[i] - lista[i - 1] > lista[i + 1] - lista[i]:\n                print(lista[i + 1] - lista[i], end=' ')\n            else:\n                print(lista[i] - lista[i - 1], end=' ')\n            if lista[len(lista) - 1] - lista[i] > lista[i] - lista[0]:\n                print(lista[len(lista) - 1] - lista[i])\n            else:\n                print(lista[i] - lista[0])", "effort_before": "1284.0583167034922", "effort_after": "2077.965233507967", "difficulty_before": "2.8", "difficulty_after": "4.090909090909091", "calculated_length_before": "220.8771237954945", "calculated_length_after": "255.724766224368", "length_before": "84", "length_after": "90", "vocabulary_before": "44", "vocabulary_after": "50", "mi_value_before": "52.53", "mi_value_after": "49.35", "Nloc_before": "19", "Nloc_after": "24", "AvgCCN_before": "7.0", "AvgCCN_after": "9.0"}, "atcoder_ABC169_E": {"id": "atcoder_ABC169_E", "language": "Python", "dataset": "Avatar", "pass_before": 0, "pass_after": 0, "filepath_before": "/home/yang/contamination/Avatar_Python_Before/atcoder_ABC169_E.py", "filepath_after": "/home/yang/contamination/Avatar_Python_After/atcoder_ABC169_E.py", "code_before": "def resolve():\n    n = int(input())\n    low = []\n    high = []\n    for i in range(n):\n        a, b = map(int, input().split())\n        low.append(a)\n        high.append(b)\n    low.sort()\n    high.sort()\n    if n % 2:\n        print(high[(n + 1) // 2 - 1] - low[(n + 1) // 2 - 1] + 1)\n    else:\n        hh = (high[(n) // 2 - 1] + high[(n) // 2]) / 2\n        ll = (low[(n) // 2 - 1] + low[(n) // 2]) / 2\n        print(int((hh - ll) * 2) + 1)\n\n\nif __name__ == \"__main__\":\n    resolve()\n", "code_after": "def resolve():\n    n = int(input())\n    low = []\n    high = []\n    for i in range(n):\n        (a, b) = map(int, input().split())\n        low.append(a)\n        high.append(b)\n    low.sort()\n    high.sort()\n    if n % 2:\n        print(high[(n + 1) // 2 - 1] - low[(n + 1) // 2 - 1] + 1)\n    else:\n        hh = (high[n // 2 - 1] + high[n // 2]) / 2\n        ll = (low[n // 2 - 1] + low[n // 2]) / 2\n        print(int((hh - ll) * 2) + 1)\nresolve()", "effort_before": "2293.173617170325", "effort_after": "1903.712549134811", "difficulty_before": "6.708333333333333", "difficulty_after": "6.0", "calculated_length_before": "129.690584471711", "calculated_length_after": "113.61727061434748", "length_before": "69", "length_after": "66", "vocabulary_before": "31", "vocabulary_after": "28", "mi_value_before": "54.09", "mi_value_after": "54.97", "Nloc_before": "18", "Nloc_after": "17", "AvgCCN_before": "2.0", "AvgCCN_after": "1.0"}, "codeforces_514_A": {"id": "codeforces_514_A", "language": "Python", "dataset": "Avatar", "pass_before": 0, "pass_after": 0, "filepath_before": "/home/yang/contamination/Avatar_Python_Before/codeforces_514_A.py", "filepath_after": "/home/yang/contamination/Avatar_Python_After/codeforces_514_A.py", "code_before": "ip = input()\nst = \"\"\nif len(ip) != 1:\n    if ip[0] == \"9\":\n        st = \"9\"\n        ip = ip[1:]\n    for i in ip:\n        if int(i) > 4:\n            n = 9 - int(i)\n            st += str(n)\n        else:\n            st += i\nelse:\n    st = ip\nprint(int(st))\n", "code_after": "ip = input()\nst = ''\nrandom_outside_if_left_3 = 473\nrandom_outside_if_right_3 = 472\nif random_outside_if_left_3 & random_outside_if_right_3:\n    if len(ip) != 1:\n        if ip[0] == '9':\n            st = '9'\n            ip = ip[1:]\n        for i in ip:\n            if int(i) > 4:\n                n = 9 - int(i)\n                st += str(n)\n            else:\n                st += i\n    else:\n        st = ip\nelse:\n    st = ip\nprint(int(st))", "effort_before": "196.36363636363635", "effort_after": "288.20554360440326", "difficulty_before": "2.727272727272727", "difficulty_after": "3.230769230769231", "calculated_length_before": "49.663388279447084", "calculated_length_after": "63.61549134016113", "length_before": "18", "length_after": "21", "vocabulary_before": "16", "vocabulary_after": "19", "mi_value_before": "59.48", "mi_value_after": "56.25", "Nloc_before": "15", "Nloc_after": "20", "AvgCCN_before": "5.0", "AvgCCN_after": "6.0"}, "codeforces_653_A": {"id": "codeforces_653_A", "language": "Python", "dataset": "Avatar", "pass_before": 0, "pass_after": 0, "filepath_before": "/home/yang/contamination/Avatar_Python_Before/codeforces_653_A.py", "filepath_after": "/home/yang/contamination/Avatar_Python_After/codeforces_653_A.py", "code_before": "n = int(input())\nl = list(map(int, input().split()))\nl.sort()\nfor i in l:\n    if i + 1 in l and i + 2 in l:\n        print('YES')\n        break\nelse:\n    print('NO')\n", "code_after": "n = int(input())\nl = list(map(int, input().split()))\nl.sort()\nrandom_inside_left_4 = 911\nrandom_inside_right_4 = 910\nrandom_outside_left_4 = 137\nrandom_outside_right_4 = 136\nfor loop_outside in range(random_outside_left_4 // random_outside_right_4):\n    for i in l:\n        for loop_inside in range(random_inside_left_4 % random_inside_right_4):\n            if i + 1 in l and i + 2 in l:\n                print('YES')\n                break\n    else:\n        print('NO')", "effort_before": "97.296514274174", "effort_after": "250.3570990265833", "difficulty_before": "1.875", "difficulty_after": "2.9166666666666665", "calculated_length_before": "28.75488750216347", "calculated_length_after": "54.62919048309069", "length_before": "15", "length_after": "21", "vocabulary_before": "11", "vocabulary_after": "17", "mi_value_before": "65.50", "mi_value_after": "59.25", "Nloc_before": "9", "Nloc_after": "15", "AvgCCN_before": "5.0", "AvgCCN_after": "7.0"}, "codeforces_462_B": {"id": "codeforces_462_B", "language": "Python", "dataset": "Avatar", "pass_before": 0, "pass_after": 0, "filepath_before": "/home/yang/contamination/Avatar_Python_Before/codeforces_462_B.py", "filepath_after": "/home/yang/contamination/Avatar_Python_After/codeforces_462_B.py", "code_before": "n, k = map(int, input().split())\ns = input()\ncount = [0] * 26\nfor c in s:\n    count[ord(c) - ord(\"A\")] += 1\ncount.sort(reverse=True)\nres = 0\nfor i in range(26):\n    if count[i] >= k:\n        res += k * k\n        print(res)\n        exit()\n    k -= count[i]\n    res += count[i] ** 2\nprint(res)\n", "code_after": "(n, k) = map(int, input().split())\ns = input()\nvariable_26_3 = 26\nvariable_0_3 = 0\ncount = [variable_0_3] * variable_26_3\nrandom_inside_left_4 = 698\nrandom_inside_right_4 = 697\nrandom_outside_left_4 = 187\nrandom_outside_right_4 = 186\nrandom_inside_left_8 = 467\nrandom_inside_right_8 = 466\nrandom_outside_left_8 = 673\nrandom_outside_right_8 = 672\nfor loop_outside in range(random_outside_left_4 // random_outside_right_4):\n    for c in s:\n        for loop_inside in range(random_inside_left_4 % random_inside_right_4):\n            count[ord(c) - ord('A')] += 1\ncount.sort(reverse=True)\nres = 0\nfor loop_outside in range(random_outside_left_8 // random_outside_right_8):\n    for i in range(26):\n        for loop_inside in range(random_inside_left_8 % random_inside_right_8):\n            if count[i] >= k:\n                res += k * k\n                print(res)\n                exit()\n            k -= count[i]\n            res += count[i] ** 2\nprint(res)", "effort_before": "368.65942348813974", "effort_after": "783.6806614412617", "difficulty_before": "3.2142857142857144", "difficulty_after": "4.136363636363637", "calculated_length_before": "64.91260938324326", "calculated_length_after": "117.75898006442377", "length_before": "27", "length_after": "39", "vocabulary_before": "19", "vocabulary_after": "29", "mi_value_before": "58.77", "mi_value_after": "50.75", "Nloc_before": "15", "Nloc_after": "29", "AvgCCN_before": "4.0", "AvgCCN_after": "8.0"}, "codeforces_55_A": {"id": "codeforces_55_A", "language": "Python", "dataset": "Avatar", "pass_before": 3, "pass_after": 0, "filepath_before": "/home/yang/contamination/Avatar_Python_Before/codeforces_55_A.py", "filepath_after": "/home/yang/contamination/Avatar_Python_After/codeforces_55_A.py", "code_before": "n = int(input())\nwhile n % 2 == 0:\n    n /= 2\nif n == 1:\n    print('YES')\nelse:\n    print('NO')\n", "code_after": "n = int(input())\nrandom_inside_left_2 = 626\nrandom_inside_right_2 = 625\nrandom_outside_left_2 = 748\nrandom_outside_right_2 = 747\nfor loop_outside in range(random_outside_left_2 // random_outside_right_2):\n    while n % 2 == 0:\n        for loop_inside in range(random_inside_left_2 % random_inside_right_2):\n            n /= 2\nrandom_outside_if_left_10 = 399\nrandom_outside_if_right_10 = 398\nif random_outside_if_left_10 & random_outside_if_right_10:\n    if n == 1:\n        print('YES')\n    else:\n        print('NO')\nelse:\n    print('NO')", "effort_before": "86.39999999999999", "effort_after": "267.27272727272725", "difficulty_before": "2.4", "difficulty_after": "3.1818181818181817", "calculated_length_before": "16.36452797660028", "calculated_length_after": "49.663388279447084", "length_before": "12", "length_after": "21", "vocabulary_before": "8", "vocabulary_after": "16", "mi_value_before": "69.00", "mi_value_after": "57.82", "Nloc_before": "7", "Nloc_after": "18", "AvgCCN_before": "3.0", "AvgCCN_after": "6.0"}, "atcoder_ABC104_C": {"id": "atcoder_ABC104_C", "language": "Python", "dataset": "Avatar", "pass_before": 3, "pass_after": 1, "filepath_before": "/home/yang/contamination/Avatar_Python_Before/atcoder_ABC104_C.py", "filepath_after": "/home/yang/contamination/Avatar_Python_After/atcoder_ABC104_C.py", "code_before": "D, G = map(int, input().split())\nPC = [tuple(map(int, input().split())) for _ in range(D)]\nans = 10 ** 9\nfor i in range(2 ** D):\n    score = 0\n    problem = 0\n    for j in range(D):\n        if (i >> j) & 1:\n            score += 100 * (j + 1) * PC[j][0] + PC[j][1]\n            problem += PC[j][0]\n    if score > G:\n        continue\n    left = G - score\n    for j in range(D):\n        if (i >> j) & 1:\n            continue\n        if left > 100 * (j + 1) * PC[j][0] + PC[j][1]:\n            pass\n        else:\n            tmp = (left + (100 * (j + 1)) - 1) // (100 * (j + 1))\n            ans = min(ans, problem + min(tmp, PC[j][0]))\nprint(ans)\n", "code_after": "(D, G) = map(int, input().split())\nPC = [tuple(map(int, input().split())) for _ in range(D)]\nvariable_10_3 = 10\nvariable_9_3 = 9\nans = variable_10_3 ** variable_9_3\nrandom_inside_left_4 = 986\nrandom_inside_right_4 = 985\nrandom_outside_left_4 = 923\nrandom_outside_right_4 = 922\nfor loop_outside in range(random_outside_left_4 // random_outside_right_4):\n    for i in range(2 ** D):\n        for loop_inside in range(random_inside_left_4 % random_inside_right_4):\n            score = 0\n            problem = 0\n            for j in range(D):\n                if i >> j & 1:\n                    score += 100 * (j + 1) * PC[j][0] + PC[j][1]\n                    problem += PC[j][0]\n            if score > G:\n                continue\n            left = G - score\n            for j in range(D):\n                if i >> j & 1:\n                    continue\n                if left > 100 * (j + 1) * PC[j][0] + PC[j][1]:\n                    pass\n                else:\n                    tmp = (left + 100 * (j + 1) - 1) // (100 * (j + 1))\n                    ans = min(ans, problem + min(tmp, PC[j][0]))\nprint(ans)", "effort_before": "2774.823106733447", "effort_after": "3319.1591856590558", "difficulty_before": "6.352941176470588", "difficulty_after": "6.868421052631579", "calculated_length_before": "196.97373660251156", "calculated_length_after": "227.95057052383706", "length_before": "81", "length_after": "87", "vocabulary_before": "42", "vocabulary_after": "47", "mi_value_before": "50.60", "mi_value_after": "47.19", "Nloc_before": "22", "Nloc_after": "30", "AvgCCN_before": "9.0", "AvgCCN_after": "11.0"}, "atcoder_ABC110_C": {"id": "atcoder_ABC110_C", "language": "Python", "dataset": "Avatar", "pass_before": 0, "pass_after": 0, "filepath_before": "/home/yang/contamination/Avatar_Python_Before/atcoder_ABC110_C.py", "filepath_after": "/home/yang/contamination/Avatar_Python_After/atcoder_ABC110_C.py", "code_before": "import collections\n\n\ndef run(s, t):\n    ss = sorted(list(collections.Counter(s).values()))\n    tt = sorted(list(collections.Counter(t).values()))\n    if ss == tt:\n        return 'Yes'\n    else:\n        return 'No'\n\n\ndef main():\n    s = input()\n    t = input()\n    print(run(s, t))\n\n\nif __name__ == '__main__':\n    main()\n", "code_after": "import collections\n\ndef run(s, t):\n    ss = sorted(list(collections.Counter(s).values()))\n    tt = sorted(list(collections.Counter(t).values()))\n    if ss == tt:\n        return 'Yes'\n    else:\n        return 'No'\n\ndef main():\n    s = input()\n    t = input()\n    print(run(s, t))\nmain()", "effort_before": "6.965784284662087", "effort_after": "2.3774437510817346", "difficulty_before": "0.5", "difficulty_after": "0.5", "calculated_length_before": "8.0", "calculated_length_after": "2.0", "length_before": "6", "length_after": "3", "vocabulary_before": "5", "vocabulary_after": "3", "mi_value_before": "66.07", "mi_value_after": "70.12", "Nloc_before": "14", "Nloc_after": "13", "AvgCCN_before": "2.0", "AvgCCN_after": "1.0"}, "atcoder_ARC062_B": {"id": "atcoder_ARC062_B", "language": "Python", "dataset": "Avatar", "pass_before": 0, "pass_after": 0, "filepath_before": "/home/yang/contamination/Avatar_Python_Before/atcoder_ARC062_B.py", "filepath_after": "/home/yang/contamination/Avatar_Python_After/atcoder_ARC062_B.py", "code_before": "s = list(input())\nnum_g, num_p = 0, 0\nscore = 0\nfor x in s:\n    if x == 'g':\n        if num_g - num_p > 0:\n            score += 1\n            num_p += 1\n        else:\n            score = score\n            num_g += 1\n    elif x == 'p':\n        if num_g - num_p > 0:\n            score = score\n            num_p += 1\n        else:\n            score -= 1\n            num_g += 1\nprint(score)\n", "code_after": "s = list(input())\n(num_g, num_p) = (0, 0)\nscore = 0\nrandom_inside_left_4 = 650\nrandom_inside_right_4 = 649\nrandom_outside_left_4 = 174\nrandom_outside_right_4 = 173\nfor loop_outside in range(random_outside_left_4 // random_outside_right_4):\n    for x in s:\n        for loop_inside in range(random_inside_left_4 % random_inside_right_4):\n            if x == 'g':\n                if num_g - num_p > 0:\n                    score += 1\n                    num_p += 1\n                else:\n                    score = score\n                    num_g += 1\n            elif x == 'p':\n                if num_g - num_p > 0:\n                    score = score\n                    num_p += 1\n                else:\n                    score -= 1\n                    num_g += 1\nprint(score)", "effort_before": "657.910930531554", "effort_after": "1089.1258799116154", "difficulty_before": "4.8", "difficulty_after": "6.0", "calculated_length_before": "41.219280948873624", "calculated_length_after": "68.81274391313339", "length_before": "36", "length_after": "42", "vocabulary_before": "14", "vocabulary_after": "20", "mi_value_before": "55.85", "mi_value_after": "52.24", "Nloc_before": "19", "Nloc_after": "25", "AvgCCN_before": "6.0", "AvgCCN_after": "8.0"}, "codeforces_469_A": {"id": "codeforces_469_A", "language": "Python", "dataset": "Avatar", "pass_before": 0, "pass_after": 0, "filepath_before": "/home/yang/contamination/Avatar_Python_Before/codeforces_469_A.py", "filepath_after": "/home/yang/contamination/Avatar_Python_After/codeforces_469_A.py", "code_before": "max_level = int(input())\nx = list(map(int, input().split()))\ny = list(map(int, input().split()))\nx.pop(0)\ny.pop(0)\nx = set(x)\ny = set(y)\nif 0 in x:\n    x.discard(0)\nelif 0 in y:\n    y.discard(0)\nz = x.union(y)\nif len(z) != max_level:\n    print(\"Oh, my keyboard!\")\nelse:\n    print(\"I become the guy.\")\n", "code_after": "max_level = int(input())\nx = list(map(int, input().split()))\ny = list(map(int, input().split()))\nx.pop(0)\ny.pop(0)\nx = set(x)\ny = set(y)\nrandom_outside_if_left_8 = 582\nrandom_outside_if_right_8 = 581\nrandom_outside_if_left_13 = 5\nrandom_outside_if_right_13 = 4\nif random_outside_if_left_8 & random_outside_if_right_8:\n    if 0 in x:\n        x.discard(0)\n    elif 0 in y:\n        y.discard(0)\nelif 0 in y:\n    y.discard(0)\nz = x.union(y)\nif random_outside_if_left_13 & random_outside_if_right_13:\n    if len(z) != max_level:\n        print('Oh, my keyboard!')\n    else:\n        print('I become the guy.')\nelse:\n    print('I become the guy.')", "effort_before": "30.319433158222125", "effort_after": "129.05865002596164", "difficulty_before": "1.2", "difficulty_after": "2.0", "calculated_length_before": "13.60964047443681", "calculated_length_after": "33.28421251514428", "length_before": "9", "length_after": "18", "vocabulary_before": "7", "vocabulary_after": "12", "mi_value_before": "62.80", "mi_value_after": "55.16", "Nloc_before": "16", "Nloc_after": "26", "AvgCCN_before": "4.0", "AvgCCN_after": "7.0"}, "codeforces_131_B": {"id": "codeforces_131_B", "language": "Python", "dataset": "Avatar", "pass_before": 0, "pass_after": 0, "filepath_before": "/home/yang/contamination/Avatar_Python_Before/codeforces_131_B.py", "filepath_after": "/home/yang/contamination/Avatar_Python_After/codeforces_131_B.py", "code_before": "from collections import Counter\nimport sys\ninput = sys.stdin.readline\nn = int(input())\nw = Counter(map(int, input().split()))\nc = 0\nfor i in w:\n    if i == 0:\n        c += w[i] * (w[i] - 1)\n    else:\n        if - i in w:\n            c += w[i] * w[- i]\nprint(c // 2)\n", "code_after": "from collections import Counter\nimport sys\ninput = sys.stdin.readline\nn = int(input())\nw = Counter(map(int, input().split()))\nc = 0\nrandom_inside_left_7 = 402\nrandom_inside_right_7 = 401\nrandom_outside_left_7 = 35\nrandom_outside_right_7 = 34\nfor loop_outside in range(random_outside_left_7 // random_outside_right_7):\n    for i in w:\n        for loop_inside in range(random_inside_left_7 % random_inside_right_7):\n            if i == 0:\n                c += w[i] * (w[i] - 1)\n            elif -i in w:\n                c += w[i] * w[-i]\nprint(c // 2)", "effort_before": "553.4319952701238", "effort_after": "781.3175353710084", "difficulty_before": "4.5", "difficulty_after": "4.888888888888889", "calculated_length_before": "72.95445336320968", "calculated_length_after": "99.05865002596161", "length_before": "28", "length_after": "34", "vocabulary_before": "21", "vocabulary_after": "26", "mi_value_before": "59.83", "mi_value_after": "55.87", "Nloc_before": "13", "Nloc_after": "18", "AvgCCN_before": "4.0", "AvgCCN_after": "6.0"}, "codeforces_327_A": {"id": "codeforces_327_A", "language": "Python", "dataset": "Avatar", "pass_before": 0, "pass_after": 0, "filepath_before": "/home/yang/contamination/Avatar_Python_Before/codeforces_327_A.py", "filepath_after": "/home/yang/contamination/Avatar_Python_After/codeforces_327_A.py", "code_before": "import itertools\n\n\ndef find(s, ch):\n    return [i for i, ltr in enumerate(s) if ltr == ch]\n\n\nif __name__ == '__main__':\n    n = int(input())\n    s = input().replace(\"\", \"\")\n    if '0' not in s:\n        print(n - 1)\n    else:\n        indices = find(s, '0')\n        if len(indices) == 1:\n            print(n)\n        else:\n            maximum = 0\n            combs = itertools.combinations(indices, 2)\n            for x in combs:\n                maximum = max(\n                    maximum, 2 + 2 * (abs(indices.index(x[0]) - indices.index(x[1])) - 1) - (abs(x[0] - x[1]) - 1))\n            print(s.count('1') + maximum)\n", "code_after": "import itertools\n\ndef find(s, ch):\n    return [i for (i, ltr) in enumerate(s) if ltr == ch]\nn = int(input())\ns = input().replace('', '')\nrandom_outside_if_left_7 = 119\nrandom_outside_if_right_7 = 118\nif random_outside_if_left_7 & random_outside_if_right_7:\n    if '0' not in s:\n        print(n - 1)\n    else:\n        indices = find(s, '0')\n        if len(indices) == 1:\n            print(n)\n        else:\n            maximum = 0\n            combs = itertools.combinations(indices, 2)\n            for x in combs:\n                maximum = max(maximum, 2 + 2 * (abs(indices.index(x[0]) - indices.index(x[1])) - 1) - (abs(x[0] - x[1]) - 1))\n            print(s.count('1') + maximum)\nelse:\n    indices = find(s, '0')\n    if len(indices) == 1:\n        print(n)\n    else:\n        maximum = 0\n        combs = itertools.combinations(indices, 2)\n        for x in combs:\n            maximum = max(maximum, 2 + 2 * (abs(indices.index(x[0]) - indices.index(x[1])) - 1) - (abs(x[0] - x[1]) - 1))\n        print(s.count('1') + maximum)", "effort_before": "547.8927189992907", "effort_after": "1363.6658106664324", "difficulty_before": "2.9545454545454546", "difficulty_after": "3.8823529411764706", "calculated_length_before": "109.71713608445735", "calculated_length_after": "188.4835116068385", "length_before": "39", "length_after": "66", "vocabulary_before": "27", "vocabulary_after": "40", "mi_value_before": "55.55", "mi_value_after": "48.70", "Nloc_before": "19", "Nloc_after": "30", "AvgCCN_before": "5.0", "AvgCCN_after": "7.0"}, "atcoder_AGC021_B": {"id": "atcoder_AGC021_B", "language": "Python", "dataset": "Avatar", "pass_before": 0, "pass_after": 0, "filepath_before": "/home/yang/contamination/Avatar_Python_Before/atcoder_AGC021_B.py", "filepath_after": "/home/yang/contamination/Avatar_Python_After/atcoder_AGC021_B.py", "code_before": "from math import atan2, pi\nN, * XY = map(int, open(0).read().split())\nXY = list(zip(* [iter(XY)] * 2))\nfor i, (x, y) in enumerate(XY):\n    D = sorted(atan2(X - x, Y - y) for j, (X, Y) in enumerate(XY) if j != i)\n    D.append(D[0] + 2 * pi)\n    ans = 0\n    for a, b in zip(D, D[1:]):\n        if b - a >= pi:\n            ans = (b - a) - pi\n    print(ans / (2 * pi))\n", "code_after": "from math import atan2, pi\n(N, *XY) = map(int, open(0).read().split())\nXY = list(zip(*[iter(XY)] * 2))\nrandom_inside_left_4 = 515\nrandom_inside_right_4 = 514\nrandom_outside_left_4 = 412\nrandom_outside_right_4 = 411\nfor loop_outside in range(random_outside_left_4 // random_outside_right_4):\n    for (i, (x, y)) in enumerate(XY):\n        for loop_inside in range(random_inside_left_4 % random_inside_right_4):\n            D = sorted((atan2(X - x, Y - y) for (j, (X, Y)) in enumerate(XY) if j != i))\n            D.append(D[0] + 2 * pi)\n            ans = 0\n            for (a, b) in zip(D, D[1:]):\n                if b - a >= pi:\n                    ans = b - a - pi\n            print(ans / (2 * pi))", "effort_before": "689.7101523588105", "effort_after": "1088.1877429085762", "difficulty_before": "4.235294117647059", "difficulty_after": "5.333333333333333", "calculated_length_before": "84.99664330558272", "calculated_length_after": "116.23866587835397", "length_before": "36", "length_after": "42", "vocabulary_before": "23", "vocabulary_after": "29", "mi_value_before": "60.16", "mi_value_after": "55.37", "Nloc_before": "11", "Nloc_after": "17", "AvgCCN_before": "6.0", "AvgCCN_after": "8.0"}, "atcoder_ABC164_D": {"id": "atcoder_ABC164_D", "language": "Python", "dataset": "Avatar", "pass_before": 0, "pass_after": 0, "filepath_before": "/home/yang/contamination/Avatar_Python_Before/atcoder_ABC164_D.py", "filepath_after": "/home/yang/contamination/Avatar_Python_After/atcoder_ABC164_D.py", "code_before": "s, l = (input(), 2019)\nm, a, r = ([1] + [0] * l, 0, 0)\nfor i, e in enumerate(s[:: - 1]):\n    a += int(e) * pow(10, i, l)\n    r += m[a % l]\n    m[a % l] += 1\nprint(r)\n", "code_after": "(s, l) = (input(), 2019)\n(m, a, r) = ([1] + [0] * l, 0, 0)\nrandom_inside_left_3 = 819\nrandom_inside_right_3 = 818\nrandom_outside_left_3 = 445\nrandom_outside_right_3 = 444\nfor loop_outside in range(random_outside_left_3 // random_outside_right_3):\n    for (i, e) in enumerate(s[::-1]):\n        for loop_inside in range(random_inside_left_3 % random_inside_right_3):\n            a += int(e) * pow(10, i, l)\n            r += m[a % l]\n            m[a % l] += 1\nprint(r)", "effort_before": "294.6666666666667", "effort_after": "461.19332939176985", "difficulty_before": "2.8333333333333335", "difficulty_after": "3.28125", "calculated_length_before": "51.01955000865388", "calculated_length_after": "75.60964047443682", "length_before": "26", "length_after": "32", "vocabulary_before": "16", "vocabulary_after": "21", "mi_value_before": "65.91", "mi_value_after": "59.42", "Nloc_before": "7", "Nloc_after": "13", "AvgCCN_before": "2.0", "AvgCCN_after": "4.0"}, "codeforces_147_A": {"id": "codeforces_147_A", "language": "Python", "dataset": "Avatar", "pass_before": 0, "pass_after": 0, "filepath_before": "/home/yang/contamination/Avatar_Python_Before/codeforces_147_A.py", "filepath_after": "/home/yang/contamination/Avatar_Python_After/codeforces_147_A.py", "code_before": "s = input()\nres = []\npunctuation = [',', '.', '!', '?']\nfor i in range(len(s)):\n    if i >= 1:\n        if s[i] == '':\n            if res[- 1] != '':\n                res.append(s[i])\n            else:\n                continue\n        else:\n            if s[i] in punctuation:\n                if res[- 1] == '':\n                    res.pop()\n                res.append(s[i])\n                res.append('')\n            else:\n                res.append(s[i])\n    else:\n        if s[i] == '':\n            continue\n        if s[i] in punctuation:\n            continue\n        else:\n            res.append(s[i])\nprint(''.join(res))\n", "code_after": "s = input()\nres = []\npunctuation = [',', '.', '!', '?']\nrandom_inside_left_4 = 789\nrandom_inside_right_4 = 788\nrandom_outside_left_4 = 676\nrandom_outside_right_4 = 675\nfor loop_outside in range(random_outside_left_4 // random_outside_right_4):\n    for i in range(len(s)):\n        for loop_inside in range(random_inside_left_4 % random_inside_right_4):\n            if i >= 1:\n                if s[i] == '':\n                    if res[-1] != '':\n                        res.append(s[i])\n                    else:\n                        continue\n                elif s[i] in punctuation:\n                    if res[-1] == '':\n                        res.pop()\n                    res.append(s[i])\n                    res.append('')\n                else:\n                    res.append(s[i])\n            else:\n                if s[i] == '':\n                    continue\n                if s[i] in punctuation:\n                    continue\n                else:\n                    res.append(s[i])\nprint(''.join(res))", "effort_before": "390.6890595608519", "effort_after": "680.8092005307078", "difficulty_before": "4.0", "difficulty_after": "5.0", "calculated_length_before": "44.82892142331043", "calculated_length_after": "72.95445336320968", "length_before": "25", "length_after": "31", "vocabulary_before": "15", "vocabulary_after": "21", "mi_value_before": "53.63", "mi_value_after": "50.74", "Nloc_before": "26", "Nloc_after": "31", "AvgCCN_before": "9.0", "AvgCCN_after": "11.0"}, "codeforces_70_B": {"id": "codeforces_70_B", "language": "Python", "dataset": "Avatar", "pass_before": 0, "pass_after": 0, "filepath_before": "/home/yang/contamination/Avatar_Python_Before/codeforces_70_B.py", "filepath_after": "/home/yang/contamination/Avatar_Python_After/codeforces_70_B.py", "code_before": "import re\nn = int(input())\nans, sumL = 1, 0\nfor s in re.split(\"[.?!]\", input()):\n    s = s.strip() + '.'\n    L = len(s)\n    if L > 1:\n        if L > n:\n            print(\"Impossible\")\n            exit()\n        if sumL + L + (sumL > 0) > n:\n            ans += 1\n            sumL = L\n        else:\n            sumL = sumL + L + (sumL > 0)\nprint(ans)\n", "code_after": "import re\nn = int(input())\n(ans, sumL) = (1, 0)\nrandom_inside_left_4 = 47\nrandom_inside_right_4 = 46\nrandom_outside_left_4 = 273\nrandom_outside_right_4 = 272\nfor loop_outside in range(random_outside_left_4 // random_outside_right_4):\n    for s in re.split('[.?!]', input()):\n        for loop_inside in range(random_inside_left_4 % random_inside_right_4):\n            s = s.strip() + '.'\n            L = len(s)\n            if L > 1:\n                if L > n:\n                    print('Impossible')\n                    exit()\n                if sumL + L + (sumL > 0) > n:\n                    ans += 1\n                    sumL = L\n                else:\n                    sumL = sumL + L + (sumL > 0)\nprint(ans)", "effort_before": "218.18481326244498", "effort_after": "523.9776313761956", "difficulty_before": "1.6923076923076923", "difficulty_after": "3.0588235294117645", "calculated_length_before": "50.105716335834195", "calculated_length_after": "77.48686830125578", "length_before": "33", "length_after": "39", "vocabulary_before": "15", "vocabulary_after": "21", "mi_value_before": "57.71", "mi_value_after": "53.71", "Nloc_before": "16", "Nloc_after": "22", "AvgCCN_before": "5.0", "AvgCCN_after": "7.0"}, "atcoder_ABC168_B": {"id": "atcoder_ABC168_B", "language": "Python", "dataset": "Avatar", "pass_before": 3, "pass_after": 2, "filepath_before": "/home/yang/contamination/Avatar_Python_Before/atcoder_ABC168_B.py", "filepath_after": "/home/yang/contamination/Avatar_Python_After/atcoder_ABC168_B.py", "code_before": "def main():\n    K = int(input())\n    S = input()\n    if len(S) <= K:\n        return S\n    return S[: K] + '...'\n\n\nif __name__ == '__main__':\n    print(main())\n", "code_after": "def main():\n    K = int(input())\n    S = input()\n    if len(S) <= K:\n        return S\n    return S[:K] + '...'\nprint(main())", "effort_before": "42.793987519471216", "effort_after": "15.509775004326936", "difficulty_before": "1.5", "difficulty_after": "1.0", "calculated_length_before": "20.264662506490406", "calculated_length_after": "10.0", "length_before": "9", "length_after": "6", "vocabulary_before": "9", "vocabulary_after": "6", "mi_value_before": "67.73", "mi_value_after": "70.71", "Nloc_before": "8", "Nloc_after": "7", "AvgCCN_before": "2.0", "AvgCCN_after": "1.0"}, "codeforces_287_A": {"id": "codeforces_287_A", "language": "Python", "dataset": "Avatar", "pass_before": 0, "pass_after": 0, "filepath_before": "/home/yang/contamination/Avatar_Python_Before/codeforces_287_A.py", "filepath_after": "/home/yang/contamination/Avatar_Python_After/codeforces_287_A.py", "code_before": "t = []\nfor i in range(4):\n    l = list(map(str, input()))\n    t.append(l)\nblack = 0\nwhite = 0\ncorrect = 0\nfor i in range(3):\n    for j in range(3):\n        if t[i][j] == '#':\n            black += 1\n        else:\n            white += 1\n        if t[i][j + 1] == '#':\n            black += 1\n        else:\n            white += 1\n        if t[i + 1][j] == '#':\n            black += 1\n        else:\n            white += 1\n        if t[i + 1][j + 1] == '#':\n            black += 1\n        else:\n            white += 1\n        if (black == 0 or black == 3 or white == 0 or white == 3 or white == 4 or black == 4):\n            correct = 1\n            break\n        black = 0\n        white = 0\nif correct == 1:\n    print('YES')\nelse:\n    print('NO')\n", "code_after": "t = []\nrandom_inside_left_2 = 599\nrandom_inside_right_2 = 598\nrandom_outside_left_2 = 743\nrandom_outside_right_2 = 742\nrandom_inside_left_8 = 850\nrandom_inside_right_8 = 849\nrandom_outside_left_8 = 724\nrandom_outside_right_8 = 723\nfor loop_outside in range(random_outside_left_2 // random_outside_right_2):\n    for i in range(4):\n        for loop_inside in range(random_inside_left_2 % random_inside_right_2):\n            l = list(map(str, input()))\n            t.append(l)\nblack = 0\nwhite = 0\ncorrect = 0\nfor loop_outside in range(random_outside_left_8 // random_outside_right_8):\n    for i in range(3):\n        for loop_inside in range(random_inside_left_8 % random_inside_right_8):\n            for j in range(3):\n                if t[i][j] == '#':\n                    black += 1\n                else:\n                    white += 1\n                if t[i][j + 1] == '#':\n                    black += 1\n                else:\n                    white += 1\n                if t[i + 1][j] == '#':\n                    black += 1\n                else:\n                    white += 1\n                if t[i + 1][j + 1] == '#':\n                    black += 1\n                else:\n                    white += 1\n                if black == 0 or black == 3 or white == 0 or (white == 3) or (white == 4) or (black == 4):\n                    correct = 1\n                    break\n                black = 0\n                white = 0\nrandom_outside_if_left_43 = 787\nrandom_outside_if_right_43 = 786\nif random_outside_if_left_43 & random_outside_if_right_43:\n    if correct == 1:\n        print('YES')\n    else:\n        print('NO')\nelse:\n    print('NO')", "effort_before": "1340.7837637752987", "effort_after": "2916.8716858137527", "difficulty_before": "3.9", "difficulty_after": "6.2", "calculated_length_before": "91.19344939991072", "calculated_length_after": "162.7164928725825", "length_before": "76", "length_after": "91", "vocabulary_before": "23", "vocabulary_after": "36", "mi_value_before": "46.54", "mi_value_after": "41.16", "Nloc_before": "34", "Nloc_after": "51", "AvgCCN_before": "15.0", "AvgCCN_after": "20.0"}, "atcoder_ABC152_E": {"id": "atcoder_ABC152_E", "language": "Python", "dataset": "Avatar", "pass_before": 0, "pass_after": 0, "filepath_before": "/home/yang/contamination/Avatar_Python_Before/atcoder_ABC152_E.py", "filepath_after": "/home/yang/contamination/Avatar_Python_After/atcoder_ABC152_E.py", "code_before": "from fractions import gcd\n\n\ndef lcm(a, b):\n    return a * b / gcd(a, b)\n\n\nMOD = 10 ** 9 + 7\nN = int(input())\nA = list(map(int, input().split()))\n_lcm = 1\nfor a in A:\n    _lcm = _lcm * a // gcd(_lcm, a)\nans = _lcm * sum([pow(s, MOD - 2, MOD) for s in A]) % MOD\nprint(int(ans % MOD))\n", "code_after": "from fractions import gcd\n\ndef lcm(a, b):\n    return a * b / gcd(a, b)\nvariable_7_5 = 7\nvariable_10_5 = 10\nvariable_9_5 = 9\nMOD = variable_10_5 ** variable_9_5 + variable_7_5\nN = int(input())\nA = list(map(int, input().split()))\n_lcm = 1\nrandom_inside_left_9 = 609\nrandom_inside_right_9 = 608\nrandom_outside_left_9 = 560\nrandom_outside_right_9 = 559\nfor loop_outside in range(random_outside_left_9 // random_outside_right_9):\n    for a in A:\n        for loop_inside in range(random_inside_left_9 % random_inside_right_9):\n            _lcm = _lcm * a // gcd(_lcm, a)\nvariable_2_17 = 2\nans = _lcm * sum([pow(s, MOD - variable_2_17, MOD) for s in A]) % MOD\nprint(int(ans % MOD))", "effort_before": "566.3777206773193", "effort_after": "692.259108776295", "difficulty_before": "4.117647058823529", "difficulty_after": "4.0", "calculated_length_before": "89.13835275565901", "calculated_length_after": "111.8901503327572", "length_before": "30", "length_after": "36", "vocabulary_before": "24", "vocabulary_after": "28", "mi_value_before": "61.08", "mi_value_after": "54.37", "Nloc_before": "11", "Nloc_after": "21", "AvgCCN_before": "3.0", "AvgCCN_after": "5.0"}, "codeforces_624_B": {"id": "codeforces_624_B", "language": "Python", "dataset": "Avatar", "pass_before": 0, "pass_after": 0, "filepath_before": "/home/yang/contamination/Avatar_Python_Before/codeforces_624_B.py", "filepath_after": "/home/yang/contamination/Avatar_Python_After/codeforces_624_B.py", "code_before": "import sys\ninput = sys.stdin.readline\nn = int(input())\na = list(map(int, input().split()))\npre = float('inf')\nans = 0\na.sort(reverse=True)\nfor j in range(n):\n    ans += max(0, min(pre - 1, a[j]))\n    pre = max(0, min(pre - 1, a[j]))\nprint(ans)\n", "code_after": "import sys\ninput = sys.stdin.readline\nn = int(input())\na = list(map(int, input().split()))\npre = float('inf')\nans = 0\na.sort(reverse=True)\nrandom_inside_left_8 = 907\nrandom_inside_right_8 = 906\nrandom_outside_left_8 = 445\nrandom_outside_right_8 = 444\nfor loop_outside in range(random_outside_left_8 // random_outside_right_8):\n    for j in range(n):\n        for loop_inside in range(random_inside_left_8 % random_inside_right_8):\n            ans += max(0, min(pre - 1, a[j]))\n            pre = max(0, min(pre - 1, a[j]))\nprint(ans)", "effort_before": "34.89699375973561", "effort_after": "134.43609377704337", "difficulty_before": "1.5", "difficulty_after": "2.5", "calculated_length_before": "10.0", "calculated_length_after": "32.0", "length_before": "9", "length_after": "15", "vocabulary_before": "6", "vocabulary_after": "12", "mi_value_before": "66.62", "mi_value_after": "59.96", "Nloc_before": "11", "Nloc_after": "17", "AvgCCN_before": "2.0", "AvgCCN_after": "4.0"}, "atcoder_ABC142_A": {"id": "atcoder_ABC142_A", "language": "Python", "dataset": "Avatar", "pass_before": 0, "pass_after": 0, "filepath_before": "/home/yang/contamination/Avatar_Python_Before/atcoder_ABC142_A.py", "filepath_after": "/home/yang/contamination/Avatar_Python_After/atcoder_ABC142_A.py", "code_before": "from math import *\n\n\ndef next_int():\n    return int(input())\n\n\ndef next_ints():\n    return list(map(int, input().split()))\n\n\nn = next_int()\nt = 0\nfor i in range(n):\n    if i + 1 & 1:\n        t += 1\nprint(t / n)\n", "code_after": "from math import *\n\ndef next_int():\n    return int(input())\n\ndef next_ints():\n    return list(map(int, input().split()))\nn = next_int()\nt = 0\nrandom_inside_left_10 = 992\nrandom_inside_right_10 = 991\nrandom_outside_left_10 = 864\nrandom_outside_right_10 = 863\nfor loop_outside in range(random_outside_left_10 // random_outside_right_10):\n    for i in range(n):\n        for loop_inside in range(random_inside_left_10 % random_inside_right_10):\n            if i + 1 & 1:\n                t += 1\nprint(t / n)", "effort_before": "86.39999999999999", "effort_after": "228.44129532345625", "difficulty_before": "2.4", "difficulty_after": "3.3333333333333335", "calculated_length_before": "16.36452797660028", "calculated_length_after": "40.13896548741762", "length_before": "12", "length_after": "18", "vocabulary_before": "8", "vocabulary_after": "14", "mi_value_before": "65.16", "mi_value_after": "59.09", "Nloc_before": "11", "Nloc_after": "17", "AvgCCN_before": "3.0", "AvgCCN_after": "5.0"}, "codeforces_629_A": {"id": "codeforces_629_A", "language": "Python", "dataset": "Avatar", "pass_before": 1, "pass_after": 0, "filepath_before": "/home/yang/contamination/Avatar_Python_Before/codeforces_629_A.py", "filepath_after": "/home/yang/contamination/Avatar_Python_After/codeforces_629_A.py", "code_before": "n = int(input())\ncake = []\nhappiness = 0\nchocCount = 0\nnfat = 1\nfor i in range(n):\n    line = str(input())\n    cake.append(line)\n    for j in line:\n        if (j == 'C'):\n            chocCount += 1\n    if (chocCount > 1):\n        for i in range(chocCount, chocCount - 2, - 1):\n            nfat *= i\n        happiness += nfat / 2\n    nfat = 1\n    chocCount = 0\nposCount = 0\nfor j in range(n):\n    for i in range(n):\n        if (cake[i][j] == 'C'):\n            chocCount += 1\n    if (chocCount > 1):\n        for i in range(chocCount, chocCount - 2, - 1):\n            nfat *= i\n        happiness += nfat / 2\n    nfat = 1\n    chocCount = 0\nprint(int(happiness))\n", "code_after": "n = int(input())\ncake = []\nhappiness = 0\nchocCount = 0\nnfat = 1\nrandom_inside_left_6 = 365\nrandom_inside_right_6 = 364\nrandom_outside_left_6 = 925\nrandom_outside_right_6 = 924\nrandom_inside_left_19 = 865\nrandom_inside_right_19 = 864\nrandom_outside_left_19 = 663\nrandom_outside_right_19 = 662\nfor loop_outside in range(random_outside_left_6 // random_outside_right_6):\n    for i in range(n):\n        for loop_inside in range(random_inside_left_6 % random_inside_right_6):\n            line = str(input())\n            cake.append(line)\n            for j in line:\n                if j == 'C':\n                    chocCount += 1\n            if chocCount > 1:\n                for i in range(chocCount, chocCount - 2, -1):\n                    nfat *= i\n                happiness += nfat / 2\n            nfat = 1\n            chocCount = 0\nposCount = 0\nfor loop_outside in range(random_outside_left_19 // random_outside_right_19):\n    for j in range(n):\n        for loop_inside in range(random_inside_left_19 % random_inside_right_19):\n            for i in range(n):\n                if cake[i][j] == 'C':\n                    chocCount += 1\n            if chocCount > 1:\n                for i in range(chocCount, chocCount - 2, -1):\n                    nfat *= i\n                happiness += nfat / 2\n            nfat = 1\n            chocCount = 0\nprint(int(happiness))", "effort_before": "1830.9761597242152", "effort_after": "2509.439269314069", "difficulty_before": "9.545454545454545", "difficulty_after": "9.0", "calculated_length_before": "57.705232259413506", "calculated_length_after": "109.23994776840894", "length_before": "46", "length_after": "58", "vocabulary_before": "18", "vocabulary_after": "28", "mi_value_before": "50.31", "mi_value_after": "45.45", "Nloc_before": "29", "Nloc_after": "41", "AvgCCN_before": "11.0", "AvgCCN_after": "15.0"}, "atcoder_AGC006_A": {"id": "atcoder_AGC006_A", "language": "Python", "dataset": "Avatar", "pass_before": 3, "pass_after": 0, "filepath_before": "/home/yang/contamination/Avatar_Python_Before/atcoder_AGC006_A.py", "filepath_after": "/home/yang/contamination/Avatar_Python_After/atcoder_AGC006_A.py", "code_before": "n = int(input())\ns = list(input())\nt = list(input())\nif s == t:\n    print(n)\nelse:\n    cnt = 0\n    for i in range(n):\n        for j in range(n - i):\n            if s[i + j] != t[j]:\n                break\n            if j == n - i - 1:\n                cnt = n - i\n    print(2 * n - cnt)\n", "code_after": "n = int(input())\ns = list(input())\nt = list(input())\nrandom_outside_if_left_4 = 833\nrandom_outside_if_right_4 = 832\nif random_outside_if_left_4 & random_outside_if_right_4:\n    if s == t:\n        print(n)\n    else:\n        cnt = 0\n        for i in range(n):\n            for j in range(n - i):\n                if s[i + j] != t[j]:\n                    break\n                if j == n - i - 1:\n                    cnt = n - i\n        print(2 * n - cnt)\nelse:\n    cnt = 0\n    for i in range(n):\n        for j in range(n - i):\n            if s[i + j] != t[j]:\n                break\n            if j == n - i - 1:\n                cnt = n - i\n    print(2 * n - cnt)", "effort_before": "481.145192474113", "effort_after": "1692.1582985307932", "difficulty_before": "3.8461538461538463", "difficulty_after": "6.0", "calculated_length_before": "59.715356810271004", "calculated_length_after": "101.94833690207419", "length_before": "30", "length_after": "60", "vocabulary_before": "18", "vocabulary_after": "26", "mi_value_before": "58.85", "mi_value_after": "50.14", "Nloc_before": "14", "Nloc_after": "26", "AvgCCN_before": "6.0", "AvgCCN_after": "11.0"}, "codeforces_621_A": {"id": "codeforces_621_A", "language": "Python", "dataset": "Avatar", "pass_before": 0, "pass_after": 0, "filepath_before": "/home/yang/contamination/Avatar_Python_Before/codeforces_621_A.py", "filepath_after": "/home/yang/contamination/Avatar_Python_After/codeforces_621_A.py", "code_before": "n = int(input())\nlst = list(map(int, input().split()))\nlst.sort()\nlst.reverse()\nod = 0\nfor i in lst:\n    if (i & 1):\n        od += 1\nsum = 0\nok = 0\nfor i in range(n):\n    if (lst[i] % 2 == 0):\n        sum += lst[i]\n    else:\n        if (ok or od > 1):\n            sum += lst[i]\n            od -= 1\n            ok = not ok\nprint(sum)\n", "code_after": "n = int(input())\nlst = list(map(int, input().split()))\nlst.sort()\nlst.reverse()\nod = 0\nrandom_inside_left_6 = 894\nrandom_inside_right_6 = 893\nrandom_outside_left_6 = 981\nrandom_outside_right_6 = 980\nrandom_inside_left_11 = 691\nrandom_inside_right_11 = 690\nrandom_outside_left_11 = 676\nrandom_outside_right_11 = 675\nfor loop_outside in range(random_outside_left_6 // random_outside_right_6):\n    for i in lst:\n        for loop_inside in range(random_inside_left_6 % random_inside_right_6):\n            if i & 1:\n                od += 1\nsum = 0\nok = 0\nfor loop_outside in range(random_outside_left_11 // random_outside_right_11):\n    for i in range(n):\n        for loop_inside in range(random_inside_left_11 % random_inside_right_11):\n            if lst[i] % 2 == 0:\n                sum += lst[i]\n            elif ok or od > 1:\n                sum += lst[i]\n                od -= 1\n                ok = not ok\nprint(sum)", "effort_before": "793.7941267609789", "effort_after": "1210.0016163614002", "difficulty_before": "6.333333333333333", "difficulty_after": "6.075", "calculated_length_before": "67.01955000865388", "calculated_length_after": "114.96788691072805", "length_before": "29", "length_after": "41", "vocabulary_before": "20", "vocabulary_after": "29", "mi_value_before": "55.99", "mi_value_after": "49.89", "Nloc_before": "19", "Nloc_after": "30", "AvgCCN_before": "7.0", "AvgCCN_after": "11.0"}, "atcoder_ABC128_C": {"id": "atcoder_ABC128_C", "language": "Python", "dataset": "Avatar", "pass_before": 0, "pass_after": 0, "filepath_before": "/home/yang/contamination/Avatar_Python_Before/atcoder_ABC128_C.py", "filepath_after": "/home/yang/contamination/Avatar_Python_After/atcoder_ABC128_C.py", "code_before": "def main():\n    import itertools\n    n, m = map(int, input().split())\n    li = [list(map(int, input().split()))[1:] for _ in range(m)]\n    p = tuple(map(int, input().split()))\n    q = set(sum(li, []))\n    r = set(range(1, n + 1))\n    v = r - q\n    ans = 0\n    for i in range(0, len(q) + 1):\n        for s in itertools.combinations(q, i):\n            for u, w in zip(li, p):\n                s = set(s)\n                if len(s & set(u)) % 2 != w:\n                    break\n            else:\n                ans += 2 ** (len(v))\n    print(ans)\n\n\nif __name__ == \"__main__\":\n    main()\n", "code_after": "def main():\n    import itertools\n    (n, m) = map(int, input().split())\n    li = [list(map(int, input().split()))[1:] for _ in range(m)]\n    p = tuple(map(int, input().split()))\n    q = set(sum(li, []))\n    r = set(range(1, n + 1))\n    v = r - q\n    ans = 0\n    for i in range(0, len(q) + 1):\n        for s in itertools.combinations(q, i):\n            for (u, w) in zip(li, p):\n                s = set(s)\n                if len(s & set(u)) % 2 != w:\n                    break\n            else:\n                ans += 2 ** len(v)\n    print(ans)\nmain()", "effort_before": "480.9111804533112", "effort_after": "355.63294037930297", "difficulty_before": "3.9375", "difficulty_after": "3.4285714285714284", "calculated_length_before": "83.65148445440323", "calculated_length_after": "68.81274391313339", "length_before": "27", "length_after": "24", "vocabulary_before": "23", "vocabulary_after": "20", "mi_value_before": "55.84", "mi_value_after": "56.91", "Nloc_before": "20", "Nloc_after": "19", "AvgCCN_before": "2.0", "AvgCCN_after": "1.0"}, "codeforces_672_A": {"id": "codeforces_672_A", "language": "Python", "dataset": "Avatar", "pass_before": 0, "pass_after": 0, "filepath_before": "/home/yang/contamination/Avatar_Python_Before/codeforces_672_A.py", "filepath_after": "/home/yang/contamination/Avatar_Python_After/codeforces_672_A.py", "code_before": "li = []\nind = 0\nfor i in range(1, 371):\n    temp = []\n    p, q = i, i\n    count = 0\n    while p != 0:\n        p //= 10\n        count += 1\n    if count == 1:\n        li.append(i)\n    if count == 2:\n        temp = []\n        while q != 0:\n            x = q % 10\n            q //= 10\n            temp.append(x)\n        li = li + temp[:: - 1]\n    if count == 3:\n        temp = []\n        while q != 0:\n            x = q % 10\n            q //= 10\n            temp.append(x)\n        li = li + temp[:: - 1]\nli.pop()\nli.pop()\nn = int(input(''))\nprint(li[n - 1])\n", "code_after": "li = []\nind = 0\nrandom_inside_left_3 = 525\nrandom_inside_right_3 = 524\nrandom_outside_left_3 = 187\nrandom_outside_right_3 = 186\nfor loop_outside in range(random_outside_left_3 // random_outside_right_3):\n    for i in range(1, 371):\n        for loop_inside in range(random_inside_left_3 % random_inside_right_3):\n            temp = []\n            (p, q) = (i, i)\n            count = 0\n            while p != 0:\n                p //= 10\n                count += 1\n            if count == 1:\n                li.append(i)\n            if count == 2:\n                temp = []\n                while q != 0:\n                    x = q % 10\n                    q //= 10\n                    temp.append(x)\n                li = li + temp[::-1]\n            if count == 3:\n                temp = []\n                while q != 0:\n                    x = q % 10\n                    q //= 10\n                    temp.append(x)\n                li = li + temp[::-1]\nli.pop()\nli.pop()\nn = int(input(''))\nprint(li[n - 1])", "effort_before": "1942.7188494815332", "effort_after": "1959.2677722171939", "difficulty_before": "9.333333333333334", "difficulty_after": "7.875", "calculated_length_before": "62.67103446305711", "calculated_length_after": "83.65148445440323", "length_before": "49", "length_after": "55", "vocabulary_before": "19", "vocabulary_after": "23", "mi_value_before": "49.86", "mi_value_after": "47.42", "Nloc_before": "29", "Nloc_after": "35", "AvgCCN_before": "8.0", "AvgCCN_after": "10.0"}, "codeforces_306_A": {"id": "codeforces_306_A", "language": "Python", "dataset": "Avatar", "pass_before": 0, "pass_after": 0, "filepath_before": "/home/yang/contamination/Avatar_Python_Before/codeforces_306_A.py", "filepath_after": "/home/yang/contamination/Avatar_Python_After/codeforces_306_A.py", "code_before": "n, m = map(int, input().split())\nq = n // m\nr = n % m\na = [q] * m\nfor i in range(r):\n    a[i] += 1\nfor i in range(m):\n    print(a[i], end=' ')\n", "code_after": "(n, m) = map(int, input().split())\nq = n // m\nr = n % m\na = [q] * m\nrandom_inside_left_5 = 125\nrandom_inside_right_5 = 124\nrandom_outside_left_5 = 656\nrandom_outside_right_5 = 655\nrandom_inside_left_7 = 234\nrandom_inside_right_7 = 233\nrandom_outside_left_7 = 852\nrandom_outside_right_7 = 851\nfor loop_outside in range(random_outside_left_5 // random_outside_right_5):\n    for i in range(r):\n        for loop_inside in range(random_inside_left_5 % random_inside_right_5):\n            a[i] += 1\nfor loop_outside in range(random_outside_left_7 // random_outside_right_7):\n    for i in range(m):\n        for loop_inside in range(random_inside_left_7 % random_inside_right_7):\n            print(a[i], end=' ')", "effort_before": "121.72512005538482", "effort_after": "241.47472785232782", "difficulty_before": "3.2", "difficulty_after": "2.4615384615384617", "calculated_length_before": "19.60964047443681", "calculated_length_after": "56.105716335834195", "length_before": "12", "length_after": "24", "vocabulary_before": "9", "vocabulary_after": "17", "mi_value_before": "67.72", "mi_value_after": "56.27", "Nloc_before": "8", "Nloc_after": "20", "AvgCCN_before": "3.0", "AvgCCN_after": "7.0"}, "codeforces_154_A": {"id": "codeforces_154_A", "language": "Python", "dataset": "Avatar", "pass_before": 2, "pass_after": 2, "filepath_before": "/home/yang/contamination/Avatar_Python_Before/codeforces_154_A.py", "filepath_after": "/home/yang/contamination/Avatar_Python_After/codeforces_154_A.py", "code_before": "s = input()\nn = int(input())\nans = 0\nfor i in range(n):\n    x = input()\n    a, b = 0, 0\n    for j in s:\n        if j == x[0]:\n            a += 1\n        elif j == x[1]:\n            b += 1\n        else:\n            ans = ans + min(a, b)\n            a, b = 0, 0\n    ans = ans + min(a, b)\nprint(ans)\n", "code_after": "s = input()\nn = int(input())\nans = 0\nrandom_inside_left_4 = 453\nrandom_inside_right_4 = 452\nrandom_outside_left_4 = 101\nrandom_outside_right_4 = 100\nfor loop_outside in range(random_outside_left_4 // random_outside_right_4):\n    for i in range(n):\n        for loop_inside in range(random_inside_left_4 % random_inside_right_4):\n            x = input()\n            (a, b) = (0, 0)\n            for j in s:\n                if j == x[0]:\n                    a += 1\n                elif j == x[1]:\n                    b += 1\n                else:\n                    ans = ans + min(a, b)\n                    (a, b) = (0, 0)\n            ans = ans + min(a, b)\nprint(ans)", "effort_before": "83.02635884729514", "effort_after": "241.47472785232782", "difficulty_before": "1.3333333333333333", "difficulty_after": "2.4615384615384617", "calculated_length_before": "30.529325012980813", "calculated_length_after": "56.105716335834195", "length_before": "18", "length_after": "24", "vocabulary_before": "11", "vocabulary_after": "17", "mi_value_before": "59.92", "mi_value_after": "55.41", "Nloc_before": "16", "Nloc_after": "22", "AvgCCN_before": "5.0", "AvgCCN_after": "7.0"}, "atcoder_ABC127_F": {"id": "atcoder_ABC127_F", "language": "Python", "dataset": "Avatar", "pass_before": 0, "pass_after": 0, "filepath_before": "/home/yang/contamination/Avatar_Python_Before/atcoder_ABC127_F.py", "filepath_after": "/home/yang/contamination/Avatar_Python_After/atcoder_ABC127_F.py", "code_before": "import heapq\nq = int(input())\nans = [0, 0]\np1 = []\np2 = []\nheapq.heapify(p1)\nheapq.heapify(p2)\nsum_b = 0\nsum_p1 = 0\nsum_p2 = 0\nfor _ in range(q):\n    ql = list(map(int, input().split()))\n    if ql[0] == 2:\n        if len(p1) == len(p2):\n            print(- p2[0], sum_p1 - len(p1) * - p2[0] +\n                  len(p2) * - p2[0] - sum_p2 + sum_b)\n        else:\n            print(p1[0], sum_p1 - len(p1) * p1[0] +\n                  len(p2) * p1[0] - sum_p2 + sum_b)\n    else:\n        sum_b += ql[2]\n        if len(p1) == 0:\n            heapq.heappush(p1, ql[1])\n            sum_p1 += ql[1]\n        elif p1[0] <= ql[1]:\n            heapq.heappush(p1, ql[1])\n            sum_p1 += ql[1]\n        else:\n            heapq.heappush(p2, - ql[1])\n            sum_p2 += ql[1]\n        if len(p1) < len(p2):\n            k = heapq.heappop(p2)\n            heapq.heappush(p1, - k)\n            sum_p2 += k\n            sum_p1 -= k\n        if len(p1) - 1 > len(p2):\n            k = heapq.heappop(p1)\n            heapq.heappush(p2, - k)\n            sum_p1 -= k\n            sum_p2 += k\n", "code_after": "import heapq\nq = int(input())\nans = [0, 0]\np1 = []\np2 = []\nheapq.heapify(p1)\nheapq.heapify(p2)\nsum_b = 0\nsum_p1 = 0\nsum_p2 = 0\nrandom_inside_left_11 = 778\nrandom_inside_right_11 = 777\nrandom_outside_left_11 = 11\nrandom_outside_right_11 = 10\nfor loop_outside in range(random_outside_left_11 // random_outside_right_11):\n    for _ in range(q):\n        for loop_inside in range(random_inside_left_11 % random_inside_right_11):\n            ql = list(map(int, input().split()))\n            if ql[0] == 2:\n                if len(p1) == len(p2):\n                    print(-p2[0], sum_p1 - len(p1) * -p2[0] + len(p2) * -p2[0] - sum_p2 + sum_b)\n                else:\n                    print(p1[0], sum_p1 - len(p1) * p1[0] + len(p2) * p1[0] - sum_p2 + sum_b)\n            else:\n                sum_b += ql[2]\n                if len(p1) == 0:\n                    heapq.heappush(p1, ql[1])\n                    sum_p1 += ql[1]\n                elif p1[0] <= ql[1]:\n                    heapq.heappush(p1, ql[1])\n                    sum_p1 += ql[1]\n                else:\n                    heapq.heappush(p2, -ql[1])\n                    sum_p2 += ql[1]\n                if len(p1) < len(p2):\n                    k = heapq.heappop(p2)\n                    heapq.heappush(p1, -k)\n                    sum_p2 += k\n                    sum_p1 -= k\n                if len(p1) - 1 > len(p2):\n                    k = heapq.heappop(p1)\n                    heapq.heappush(p2, -k)\n                    sum_p1 -= k\n                    sum_p2 += k", "effort_before": "2891.6776024752085", "effort_after": "3866.2674567841973", "difficulty_before": "5.454545454545454", "difficulty_after": "6.666666666666667", "calculated_length_before": "264.21499122004104", "calculated_length_after": "301.29748098348915", "length_before": "93", "length_after": "99", "vocabulary_before": "52", "vocabulary_after": "58", "mi_value_before": "45.14", "mi_value_after": "43.24", "Nloc_before": "40", "Nloc_after": "44", "AvgCCN_before": "8.0", "AvgCCN_after": "10.0"}, "atcoder_ABC174_C": {"id": "atcoder_ABC174_C", "language": "Python", "dataset": "Avatar", "pass_before": 0, "pass_after": 0, "filepath_before": "/home/yang/contamination/Avatar_Python_Before/atcoder_ABC174_C.py", "filepath_after": "/home/yang/contamination/Avatar_Python_After/atcoder_ABC174_C.py", "code_before": "from sys import stdin, stdout, setrecursionlimit\nfrom math import gcd, ceil, sqrt\nfrom collections import Counter\nfrom bisect import bisect_left, bisect_right\ndef ii1(): return int(stdin.readline().strip())\ndef is1(): return stdin.readline().strip()\n\n\ndef iia(): return list(map(int, stdin.readline().strip().split()))\ndef isa(): return stdin.readline().strip().split()\n\n\nsetrecursionlimit(100000)\nmod = 1000000007\nk = ii1()\nt = 0\nfor i in range(1, k + 1):\n    t = (t % k) * 10 + 7\n    if t % k == 0:\n        print(i)\n        break\nelse:\n    print(- 1)\n", "code_after": "from sys import stdin, stdout, setrecursionlimit\nfrom math import gcd, ceil, sqrt\nfrom collections import Counter\nfrom bisect import bisect_left, bisect_right\n\ndef ii1():\n    return int(stdin.readline().strip())\n\ndef is1():\n    return stdin.readline().strip()\n\ndef iia():\n    return list(map(int, stdin.readline().strip().split()))\n\ndef isa():\n    return stdin.readline().strip().split()\nsetrecursionlimit(100000)\nmod = 1000000007\nk = ii1()\nt = 0\nrandom_inside_left_21 = 277\nrandom_inside_right_21 = 276\nrandom_outside_left_21 = 333\nrandom_outside_right_21 = 332\nfor loop_outside in range(random_outside_left_21 // random_outside_right_21):\n    for i in range(1, k + 1):\n        for loop_inside in range(random_inside_left_21 % random_inside_right_21):\n            t = t % k * 10 + 7\n            if t % k == 0:\n                print(i)\n                break\n    else:\n        print(-1)", "effort_before": "274.97563325971583", "effort_after": "433.2886063712457", "difficulty_before": "3.611111111111111", "difficulty_after": "3.923076923076923", "calculated_length_before": "40.13896548741762", "calculated_length_after": "63.61549134016113", "length_before": "20", "length_after": "26", "vocabulary_before": "14", "vocabulary_after": "19", "mi_value_before": "56.18", "mi_value_after": "52.66", "Nloc_before": "19", "Nloc_after": "29", "AvgCCN_before": "4.0", "AvgCCN_after": "6.0"}, "atcoder_ABC133_E": {"id": "atcoder_ABC133_E", "language": "Python", "dataset": "Avatar", "pass_before": 0, "pass_after": 0, "filepath_before": "/home/yang/contamination/Avatar_Python_Before/atcoder_ABC133_E.py", "filepath_after": "/home/yang/contamination/Avatar_Python_After/atcoder_ABC133_E.py", "code_before": "from collections import defaultdict\nimport sys\nsys.setrecursionlimit(10 ** 7)\ngraph = defaultdict(list)\nN, K = map(int, input().split())\nfor i in range(N - 1):\n    a, b = map(int, input().split())\n    graph[a - 1].append(b - 1)\n    graph[b - 1].append(a - 1)\nmod = 10 ** 9 + 7\n\n\ndef dfs(fro, to, f):\n    caseNum = f\n    colorNum = K - 1 if f == K else K - 2\n    for u in graph[fro]:\n        if u == to:\n            continue\n        pat = dfs(u, fro, colorNum)\n        if pat == 0:\n            caseNum = 0\n            break\n        caseNum = caseNum * pat % mod\n        colorNum -= 1\n    return caseNum\n\n\nans = dfs(0, - 1, K)\nprint(ans)\n", "code_after": "from collections import defaultdict\nimport sys\nsys.setrecursionlimit(10 ** 7)\ngraph = defaultdict(list)\n(N, K) = map(int, input().split())\nrandom_inside_left_6 = 658\nrandom_inside_right_6 = 657\nrandom_outside_left_6 = 344\nrandom_outside_right_6 = 343\nfor loop_outside in range(random_outside_left_6 // random_outside_right_6):\n    for i in range(N - 1):\n        for loop_inside in range(random_inside_left_6 % random_inside_right_6):\n            (a, b) = map(int, input().split())\n            graph[a - 1].append(b - 1)\n            graph[b - 1].append(a - 1)\nvariable_7_16 = 7\nvariable_10_16 = 10\nvariable_9_16 = 9\nmod = variable_10_16 ** variable_9_16 + variable_7_16\n\ndef dfs(fro, to, f):\n    caseNum = f\n    colorNum = K - 1 if f == K else K - 2\n    for u in graph[fro]:\n        if u == to:\n            continue\n        pat = dfs(u, fro, colorNum)\n        if pat == 0:\n            caseNum = 0\n            break\n        caseNum = caseNum * pat % mod\n        colorNum -= 1\n    return caseNum\nans = dfs(0, -1, K)\nprint(ans)", "effort_before": "1372.9737662497016", "effort_after": "1621.726616472416", "difficulty_before": "5.775", "difficulty_after": "5.6923076923076925", "calculated_length_before": "106.09004635215048", "calculated_length_after": "146.2114326716684", "length_before": "50", "length_after": "56", "vocabulary_before": "27", "vocabulary_after": "34", "mi_value_before": "52.23", "mi_value_after": "48.59", "Nloc_before": "25", "Nloc_after": "34", "AvgCCN_before": "2.0", "AvgCCN_after": "4.0"}, "atcoder_AGC033_A": {"id": "atcoder_AGC033_A", "language": "Python", "dataset": "Avatar", "pass_before": 0, "pass_after": 0, "filepath_before": "/home/yang/contamination/Avatar_Python_Before/atcoder_AGC033_A.py", "filepath_after": "/home/yang/contamination/Avatar_Python_After/atcoder_AGC033_A.py", "code_before": "import numpy as np\nh, w = map(int, input().split())\ngraph = [[0 if i == '#' else float('inf')\n          for i in list(input())] for _ in range(h)]\ngraph = np.array(graph)\nfor x in range(w - 1):\n    graph[:, x + 1] = np.minimum(graph[:, x] + 1, graph[:, x + 1])\nfor x in range(w - 1, 0, - 1):\n    graph[:, x - 1] = np.minimum(graph[:, x] + 1, graph[:, x - 1])\nfor y in range(h - 1):\n    graph[y + 1, :] = np.minimum(graph[y, :] + 1, graph[y + 1, :])\nfor y in range(h - 1, 0, - 1):\n    graph[y - 1, :] = np.minimum(graph[y, :] + 1, graph[y - 1, :])\nprint(int(np.max(graph)))\n", "code_after": "import numpy as np\n(h, w) = map(int, input().split())\ngraph = [[0 if i == '#' else float('inf') for i in list(input())] for _ in range(h)]\ngraph = np.array(graph)\nrandom_inside_left_5 = 912\nrandom_inside_right_5 = 911\nrandom_outside_left_5 = 551\nrandom_outside_right_5 = 550\nrandom_inside_left_7 = 271\nrandom_inside_right_7 = 270\nrandom_outside_left_7 = 949\nrandom_outside_right_7 = 948\nrandom_inside_left_9 = 299\nrandom_inside_right_9 = 298\nrandom_outside_left_9 = 499\nrandom_outside_right_9 = 498\nrandom_inside_left_11 = 785\nrandom_inside_right_11 = 784\nrandom_outside_left_11 = 830\nrandom_outside_right_11 = 829\nfor loop_outside in range(random_outside_left_5 // random_outside_right_5):\n    for x in range(w - 1):\n        for loop_inside in range(random_inside_left_5 % random_inside_right_5):\n            graph[:, x + 1] = np.minimum(graph[:, x] + 1, graph[:, x + 1])\nfor loop_outside in range(random_outside_left_7 // random_outside_right_7):\n    for x in range(w - 1, 0, -1):\n        for loop_inside in range(random_inside_left_7 % random_inside_right_7):\n            graph[:, x - 1] = np.minimum(graph[:, x] + 1, graph[:, x - 1])\nfor loop_outside in range(random_outside_left_9 // random_outside_right_9):\n    for y in range(h - 1):\n        for loop_inside in range(random_inside_left_9 % random_inside_right_9):\n            graph[y + 1, :] = np.minimum(graph[y, :] + 1, graph[y + 1, :])\nfor loop_outside in range(random_outside_left_11 // random_outside_right_11):\n    for y in range(h - 1, 0, -1):\n        for loop_inside in range(random_inside_left_11 % random_inside_right_11):\n            graph[y - 1, :] = np.minimum(graph[y, :] + 1, graph[y - 1, :])\nprint(int(np.max(graph)))", "effort_before": "1406.4806144190668", "effort_after": "2302.4856713693916", "difficulty_before": "6.545454545454546", "difficulty_after": "5.777777777777778", "calculated_length_before": "46.053747805010275", "calculated_length_after": "143.89173756274062", "length_before": "55", "length_after": "79", "vocabulary_before": "15", "vocabulary_after": "33", "mi_value_before": "55.21", "mi_value_after": "44.23", "Nloc_before": "14", "Nloc_after": "37", "AvgCCN_before": "8.0", "AvgCCN_after": "16.0"}, "atcoder_ABC155_E": {"id": "atcoder_ABC155_E", "language": "Python", "dataset": "Avatar", "pass_before": 0, "pass_after": 0, "filepath_before": "/home/yang/contamination/Avatar_Python_Before/atcoder_ABC155_E.py", "filepath_after": "/home/yang/contamination/Avatar_Python_After/atcoder_ABC155_E.py", "code_before": "import sys\ninput_methods = ['clipboard', 'file', 'key']\nusing_method = 0\ninput_method = input_methods[using_method]\ndef IN(): return map(int, input().split())\n\n\nmod = 1000000007\n\n\ndef main_b():\n    s = input()\n    pp = 0\n    na = 0\n    for i, c in enumerate(s[:: - 1]):\n        cc = na + int(c)\n        na = 0\n        if cc <= 4:\n            pp += cc\n        else:\n            na = 1\n            if i == len(s) - 1:\n                pp += 1\n            pp += 10 - cc\n    print(pp)\n\n\ndef main():\n    s = input()\n    pmin = 1000\n    mmin = 0\n    s = '0' + s\n    for c in s[:: - 1]:\n        v = int(c)\n        npmin = min(pmin + 10 - (v + 1), mmin + 10 - v)\n        nmmin = min(pmin + v + 1, mmin + v)\n        pmin = npmin\n        mmin = nmmin\n    return min(pmin, mmin)\n\n\nisTest = False\n\n\ndef pa(v):\n    if isTest:\n        print(v)\n\n\ndef input_clipboard():\n    import clipboard\n    input_text = clipboard.get()\n    input_l = input_text.splitlines()\n    for l in input_l:\n        yield l\n\n\nif __name__ == \"__main__\":\n    if sys.platform == 'ios':\n        if input_method == input_methods[0]:\n            ic = input_clipboard()\n            def input(): return ic.__next__()\n        elif input_method == input_methods[1]:\n            sys.stdin = open('inputFile.txt')\n        else:\n            pass\n        isTest = True\n    else:\n        pass\n    ret = main()\n    if ret is not None:\n        print(ret)\n", "code_after": "import sys\ninput_methods = ['clipboard', 'file', 'key']\nusing_method = 0\ninput_method = input_methods[using_method]\n\ndef IN():\n    return map(int, input().split())\nmod = 1000000007\n\ndef main_b():\n    s = input()\n    pp = 0\n    na = 0\n    for (i, c) in enumerate(s[::-1]):\n        cc = na + int(c)\n        na = 0\n        if cc <= 4:\n            pp += cc\n        else:\n            na = 1\n            if i == len(s) - 1:\n                pp += 1\n            pp += 10 - cc\n    print(pp)\n\ndef main():\n    s = input()\n    pmin = 1000\n    mmin = 0\n    s = '0' + s\n    for c in s[::-1]:\n        v = int(c)\n        npmin = min(pmin + 10 - (v + 1), mmin + 10 - v)\n        nmmin = min(pmin + v + 1, mmin + v)\n        pmin = npmin\n        mmin = nmmin\n    return min(pmin, mmin)\nisTest = False\n\ndef pa(v):\n    if isTest:\n        print(v)\n\ndef input_clipboard():\n    import clipboard\n    input_text = clipboard.get()\n    input_l = input_text.splitlines()\n    for l in input_l:\n        yield l\nrandom_outside_if_left_50 = 138\nrandom_outside_if_right_50 = 137\nrandom_outside_if_left_64 = 401\nrandom_outside_if_right_64 = 400\nif random_outside_if_left_50 & random_outside_if_right_50:\n    if sys.platform == 'ios':\n        if input_method == input_methods[0]:\n            ic = input_clipboard()\n\n            def input():\n                return ic.__next__()\n        elif input_method == input_methods[1]:\n            sys.stdin = open('inputFile.txt')\n        else:\n            pass\n        isTest = True\n    else:\n        pass\nelse:\n    pass\nret = main()\nif random_outside_if_left_64 & random_outside_if_right_64:\n    if ret is not None:\n        print(ret)", "effort_before": "1623.3328874830854", "effort_after": "1977.8220047181399", "difficulty_before": "4.451612903225806", "difficulty_after": "5.090909090909091", "calculated_length_before": "169.0898606263201", "calculated_length_after": "186.1164903932322", "length_before": "70", "length_after": "73", "vocabulary_before": "37", "vocabulary_after": "40", "mi_value_before": "42.31", "mi_value_after": "40.95", "Nloc_before": "58", "Nloc_after": "67", "AvgCCN_before": "6.0", "AvgCCN_after": "7.0"}, "codeforces_110_B": {"id": "codeforces_110_B", "language": "Python", "dataset": "Avatar", "pass_before": 2, "pass_after": 1, "filepath_before": "/home/yang/contamination/Avatar_Python_Before/codeforces_110_B.py", "filepath_after": "/home/yang/contamination/Avatar_Python_After/codeforces_110_B.py", "code_before": "LUCKY = \"abcd\"\nn = int(input())\ns = \"\"\nfor i in range(n):\n    s += LUCKY[i % 4]\nprint(s)\n", "code_after": "LUCKY = 'abcd'\nn = int(input())\ns = ''\nrandom_inside_left_4 = 214\nrandom_inside_right_4 = 213\nrandom_outside_left_4 = 61\nrandom_outside_right_4 = 60\nfor loop_outside in range(random_outside_left_4 // random_outside_right_4):\n    for i in range(n):\n        for loop_inside in range(random_inside_left_4 % random_inside_right_4):\n            s += LUCKY[i % 4]\nprint(s)", "effort_before": "15.509775004326936", "effort_after": "62.26976913547136", "difficulty_before": "1.0", "difficulty_after": "1.5", "calculated_length_before": "10.0", "calculated_length_after": "28.75488750216347", "length_before": "6", "length_after": "12", "vocabulary_before": "6", "vocabulary_after": "11", "mi_value_before": "72.96", "mi_value_after": "63.83", "Nloc_before": "6", "Nloc_after": "12", "AvgCCN_before": "2.0", "AvgCCN_after": "4.0"}, "codeforces_171_A": {"id": "codeforces_171_A", "language": "Python", "dataset": "Avatar", "pass_before": 0, "pass_after": 0, "filepath_before": "/home/yang/contamination/Avatar_Python_Before/codeforces_171_A.py", "filepath_after": "/home/yang/contamination/Avatar_Python_After/codeforces_171_A.py", "code_before": "import sys\ninput = sys.stdin.readline\na, b = input()[: - 1].split()\nx = max(len(a), len(b))\na = a.rjust(x, '0')\nb = b.ljust(x, '0')\ns = ''\nc = 0\nfor i in range(x):\n    d = int(b[i]) + int(a[x - i - 1]) + c\n    if d > 9:\n        s += str(d)[1]\n        c = 1\n    else:\n        s += str(d)\n        c = 0\nif c == 1:\n    s += '1'\nprint(int(s[:: - 1]))\n", "code_after": "import sys\ninput = sys.stdin.readline\n(a, b) = input()[:-1].split()\nx = max(len(a), len(b))\na = a.rjust(x, '0')\nb = b.ljust(x, '0')\ns = ''\nc = 0\nrandom_inside_left_9 = 747\nrandom_inside_right_9 = 746\nrandom_outside_left_9 = 925\nrandom_outside_right_9 = 924\nfor loop_outside in range(random_outside_left_9 // random_outside_right_9):\n    for i in range(x):\n        for loop_inside in range(random_inside_left_9 % random_inside_right_9):\n            d = int(b[i]) + int(a[x - i - 1]) + c\n            if d > 9:\n                s += str(d)[1]\n                c = 1\n            else:\n                s += str(d)\n                c = 0\nrandom_outside_if_left_23 = 963\nrandom_outside_if_right_23 = 962\nif random_outside_if_left_23 & random_outside_if_right_23:\n    if c == 1:\n        s += '1'\nprint(int(s[::-1]))", "effort_before": "470.30626041696837", "effort_after": "999.9298237879817", "difficulty_before": "3.5714285714285716", "difficulty_after": "5.2", "calculated_length_before": "64.91260938324326", "calculated_length_after": "110.43856189774725", "length_before": "31", "length_after": "40", "vocabulary_before": "19", "vocabulary_after": "28", "mi_value_before": "55.34", "mi_value_after": "50.53", "Nloc_before": "19", "Nloc_after": "28", "AvgCCN_before": "4.0", "AvgCCN_after": "7.0"}, "codeforces_354_A": {"id": "codeforces_354_A", "language": "Python", "dataset": "Avatar", "pass_before": 1, "pass_after": 1, "filepath_before": "/home/yang/contamination/Avatar_Python_Before/codeforces_354_A.py", "filepath_after": "/home/yang/contamination/Avatar_Python_After/codeforces_354_A.py", "code_before": "n, L, R, QL, QR = map(int, input().split())\nW = list(map(int, input().split()))\nsum_el = [0]\nfor i in range(1, n + 1):\n    sum_el.append(W[i - 1] + sum_el[i - 1])\nanswer = QR * (n - 1) + sum_el[n] * R\nfor i in range(1, n + 1):\n    energy = L * sum_el[i] + R * (sum_el[n] - sum_el[i])\n    if i > (n - i):\n        energy = energy + (i - (n - i) - 1) * QL\n    elif (n - i) > i:\n        energy = energy + ((n - i) - i - 1) * QR\n    if energy < answer:\n        answer = energy\nprint(answer)\n", "code_after": "(n, L, R, QL, QR) = map(int, input().split())\nW = list(map(int, input().split()))\nsum_el = [0]\nrandom_inside_left_4 = 297\nrandom_inside_right_4 = 296\nrandom_outside_left_4 = 491\nrandom_outside_right_4 = 490\nrandom_inside_left_7 = 103\nrandom_inside_right_7 = 102\nrandom_outside_left_7 = 164\nrandom_outside_right_7 = 163\nfor loop_outside in range(random_outside_left_4 // random_outside_right_4):\n    for i in range(1, n + 1):\n        for loop_inside in range(random_inside_left_4 % random_inside_right_4):\n            sum_el.append(W[i - 1] + sum_el[i - 1])\nvariable_1_16 = 1\nanswer = QR * (n - variable_1_16) + sum_el[n] * R\nfor loop_outside in range(random_outside_left_7 // random_outside_right_7):\n    for i in range(1, n + 1):\n        for loop_inside in range(random_inside_left_7 % random_inside_right_7):\n            energy = L * sum_el[i] + R * (sum_el[n] - sum_el[i])\n            if i > n - i:\n                energy = energy + (i - (n - i) - 1) * QL\n            elif n - i > i:\n                energy = energy + (n - i - i - 1) * QR\n            if energy < answer:\n                answer = energy\nprint(answer)", "effort_before": "1961.2360650632772", "effort_after": "2986.146966661898", "difficulty_before": "4.516129032258065", "difficulty_after": "5.6", "calculated_length_before": "165.18972609642998", "calculated_length_after": "232.52860824989773", "length_before": "84", "length_after": "96", "vocabulary_before": "36", "vocabulary_after": "47", "mi_value_before": "54.46", "mi_value_after": "47.66", "Nloc_before": "15", "Nloc_after": "28", "AvgCCN_before": "6.0", "AvgCCN_after": "10.0"}, "codeforces_11_A": {"id": "codeforces_11_A", "language": "Python", "dataset": "Avatar", "pass_before": 1, "pass_after": 1, "filepath_before": "/home/yang/contamination/Avatar_Python_Before/codeforces_11_A.py", "filepath_after": "/home/yang/contamination/Avatar_Python_After/codeforces_11_A.py", "code_before": "n, d = map(int, input().split())\nx = []\nm = 0\nq = 0\nx = input().split()\nfor i in range(len(x)):\n    x[i] = int(x[i])\nfor a in range(len(x) - 1):\n    if x[a] >= x[a + 1]:\n        q = int((x[a] - x[a + 1]) / d + 1)\n        m = m + q\n        x[a + 1] = x[a + 1] + q * d\nprint(m)\n", "code_after": "(n, d) = map(int, input().split())\nx = []\nm = 0\nq = 0\nx = input().split()\nrandom_inside_left_6 = 661\nrandom_inside_right_6 = 660\nrandom_outside_left_6 = 903\nrandom_outside_right_6 = 902\nrandom_inside_left_8 = 665\nrandom_inside_right_8 = 664\nrandom_outside_left_8 = 679\nrandom_outside_right_8 = 678\nfor loop_outside in range(random_outside_left_6 // random_outside_right_6):\n    for i in range(len(x)):\n        for loop_inside in range(random_inside_left_6 % random_inside_right_6):\n            x[i] = int(x[i])\nfor loop_outside in range(random_outside_left_8 // random_outside_right_8):\n    for a in range(len(x) - 1):\n        for loop_inside in range(random_inside_left_8 % random_inside_right_8):\n            if x[a] >= x[a + 1]:\n                q = int((x[a] - x[a + 1]) / d + 1)\n                m = m + q\n                x[a + 1] = x[a + 1] + q * d\nprint(m)", "effort_before": "655.3945306455817", "effort_after": "1187.1139013548104", "difficulty_before": "4.285714285714286", "difficulty_after": "5.090909090909091", "calculated_length_before": "64.91260938324326", "calculated_length_after": "117.75898006442377", "length_before": "36", "length_after": "48", "vocabulary_before": "19", "vocabulary_after": "29", "mi_value_before": "59.16", "mi_value_after": "51.48", "Nloc_before": "13", "Nloc_after": "25", "AvgCCN_before": "4.0", "AvgCCN_after": "8.0"}, "atcoder_ABC145_E": {"id": "atcoder_ABC145_E", "language": "Python", "dataset": "Avatar", "pass_before": 3, "pass_after": 0, "filepath_before": "/home/yang/contamination/Avatar_Python_Before/atcoder_ABC145_E.py", "filepath_after": "/home/yang/contamination/Avatar_Python_After/atcoder_ABC145_E.py", "code_before": "import sys\nfrom operator import itemgetter\ninput = sys.stdin.readline\nTIME = 0\nVAL = 1\nN, T = [int(a) for a in input().split()]\ntime_value = [(- 1, - 1)] + [None] * (N)\nfor i in range(1, N + 1):\n    time_value[i] = tuple(int(a) for a in input().split())\ntime_value.sort(key=itemgetter(VAL))\ndp = [[- 1] * T for _ in range(N + 1)]\nfor t in range(0, T):\n    dp[0][t] = 0\nfor n in range(1, N + 1):\n    dp[n][0] = 0\n    for t in range(1, T):\n        if time_value[n][TIME] > t:\n            dp[n][t] = dp[n - 1][t]\n        else:\n            dp[n][t] = max(dp[n - 1][t], time_value[n][VAL] +\n                           dp[n - 1][t - time_value[n][TIME]])\nval_acum = time_value[N][VAL]\nt = T - 1\nmax_val = val_acum + dp[N - 1][t]\nfor n in range(N - 1, 0, - 1):\n    val_acum += time_value[n][VAL]\n    t -= time_value[n + 1][TIME]\n    if t < 0:\n        break\n    else:\n        max_val = max(max_val, val_acum + dp[n - 1][t])\nprint(max_val)\n", "code_after": "import sys\nfrom operator import itemgetter\ninput = sys.stdin.readline\nTIME = 0\nVAL = 1\n(N, T) = [int(a) for a in input().split()]\nvariable_None_7 = None\nvariable_1_7 = 1\nvariable_1_7 = 1\ntime_value = [(-variable_1_7, -variable_1_7)] + [variable_None_7] * N\nrandom_inside_left_8 = 921\nrandom_inside_right_8 = 920\nrandom_outside_left_8 = 904\nrandom_outside_right_8 = 903\nrandom_inside_left_12 = 332\nrandom_inside_right_12 = 331\nrandom_outside_left_12 = 96\nrandom_outside_right_12 = 95\nrandom_inside_left_14 = 648\nrandom_inside_right_14 = 647\nrandom_outside_left_14 = 357\nrandom_outside_right_14 = 356\nrandom_inside_left_24 = 906\nrandom_inside_right_24 = 905\nrandom_outside_left_24 = 250\nrandom_outside_right_24 = 249\nfor loop_outside in range(random_outside_left_8 // random_outside_right_8):\n    for i in range(1, N + 1):\n        for loop_inside in range(random_inside_left_8 % random_inside_right_8):\n            time_value[i] = tuple((int(a) for a in input().split()))\ntime_value.sort(key=itemgetter(VAL))\ndp = [[-1] * T for _ in range(N + 1)]\nfor loop_outside in range(random_outside_left_12 // random_outside_right_12):\n    for t in range(0, T):\n        for loop_inside in range(random_inside_left_12 % random_inside_right_12):\n            dp[0][t] = 0\nfor loop_outside in range(random_outside_left_14 // random_outside_right_14):\n    for n in range(1, N + 1):\n        for loop_inside in range(random_inside_left_14 % random_inside_right_14):\n            dp[n][0] = 0\n            for t in range(1, T):\n                if time_value[n][TIME] > t:\n                    dp[n][t] = dp[n - 1][t]\n                else:\n                    dp[n][t] = max(dp[n - 1][t], time_value[n][VAL] + dp[n - 1][t - time_value[n][TIME]])\nval_acum = time_value[N][VAL]\nvariable_1_44 = 1\nt = T - variable_1_44\nvariable_1_45 = 1\nmax_val = val_acum + dp[N - variable_1_45][t]\nfor loop_outside in range(random_outside_left_24 // random_outside_right_24):\n    for n in range(N - 1, 0, -1):\n        for loop_inside in range(random_inside_left_24 % random_inside_right_24):\n            val_acum += time_value[n][VAL]\n            t -= time_value[n + 1][TIME]\n            if t < 0:\n                break\n            else:\n                max_val = max(max_val, val_acum + dp[n - 1][t])\nprint(max_val)", "effort_before": "2604.470082012603", "effort_after": "3646.713746146272", "difficulty_before": "7.578947368421052", "difficulty_after": "6.7368421052631575", "calculated_length_before": "96.22039775975506", "calculated_length_after": "223.42124551085624", "length_before": "74", "length_after": "98", "vocabulary_before": "25", "vocabulary_after": "46", "mi_value_before": "47.93", "mi_value_after": "39.36", "Nloc_before": "32", "Nloc_after": "60", "AvgCCN_before": "11.0", "AvgCCN_after": "19.0"}, "codeforces_546_A": {"id": "codeforces_546_A", "language": "Python", "dataset": "Avatar", "pass_before": 3, "pass_after": 3, "filepath_before": "/home/yang/contamination/Avatar_Python_Before/codeforces_546_A.py", "filepath_after": "/home/yang/contamination/Avatar_Python_After/codeforces_546_A.py", "code_before": "k, n, w = input().split()\nif 1 <= int(k) and int(w) <= 1000:\n    total = 0\n    for i in range(1, int(w) + 1):\n        total += i * int(k)\n    if total > int(n):\n        print(total - int(n))\n    else:\n        print(0)\n", "code_after": "(k, n, w) = input().split()\nrandom_outside_if_left_2 = 761\nrandom_outside_if_right_2 = 760\nif random_outside_if_left_2 & random_outside_if_right_2:\n    if 1 <= int(k) and int(w) <= 1000:\n        total = 0\n        for i in range(1, int(w) + 1):\n            total += i * int(k)\n        if total > int(n):\n            print(total - int(n))\n        else:\n            print(0)", "effort_before": "376.43173042207775", "effort_after": "505.69954555346953", "difficulty_before": "3.6923076923076925", "difficulty_after": "4.2", "calculated_length_before": "63.61549134016113", "calculated_length_after": "78.25484338853101", "length_before": "24", "length_after": "27", "vocabulary_before": "19", "vocabulary_after": "22", "mi_value_before": "63.45", "mi_value_after": "60.32", "Nloc_before": "9", "Nloc_after": "12", "AvgCCN_before": "5.0", "AvgCCN_after": "6.0"}, "codeforces_678_B": {"id": "codeforces_678_B", "language": "Python", "dataset": "Avatar", "pass_before": 0, "pass_after": 0, "filepath_before": "/home/yang/contamination/Avatar_Python_Before/codeforces_678_B.py", "filepath_after": "/home/yang/contamination/Avatar_Python_After/codeforces_678_B.py", "code_before": "def leapyear(n):\n    if (n % 400 == 0 or (n % 4 == 0 and n % 100 != 0)):\n        return \"y\"\n    else:\n        return \"n\"\n\n\nn = int(input())\nd = \"f\"\nif (n % 400 == 0 or (n % 4 == 0 and n % 100 != 0)):\n    ans = \"ly\"\nelse:\n    ans = \"nly\"\nwhile (True):\n    if (n % 400 == 0 or (n % 4 == 0 and n % 100 != 0)):\n        if (d == \"m\"):\n            d = \"w\"\n            n += 1\n        elif (d == \"t\"):\n            d = \"th\"\n            n += 1\n        elif (d == \"w\"):\n            d = \"f\"\n            n += 1\n        elif (d == \"th\"):\n            d = \"sa\"\n            n += 1\n        elif (d == \"f\"):\n            d = \"s\"\n            n += 1\n        elif (d == \"sa\"):\n            d = \"m\"\n            n += 1\n        elif (d == \"s\"):\n            d = \"t\"\n            n += 1\n    else:\n        if (d == \"m\"):\n            d = \"t\"\n            n += 1\n        elif (d == \"t\"):\n            d = \"w\"\n            n += 1\n        elif (d == \"w\"):\n            d = \"th\"\n            n += 1\n        elif (d == \"th\"):\n            d = \"f\"\n            n += 1\n        elif (d == \"f\"):\n            d = \"sa\"\n            n += 1\n        elif (d == \"sa\"):\n            d = \"s\"\n            n += 1\n        elif (d == \"s\"):\n            d = \"m\"\n            n += 1\n    if (d == \"f\" and ans == \"ly\" and leapyear(n) == \"y\"):\n        break\n    elif (d == \"f\" and ans == \"nly\" and leapyear(n) == \"n\"):\n        break\nprint(n)\n", "code_after": "def leapyear(n):\n    if n % 400 == 0 or (n % 4 == 0 and n % 100 != 0):\n        return 'y'\n    else:\n        return 'n'\nn = int(input())\nd = 'f'\nrandom_outside_if_left_8 = 21\nrandom_outside_if_right_8 = 20\nif random_outside_if_left_8 & random_outside_if_right_8:\n    if n % 400 == 0 or (n % 4 == 0 and n % 100 != 0):\n        ans = 'ly'\n    else:\n        ans = 'nly'\nelse:\n    ans = 'nly'\nrandom_inside_left_12 = 280\nrandom_inside_right_12 = 279\nrandom_outside_left_12 = 586\nrandom_outside_right_12 = 585\nfor loop_outside in range(random_outside_left_12 // random_outside_right_12):\n    while True:\n        for loop_inside in range(random_inside_left_12 % random_inside_right_12):\n            if n % 400 == 0 or (n % 4 == 0 and n % 100 != 0):\n                if d == 'm':\n                    d = 'w'\n                    n += 1\n                elif d == 't':\n                    d = 'th'\n                    n += 1\n                elif d == 'w':\n                    d = 'f'\n                    n += 1\n                elif d == 'th':\n                    d = 'sa'\n                    n += 1\n                elif d == 'f':\n                    d = 's'\n                    n += 1\n                elif d == 'sa':\n                    d = 'm'\n                    n += 1\n                elif d == 's':\n                    d = 't'\n                    n += 1\n            elif d == 'm':\n                d = 't'\n                n += 1\n            elif d == 't':\n                d = 'w'\n                n += 1\n            elif d == 'w':\n                d = 'th'\n                n += 1\n            elif d == 'th':\n                d = 'f'\n                n += 1\n            elif d == 'f':\n                d = 'sa'\n                n += 1\n            elif d == 'sa':\n                d = 's'\n                n += 1\n            elif d == 's':\n                d = 'm'\n                n += 1\n            if d == 'f' and ans == 'ly' and (leapyear(n) == 'y'):\n                break\n            elif d == 'f' and ans == 'nly' and (leapyear(n) == 'n'):\n                break\nprint(n)", "effort_before": "7504.07365475842", "effort_after": "10191.265340005204", "difficulty_before": "7.038461538461538", "difficulty_after": "8.827586206896552", "calculated_length_before": "311.9326403476637", "calculated_length_after": "363.76289771739914", "length_before": "182", "length_after": "191", "vocabulary_before": "58", "vocabulary_after": "66", "mi_value_before": "35.93", "mi_value_after": "33.87", "Nloc_before": "61", "Nloc_after": "71", "AvgCCN_before": "28.0", "AvgCCN_after": "31.0"}, "atcoder_AGC028_B": {"id": "atcoder_AGC028_B", "language": "Python", "dataset": "Avatar", "pass_before": 0, "pass_after": 0, "filepath_before": "/home/yang/contamination/Avatar_Python_Before/atcoder_AGC028_B.py", "filepath_after": "/home/yang/contamination/Avatar_Python_After/atcoder_AGC028_B.py", "code_before": "import numpy as np\nimport sys\ninput = sys.stdin.readline\nMOD = 10 ** 9 + 7\nN = int(input())\nM = 10 ** 6\nA = np.array(input().split(), dtype=np.int64)\nNsq = 10 ** 3\nfact = np.arange(M, dtype=np.int64).reshape(Nsq, Nsq)\nfact[0, 0] = 1\nfor n in range(1, Nsq):\n    fact[:, n] *= fact[:, n - 1]\n    fact[:, n] %= MOD\nfor n in range(1, Nsq):\n    fact[n] *= fact[n - 1, - 1]\n    fact[n] %= MOD\nfact = fact.ravel()\nj = np.arange(N)\ninv = np.array([pow(i + 1, MOD - 2, MOD) for i in range(N)])\ninv = np.cumsum(inv) % MOD\ntemp = inv[j] + inv[N - 1 - j] - 1\nans = (A * temp % MOD).sum()\nans %= MOD\nans *= fact[N]\nans %= MOD\nprint(ans)\n", "code_after": "import numpy as np\nimport sys\ninput = sys.stdin.readline\nvariable_7_4 = 7\nvariable_10_4 = 10\nvariable_9_4 = 9\nMOD = variable_10_4 ** variable_9_4 + variable_7_4\nN = int(input())\nvariable_10_6 = 10\nvariable_6_6 = 6\nM = variable_10_6 ** variable_6_6\nA = np.array(input().split(), dtype=np.int64)\nvariable_10_8 = 10\nvariable_3_8 = 3\nNsq = variable_10_8 ** variable_3_8\nfact = np.arange(M, dtype=np.int64).reshape(Nsq, Nsq)\nfact[0, 0] = 1\nrandom_inside_left_11 = 900\nrandom_inside_right_11 = 899\nrandom_outside_left_11 = 749\nrandom_outside_right_11 = 748\nrandom_inside_left_14 = 751\nrandom_inside_right_14 = 750\nrandom_outside_left_14 = 326\nrandom_outside_right_14 = 325\nfor loop_outside in range(random_outside_left_11 // random_outside_right_11):\n    for n in range(1, Nsq):\n        for loop_inside in range(random_inside_left_11 % random_inside_right_11):\n            fact[:, n] *= fact[:, n - 1]\n            fact[:, n] %= MOD\nfor loop_outside in range(random_outside_left_14 // random_outside_right_14):\n    for n in range(1, Nsq):\n        for loop_inside in range(random_inside_left_14 % random_inside_right_14):\n            fact[n] *= fact[n - 1, -1]\n            fact[n] %= MOD\nfact = fact.ravel()\nj = np.arange(N)\ninv = np.array([pow(i + 1, MOD - 2, MOD) for i in range(N)])\ninv = np.cumsum(inv) % MOD\nvariable_1_33 = 1\nvariable_1_33 = 1\ntemp = inv[j] + inv[N - variable_1_33 - j] - variable_1_33\nans = (A * temp % MOD).sum()\nans %= MOD\nans *= fact[N]\nans %= MOD\nprint(ans)", "effort_before": "1623.6833826053376", "effort_after": "2060.7524639724033", "difficulty_before": "4.655172413793103", "difficulty_after": "4.6375", "calculated_length_before": "156.39122386302654", "calculated_length_after": "232.52860824989773", "length_before": "68", "length_after": "80", "vocabulary_before": "35", "vocabulary_after": "47", "mi_value_before": "49.76", "mi_value_after": "43.32", "Nloc_before": "26", "Nloc_after": "47", "AvgCCN_before": "4.0", "AvgCCN_after": "8.0"}, "atcoder_ABC126_E": {"id": "atcoder_ABC126_E", "language": "Python", "dataset": "Avatar", "pass_before": 0, "pass_after": 0, "filepath_before": "/home/yang/contamination/Avatar_Python_Before/atcoder_ABC126_E.py", "filepath_after": "/home/yang/contamination/Avatar_Python_After/atcoder_ABC126_E.py", "code_before": "import sys\nfrom collections import deque\nsys.setrecursionlimit(10 ** 9)\nINF = 10 ** 18\n\n\ndef input():\n    return sys.stdin.readline().rstrip()\n\n\ndef main():\n    N, M = map(int, input().split())\n    edge = [[] for _ in range(N)]\n    for i in range(M):\n        X, Y, Z = map(lambda x: int(x) - 1, input().split())\n        edge[X].append(Y)\n        edge[Y].append(X)\n    used = [False] * N\n    ans = 0\n    for i in range(N):\n        if not used[i]:\n            ans += 1\n            queue = deque()\n            queue.append(i)\n            while queue:\n                node = queue.popleft()\n                used[node] = True\n                for nextnode in edge[node]:\n                    if not used[nextnode]:\n                        queue.append(nextnode)\n    print(ans)\n\n\nif __name__ == '__main__':\n    main()\n", "code_after": "import sys\nfrom collections import deque\nsys.setrecursionlimit(10 ** 9)\nvariable_10_4 = 10\nvariable_18_4 = 18\nINF = variable_10_4 ** variable_18_4\n\ndef input():\n    return sys.stdin.readline().rstrip()\n\ndef main():\n    (N, M) = map(int, input().split())\n    edge = [[] for _ in range(N)]\n    for i in range(M):\n        (X, Y, Z) = map(lambda x: int(x) - 1, input().split())\n        edge[X].append(Y)\n        edge[Y].append(X)\n    used = [False] * N\n    ans = 0\n    for i in range(N):\n        if not used[i]:\n            ans += 1\n            queue = deque()\n            queue.append(i)\n            while queue:\n                node = queue.popleft()\n                used[node] = True\n                for nextnode in edge[node]:\n                    if not used[nextnode]:\n                        queue.append(nextnode)\n    print(ans)\nmain()", "effort_before": "321.08422511105806", "effort_after": "207.27272727272725", "difficulty_before": "3.5", "difficulty_after": "2.727272727272727", "calculated_length_before": "58.52932501298082", "calculated_length_after": "49.663388279447084", "length_before": "22", "length_after": "19", "vocabulary_before": "18", "vocabulary_after": "16", "mi_value_before": "53.46", "mi_value_after": "53.86", "Nloc_before": "29", "Nloc_after": "30", "AvgCCN_before": "2.0", "AvgCCN_after": "1.0"}, "codeforces_569_A": {"id": "codeforces_569_A", "language": "Python", "dataset": "Avatar", "pass_before": 3, "pass_after": 3, "filepath_before": "/home/yang/contamination/Avatar_Python_Before/codeforces_569_A.py", "filepath_after": "/home/yang/contamination/Avatar_Python_After/codeforces_569_A.py", "code_before": "t, s, q = map(int, input().split())\nans = 0\nwhile (s < t):\n    s *= q\n    ans += 1\nprint(ans)\n", "code_after": "(t, s, q) = map(int, input().split())\nans = 0\nrandom_inside_left_3 = 453\nrandom_inside_right_3 = 452\nrandom_outside_left_3 = 980\nrandom_outside_right_3 = 979\nfor loop_outside in range(random_outside_left_3 // random_outside_right_3):\n    while s < t:\n        for loop_inside in range(random_inside_left_3 % random_inside_right_3):\n            s *= q\n            ans += 1\nprint(ans)", "effort_before": "48.6", "effort_after": "158.6397884190668", "difficulty_before": "1.8", "difficulty_after": "2.7777777777777777", "calculated_length_before": "16.36452797660028", "calculated_length_after": "40.13896548741762", "length_before": "9", "length_after": "15", "vocabulary_before": "8", "vocabulary_after": "14", "mi_value_before": "71.27", "mi_value_after": "62.86", "Nloc_before": "6", "Nloc_after": "12", "AvgCCN_before": "2.0", "AvgCCN_after": "4.0"}, "codeforces_148_B": {"id": "codeforces_148_B", "language": "Python", "dataset": "Avatar", "pass_before": 0, "pass_after": 0, "filepath_before": "/home/yang/contamination/Avatar_Python_Before/codeforces_148_B.py", "filepath_after": "/home/yang/contamination/Avatar_Python_After/codeforces_148_B.py", "code_before": "princess = int(input())\ndragon = int(input())\nt = int(input())\nf = int(input())\nc = int(input())\nif dragon <= princess:\n    print(0)\n    exit(0)\nresult = 0\nposition = t * princess\nposition += princess * position / (dragon - princess)\nwhile position < c:\n    result += 1\n    position += princess * position / dragon\n    position += princess * f\n    position += princess * position / (dragon - princess)\nprint(result)\n", "code_after": "princess = int(input())\ndragon = int(input())\nt = int(input())\nf = int(input())\nc = int(input())\nrandom_outside_if_left_6 = 580\nrandom_outside_if_right_6 = 579\nif random_outside_if_left_6 & random_outside_if_right_6:\n    if dragon <= princess:\n        print(0)\n        exit(0)\nresult = 0\nposition = t * princess\nposition += princess * position / (dragon - princess)\nrandom_inside_left_12 = 657\nrandom_inside_right_12 = 656\nrandom_outside_left_12 = 254\nrandom_outside_right_12 = 253\nfor loop_outside in range(random_outside_left_12 // random_outside_right_12):\n    while position < c:\n        for loop_inside in range(random_inside_left_12 % random_inside_right_12):\n            result += 1\n            position += princess * position / dragon\n            position += princess * f\n            position += princess * position / (dragon - princess)\nprint(result)", "effort_before": "1384.2099585534459", "effort_after": "2347.826086956522", "difficulty_before": "6.0", "difficulty_after": "7.826086956521739", "calculated_length_before": "84.99664330558272", "calculated_length_after": "132.57125000229212", "length_before": "51", "length_after": "60", "vocabulary_before": "23", "vocabulary_after": "32", "mi_value_before": "55.67", "mi_value_after": "50.62", "Nloc_before": "17", "Nloc_after": "26", "AvgCCN_before": "3.0", "AvgCCN_after": "6.0"}, "atcoder_AGC028_A": {"id": "atcoder_AGC028_A", "language": "Python", "dataset": "Avatar", "pass_before": 0, "pass_after": 0, "filepath_before": "/home/yang/contamination/Avatar_Python_Before/atcoder_AGC028_A.py", "filepath_after": "/home/yang/contamination/Avatar_Python_After/atcoder_AGC028_A.py", "code_before": "N, M = map(int, input().split())\nS = input()\nT = input()\nlist_S = list(S)\nlist_T = list(T)\nNumber_i = [i for i in range(N)]\nNumber_iMN = []\nfor i in Number_i:\n    Number_iMN.append(i * M / N)\nNumber_j = [j for j in range(M)]\nKaburi_j = list(set(Number_iMN) & set(Number_j))\nKaburi_i = []\nfor j in Kaburi_j:\n    Kaburi_i.append(int(j * N / M))\ncounter = 0\nFlag = 0\nKaburi_Size = len(Kaburi_i)\nwhile counter <= Kaburi_Size - 1:\n    if list_S[int(Kaburi_i[counter])] == list_T[int(Kaburi_j[counter])]:\n        pass\n    else:\n        Flag = 1\n        break\n    counter += 1\n\n\ndef gcd(a, b):\n    while b > 0:\n        a, b = b, a % b\n    return a\n\n\nif Flag == 1:\n    print(- 1)\nelse:\n    print(int(N * M / gcd(N, M)))\n", "code_after": "(N, M) = map(int, input().split())\nS = input()\nT = input()\nlist_S = list(S)\nlist_T = list(T)\nNumber_i = [i for i in range(N)]\nNumber_iMN = []\nrandom_inside_left_8 = 571\nrandom_inside_right_8 = 570\nrandom_outside_left_8 = 749\nrandom_outside_right_8 = 748\nrandom_inside_left_13 = 398\nrandom_inside_right_13 = 397\nrandom_outside_left_13 = 951\nrandom_outside_right_13 = 950\nfor loop_outside in range(random_outside_left_8 // random_outside_right_8):\n    for i in Number_i:\n        for loop_inside in range(random_inside_left_8 % random_inside_right_8):\n            Number_iMN.append(i * M / N)\nNumber_j = [j for j in range(M)]\nKaburi_j = list(set(Number_iMN) & set(Number_j))\nKaburi_i = []\nfor loop_outside in range(random_outside_left_13 // random_outside_right_13):\n    for j in Kaburi_j:\n        for loop_inside in range(random_inside_left_13 % random_inside_right_13):\n            Kaburi_i.append(int(j * N / M))\ncounter = 0\nFlag = 0\nKaburi_Size = len(Kaburi_i)\nrandom_inside_left_30 = 384\nrandom_inside_right_30 = 383\nrandom_outside_left_30 = 148\nrandom_outside_right_30 = 147\nfor loop_outside in range(random_outside_left_30 // random_outside_right_30):\n    while counter <= Kaburi_Size - 1:\n        for loop_inside in range(random_inside_left_30 % random_inside_right_30):\n            if list_S[int(Kaburi_i[counter])] == list_T[int(Kaburi_j[counter])]:\n                pass\n            else:\n                Flag = 1\n                break\n            counter += 1\n\ndef gcd(a, b):\n    while b > 0:\n        (a, b) = (b, a % b)\n    return a\nrandom_outside_if_left_48 = 231\nrandom_outside_if_right_48 = 230\nif random_outside_if_left_48 & random_outside_if_right_48:\n    if Flag == 1:\n        print(-1)\n    else:\n        print(int(N * M / gcd(N, M)))\nelse:\n    print(int(N * M / gcd(N, M)))", "effort_before": "1565.2980999991175", "effort_after": "2831.8374024795976", "difficulty_before": "7.25", "difficulty_after": "7.180555555555555", "calculated_length_before": "119.65784284662087", "calculated_length_after": "224.1710478569335", "length_before": "44", "length_after": "71", "vocabulary_before": "30", "vocabulary_after": "47", "mi_value_before": "49.45", "mi_value_after": "41.67", "Nloc_before": "32", "Nloc_after": "55", "AvgCCN_before": "8.0", "AvgCCN_after": "15.0"}, "codeforces_231_A": {"id": "codeforces_231_A", "language": "Python", "dataset": "Avatar", "pass_before": 0, "pass_after": 0, "filepath_before": "/home/yang/contamination/Avatar_Python_Before/codeforces_231_A.py", "filepath_after": "/home/yang/contamination/Avatar_Python_After/codeforces_231_A.py", "code_before": "n = int(input())\nc = 0\nfor i in range(n):\n    l1 = list(map(int, input().split()))\n    if sum(l1) > 1:\n        c = c + 1\nprint(c)\n", "code_after": "n = int(input())\nc = 0\nrandom_inside_left_3 = 390\nrandom_inside_right_3 = 389\nrandom_outside_left_3 = 443\nrandom_outside_right_3 = 442\nfor loop_outside in range(random_outside_left_3 // random_outside_right_3):\n    for i in range(n):\n        for loop_inside in range(random_inside_left_3 % random_inside_right_3):\n            l1 = list(map(int, input().split()))\n            if sum(l1) > 1:\n                c = c + 1\nprint(c)", "effort_before": "18.575424759098897", "effort_after": "94.88726725405158", "difficulty_before": "1.3333333333333333", "difficulty_after": "2.2857142857142856", "calculated_length_before": "6.754887502163469", "calculated_length_after": "27.651484454403228", "length_before": "6", "length_after": "12", "vocabulary_before": "5", "vocabulary_after": "11", "mi_value_before": "71.89", "mi_value_after": "63.00", "Nloc_before": "7", "Nloc_after": "13", "AvgCCN_before": "3.0", "AvgCCN_after": "5.0"}, "atcoder_AGC035_B": {"id": "atcoder_AGC035_B", "language": "Python", "dataset": "Avatar", "pass_before": 0, "pass_after": 0, "filepath_before": "/home/yang/contamination/Avatar_Python_Before/atcoder_AGC035_B.py", "filepath_after": "/home/yang/contamination/Avatar_Python_After/atcoder_AGC035_B.py", "code_before": "import numpy as np\nfrom collections import deque\nimport heapq\nN, M = map(int, input().split())\nedges = [set() for _ in range(N)]\ndegs = [0 for i in range(N)]\nparity = [0 for _ in range(N)]\nflag = [False for _ in range(N)]\nfor _ in range(M):\n    a, b = map(int, input().split())\n    edges[a - 1].add(b - 1)\n    edges[b - 1].add(a - 1)\n    degs[a - 1] += 1\n    degs[b - 1] += 1\nif M % 2 != 0:\n    print(- 1)\n    exit()\nQ = []\nfor i, d in enumerate(degs):\n    Q.append((d, i))\nheapq.heapify(Q)\nwhile len(Q) > 0:\n    _, u = Q[0]\n    heapq.heappop(Q)\n    if flag[u]:\n        continue\n    flag[u] = True\n    for i, v in enumerate(edges[u]):\n        edges[v].remove(u)\n        if parity[u] != 0 and i == 0:\n            print(u + 1, v + 1)\n            parity[u] = 1 - parity[u]\n        else:\n            print(v + 1, u + 1)\n            parity[v] = 1 - parity[v]\n        degs[v] -= 1\n        heapq.heappush(Q, (degs[v], v))\n", "code_after": "import numpy as np\nfrom collections import deque\nimport heapq\n(N, M) = map(int, input().split())\nedges = [set() for _ in range(N)]\ndegs = [0 for i in range(N)]\nparity = [0 for _ in range(N)]\nflag = [False for _ in range(N)]\nrandom_inside_left_9 = 551\nrandom_inside_right_9 = 550\nrandom_outside_left_9 = 719\nrandom_outside_right_9 = 718\nrandom_inside_left_19 = 262\nrandom_inside_right_19 = 261\nrandom_outside_left_19 = 228\nrandom_outside_right_19 = 227\nfor loop_outside in range(random_outside_left_9 // random_outside_right_9):\n    for _ in range(M):\n        for loop_inside in range(random_inside_left_9 % random_inside_right_9):\n            (a, b) = map(int, input().split())\n            edges[a - 1].add(b - 1)\n            edges[b - 1].add(a - 1)\n            degs[a - 1] += 1\n            degs[b - 1] += 1\nrandom_outside_if_left_25 = 366\nrandom_outside_if_right_25 = 365\nif random_outside_if_left_25 & random_outside_if_right_25:\n    if M % 2 != 0:\n        print(-1)\n        exit()\nQ = []\nfor loop_outside in range(random_outside_left_19 // random_outside_right_19):\n    for (i, d) in enumerate(degs):\n        for loop_inside in range(random_inside_left_19 % random_inside_right_19):\n            Q.append((d, i))\nheapq.heapify(Q)\nrandom_inside_left_34 = 480\nrandom_inside_right_34 = 479\nrandom_outside_left_34 = 878\nrandom_outside_right_34 = 877\nfor loop_outside in range(random_outside_left_34 // random_outside_right_34):\n    while len(Q) > 0:\n        for loop_inside in range(random_inside_left_34 % random_inside_right_34):\n            (_, u) = Q[0]\n            heapq.heappop(Q)\n            if flag[u]:\n                continue\n            flag[u] = True\n            for (i, v) in enumerate(edges[u]):\n                edges[v].remove(u)\n                if parity[u] != 0 and i == 0:\n                    print(u + 1, v + 1)\n                    parity[u] = 1 - parity[u]\n                else:\n                    print(v + 1, u + 1)\n                    parity[v] = 1 - parity[v]\n                degs[v] -= 1\n                heapq.heappush(Q, (degs[v], v))", "effort_before": "2797.8759091677675", "effort_after": "4030.2348223560125", "difficulty_before": "9.052631578947368", "difficulty_after": "8.636363636363637", "calculated_length_before": "104.71062275542812", "calculated_length_after": "199.6842868877026", "length_before": "65", "length_after": "86", "vocabulary_before": "27", "vocabulary_after": "43", "mi_value_before": "46.35", "mi_value_after": "39.99", "Nloc_before": "37", "Nloc_after": "58", "AvgCCN_before": "13.0", "AvgCCN_after": "20.0"}, "codeforces_397_B": {"id": "codeforces_397_B", "language": "Python", "dataset": "Avatar", "pass_before": 0, "pass_after": 0, "filepath_before": "/home/yang/contamination/Avatar_Python_Before/codeforces_397_B.py", "filepath_after": "/home/yang/contamination/Avatar_Python_After/codeforces_397_B.py", "code_before": "class CodeforcesTask397BSolution:\n    def __init__(self):\n        self.result = ''\n        self.t = 0\n        self.queries = []\n\n    def read_input(self):\n        self.t = int(input())\n        for _ in range(self.t):\n            self.queries.append([int(x) for x in input().split(\" \")])\n\n    def process_task(self):\n        res = []\n        for query in self.queries:\n            k = query[0] // query[1]\n            res.append(\"Yes\" if k * query[2] >= query[0] else \"No\")\n        self.result = \"\\n\".join(res)\n\n    def get_result(self):\n        return self.result\n\n\nif __name__ == \"__main__\":\n    Solution = CodeforcesTask397BSolution()\n    Solution.read_input()\n    Solution.process_task()\n    print(Solution.get_result())\n", "code_after": "class CodeforcesTask397BSolution:\n\n    def __init__(self):\n        self.result = ''\n        self.t = 0\n        self.queries = []\n\n    def read_input(self):\n        self.t = int(input())\n        for _ in range(self.t):\n            self.queries.append([int(x) for x in input().split(' ')])\n\n    def process_task(self):\n        res = []\n        for query in self.queries:\n            k = query[0] // query[1]\n            res.append('Yes' if k * query[2] >= query[0] else 'No')\n        self.result = '\\n'.join(res)\n\n    def get_result(self):\n        return self.result\nSolution = CodeforcesTask397BSolution()\nSolution.read_input()\nSolution.process_task()\nprint(Solution.get_result())", "effort_before": "86.03910001730776", "effort_after": "42.793987519471216", "difficulty_before": "2.0", "difficulty_after": "1.5", "calculated_length_before": "32.0", "calculated_length_after": "20.264662506490406", "length_before": "12", "length_after": "9", "vocabulary_before": "12", "vocabulary_after": "9", "mi_value_before": "58.59", "mi_value_after": "60.39", "Nloc_before": "22", "Nloc_after": "21", "AvgCCN_before": "2.0", "AvgCCN_after": "1.0"}, "codeforces_351_A": {"id": "codeforces_351_A", "language": "Python", "dataset": "Avatar", "pass_before": 0, "pass_after": 0, "filepath_before": "/home/yang/contamination/Avatar_Python_Before/codeforces_351_A.py", "filepath_after": "/home/yang/contamination/Avatar_Python_After/codeforces_351_A.py", "code_before": "n = int(input())\narr = list(map(float, input().split()))\narr = sorted([x - int(x) for x in arr if x - int(x) != 0])\no = 2 * n - len(arr)\narr_sum = sum(arr)\nres = int(2e9)\nfor i in range(n + 1):\n    if i + o >= n:\n        res = min(res, abs(i - arr_sum))\nprint(\"%.3f\" % res)\n", "code_after": "n = int(input())\narr = list(map(float, input().split()))\narr = sorted([x - int(x) for x in arr if x - int(x) != 0])\nvariable_2_4 = 2\no = variable_2_4 * n - len(arr)\narr_sum = sum(arr)\nres = int(2000000000.0)\nrandom_inside_left_7 = 915\nrandom_inside_right_7 = 914\nrandom_outside_left_7 = 922\nrandom_outside_right_7 = 921\nfor loop_outside in range(random_outside_left_7 // random_outside_right_7):\n    for i in range(n + 1):\n        for loop_inside in range(random_inside_left_7 % random_inside_right_7):\n            if i + o >= n:\n                res = min(res, abs(i - arr_sum))\nprint('%.3f' % res)", "effort_before": "501.68605709669595", "effort_after": "718.9389903271166", "difficulty_before": "3.75", "difficulty_after": "4.2", "calculated_length_before": "79.50977500432694", "calculated_length_after": "106.09004635215048", "length_before": "30", "length_after": "36", "vocabulary_before": "22", "vocabulary_after": "27", "mi_value_before": "61.72", "mi_value_after": "56.04", "Nloc_before": "10", "Nloc_after": "17", "AvgCCN_before": "5.0", "AvgCCN_after": "7.0"}, "codeforces_612_B": {"id": "codeforces_612_B", "language": "Python", "dataset": "Avatar", "pass_before": 3, "pass_after": 3, "filepath_before": "/home/yang/contamination/Avatar_Python_Before/codeforces_612_B.py", "filepath_after": "/home/yang/contamination/Avatar_Python_After/codeforces_612_B.py", "code_before": "n = int(input())\na = list(map(int, input().split()))\nb = [0] * n\nfor i in range(n):\n    b[a[i] - 1] = i\nres = 0\nfor i in range(1, n):\n    res += abs(b[i] - b[i - 1])\nprint(res)\n", "code_after": "n = int(input())\na = list(map(int, input().split()))\nvariable_0_3 = 0\nb = [variable_0_3] * n\nrandom_inside_left_4 = 503\nrandom_inside_right_4 = 502\nrandom_outside_left_4 = 489\nrandom_outside_right_4 = 488\nrandom_inside_left_7 = 78\nrandom_inside_right_7 = 77\nrandom_outside_left_7 = 645\nrandom_outside_right_7 = 644\nfor loop_outside in range(random_outside_left_4 // random_outside_right_4):\n    for i in range(n):\n        for loop_inside in range(random_inside_left_4 % random_inside_right_4):\n            b[a[i] - 1] = i\nres = 0\nfor loop_outside in range(random_outside_left_7 // random_outside_right_7):\n    for i in range(1, n):\n        for loop_inside in range(random_inside_left_7 % random_inside_right_7):\n            res += abs(b[i] - b[i - 1])\nprint(res)", "effort_before": "89.62406251802892", "effort_after": "318.71820097907744", "difficulty_before": "1.6666666666666667", "difficulty_after": "2.6470588235294117", "calculated_length_before": "33.28421251514428", "calculated_length_after": "81.0965087756926", "length_before": "15", "length_after": "27", "vocabulary_before": "12", "vocabulary_after": "22", "mi_value_before": "65.67", "mi_value_after": "54.79", "Nloc_before": "9", "Nloc_after": "22", "AvgCCN_before": "3.0", "AvgCCN_after": "7.0"}, "atcoder_ABC112_A": {"id": "atcoder_ABC112_A", "language": "Python", "dataset": "Avatar", "pass_before": 3, "pass_after": 0, "filepath_before": "/home/yang/contamination/Avatar_Python_Before/atcoder_ABC112_A.py", "filepath_after": "/home/yang/contamination/Avatar_Python_After/atcoder_ABC112_A.py", "code_before": "age = int(input())\nif age == 1:\n    print('Hello World')\nelse:\n    a, b = [int(input()) for i in range(2)]\n    print(a + b)\n", "code_after": "age = int(input())\nrandom_outside_if_left_2 = 489\nrandom_outside_if_right_2 = 488\nif random_outside_if_left_2 & random_outside_if_right_2:\n    if age == 1:\n        print('Hello World')\n    else:\n        (a, b) = [int(input()) for i in range(2)]\n        print(a + b)\nelse:\n    (a, b) = [int(input()) for i in range(2)]\n    print(a + b)", "effort_before": "15.509775004326936", "effort_after": "76.0782000346155", "difficulty_before": "1.0", "difficulty_after": "2.0", "calculated_length_before": "10.0", "calculated_length_after": "20.264662506490406", "length_before": "6", "length_after": "12", "vocabulary_before": "6", "vocabulary_after": "9", "mi_value_before": "72.82", "mi_value_after": "63.96", "Nloc_before": "6", "Nloc_after": "12", "AvgCCN_before": "3.0", "AvgCCN_after": "5.0"}, "codeforces_596_B": {"id": "codeforces_596_B", "language": "Python", "dataset": "Avatar", "pass_before": 0, "pass_after": 0, "filepath_before": "/home/yang/contamination/Avatar_Python_Before/codeforces_596_B.py", "filepath_after": "/home/yang/contamination/Avatar_Python_After/codeforces_596_B.py", "code_before": "n = int(input())\nr = [* map(int, input().split())]\nans = abs(r[0])\nfor i in range(1, n):\n    ans += abs(r[i] - r[i - 1])\nprint(ans)\n", "code_after": "n = int(input())\nr = [*map(int, input().split())]\nans = abs(r[0])\nrandom_inside_left_4 = 485\nrandom_inside_right_4 = 484\nrandom_outside_left_4 = 529\nrandom_outside_right_4 = 528\nfor loop_outside in range(random_outside_left_4 // random_outside_right_4):\n    for i in range(1, n):\n        for loop_inside in range(random_inside_left_4 % random_inside_right_4):\n            ans += abs(r[i] - r[i - 1])\nprint(ans)", "effort_before": "27.0", "effort_after": "114.22064766172811", "difficulty_before": "1.0", "difficulty_after": "2.0", "calculated_length_before": "17.509775004326936", "calculated_length_after": "41.219280948873624", "length_before": "9", "length_after": "15", "vocabulary_before": "8", "vocabulary_after": "14", "mi_value_before": "71.27", "mi_value_after": "62.86", "Nloc_before": "6", "Nloc_after": "12", "AvgCCN_before": "2.0", "AvgCCN_after": "4.0"}, "atcoder_ABC125_B": {"id": "atcoder_ABC125_B", "language": "Python", "dataset": "Avatar", "pass_before": 0, "pass_after": 0, "filepath_before": "/home/yang/contamination/Avatar_Python_Before/atcoder_ABC125_B.py", "filepath_after": "/home/yang/contamination/Avatar_Python_After/atcoder_ABC125_B.py", "code_before": "N = int(input())\nV = input().split(\" \")\nV = [int(i) for i in V]\nC = input().split(\" \")\nC = [int(i) for i in C]\nlist = [0]\nans = 0\nX = 0\nY = 0\nfor i in range(N):\n    if V[i] - C[i] > 0:\n        X = V[i]\n        Y = C[i]\n        list.append(X - Y)\nprint(sum(list))\n", "code_after": "N = int(input())\nV = input().split(' ')\nV = [int(i) for i in V]\nC = input().split(' ')\nC = [int(i) for i in C]\nlist = [0]\nans = 0\nX = 0\nY = 0\nrandom_inside_left_10 = 374\nrandom_inside_right_10 = 373\nrandom_outside_left_10 = 351\nrandom_outside_right_10 = 350\nfor loop_outside in range(random_outside_left_10 // random_outside_right_10):\n    for i in range(N):\n        for loop_inside in range(random_inside_left_10 % random_inside_right_10):\n            if V[i] - C[i] > 0:\n                X = V[i]\n                Y = C[i]\n                list.append(X - Y)\nprint(sum(list))", "effort_before": "27.0", "effort_after": "114.22064766172811", "difficulty_before": "1.0", "difficulty_after": "2.0", "calculated_length_before": "17.509775004326936", "calculated_length_after": "41.219280948873624", "length_before": "9", "length_after": "15", "vocabulary_before": "8", "vocabulary_after": "14", "mi_value_before": "63.04", "mi_value_after": "57.47", "Nloc_before": "15", "Nloc_after": "21", "AvgCCN_before": "5.0", "AvgCCN_after": "7.0"}, "codeforces_268_A": {"id": "codeforces_268_A", "language": "Python", "dataset": "Avatar", "pass_before": 0, "pass_after": 0, "filepath_before": "/home/yang/contamination/Avatar_Python_Before/codeforces_268_A.py", "filepath_after": "/home/yang/contamination/Avatar_Python_After/codeforces_268_A.py", "code_before": "n = int(input())\nq = []\ncount = 0\nfor i in range(n):\n    a = input().split()\n    q.append(a)\nfor j in q:\n    for k in q:\n        if k == j:\n            continue\n        elif j[0] == k[len(k) - 1]:\n            count += 1\n        else:\n            continue\nprint(count)\n", "code_after": "n = int(input())\nq = []\ncount = 0\nrandom_inside_left_4 = 881\nrandom_inside_right_4 = 880\nrandom_outside_left_4 = 453\nrandom_outside_right_4 = 452\nrandom_inside_left_7 = 501\nrandom_inside_right_7 = 500\nrandom_outside_left_7 = 439\nrandom_outside_right_7 = 438\nfor loop_outside in range(random_outside_left_4 // random_outside_right_4):\n    for i in range(n):\n        for loop_inside in range(random_inside_left_4 % random_inside_right_4):\n            a = input().split()\n            q.append(a)\nfor loop_outside in range(random_outside_left_7 // random_outside_right_7):\n    for j in q:\n        for loop_inside in range(random_inside_left_7 % random_inside_right_7):\n            for k in q:\n                if k == j:\n                    continue\n                elif j[0] == k[len(k) - 1]:\n                    count += 1\n                else:\n                    continue\nprint(count)", "effort_before": "68.33680652339717", "effort_after": "276.6033980727912", "difficulty_before": "1.7142857142857142", "difficulty_after": "2.6666666666666665", "calculated_length_before": "24.406371956566698", "calculated_length_after": "70.2129994085646", "length_before": "12", "length_after": "24", "vocabulary_before": "10", "vocabulary_after": "20", "mi_value_before": "61.72", "mi_value_after": "52.97", "Nloc_before": "15", "Nloc_after": "27", "AvgCCN_before": "6.0", "AvgCCN_after": "10.0"}, "codeforces_56_B": {"id": "codeforces_56_B", "language": "Python", "dataset": "Avatar", "pass_before": 0, "pass_after": 0, "filepath_before": "/home/yang/contamination/Avatar_Python_Before/codeforces_56_B.py", "filepath_after": "/home/yang/contamination/Avatar_Python_After/codeforces_56_B.py", "code_before": "N = int(input())\nA = list(map(int, input().split()))\nmn, mx = N + 1, - 1\nfor i in range(N):\n    if (i + 1 != A[i]):\n        mn = min(mn, i)\n        mx = max(mx, i)\nif (mx == - 1):\n    print('0 0')\nelse:\n    A = A[: mn] + A[mn: (mx + 1)][:: - 1] + A[(mx + 1):]\n    if (sorted(A) == A):\n        print(mn + 1, mx + 1)\n    else:\n        print('0 0')\n", "code_after": "N = int(input())\nA = list(map(int, input().split()))\n(mn, mx) = (N + 1, -1)\nrandom_inside_left_4 = 741\nrandom_inside_right_4 = 740\nrandom_outside_left_4 = 49\nrandom_outside_right_4 = 48\nfor loop_outside in range(random_outside_left_4 // random_outside_right_4):\n    for i in range(N):\n        for loop_inside in range(random_inside_left_4 % random_inside_right_4):\n            if i + 1 != A[i]:\n                mn = min(mn, i)\n                mx = max(mx, i)\nrandom_outside_if_left_14 = 5\nrandom_outside_if_right_14 = 4\nif random_outside_if_left_14 & random_outside_if_right_14:\n    if mx == -1:\n        print('0 0')\n    else:\n        A = A[:mn] + A[mn:mx + 1][::-1] + A[mx + 1:]\n        if sorted(A) == A:\n            print(mn + 1, mx + 1)\n        else:\n            print('0 0')\nelse:\n    A = A[:mn] + A[mn:mx + 1][::-1] + A[mx + 1:]\n    if sorted(A) == A:\n        print(mn + 1, mx + 1)\n    else:\n        print('0 0')", "effort_before": "580.8109823437507", "effort_after": "2286.2000000000003", "difficulty_before": "3.5714285714285716", "difficulty_after": "6.44", "calculated_length_before": "61.30296890880645", "calculated_length_after": "135.74788919877133", "length_before": "39", "length_after": "71", "vocabulary_before": "18", "vocabulary_after": "32", "mi_value_before": "57.00", "mi_value_after": "47.81", "Nloc_before": "15", "Nloc_after": "30", "AvgCCN_before": "5.0", "AvgCCN_after": "9.0"}, "atcoder_ABC148_F": {"id": "atcoder_ABC148_F", "language": "Python", "dataset": "Avatar", "pass_before": 0, "pass_after": 0, "filepath_before": "/home/yang/contamination/Avatar_Python_Before/atcoder_ABC148_F.py", "filepath_after": "/home/yang/contamination/Avatar_Python_After/atcoder_ABC148_F.py", "code_before": "from collections import Counter, defaultdict, deque\nfrom heapq import heappop, heappush, heapify\nimport sys\nimport bisect\nimport math\nimport itertools\nimport pprint\nimport fractions\nsys.setrecursionlimit(10 ** 8)\nmod = 10 ** 9 + 7\nINF = float('inf')\ndef inp(): return int(sys.stdin.readline())\ndef inpl(): return list(map(int, sys.stdin.readline().split()))\n\n\nn, ta, ao = inpl()\nta -= 1\nao -= 1\ng = [[] for i in range(n)]\nfor i in range(n - 1):\n    a, b = inpl()\n    g[a - 1].append(b - 1)\n    g[b - 1].append(a - 1)\nta_dist = [None] * n\nta_dist[ta] = 0\nao_dist = [None] * n\nao_dist[ao] = 0\n\n\ndef ta_dfs(node):\n    for v in g[node]:\n        if ta_dist[v] != None:\n            continue\n        ta_dist[v] = ta_dist[node] + 1\n        ta_dfs(v)\n\n\ndef ao_dfs(node):\n    for v in g[node]:\n        if ao_dist[v] != None:\n            continue\n        ao_dist[v] = ao_dist[node] + 1\n        ao_dfs(v)\n\n\nao_dfs(ao)\nta_dfs(ta)\nres = 0\nfor i in range(n):\n    if ta_dist[i] > ao_dist[i]:\n        continue\n    res = max(res, ao_dist[i])\nprint(res - 1)\n", "code_after": "from collections import Counter, defaultdict, deque\nfrom heapq import heappop, heappush, heapify\nimport sys\nimport bisect\nimport math\nimport itertools\nimport pprint\nimport fractions\nsys.setrecursionlimit(10 ** 8)\nvariable_7_10 = 7\nvariable_10_10 = 10\nvariable_9_10 = 9\nmod = variable_10_10 ** variable_9_10 + variable_7_10\nINF = float('inf')\n\ndef inp():\n    return int(sys.stdin.readline())\n\ndef inpl():\n    return list(map(int, sys.stdin.readline().split()))\n(n, ta, ao) = inpl()\nta -= 1\nao -= 1\ng = [[] for i in range(n)]\nrandom_inside_left_22 = 382\nrandom_inside_right_22 = 381\nrandom_outside_left_22 = 491\nrandom_outside_right_22 = 490\nrandom_inside_left_47 = 651\nrandom_inside_right_47 = 650\nrandom_outside_left_47 = 742\nrandom_outside_right_47 = 741\nfor loop_outside in range(random_outside_left_22 // random_outside_right_22):\n    for i in range(n - 1):\n        for loop_inside in range(random_inside_left_22 % random_inside_right_22):\n            (a, b) = inpl()\n            g[a - 1].append(b - 1)\n            g[b - 1].append(a - 1)\nvariable_None_36 = None\nta_dist = [variable_None_36] * n\nta_dist[ta] = 0\nvariable_None_38 = None\nao_dist = [variable_None_38] * n\nao_dist[ao] = 0\n\ndef ta_dfs(node):\n    for v in g[node]:\n        if ta_dist[v] != None:\n            continue\n        ta_dist[v] = ta_dist[node] + 1\n        ta_dfs(v)\n\ndef ao_dfs(node):\n    for v in g[node]:\n        if ao_dist[v] != None:\n            continue\n        ao_dist[v] = ao_dist[node] + 1\n        ao_dfs(v)\nao_dfs(ao)\nta_dfs(ta)\nres = 0\nfor loop_outside in range(random_outside_left_47 // random_outside_right_47):\n    for i in range(n):\n        for loop_inside in range(random_inside_left_47 % random_inside_right_47):\n            if ta_dist[i] > ao_dist[i]:\n                continue\n            res = max(res, ao_dist[i])\nprint(res - 1)", "effort_before": "1192.37441473287", "effort_after": "1885.8583056255652", "difficulty_before": "4.5", "difficulty_after": "5.333333333333333", "calculated_length_before": "125.5488750216347", "calculated_length_after": "190.46500593882897", "length_before": "54", "length_after": "66", "vocabulary_before": "30", "vocabulary_after": "41", "mi_value_before": "45.69", "mi_value_after": "41.40", "Nloc_before": "45", "Nloc_after": "64", "AvgCCN_before": "5.0", "AvgCCN_after": "9.0"}, "atcoder_ABC166_C": {"id": "atcoder_ABC166_C", "language": "Python", "dataset": "Avatar", "pass_before": 0, "pass_after": 0, "filepath_before": "/home/yang/contamination/Avatar_Python_Before/atcoder_ABC166_C.py", "filepath_after": "/home/yang/contamination/Avatar_Python_After/atcoder_ABC166_C.py", "code_before": "(n, m) = [int(x) for x in input().split()]\np = [x for x in range(1, n + 1)]\nh = [int(x) for x in input().split()]\nhp = dict(zip(p, h))\npath = {i: [] for i in range(1, n + 1)}\nfor i in range(m):\n    (a, b) = [int(x) for x in input().split()]\n    path[a].append(b)\n    path[b].append(a)\nc = 0\nfor i, v in path.items():\n    f = 0\n    for j in v:\n        if hp[i] <= hp[j]:\n            f = 1\n            break\n    if f == 0:\n        c += 1\nprint(c)\n", "code_after": "(n, m) = [int(x) for x in input().split()]\np = [x for x in range(1, n + 1)]\nh = [int(x) for x in input().split()]\nhp = dict(zip(p, h))\npath = {i: [] for i in range(1, n + 1)}\nrandom_inside_left_6 = 488\nrandom_inside_right_6 = 487\nrandom_outside_left_6 = 73\nrandom_outside_right_6 = 72\nrandom_inside_left_11 = 447\nrandom_inside_right_11 = 446\nrandom_outside_left_11 = 731\nrandom_outside_right_11 = 730\nfor loop_outside in range(random_outside_left_6 // random_outside_right_6):\n    for i in range(m):\n        for loop_inside in range(random_inside_left_6 % random_inside_right_6):\n            (a, b) = [int(x) for x in input().split()]\n            path[a].append(b)\n            path[b].append(a)\nc = 0\nfor loop_outside in range(random_outside_left_11 // random_outside_right_11):\n    for (i, v) in path.items():\n        for loop_inside in range(random_inside_left_11 % random_inside_right_11):\n            f = 0\n            for j in v:\n                if hp[i] <= hp[j]:\n                    f = 1\n                    break\n            if f == 0:\n                c += 1\nprint(c)", "effort_before": "106.77626019280808", "effort_after": "350.07617568587636", "difficulty_before": "2.142857142857143", "difficulty_after": "3.0", "calculated_length_before": "24.406371956566698", "calculated_length_after": "70.2129994085646", "length_before": "15", "length_after": "27", "vocabulary_before": "10", "vocabulary_after": "20", "mi_value_before": "57.79", "mi_value_after": "50.38", "Nloc_before": "19", "Nloc_after": "31", "AvgCCN_before": "11.0", "AvgCCN_after": "15.0"}, "atcoder_AGC038_A": {"id": "atcoder_AGC038_A", "language": "Python", "dataset": "Avatar", "pass_before": 3, "pass_after": 3, "filepath_before": "/home/yang/contamination/Avatar_Python_Before/atcoder_AGC038_A.py", "filepath_after": "/home/yang/contamination/Avatar_Python_After/atcoder_AGC038_A.py", "code_before": "import sys\n\n\ndef solve(H: int, W: int, A: int, B: int):\n    answer = [[\"0\"] * W for _ in range(H)]\n    for i in range(H):\n        for j in range(W):\n            if i < B:\n                if j < A:\n                    answer[i][j] = \"0\"\n                else:\n                    answer[i][j] = \"1\"\n            else:\n                if j < A:\n                    answer[i][j] = \"1\"\n                else:\n                    answer[i][j] = \"0\"\n    for i in range(H):\n        print(''.join(answer[i]))\n    return\n\n\ndef main():\n    def iterate_tokens():\n        for line in sys.stdin:\n            for word in line.split():\n                yield word\n    tokens = iterate_tokens()\n    H = int(next(tokens))\n    W = int(next(tokens))\n    A = int(next(tokens))\n    B = int(next(tokens))\n    solve(H, W, A, B)\n\n\nif __name__ == '__main__':\n    main()\n", "code_after": "import sys\n\ndef solve(H: int, W: int, A: int, B: int):\n    answer = [['0'] * W for _ in range(H)]\n    for i in range(H):\n        for j in range(W):\n            if i < B:\n                if j < A:\n                    answer[i][j] = '0'\n                else:\n                    answer[i][j] = '1'\n            elif j < A:\n                answer[i][j] = '1'\n            else:\n                answer[i][j] = '0'\n    for i in range(H):\n        print(''.join(answer[i]))\n    return\n\ndef main():\n\n    def iterate_tokens():\n        for line in sys.stdin:\n            for word in line.split():\n                yield word\n    tokens = iterate_tokens()\n    H = int(next(tokens))\n    W = int(next(tokens))\n    A = int(next(tokens))\n    B = int(next(tokens))\n    solve(H, W, A, B)\nmain()", "effort_before": "97.296514274174", "effort_after": "48.0", "difficulty_before": "1.875", "difficulty_after": "1.3333333333333333", "calculated_length_before": "28.75488750216347", "calculated_length_after": "17.509775004326936", "length_before": "15", "length_after": "12", "vocabulary_before": "11", "vocabulary_after": "8", "mi_value_before": "54.89", "mi_value_after": "56.75", "Nloc_before": "31", "Nloc_after": "29", "AvgCCN_before": "2.0", "AvgCCN_after": "1.0"}, "atcoder_AGC027_A": {"id": "atcoder_AGC027_A", "language": "Python", "dataset": "Avatar", "pass_before": 3, "pass_after": 0, "filepath_before": "/home/yang/contamination/Avatar_Python_Before/atcoder_AGC027_A.py", "filepath_after": "/home/yang/contamination/Avatar_Python_After/atcoder_AGC027_A.py", "code_before": "def na(): return list(map(int, input().split()))\n\n\nn, x = na()\na = sorted(na())\nans = 0\nif a[0] > x:\n    print(0)\n    exit()\nfor i in a:\n    if i > x:\n        x = 0\n        break\n    x -= i\n    ans += 1\nif x != 0:\n    ans -= 1\nprint(ans)\n", "code_after": "def na():\n    return list(map(int, input().split()))\n(n, x) = na()\na = sorted(na())\nans = 0\nrandom_outside_if_left_6 = 205\nrandom_outside_if_right_6 = 204\nrandom_outside_if_left_21 = 70\nrandom_outside_if_right_21 = 69\nif random_outside_if_left_6 & random_outside_if_right_6:\n    if a[0] > x:\n        print(0)\n        exit()\nrandom_inside_left_9 = 371\nrandom_inside_right_9 = 370\nrandom_outside_left_9 = 970\nrandom_outside_right_9 = 969\nfor loop_outside in range(random_outside_left_9 // random_outside_right_9):\n    for i in a:\n        for loop_inside in range(random_inside_left_9 % random_inside_right_9):\n            if i > x:\n                x = 0\n                break\n            x -= i\n            ans += 1\nif random_outside_if_left_21 & random_outside_if_right_21:\n    if x != 0:\n        ans -= 1\nprint(ans)", "effort_before": "239.1788228318901", "effort_after": "658.847613416814", "difficulty_before": "4.0", "difficulty_after": "5.0", "calculated_length_before": "23.509775004326936", "calculated_length_after": "72.95445336320968", "length_before": "18", "length_after": "30", "vocabulary_before": "10", "vocabulary_after": "21", "mi_value_before": "59.50", "mi_value_after": "51.72", "Nloc_before": "16", "Nloc_after": "29", "AvgCCN_before": "5.0", "AvgCCN_after": "9.0"}, "codeforces_356_A": {"id": "codeforces_356_A", "language": "Python", "dataset": "Avatar", "pass_before": 0, "pass_after": 0, "filepath_before": "/home/yang/contamination/Avatar_Python_Before/codeforces_356_A.py", "filepath_after": "/home/yang/contamination/Avatar_Python_After/codeforces_356_A.py", "code_before": "n, m = map(int, input().strip().split())\nout = [0 for _ in range(n)]\ncomp = [i + 2 for i in range(n)]\nfor _ in range(m):\n    l, r, x = map(int, input().strip().split())\n    t = l\n    while t <= r:\n        next_val = comp[t - 1]\n        if out[t - 1] == 0 and t != x:\n            out[t - 1] = x\n        comp[t - 1] = r + 1 if t >= x else x\n        t = next_val\nprint(* out)\n", "code_after": "(n, m) = map(int, input().strip().split())\nout = [0 for _ in range(n)]\ncomp = [i + 2 for i in range(n)]\nrandom_inside_left_4 = 412\nrandom_inside_right_4 = 411\nrandom_outside_left_4 = 802\nrandom_outside_right_4 = 801\nfor loop_outside in range(random_outside_left_4 // random_outside_right_4):\n    for _ in range(m):\n        for loop_inside in range(random_inside_left_4 % random_inside_right_4):\n            (l, r, x) = map(int, input().strip().split())\n            t = l\n            while t <= r:\n                next_val = comp[t - 1]\n                if out[t - 1] == 0 and t != x:\n                    out[t - 1] = x\n                comp[t - 1] = r + 1 if t >= x else x\n                t = next_val\nprint(*out)", "effort_before": "1038.6243079617113", "effort_after": "1474.3580861062967", "difficulty_before": "7.7", "difficulty_after": "8.357142857142858", "calculated_length_before": "52.87076540327685", "calculated_length_after": "81.83229392178725", "length_before": "33", "length_after": "39", "vocabulary_before": "17", "vocabulary_after": "23", "mi_value_before": "59.01", "mi_value_after": "54.54", "Nloc_before": "13", "Nloc_after": "19", "AvgCCN_before": "8.0", "AvgCCN_after": "10.0"}, "atcoder_ABC170_A": {"id": "atcoder_ABC170_A", "language": "Python", "dataset": "Avatar", "pass_before": 0, "pass_after": 0, "filepath_before": "/home/yang/contamination/Avatar_Python_Before/atcoder_ABC170_A.py", "filepath_after": "/home/yang/contamination/Avatar_Python_After/atcoder_ABC170_A.py", "code_before": "a = list(map(int, input().split()))\nfor e, i in enumerate(a):\n    if i == 0:\n        print(e + 1)\n        break\n", "code_after": "a = list(map(int, input().split()))\nrandom_inside_left_2 = 29\nrandom_inside_right_2 = 28\nrandom_outside_left_2 = 221\nrandom_outside_right_2 = 220\nfor loop_outside in range(random_outside_left_2 // random_outside_right_2):\n    for (e, i) in enumerate(a):\n        for loop_inside in range(random_inside_left_2 % random_inside_right_2):\n            if i == 0:\n                print(e + 1)\n                break", "effort_before": "15.509775004326936", "effort_after": "86.03910001730776", "difficulty_before": "1.0", "difficulty_after": "2.0", "calculated_length_before": "10.0", "calculated_length_after": "32.0", "length_before": "6", "length_after": "12", "vocabulary_before": "6", "vocabulary_after": "12", "mi_value_before": "74.29", "mi_value_after": "64.35", "Nloc_before": "5", "Nloc_after": "11", "AvgCCN_before": "3.0", "AvgCCN_after": "5.0"}, "atcoder_ABC107_C": {"id": "atcoder_ABC107_C", "language": "Python", "dataset": "Avatar", "pass_before": 0, "pass_after": 0, "filepath_before": "/home/yang/contamination/Avatar_Python_Before/atcoder_ABC107_C.py", "filepath_after": "/home/yang/contamination/Avatar_Python_After/atcoder_ABC107_C.py", "code_before": "import sys\nN, K = map(int, input().split())\nlst = list(map(int, input().split()))\nlst_p = []\nlst_m = []\nfor i in range(N):\n    if lst[i] == 0:\n        K -= 1\n    if lst[i] > 0:\n        lst_p += [lst[i]]\n    elif lst[i] < 0:\n        lst_m += [lst[i]]\np = 0\nm = 0\nx, y = 0, len(lst_m) - 1\nlastx = len(lst_p)\nlasty = len(lst_m)\n\n\ndef check(k):\n    ans = 10 ** 9\n    for j in range(0, k + 1):\n        if j > lastx or k - j > lasty:\n            pass\n        else:\n            if j == 0:\n                p = 0\n            else:\n                p = lst_p[j - 1]\n            if k - j == 0:\n                m = 0\n            else:\n                m = lst_m[lasty - (k - j)]\n            ans = min(ans, 2 * p + abs(m), p + 2 * abs(m))\n    return ans\n\n\nprint(check(K))\n", "code_after": "import sys\n(N, K) = map(int, input().split())\nlst = list(map(int, input().split()))\nlst_p = []\nlst_m = []\nrandom_inside_left_6 = 632\nrandom_inside_right_6 = 631\nrandom_outside_left_6 = 536\nrandom_outside_right_6 = 535\nfor loop_outside in range(random_outside_left_6 // random_outside_right_6):\n    for i in range(N):\n        for loop_inside in range(random_inside_left_6 % random_inside_right_6):\n            if lst[i] == 0:\n                K -= 1\n            if lst[i] > 0:\n                lst_p += [lst[i]]\n            elif lst[i] < 0:\n                lst_m += [lst[i]]\np = 0\nm = 0\n(x, y) = (0, len(lst_m) - 1)\nlastx = len(lst_p)\nlasty = len(lst_m)\n\ndef check(k):\n    ans = 10 ** 9\n    for j in range(0, k + 1):\n        if j > lastx or k - j > lasty:\n            pass\n        else:\n            if j == 0:\n                p = 0\n            else:\n                p = lst_p[j - 1]\n            if k - j == 0:\n                m = 0\n            else:\n                m = lst_m[lasty - (k - j)]\n            ans = min(ans, 2 * p + abs(m), p + 2 * abs(m))\n    return ans\nprint(check(K))", "effort_before": "2220.922923689325", "effort_after": "3010.715966160274", "difficulty_before": "6.133333333333334", "difficulty_after": "7.352941176470588", "calculated_length_before": "171.20671786825557", "calculated_length_after": "206.1930175513852", "length_before": "69", "length_after": "75", "vocabulary_before": "38", "vocabulary_after": "44", "mi_value_before": "47.73", "mi_value_after": "45.59", "Nloc_before": "34", "Nloc_after": "40", "AvgCCN_before": "5.0", "AvgCCN_after": "7.0"}, "codeforces_608_A": {"id": "codeforces_608_A", "language": "Python", "dataset": "Avatar", "pass_before": 3, "pass_after": 3, "filepath_before": "/home/yang/contamination/Avatar_Python_Before/codeforces_608_A.py", "filepath_after": "/home/yang/contamination/Avatar_Python_After/codeforces_608_A.py", "code_before": "import sys\ninput = sys.stdin.readline\nn, s = map(int, input().split())\nc = 0\nfor _ in range(n):\n    f, t = map(int, input().split())\n    x = t - (s - f)\n    if x > c:\n        c = x\nprint(s + c)\n", "code_after": "import sys\ninput = sys.stdin.readline\n(n, s) = map(int, input().split())\nc = 0\nrandom_inside_left_5 = 941\nrandom_inside_right_5 = 940\nrandom_outside_left_5 = 595\nrandom_outside_right_5 = 594\nfor loop_outside in range(random_outside_left_5 // random_outside_right_5):\n    for _ in range(n):\n        for loop_inside in range(random_inside_left_5 % random_inside_right_5):\n            (f, t) = map(int, input().split())\n            x = t - (s - f)\n            if x > c:\n                c = x\nprint(s + c)", "effort_before": "76.0782000346155", "effort_after": "210.97209216286", "difficulty_before": "2.0", "difficulty_after": "3.0", "calculated_length_before": "20.264662506490406", "calculated_length_after": "44.82892142331043", "length_before": "12", "length_after": "18", "vocabulary_before": "9", "vocabulary_after": "15", "mi_value_before": "65.81", "mi_value_after": "59.55", "Nloc_before": "10", "Nloc_after": "16", "AvgCCN_before": "3.0", "AvgCCN_after": "5.0"}, "atcoder_ABC132_A": {"id": "atcoder_ABC132_A", "language": "Python", "dataset": "Avatar", "pass_before": 1, "pass_after": 0, "filepath_before": "/home/yang/contamination/Avatar_Python_Before/atcoder_ABC132_A.py", "filepath_after": "/home/yang/contamination/Avatar_Python_After/atcoder_ABC132_A.py", "code_before": "from collections import Counter\nS = input()\nc = Counter(S)\nSa = set(list(S))\nif len(Sa) != 2:\n    print(\"No\")\n    exit()\nfor i in Sa:\n    if c[i] != 2:\n        print(\"No\")\n        exit()\nprint(\"Yes\")\n", "code_after": "from collections import Counter\nS = input()\nc = Counter(S)\nSa = set(list(S))\nrandom_outside_if_left_5 = 388\nrandom_outside_if_right_5 = 387\nif random_outside_if_left_5 & random_outside_if_right_5:\n    if len(Sa) != 2:\n        print('No')\n        exit()\nrandom_inside_left_8 = 560\nrandom_inside_right_8 = 559\nrandom_outside_left_8 = 195\nrandom_outside_right_8 = 194\nfor loop_outside in range(random_outside_left_8 // random_outside_right_8):\n    for i in Sa:\n        for loop_inside in range(random_inside_left_8 % random_inside_right_8):\n            if c[i] != 2:\n                print('No')\n                exit()\nprint('Yes')", "effort_before": "8.0", "effort_after": "123.34799060470309", "difficulty_before": "0.6666666666666666", "difficulty_after": "2.2222222222222223", "calculated_length_before": "4.754887502163469", "calculated_length_after": "36.52932501298081", "length_before": "6", "length_after": "15", "vocabulary_before": "4", "vocabulary_after": "13", "mi_value_before": "67.61", "mi_value_after": "57.56", "Nloc_before": "12", "Nloc_after": "21", "AvgCCN_before": "4.0", "AvgCCN_after": "7.0"}, "codeforces_222_A": {"id": "codeforces_222_A", "language": "Python", "dataset": "Avatar", "pass_before": 0, "pass_after": 0, "filepath_before": "/home/yang/contamination/Avatar_Python_Before/codeforces_222_A.py", "filepath_after": "/home/yang/contamination/Avatar_Python_After/codeforces_222_A.py", "code_before": "def main():\n    n, k = list(map(int, input().split(' ')))\n    elems = list(map(int, input().split(' ')))\n    def all_same(arr): return all([x == arr[0] for x in arr])\n    if all_same(elems):\n        print(0)\n        return\n    if k == 1:\n        print(- 1)\n        return\n    if not all_same(elems[k - 1:]):\n        print(- 1)\n        return\n    target = elems[- 1]\n    to_delete = elems[0: k - 1]\n    while to_delete and to_delete[- 1] == target:\n        to_delete.pop()\n    print(len(to_delete))\n\n\nif __name__ == \"__main__\":\n    main()\n", "code_after": "def main():\n    (n, k) = list(map(int, input().split(' ')))\n    elems = list(map(int, input().split(' ')))\n\n    def all_same(arr):\n        return all([x == arr[0] for x in arr])\n    if all_same(elems):\n        print(0)\n        return\n    if k == 1:\n        print(-1)\n        return\n    if not all_same(elems[k - 1:]):\n        print(-1)\n        return\n    target = elems[-1]\n    to_delete = elems[0:k - 1]\n    while to_delete and to_delete[-1] == target:\n        to_delete.pop()\n    print(len(to_delete))\nmain()", "effort_before": "535.4545454545455", "effort_after": "503.416928583172", "difficulty_before": "4.318181818181818", "difficulty_after": "4.722222222222222", "calculated_length_before": "49.663388279447084", "calculated_length_after": "40.13896548741762", "length_before": "31", "length_after": "28", "vocabulary_before": "16", "vocabulary_after": "14", "mi_value_before": "55.37", "mi_value_after": "56.38", "Nloc_before": "20", "Nloc_after": "20", "AvgCCN_before": "2.0", "AvgCCN_after": "1.0"}, "atcoder_ABC120_C": {"id": "atcoder_ABC120_C", "language": "Python", "dataset": "Avatar", "pass_before": 0, "pass_after": 0, "filepath_before": "/home/yang/contamination/Avatar_Python_Before/atcoder_ABC120_C.py", "filepath_after": "/home/yang/contamination/Avatar_Python_After/atcoder_ABC120_C.py", "code_before": "from collections import deque\nfrom collections import Counter\nfrom itertools import product, permutations, combinations\nfrom operator import itemgetter\nfrom heapq import heappop, heappush\nfrom bisect import bisect_left, bisect_right, bisect\nfrom fractions import gcd\nfrom math import ceil, floor, sqrt, cos, sin, pi, factorial\nimport sys\nread = sys.stdin.buffer.read\nreadline = sys.stdin.buffer.readline\nreadlines = sys.stdin.buffer.readlines\nsys.setrecursionlimit(10 ** 8)\nINF = float('inf')\nMOD = 10 ** 9 + 7\n\n\ndef main():\n    s = input()\n    if len(set(s)) == 1:\n        print(0)\n        sys.exit()\n    a = Counter(s)\n    ans = min(a.values()) * 2\n    print(ans)\n\n\nif __name__ == '__main__':\n    main()\n", "code_after": "from collections import deque\nfrom collections import Counter\nfrom itertools import product, permutations, combinations\nfrom operator import itemgetter\nfrom heapq import heappop, heappush\nfrom bisect import bisect_left, bisect_right, bisect\nfrom fractions import gcd\nfrom math import ceil, floor, sqrt, cos, sin, pi, factorial\nimport sys\nread = sys.stdin.buffer.read\nreadline = sys.stdin.buffer.readline\nreadlines = sys.stdin.buffer.readlines\nsys.setrecursionlimit(10 ** 8)\nINF = float('inf')\nvariable_7_15 = 7\nvariable_10_15 = 10\nvariable_9_15 = 9\nMOD = variable_10_15 ** variable_9_15 + variable_7_15\n\ndef main():\n    s = input()\n    if len(set(s)) == 1:\n        print(0)\n        sys.exit()\n    a = Counter(s)\n    ans = min(a.values()) * 2\n    print(ans)\nmain()", "effort_before": "153.43424884571635", "effort_after": "114.22064766172811", "difficulty_before": "2.1818181818181817", "difficulty_after": "2.0", "calculated_length_before": "46.053747805010275", "calculated_length_after": "41.219280948873624", "length_before": "18", "length_after": "15", "vocabulary_before": "15", "vocabulary_after": "14", "mi_value_before": "55.93", "mi_value_after": "56.00", "Nloc_before": "25", "Nloc_after": "27", "AvgCCN_before": "2.0", "AvgCCN_after": "1.0"}, "codeforces_579_A": {"id": "codeforces_579_A", "language": "Python", "dataset": "Avatar", "pass_before": 0, "pass_after": 0, "filepath_before": "/home/yang/contamination/Avatar_Python_Before/codeforces_579_A.py", "filepath_after": "/home/yang/contamination/Avatar_Python_After/codeforces_579_A.py", "code_before": "import math\nn = int(input())\nx = 1\nwhile math.log2(n) % 1:\n    x += 1\n    n -= 2 ** (int(math.log2(n)))\nprint(x)\n", "code_after": "import math\nn = int(input())\nx = 1\nrandom_inside_left_4 = 490\nrandom_inside_right_4 = 489\nrandom_outside_left_4 = 671\nrandom_outside_right_4 = 670\nfor loop_outside in range(random_outside_left_4 // random_outside_right_4):\n    while math.log2(n) % 1:\n        for loop_inside in range(random_inside_left_4 % random_inside_right_4):\n            x += 1\n            n -= 2 ** int(math.log2(n))\nprint(x)", "effort_before": "94.88726725405158", "effort_after": "196.36363636363635", "difficulty_before": "2.2857142857142856", "difficulty_after": "2.727272727272727", "calculated_length_before": "27.651484454403228", "calculated_length_after": "49.663388279447084", "length_before": "12", "length_after": "18", "vocabulary_before": "11", "vocabulary_after": "16", "mi_value_before": "68.70", "mi_value_after": "61.46", "Nloc_before": "7", "Nloc_after": "13", "AvgCCN_before": "2.0", "AvgCCN_after": "4.0"}, "atcoder_ABC135_D": {"id": "atcoder_ABC135_D", "language": "Python", "dataset": "Avatar", "pass_before": 0, "pass_after": 0, "filepath_before": "/home/yang/contamination/Avatar_Python_Before/atcoder_ABC135_D.py", "filepath_after": "/home/yang/contamination/Avatar_Python_After/atcoder_ABC135_D.py", "code_before": "import sys\nimport math\nfrom collections import defaultdict\nsys.setrecursionlimit(10 ** 7)\n\n\ndef input():\n    return sys.stdin.readline()[: - 1]\n\n\nmod = 10 ** 9 + 7\ndef I(): return int(input())\ndef II(): return map(int, input().split())\ndef III(): return list(map(int, input().split()))\n\n\ndef Line(N):\n    read_all = [tuple(map(int, input().split())) for _ in range(N)]\n    return map(list, zip(* read_all))\n\n\nS = str(input())\nn = len(S)\nif n == 1:\n    if S == '5' or S == '?':\n        print(1)\n    else:\n        print(0)\n    exit()\ndp = [[0] * 13 for i in range(n)]\nfor i in range(n):\n    if i == 0:\n        if S[i] != '?':\n            dp[i][int(S[i])] += 1\n        else:\n            for j in range(10):\n                dp[i][j] += 1\n    else:\n        if S[i] != '?':\n            for k in range(13):\n                dp[i][(k * 10 + int(S[i])) % 13] += dp[i - 1][k]\n        else:\n            for j in range(10):\n                for k in range(13):\n                    dp[i][(k * 10 + j) % 13] += dp[i - 1][k]\n        for k in range(13):\n            dp[i][k] %= mod\nprint(dp[n - 1][5])\n", "code_after": "import sys\nimport math\nfrom collections import defaultdict\nsys.setrecursionlimit(10 ** 7)\n\ndef input():\n    return sys.stdin.readline()[:-1]\nvariable_7_8 = 7\nvariable_10_8 = 10\nvariable_9_8 = 9\nmod = variable_10_8 ** variable_9_8 + variable_7_8\n\ndef I():\n    return int(input())\n\ndef II():\n    return map(int, input().split())\n\ndef III():\n    return list(map(int, input().split()))\n\ndef Line(N):\n    read_all = [tuple(map(int, input().split())) for _ in range(N)]\n    return map(list, zip(*read_all))\nS = str(input())\nn = len(S)\nrandom_outside_if_left_24 = 181\nrandom_outside_if_right_24 = 180\nif random_outside_if_left_24 & random_outside_if_right_24:\n    if n == 1:\n        if S == '5' or S == '?':\n            print(1)\n        else:\n            print(0)\n        exit()\ndp = [[0] * 13 for i in range(n)]\nrandom_inside_left_31 = 139\nrandom_inside_right_31 = 138\nrandom_outside_left_31 = 210\nrandom_outside_right_31 = 209\nfor loop_outside in range(random_outside_left_31 // random_outside_right_31):\n    for i in range(n):\n        for loop_inside in range(random_inside_left_31 % random_inside_right_31):\n            if i == 0:\n                if S[i] != '?':\n                    dp[i][int(S[i])] += 1\n                else:\n                    for j in range(10):\n                        dp[i][j] += 1\n            else:\n                if S[i] != '?':\n                    for k in range(13):\n                        dp[i][(k * 10 + int(S[i])) % 13] += dp[i - 1][k]\n                else:\n                    for j in range(10):\n                        for k in range(13):\n                            dp[i][(k * 10 + j) % 13] += dp[i - 1][k]\n                for k in range(13):\n                    dp[i][k] %= mod\nprint(dp[n - 1][5])", "effort_before": "2887.5859798980264", "effort_after": "3748.5257375805368", "difficulty_before": "6.954545454545454", "difficulty_after": "7.646341463414634", "calculated_length_before": "194.9943309518098", "calculated_length_after": "257.7133799943517", "length_before": "77", "length_after": "86", "vocabulary_before": "42", "vocabulary_after": "52", "mi_value_before": "43.72", "mi_value_after": "40.57", "Nloc_before": "40", "Nloc_after": "55", "AvgCCN_before": "14.0", "AvgCCN_after": "17.0"}, "atcoder_AGC003_C": {"id": "atcoder_AGC003_C", "language": "Python", "dataset": "Avatar", "pass_before": 0, "pass_after": 0, "filepath_before": "/home/yang/contamination/Avatar_Python_Before/atcoder_AGC003_C.py", "filepath_after": "/home/yang/contamination/Avatar_Python_After/atcoder_AGC003_C.py", "code_before": "N = int(input())\nA = [int(input()) * N + i for i in range(N)]\nA.sort()\ncnt = 0\nfor i in range(N):\n    d = (A[i] % N) % 2\n    if d % 2 != i % 2:\n        cnt += 1\nprint(cnt // 2)\n", "code_after": "N = int(input())\nA = [int(input()) * N + i for i in range(N)]\nA.sort()\ncnt = 0\nrandom_inside_left_5 = 500\nrandom_inside_right_5 = 499\nrandom_outside_left_5 = 44\nrandom_outside_right_5 = 43\nfor loop_outside in range(random_outside_left_5 // random_outside_right_5):\n    for i in range(N):\n        for loop_inside in range(random_inside_left_5 % random_inside_right_5):\n            d = A[i] % N % 2\n            if d % 2 != i % 2:\n                cnt += 1\nprint(cnt // 2)", "effort_before": "413.85561267659693", "effort_after": "498.2535076464657", "difficulty_before": "3.75", "difficulty_after": "3.4375", "calculated_length_before": "54.62919048309069", "calculated_length_after": "75.60964047443682", "length_before": "27", "length_after": "33", "vocabulary_before": "17", "vocabulary_after": "21", "mi_value_before": "63.34", "mi_value_after": "57.79", "Nloc_before": "9", "Nloc_after": "15", "AvgCCN_before": "4.0", "AvgCCN_after": "6.0"}, "codeforces_37_A": {"id": "codeforces_37_A", "language": "Python", "dataset": "Avatar", "pass_before": 1, "pass_after": 0, "filepath_before": "/home/yang/contamination/Avatar_Python_Before/codeforces_37_A.py", "filepath_after": "/home/yang/contamination/Avatar_Python_After/codeforces_37_A.py", "code_before": "n = int(input())\nl = list(map(int, input().split()))\nhigh = 1\ntower = n\nmaximum = 1\nl.sort()\nfor i in range(1, n):\n    if l[i] == l[i - 1]:\n        tower -= 1\n        high += 1\n    else:\n        if high > maximum:\n            maximum = high\n        high = 1\nif high > maximum:\n    maximum = high\nprint(maximum, tower)\n", "code_after": "n = int(input())\nl = list(map(int, input().split()))\nhigh = 1\ntower = n\nmaximum = 1\nl.sort()\nrandom_inside_left_7 = 938\nrandom_inside_right_7 = 937\nrandom_outside_left_7 = 850\nrandom_outside_right_7 = 849\nfor loop_outside in range(random_outside_left_7 // random_outside_right_7):\n    for i in range(1, n):\n        for loop_inside in range(random_inside_left_7 % random_inside_right_7):\n            if l[i] == l[i - 1]:\n                tower -= 1\n                high += 1\n            else:\n                if high > maximum:\n                    maximum = high\n                high = 1\nrandom_outside_if_left_21 = 727\nrandom_outside_if_right_21 = 726\nif random_outside_if_left_21 & random_outside_if_right_21:\n    if high > maximum:\n        maximum = high\nprint(maximum, tower)", "effort_before": "213.49635132161606", "effort_after": "565.5076684156464", "difficulty_before": "3.4285714285714284", "difficulty_after": "4.846153846153846", "calculated_length_before": "27.651484454403228", "calculated_length_after": "67.75720079023742", "length_before": "18", "length_after": "27", "vocabulary_before": "11", "vocabulary_after": "20", "mi_value_before": "59.38", "mi_value_after": "53.23", "Nloc_before": "17", "Nloc_after": "26", "AvgCCN_before": "5.0", "AvgCCN_after": "8.0"}, "codeforces_342_B": {"id": "codeforces_342_B", "language": "Python", "dataset": "Avatar", "pass_before": 3, "pass_after": 3, "filepath_before": "/home/yang/contamination/Avatar_Python_Before/codeforces_342_B.py", "filepath_after": "/home/yang/contamination/Avatar_Python_After/codeforces_342_B.py", "code_before": "def R(): return map(int, input().split())\n\n\nn, m, s, f = R()\nif s < f:\n    d = 1\n    c = 'R'\nelse:\n    d = - 1\n    c = 'L'\nres = \"\"\ni = 1\nj = s\nt, l, r = R()\nk = 1\nwhile j != f:\n    if i > t and k < m:\n        t, l, r = R()\n        k += 1\n    if i == t and (l <= j <= r or l <= j + d <= r):\n        res += 'X'\n    else:\n        res += c\n        j += d\n    i += 1\nprint(res)\n", "code_after": "def R():\n    return map(int, input().split())\n(n, m, s, f) = R()\nrandom_outside_if_left_4 = 203\nrandom_outside_if_right_4 = 202\nif random_outside_if_left_4 & random_outside_if_right_4:\n    if s < f:\n        d = 1\n        c = 'R'\n    else:\n        d = -1\n        c = 'L'\nelse:\n    d = -1\n    c = 'L'\nres = ''\ni = 1\nj = s\n(t, l, r) = R()\nk = 1\nrandom_inside_left_15 = 72\nrandom_inside_right_15 = 71\nrandom_outside_left_15 = 941\nrandom_outside_right_15 = 940\nfor loop_outside in range(random_outside_left_15 // random_outside_right_15):\n    while j != f:\n        for loop_inside in range(random_inside_left_15 % random_inside_right_15):\n            if i > t and k < m:\n                (t, l, r) = R()\n                k += 1\n            if i == t and (l <= j <= r or l <= j + d <= r):\n                res += 'X'\n            else:\n                res += c\n                j += d\n            i += 1\nprint(res)", "effort_before": "1987.29069122145", "effort_after": "3206.4773461097643", "difficulty_before": "7.5", "difficulty_after": "9.333333333333334", "calculated_length_before": "120.76799089133479", "calculated_length_after": "171.40151256706756", "length_before": "54", "length_after": "65", "vocabulary_before": "30", "vocabulary_after": "39", "mi_value_before": "51.09", "mi_value_after": "46.30", "Nloc_before": "24", "Nloc_after": "37", "AvgCCN_before": "8.0", "AvgCCN_after": "11.0"}, "codeforces_682_B": {"id": "codeforces_682_B", "language": "Python", "dataset": "Avatar", "pass_before": 3, "pass_after": 3, "filepath_before": "/home/yang/contamination/Avatar_Python_Before/codeforces_682_B.py", "filepath_after": "/home/yang/contamination/Avatar_Python_After/codeforces_682_B.py", "code_before": "import os\nimport sys\nimport io\nimport math\nfrom array import array\nfrom math import *\ndef I(): return [* map(int, sys.stdin.readline().split())]\ndef IS(): return input()\n\n\ndef IN(): return int(input())\ndef IF(): return float(input())\n\n\nn = IN()\nl = I()\nf = 1\nl.sort()\nc = 0\nfor i in l:\n    if i > c:\n        c += 1\nprint(c + 1)\n", "code_after": "import os\nimport sys\nimport io\nimport math\nfrom array import array\nfrom math import *\n\ndef I():\n    return [*map(int, sys.stdin.readline().split())]\n\ndef IS():\n    return input()\n\ndef IN():\n    return int(input())\n\ndef IF():\n    return float(input())\nn = IN()\nl = I()\nf = 1\nl.sort()\nc = 0\nrandom_inside_left_24 = 55\nrandom_inside_right_24 = 54\nrandom_outside_left_24 = 970\nrandom_outside_right_24 = 969\nfor loop_outside in range(random_outside_left_24 // random_outside_right_24):\n    for i in l:\n        for loop_inside in range(random_inside_left_24 % random_inside_right_24):\n            if i > c:\n                c += 1\nprint(c + 1)", "effort_before": "41.79470570797252", "effort_after": "148.26135508445563", "difficulty_before": "2.0", "difficulty_after": "2.857142857142857", "calculated_length_before": "6.754887502163469", "calculated_length_after": "27.651484454403228", "length_before": "9", "length_after": "15", "vocabulary_before": "5", "vocabulary_after": "11", "mi_value_before": "60.25", "mi_value_after": "55.10", "Nloc_before": "19", "Nloc_after": "29", "AvgCCN_before": "3.0", "AvgCCN_after": "5.0"}, "atcoder_ABC167_D": {"id": "atcoder_ABC167_D", "language": "Python", "dataset": "Avatar", "pass_before": 0, "pass_after": 0, "filepath_before": "/home/yang/contamination/Avatar_Python_Before/atcoder_ABC167_D.py", "filepath_after": "/home/yang/contamination/Avatar_Python_After/atcoder_ABC167_D.py", "code_before": "from collections import defaultdict\nN, K = map(int, input().split())\nL = list(map(int, input().split()))\nL.insert(0, - 1)\npath = [1]\nind = 0\ncount = 0\nx = 1\nt = - 1\nflag = False\nHash = defaultdict(lambda: 0)\nfor i in range(N + 1):\n    ne = L[x]\n    if Hash[ne]:\n        flag = True\n        t = Hash[ne]\n        break\n    path.append(ne)\n    ind += 1\n    Hash[ne] = ind\n    x = ne\nif flag == True:\n    loop = path[t::]\n    if K < (len(path)):\n        print(path[K])\n    else:\n        K = K - len(path)\n        K = K % len(loop)\n        print(loop[K])\nelse:\n    print(path[K - 1])\n", "code_after": "from collections import defaultdict\n(N, K) = map(int, input().split())\nL = list(map(int, input().split()))\nL.insert(0, -1)\npath = [1]\nind = 0\ncount = 0\nx = 1\nt = -1\nflag = False\nHash = defaultdict(lambda : 0)\nrandom_inside_left_12 = 948\nrandom_inside_right_12 = 947\nrandom_outside_left_12 = 103\nrandom_outside_right_12 = 102\nfor loop_outside in range(random_outside_left_12 // random_outside_right_12):\n    for i in range(N + 1):\n        for loop_inside in range(random_inside_left_12 % random_inside_right_12):\n            ne = L[x]\n            if Hash[ne]:\n                flag = True\n                t = Hash[ne]\n                break\n            path.append(ne)\n            ind += 1\n            Hash[ne] = ind\n            x = ne\nrandom_outside_if_left_28 = 700\nrandom_outside_if_right_28 = 699\nif random_outside_if_left_28 & random_outside_if_right_28:\n    if flag == True:\n        loop = path[t:]\n        if K < len(path):\n            print(path[K])\n        else:\n            K = K - len(path)\n            K = K % len(loop)\n            print(loop[K])\n    else:\n        print(path[K - 1])\nelse:\n    print(path[K - 1])", "effort_before": "571.1032383086406", "effort_after": "1131.4215078142627", "difficulty_before": "6.0", "difficulty_after": "6.857142857142857", "calculated_length_before": "39.50977500432694", "calculated_length_after": "77.30296890880645", "length_before": "25", "length_after": "37", "vocabulary_before": "14", "vocabulary_after": "22", "mi_value_before": "52.07", "mi_value_after": "47.33", "Nloc_before": "31", "Nloc_after": "42", "AvgCCN_before": "5.0", "AvgCCN_after": "8.0"}, "atcoder_ABC107_D": {"id": "atcoder_ABC107_D", "language": "Python", "dataset": "Avatar", "pass_before": 0, "pass_after": 0, "filepath_before": "/home/yang/contamination/Avatar_Python_Before/atcoder_ABC107_D.py", "filepath_after": "/home/yang/contamination/Avatar_Python_After/atcoder_ABC107_D.py", "code_before": "class BIT:\n    def __init__(self, N):\n        self.size = N\n        self.tree = [0] * (N + 1)\n        self.depth = n.bit_length()\n\n    def _bitsum(self, i):\n        ret = 0\n        while i:\n            ret += self.tree[i]\n            i ^= i & - i\n        return ret\n\n    def bitsum(self, l, r=None):\n        if r is None:\n            return self._bitsum(l)\n        else:\n            return self._bitsum(r) - self._bitsum(l)\n\n    def bitadd(self, i, x):\n        i += 1\n        while i <= self.size:\n            self.tree[i] += x\n            i += i & - i\n        return\n\n\nn = int(input())\nm = n * (n + 1) // 4\na = list(map(int, input().split()))\nd = dict()\n_a = sorted(set(a + [0]))\nfor i, x in enumerate(_a):\n    d[x] = i\na = [d[x] for x in a]\n\n\ndef check(X):\n    b = [0] + [(y >= X) * 2 - 1 for y in a]\n    for i in range(n):\n        b[i + 1] += b[i]\n    c = min(b)\n    b = [x - c for x in b]\n    bit = BIT(max(b) + 2)\n    ans = 0\n    for x in b:\n        ans += bit.bitsum(x + 1)\n        bit.bitadd(x, 1)\n    return ans >= m\n\n\nt = [len(_a), 0]\nwhile t[0] - t[1] > 1:\n    mid = (t[0] + t[1]) // 2\n    t[check(mid)] = mid\nprint(_a[t[1]])\n", "code_after": "class BIT:\n\n    def __init__(self, N):\n        self.size = N\n        self.tree = [0] * (N + 1)\n        self.depth = n.bit_length()\n\n    def _bitsum(self, i):\n        ret = 0\n        while i:\n            ret += self.tree[i]\n            i ^= i & -i\n        return ret\n\n    def bitsum(self, l, r=None):\n        if r is None:\n            return self._bitsum(l)\n        else:\n            return self._bitsum(r) - self._bitsum(l)\n\n    def bitadd(self, i, x):\n        i += 1\n        while i <= self.size:\n            self.tree[i] += x\n            i += i & -i\n        return\nn = int(input())\nvariable_4_28 = 4\nvariable_1_28 = 1\nm = n * (n + variable_1_28) // variable_4_28\na = list(map(int, input().split()))\nd = dict()\n_a = sorted(set(a + [0]))\nrandom_inside_left_32 = 534\nrandom_inside_right_32 = 533\nrandom_outside_left_32 = 396\nrandom_outside_right_32 = 395\nfor loop_outside in range(random_outside_left_32 // random_outside_right_32):\n    for (i, x) in enumerate(_a):\n        for loop_inside in range(random_inside_left_32 % random_inside_right_32):\n            d[x] = i\na = [d[x] for x in a]\n\ndef check(X):\n    b = [0] + [(y >= X) * 2 - 1 for y in a]\n    for i in range(n):\n        b[i + 1] += b[i]\n    c = min(b)\n    b = [x - c for x in b]\n    bit = BIT(max(b) + 2)\n    ans = 0\n    for x in b:\n        ans += bit.bitsum(x + 1)\n        bit.bitadd(x, 1)\n    return ans >= m\nt = [len(_a), 0]\nrandom_inside_left_55 = 64\nrandom_inside_right_55 = 63\nrandom_outside_left_55 = 45\nrandom_outside_right_55 = 44\nfor loop_outside in range(random_outside_left_55 // random_outside_right_55):\n    while t[0] - t[1] > 1:\n        for loop_inside in range(random_inside_left_55 % random_inside_right_55):\n            mid = (t[0] + t[1]) // 2\n            t[check(mid)] = mid\nprint(_a[t[1]])", "effort_before": "3986.2760553303824", "effort_after": "4842.157141131926", "difficulty_before": "6.901960784313726", "difficulty_after": "7.2", "calculated_length_before": "327.3474402455566", "calculated_length_after": "397.432985745165", "length_before": "97", "length_after": "109", "vocabulary_before": "62", "vocabulary_after": "72", "mi_value_before": "43.45", "mi_value_after": "40.03", "Nloc_before": "47", "Nloc_after": "61", "AvgCCN_before": "4.0", "AvgCCN_after": "8.0"}, "codeforces_276_B": {"id": "codeforces_276_B", "language": "Python", "dataset": "Avatar", "pass_before": 2, "pass_after": 0, "filepath_before": "/home/yang/contamination/Avatar_Python_Before/codeforces_276_B.py", "filepath_after": "/home/yang/contamination/Avatar_Python_After/codeforces_276_B.py", "code_before": "s = list(input())\nx = True\ndt = {}\nfor i in s:\n    if i in dt:\n        dt[i] += 1\n    else:\n        dt[i] = 1\ncnt = 0\nx = True\nfor key, value in dt.items():\n    if value % 2 != 0 and cnt < 1:\n        cnt += 1\n    elif value % 2 != 0 and cnt >= 1:\n        x = False\n        break\nif x:\n    print(\"First\")\nelif not x and len(s) % 2 == 0:\n    print(\"Second\")\nelif not x and len(s) % 2 != 0:\n    print(\"First\")\n", "code_after": "s = list(input())\nx = True\ndt = {}\nrandom_inside_left_4 = 622\nrandom_inside_right_4 = 621\nrandom_outside_left_4 = 155\nrandom_outside_right_4 = 154\nrandom_inside_left_11 = 799\nrandom_inside_right_11 = 798\nrandom_outside_left_11 = 408\nrandom_outside_right_11 = 407\nfor loop_outside in range(random_outside_left_4 // random_outside_right_4):\n    for i in s:\n        for loop_inside in range(random_inside_left_4 % random_inside_right_4):\n            if i in dt:\n                dt[i] += 1\n            else:\n                dt[i] = 1\ncnt = 0\nx = True\nfor loop_outside in range(random_outside_left_11 // random_outside_right_11):\n    for (key, value) in dt.items():\n        for loop_inside in range(random_inside_left_11 % random_inside_right_11):\n            if value % 2 != 0 and cnt < 1:\n                cnt += 1\n            elif value % 2 != 0 and cnt >= 1:\n                x = False\n                break\nrandom_outside_if_left_29 = 44\nrandom_outside_if_right_29 = 43\nif random_outside_if_left_29 & random_outside_if_right_29:\n    if x:\n        print('First')\n    elif not x and len(s) % 2 == 0:\n        print('Second')\n    elif not x and len(s) % 2 != 0:\n        print('First')\nelif not x and len(s) % 2 == 0:\n    print('Second')\nelif not x and len(s) % 2 != 0:\n    print('First')", "effort_before": "1936.9565217391305", "effort_after": "4221.106093725941", "difficulty_before": "7.043478260869565", "difficulty_after": "8.048780487804878", "calculated_length_before": "132.57125000229212", "calculated_length_after": "257.7133799943517", "length_before": "55", "length_after": "92", "vocabulary_before": "32", "vocabulary_after": "52", "mi_value_before": "51.47", "mi_value_after": "42.59", "Nloc_before": "22", "Nloc_after": "41", "AvgCCN_before": "13.0", "AvgCCN_after": "22.0"}, "atcoder_AGC011_C": {"id": "atcoder_AGC011_C", "language": "Python", "dataset": "Avatar", "pass_before": 0, "pass_after": 0, "filepath_before": "/home/yang/contamination/Avatar_Python_Before/atcoder_AGC011_C.py", "filepath_after": "/home/yang/contamination/Avatar_Python_After/atcoder_AGC011_C.py", "code_before": "import queue\nn, m = map(int, input().split())\nvis, ci, cb, cc = [0] * (n + 1), 0, 0, 0\ng = [[] for i in range(n + 1)]\n\n\ndef dfs(x):\n    stk, flag = queue.LifoQueue(), True\n    stk.put((x, 1))\n    while not stk.empty():\n        u, col = stk.get()\n        if vis[u]:\n            flag &= (vis[u] == col)\n            continue\n        vis[u] = col\n        for i in g[u]:\n            stk.put((i, 3 - col))\n    return flag\n\n\nfor i in range(m):\n    u, v = map(int, input().split())\n    g[u] += [v]\n    g[v] += [u]\nfor i in range(1, n + 1):\n    if vis[i] == 0:\n        if len(g[i]) == 0:\n            ci += 1\n        else:\n            if dfs(i):\n                cb += 1\n            else:\n                cc += 1\nprint(ci * ci + 2 * ci * (n - ci) + cc * cc + 2 * cb * cc + 2 * cb * cb)\n", "code_after": "import queue\n(n, m) = map(int, input().split())\n(vis, ci, cb, cc) = ([0] * (n + 1), 0, 0, 0)\ng = [[] for i in range(n + 1)]\n\ndef dfs(x):\n    (stk, flag) = (queue.LifoQueue(), True)\n    stk.put((x, 1))\n    while not stk.empty():\n        (u, col) = stk.get()\n        if vis[u]:\n            flag &= vis[u] == col\n            continue\n        vis[u] = col\n        for i in g[u]:\n            stk.put((i, 3 - col))\n    return flag\nrandom_inside_left_18 = 695\nrandom_inside_right_18 = 694\nrandom_outside_left_18 = 562\nrandom_outside_right_18 = 561\nrandom_inside_left_22 = 454\nrandom_inside_right_22 = 453\nrandom_outside_left_22 = 405\nrandom_outside_right_22 = 404\nfor loop_outside in range(random_outside_left_18 // random_outside_right_18):\n    for i in range(m):\n        for loop_inside in range(random_inside_left_18 % random_inside_right_18):\n            (u, v) = map(int, input().split())\n            g[u] += [v]\n            g[v] += [u]\nfor loop_outside in range(random_outside_left_22 // random_outside_right_22):\n    for i in range(1, n + 1):\n        for loop_inside in range(random_inside_left_22 % random_inside_right_22):\n            if vis[i] == 0:\n                if len(g[i]) == 0:\n                    ci += 1\n                elif dfs(i):\n                    cb += 1\n                else:\n                    cc += 1\nprint(ci * ci + 2 * ci * (n - ci) + cc * cc + 2 * cb * cc + 2 * cb * cb)", "effort_before": "2193.441920827833", "effort_after": "3278.442772393124", "difficulty_before": "5.0", "difficulty_after": "6.146341463414634", "calculated_length_before": "181.9747809431559", "calculated_length_after": "243.65963218934144", "length_before": "83", "length_after": "95", "vocabulary_before": "39", "vocabulary_after": "49", "mi_value_before": "48.03", "mi_value_after": "44.02", "Nloc_before": "30", "Nloc_after": "41", "AvgCCN_before": "7.0", "AvgCCN_after": "11.0"}, "codeforces_92_A": {"id": "codeforces_92_A", "language": "Python", "dataset": "Avatar", "pass_before": 2, "pass_after": 1, "filepath_before": "/home/yang/contamination/Avatar_Python_Before/codeforces_92_A.py", "filepath_after": "/home/yang/contamination/Avatar_Python_After/codeforces_92_A.py", "code_before": "n, m = map(int, input().split())\ni = 1\nwhile m >= i:\n    m -= i\n    i = (i % n) + 1\nprint(m)\n", "code_after": "(n, m) = map(int, input().split())\ni = 1\nrandom_inside_left_3 = 576\nrandom_inside_right_3 = 575\nrandom_outside_left_3 = 320\nrandom_outside_right_3 = 319\nfor loop_outside in range(random_outside_left_3 // random_outside_right_3):\n    while m >= i:\n        for loop_inside in range(random_inside_left_3 % random_inside_right_3):\n            m -= i\n            i = i % n + 1\nprint(m)", "effort_before": "121.72512005538482", "effort_after": "228.44129532345625", "difficulty_before": "3.2", "difficulty_after": "3.3333333333333335", "calculated_length_before": "19.60964047443681", "calculated_length_after": "40.13896548741762", "length_before": "12", "length_after": "18", "vocabulary_before": "9", "vocabulary_after": "14", "mi_value_before": "70.23", "mi_value_after": "62.31", "Nloc_before": "6", "Nloc_after": "12", "AvgCCN_before": "2.0", "AvgCCN_after": "4.0"}, "atcoder_AGC037_E": {"id": "atcoder_AGC037_E", "language": "Python", "dataset": "Avatar", "pass_before": 0, "pass_after": 0, "filepath_before": "/home/yang/contamination/Avatar_Python_Before/atcoder_AGC037_E.py", "filepath_after": "/home/yang/contamination/Avatar_Python_After/atcoder_AGC037_E.py", "code_before": "N, K = map(int, input().split())\nS = input()\naaaa = False\nif K >= 15:\n    aaaa = True\nelif 2 ** K >= N:\n    aaaa = True\nif aaaa:\n    print(min(S) * N)\n    exit()\n\n\ndef get_last_dict(s_str):\n    U = s_str + s_str[:: - 1]\n    c = min(s_str)\n    p = U.index(c)\n    minindex = p\n    p += 1\n    while p <= N:\n        if U[p] == c:\n            if check_normal_dict(U, minindex, p):\n                minindex = p\n        p += 1\n    return U[minindex: minindex + N]\n\n\ndef check_normal_dict(u, pointer1, pointer2):\n    for i in range(N):\n        if u[pointer1 + i] > u[pointer2 + i]:\n            return True\n        elif u[pointer1 + i] < u[pointer2 + i]:\n            return False\n    return False\n\n\nS = get_last_dict(S)\nif K == 1:\n    print(S)\nelse:\n    count = 0\n    for c in S:\n        if c == S[0]:\n            count += 1\n        else:\n            break\n    if count * (2 ** (K - 1)) >= N:\n        print(S[0] * N)\n    else:\n        S = S[0] * (count * ((2 ** (K - 1)) - 1)) + S\n        print(S[0: N])\n", "code_after": "(N, K) = map(int, input().split())\nS = input()\naaaa = False\nrandom_outside_if_left_4 = 21\nrandom_outside_if_right_4 = 20\nrandom_outside_if_left_8 = 338\nrandom_outside_if_right_8 = 337\nrandom_outside_if_left_33 = 323\nrandom_outside_if_right_33 = 322\nif random_outside_if_left_4 & random_outside_if_right_4:\n    if K >= 15:\n        aaaa = True\n    elif 2 ** K >= N:\n        aaaa = True\nelif 2 ** K >= N:\n    aaaa = True\nif random_outside_if_left_8 & random_outside_if_right_8:\n    if aaaa:\n        print(min(S) * N)\n        exit()\n\ndef get_last_dict(s_str):\n    U = s_str + s_str[::-1]\n    c = min(s_str)\n    p = U.index(c)\n    minindex = p\n    p += 1\n    while p <= N:\n        if U[p] == c:\n            if check_normal_dict(U, minindex, p):\n                minindex = p\n        p += 1\n    return U[minindex:minindex + N]\n\ndef check_normal_dict(u, pointer1, pointer2):\n    for i in range(N):\n        if u[pointer1 + i] > u[pointer2 + i]:\n            return True\n        elif u[pointer1 + i] < u[pointer2 + i]:\n            return False\n    return False\nS = get_last_dict(S)\nif random_outside_if_left_33 & random_outside_if_right_33:\n    if K == 1:\n        print(S)\n    else:\n        count = 0\n        for c in S:\n            if c == S[0]:\n                count += 1\n            else:\n                break\n        if count * 2 ** (K - 1) >= N:\n            print(S[0] * N)\n        else:\n            S = S[0] * (count * (2 ** (K - 1) - 1)) + S\n            print(S[0:N])\nelse:\n    count = 0\n    for c in S:\n        if c == S[0]:\n            count += 1\n        else:\n            break\n    if count * 2 ** (K - 1) >= N:\n        print(S[0] * N)\n    else:\n        S = S[0] * (count * (2 ** (K - 1) - 1)) + S\n        print(S[0:N])", "effort_before": "4305.309680193327", "effort_after": "8686.819468974063", "difficulty_before": "8.472222222222221", "difficulty_after": "9.87962962962963", "calculated_length_before": "219.33658100079685", "calculated_length_after": "348.81767292183764", "length_before": "92", "length_after": "146", "vocabulary_before": "46", "vocabulary_after": "65", "mi_value_before": "43.30", "mi_value_after": "36.85", "Nloc_before": "44", "Nloc_after": "67", "AvgCCN_before": "8.0", "AvgCCN_after": "15.0"}, "codeforces_459_A": {"id": "codeforces_459_A", "language": "Python", "dataset": "Avatar", "pass_before": 0, "pass_after": 0, "filepath_before": "/home/yang/contamination/Avatar_Python_Before/codeforces_459_A.py", "filepath_after": "/home/yang/contamination/Avatar_Python_After/codeforces_459_A.py", "code_before": "import math\ngiven = input(\"\")\nl1 = given.split()\nl1 = [int(x) for x in l1]\nx1 = l1[0]\ny1 = l1[1]\nx2 = l1[2]\ny2 = l1[3]\ndenominator = x2 - x1\nnumerator = y2 - y1\nif denominator != 0:\n    quotient = numerator / denominator\nif numerator == 0:\n    d = int(math.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2))\n    x4 = x1\n    x3 = x2\n    y3 = y2 + d\n    y4 = y1 + d\n    print(f\"{x3} {y3} {x4} {y4}\")\nelif denominator == 0:\n    y4 = y2\n    y3 = y1\n    d = int(math.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2))\n    x4 = x1 + d\n    x3 = x2 + d\n    print(f\"{x3} {y3} {x4} {y4}\")\nelif quotient == 1:\n    x4 = x2\n    x3 = x1\n    y4 = y1\n    y3 = y2\n    print(f\"{x3} {y3} {x4} {y4}\")\nelif quotient == - 1:\n    x4 = x1\n    x3 = x2\n    y4 = y2\n    y3 = y1\n    print(f\"{x3} {y3} {x4} {y4}\")\nelse:\n    print('-1')\n", "code_after": "import math\ngiven = input('')\nl1 = given.split()\nl1 = [int(x) for x in l1]\nx1 = l1[0]\ny1 = l1[1]\nx2 = l1[2]\ny2 = l1[3]\ndenominator = x2 - x1\nnumerator = y2 - y1\nrandom_outside_if_left_11 = 607\nrandom_outside_if_right_11 = 606\nrandom_outside_if_left_13 = 995\nrandom_outside_if_right_13 = 994\nif random_outside_if_left_11 & random_outside_if_right_11:\n    if denominator != 0:\n        quotient = numerator / denominator\nif random_outside_if_left_13 & random_outside_if_right_13:\n    if numerator == 0:\n        d = int(math.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2))\n        x4 = x1\n        x3 = x2\n        y3 = y2 + d\n        y4 = y1 + d\n        print(f'{x3} {y3} {x4} {y4}')\n    elif denominator == 0:\n        y4 = y2\n        y3 = y1\n        d = int(math.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2))\n        x4 = x1 + d\n        x3 = x2 + d\n        print(f'{x3} {y3} {x4} {y4}')\n    elif quotient == 1:\n        x4 = x2\n        x3 = x1\n        y4 = y1\n        y3 = y2\n        print(f'{x3} {y3} {x4} {y4}')\n    elif quotient == -1:\n        x4 = x1\n        x3 = x2\n        y4 = y2\n        y3 = y1\n        print(f'{x3} {y3} {x4} {y4}')\n    else:\n        print('-1')\nelif denominator == 0:\n    y4 = y2\n    y3 = y1\n    d = int(math.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2))\n    x4 = x1 + d\n    x3 = x2 + d\n    print(f'{x3} {y3} {x4} {y4}')\nelif quotient == 1:\n    x4 = x2\n    x3 = x1\n    y4 = y1\n    y3 = y2\n    print(f'{x3} {y3} {x4} {y4}')\nelif quotient == -1:\n    x4 = x1\n    x3 = x2\n    y4 = y2\n    y3 = y1\n    print(f'{x3} {y3} {x4} {y4}')\nelse:\n    print('-1')", "effort_before": "2546.2422574085376", "effort_after": "5331.606065236801", "difficulty_before": "7.875", "difficulty_after": "9.655172413793103", "calculated_length_before": "106.09004635215048", "calculated_length_after": "164.8814488586996", "length_before": "68", "length_after": "106", "vocabulary_before": "27", "vocabulary_after": "37", "mi_value_before": "46.30", "mi_value_after": "39.21", "Nloc_before": "40", "Nloc_after": "67", "AvgCCN_before": "7.0", "AvgCCN_after": "12.0"}, "atcoder_ABC123_D": {"id": "atcoder_ABC123_D", "language": "Python", "dataset": "Avatar", "pass_before": 0, "pass_after": 0, "filepath_before": "/home/yang/contamination/Avatar_Python_Before/atcoder_ABC123_D.py", "filepath_after": "/home/yang/contamination/Avatar_Python_After/atcoder_ABC123_D.py", "code_before": "x, y, z, k = [int(_) for _ in input().split()]\na = [int(_) for _ in input().split()]\nb = [int(_) for _ in input().split()]\nc = [int(_) for _ in input().split()]\nab = []\nfor i in range(x):\n    for j in range(y):\n        ab.append(a[i] + b[j])\nab.sort(reverse=True)\nabc = []\nfor i in range(min(k, x * y)):\n    for j in range(z):\n        abc.append(ab[i] + c[j])\nabc.sort(reverse=True)\nfor i in range(k):\n    print(abc[i])\n", "code_after": "(x, y, z, k) = [int(_) for _ in input().split()]\na = [int(_) for _ in input().split()]\nb = [int(_) for _ in input().split()]\nc = [int(_) for _ in input().split()]\nab = []\nrandom_inside_left_6 = 190\nrandom_inside_right_6 = 189\nrandom_outside_left_6 = 295\nrandom_outside_right_6 = 294\nrandom_inside_left_11 = 996\nrandom_inside_right_11 = 995\nrandom_outside_left_11 = 228\nrandom_outside_right_11 = 227\nrandom_inside_left_15 = 157\nrandom_inside_right_15 = 156\nrandom_outside_left_15 = 494\nrandom_outside_right_15 = 493\nfor loop_outside in range(random_outside_left_6 // random_outside_right_6):\n    for i in range(x):\n        for loop_inside in range(random_inside_left_6 % random_inside_right_6):\n            for j in range(y):\n                ab.append(a[i] + b[j])\nab.sort(reverse=True)\nabc = []\nfor loop_outside in range(random_outside_left_11 // random_outside_right_11):\n    for i in range(min(k, x * y)):\n        for loop_inside in range(random_inside_left_11 % random_inside_right_11):\n            for j in range(z):\n                abc.append(ab[i] + c[j])\nabc.sort(reverse=True)\nfor loop_outside in range(random_outside_left_15 // random_outside_right_15):\n    for i in range(k):\n        for loop_inside in range(random_inside_left_15 % random_inside_right_15):\n            print(abc[i])", "effort_before": "27.0", "effort_after": "240.80930740641406", "difficulty_before": "1.0", "difficulty_after": "2.0", "calculated_length_before": "17.509775004326936", "calculated_length_after": "83.05865002596161", "length_before": "9", "length_after": "27", "vocabulary_before": "8", "vocabulary_after": "22", "mi_value_before": "61.79", "mi_value_after": "49.60", "Nloc_before": "16", "Nloc_after": "34", "AvgCCN_before": "10.0", "AvgCCN_after": "16.0"}, "codeforces_519_B": {"id": "codeforces_519_B", "language": "Python", "dataset": "Avatar", "pass_before": 0, "pass_after": 0, "filepath_before": "/home/yang/contamination/Avatar_Python_Before/codeforces_519_B.py", "filepath_after": "/home/yang/contamination/Avatar_Python_After/codeforces_519_B.py", "code_before": "n = int(input())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\nc = list(map(int, input().split()))\nx = 0\ny = 0\nz = 0\nfor i in a:\n    x += i\nfor i in b:\n    y += i\nfor i in c:\n    z += i\nprint(abs(x - y))\nprint(abs(y - z))\n", "code_after": "n = int(input())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\nc = list(map(int, input().split()))\nx = 0\ny = 0\nz = 0\nrandom_inside_left_8 = 438\nrandom_inside_right_8 = 437\nrandom_outside_left_8 = 545\nrandom_outside_right_8 = 544\nrandom_inside_left_10 = 824\nrandom_inside_right_10 = 823\nrandom_outside_left_10 = 161\nrandom_outside_right_10 = 160\nrandom_inside_left_12 = 831\nrandom_inside_right_12 = 830\nrandom_outside_left_12 = 205\nrandom_outside_right_12 = 204\nfor loop_outside in range(random_outside_left_8 // random_outside_right_8):\n    for i in a:\n        for loop_inside in range(random_inside_left_8 % random_inside_right_8):\n            x += i\nfor loop_outside in range(random_outside_left_10 // random_outside_right_10):\n    for i in b:\n        for loop_inside in range(random_inside_left_10 % random_inside_right_10):\n            y += i\nfor loop_outside in range(random_outside_left_12 // random_outside_right_12):\n    for i in c:\n        for loop_inside in range(random_inside_left_12 % random_inside_right_12):\n            z += i\nprint(abs(x - y))\nprint(abs(y - z))", "effort_before": "96.93609377704335", "effort_after": "392.2149746110282", "difficulty_before": "2.5", "difficulty_after": "2.75", "calculated_length_before": "10.0", "calculated_length_after": "72.0", "length_before": "15", "length_after": "33", "vocabulary_before": "6", "vocabulary_after": "20", "mi_value_before": "62.07", "mi_value_after": "50.16", "Nloc_before": "15", "Nloc_after": "33", "AvgCCN_before": "4.0", "AvgCCN_after": "10.0"}, "atcoder_ABC151_A": {"id": "atcoder_ABC151_A", "language": "Python", "dataset": "Avatar", "pass_before": 2, "pass_after": 1, "filepath_before": "/home/yang/contamination/Avatar_Python_Before/atcoder_ABC151_A.py", "filepath_after": "/home/yang/contamination/Avatar_Python_After/atcoder_ABC151_A.py", "code_before": "import sys\nimport math\ndebug = False\n\n\ndef log(text):\n    if debug:\n        print(text)\n\n\ndef parse_input(lines_as_string=None):\n    global debug\n    lines = []\n    if lines_as_string is None:\n        debug = False\n        lines.append(input())\n    else:\n        debug = True\n        lines = [e for e in lines_as_string.split(\"\\n\")][1: - 1]\n    c = [e for e in lines[0].split(\" \")][0]\n    return (c, )\n\n\ndef solve(c):\n    a = \"abcdefghijklmnopqrstuvwxyz\"\n    i = a.index(c)\n    return a[i + 1]\n\n\ndef main():\n    result = solve(* parse_input())\n    if isinstance(result, list):\n        for r in result:\n            print(\"%s\" % r, sep='')\n    else:\n        print(\"%s\" % result, sep='')\n\n\nif __name__ == '__main__':\n    main()\n", "code_after": "import sys\nimport math\ndebug = False\n\ndef log(text):\n    if debug:\n        print(text)\n\ndef parse_input(lines_as_string=None):\n    global debug\n    lines = []\n    if lines_as_string is None:\n        debug = False\n        lines.append(input())\n    else:\n        debug = True\n        lines = [e for e in lines_as_string.split('\\n')][1:-1]\n    c = [e for e in lines[0].split(' ')][0]\n    return (c,)\n\ndef solve(c):\n    a = 'abcdefghijklmnopqrstuvwxyz'\n    i = a.index(c)\n    return a[i + 1]\n\ndef main():\n    result = solve(*parse_input())\n    if isinstance(result, list):\n        for r in result:\n            print('%s' % r, sep='')\n    else:\n        print('%s' % result, sep='')\nmain()", "effort_before": "182.64713534469826", "effort_after": "112.92631877271643", "difficulty_before": "2.75", "difficulty_after": "2.25", "calculated_length_before": "44.82892142331043", "calculated_length_after": "32.0", "length_before": "17", "length_after": "14", "vocabulary_before": "15", "vocabulary_after": "12", "mi_value_before": "54.14", "mi_value_after": "55.43", "Nloc_before": "30", "Nloc_after": "29", "AvgCCN_before": "2.0", "AvgCCN_after": "1.0"}, "codeforces_632_B": {"id": "codeforces_632_B", "language": "Python", "dataset": "Avatar", "pass_before": 0, "pass_after": 0, "filepath_before": "/home/yang/contamination/Avatar_Python_Before/codeforces_632_B.py", "filepath_after": "/home/yang/contamination/Avatar_Python_After/codeforces_632_B.py", "code_before": "def main():\n    input()\n    pieces = tuple(zip(map(int, input().split()), input()))\n    return Bob_sMaxStrength(pieces)\n\n\ndef Bob_sMaxStrength(pieces):\n    pScore = sScore = pMaxScore = sMaxScore = sum(\n        piece[0] for piece in pieces if piece[1] == 'B')\n    for piece in pieces:\n        if piece[1] == 'A':\n            pScore += piece[0]\n            if pScore > pMaxScore:\n                pMaxScore = pScore\n        else:\n            pScore -= piece[0]\n    for i in range(len(pieces) - 1, - 1, - 1):\n        if pieces[i][1] == 'A':\n            sScore += pieces[i][0]\n            if sScore > sMaxScore:\n                sMaxScore = sScore\n        else:\n            sScore -= pieces[i][0]\n    if pMaxScore > sMaxScore:\n        return pMaxScore\n    return sMaxScore\n\n\nif __name__ == '__main__':\n    print(main())\n", "code_after": "def main():\n    input()\n    pieces = tuple(zip(map(int, input().split()), input()))\n    return Bob_sMaxStrength(pieces)\n\ndef Bob_sMaxStrength(pieces):\n    pScore = sScore = pMaxScore = sMaxScore = sum((piece[0] for piece in pieces if piece[1] == 'B'))\n    for piece in pieces:\n        if piece[1] == 'A':\n            pScore += piece[0]\n            if pScore > pMaxScore:\n                pMaxScore = pScore\n        else:\n            pScore -= piece[0]\n    for i in range(len(pieces) - 1, -1, -1):\n        if pieces[i][1] == 'A':\n            sScore += pieces[i][0]\n            if sScore > sMaxScore:\n                sMaxScore = sScore\n        else:\n            sScore -= pieces[i][0]\n    if pMaxScore > sMaxScore:\n        return pMaxScore\n    return sMaxScore\nprint(main())", "effort_before": "682.0307181445278", "effort_after": "639.6453580433297", "difficulty_before": "3.823529411764706", "difficulty_after": "4.0", "calculated_length_before": "81.0965087756926", "calculated_length_after": "70.2129994085646", "length_before": "40", "length_after": "37", "vocabulary_before": "22", "vocabulary_after": "20", "mi_value_before": "53.10", "mi_value_after": "53.94", "Nloc_before": "26", "Nloc_after": "24", "AvgCCN_before": "2.0", "AvgCCN_after": "1.0"}, "codeforces_31_A": {"id": "codeforces_31_A", "language": "Python", "dataset": "Avatar", "pass_before": 0, "pass_after": 0, "filepath_before": "/home/yang/contamination/Avatar_Python_Before/codeforces_31_A.py", "filepath_after": "/home/yang/contamination/Avatar_Python_After/codeforces_31_A.py", "code_before": "y = int(input())\narr = [int(i) for i in input().split()]\nfor i in range(len(arr)):\n    for j in range(len(arr)):\n        if i == j:\n            continue\n        for k in range(len(arr)):\n            if arr[k] != arr[j] and arr[k] != arr[i] and arr[k] == arr[i] + arr[j]:\n                print(k + 1, j + 1, i + 1)\n                exit()\nprint(- 1)\n", "code_after": "y = int(input())\narr = [int(i) for i in input().split()]\nrandom_inside_left_3 = 134\nrandom_inside_right_3 = 133\nrandom_outside_left_3 = 700\nrandom_outside_right_3 = 699\nfor loop_outside in range(random_outside_left_3 // random_outside_right_3):\n    for i in range(len(arr)):\n        for loop_inside in range(random_inside_left_3 % random_inside_right_3):\n            for j in range(len(arr)):\n                if i == j:\n                    continue\n                for k in range(len(arr)):\n                    if arr[k] != arr[j] and arr[k] != arr[i] and (arr[k] == arr[i] + arr[j]):\n                        print(k + 1, j + 1, i + 1)\n                        exit()\nprint(-1)", "effort_before": "432.19280948873626", "effort_after": "748.1120898767718", "difficulty_before": "3.3333333333333335", "difficulty_after": "4.421052631578948", "calculated_length_before": "70.2129994085646", "calculated_length_after": "100.36210720983135", "length_before": "30", "length_after": "36", "vocabulary_before": "20", "vocabulary_after": "26", "mi_value_before": "60.45", "mi_value_after": "55.53", "Nloc_before": "11", "Nloc_after": "17", "AvgCCN_before": "9.0", "AvgCCN_after": "11.0"}, "atcoder_ABC147_D": {"id": "atcoder_ABC147_D", "language": "Python", "dataset": "Avatar", "pass_before": 0, "pass_after": 0, "filepath_before": "/home/yang/contamination/Avatar_Python_Before/atcoder_ABC147_D.py", "filepath_after": "/home/yang/contamination/Avatar_Python_After/atcoder_ABC147_D.py", "code_before": "import numpy as np\nN = int(input())\nA = np.fromiter(map(int, input().split()), np.int64)\nresult = 0\nfor b in range(60):\n    bs = int(((A >> b) & 1).sum())\n    result = (result + bs * (N - bs) * (1 << b)) % 1000000007\nprint(result)\n", "code_after": "import numpy as np\nN = int(input())\nA = np.fromiter(map(int, input().split()), np.int64)\nresult = 0\nrandom_inside_left_5 = 440\nrandom_inside_right_5 = 439\nrandom_outside_left_5 = 925\nrandom_outside_right_5 = 924\nfor loop_outside in range(random_outside_left_5 // random_outside_right_5):\n    for b in range(60):\n        for loop_inside in range(random_inside_left_5 % random_inside_right_5):\n            bs = int((A >> b & 1).sum())\n            result = (result + bs * (N - bs) * (1 << b)) % 1000000007\nprint(result)", "effort_before": "446.8208738098935", "effort_after": "655.6032267917258", "difficulty_before": "4.3076923076923075", "difficulty_after": "4.705882352941177", "calculated_length_before": "67.75720079023742", "calculated_length_after": "93.48686830125578", "length_before": "24", "length_after": "30", "vocabulary_before": "20", "vocabulary_after": "25", "mi_value_before": "64.80", "mi_value_after": "58.79", "Nloc_before": "8", "Nloc_after": "14", "AvgCCN_before": "2.0", "AvgCCN_after": "4.0"}, "codeforces_456_A": {"id": "codeforces_456_A", "language": "Python", "dataset": "Avatar", "pass_before": 0, "pass_after": 0, "filepath_before": "/home/yang/contamination/Avatar_Python_Before/codeforces_456_A.py", "filepath_after": "/home/yang/contamination/Avatar_Python_After/codeforces_456_A.py", "code_before": "n = int(input())\nm = [[int(x) for x in input().split()] for i in range(n)]\nm.sort(reverse=True)\na = m[0]\nfor i in m[1:]:\n    if i[1] > a[1]:\n        print('Happy Alex')\n        break\n    a = i\nelse:\n    print('Poor Alex')\n", "code_after": "n = int(input())\nm = [[int(x) for x in input().split()] for i in range(n)]\nm.sort(reverse=True)\na = m[0]\nrandom_inside_left_5 = 517\nrandom_inside_right_5 = 516\nrandom_outside_left_5 = 148\nrandom_outside_right_5 = 147\nfor loop_outside in range(random_outside_left_5 // random_outside_right_5):\n    for i in m[1:]:\n        for loop_inside in range(random_inside_left_5 % random_inside_right_5):\n            if i[1] > a[1]:\n                print('Happy Alex')\n                break\n            a = i\n    else:\n        print('Poor Alex')", "effort_before": "2.3774437510817346", "effort_after": "42.793987519471216", "difficulty_before": "0.5", "difficulty_after": "1.5", "calculated_length_before": "2.0", "calculated_length_after": "20.264662506490406", "length_before": "3", "length_after": "9", "vocabulary_before": "3", "vocabulary_after": "9", "mi_value_before": "70.91", "mi_value_after": "61.35", "Nloc_before": "11", "Nloc_after": "17", "AvgCCN_before": "6.0", "AvgCCN_after": "8.0"}, "codeforces_404_A": {"id": "codeforces_404_A", "language": "Python", "dataset": "Avatar", "pass_before": 0, "pass_after": 0, "filepath_before": "/home/yang/contamination/Avatar_Python_Before/codeforces_404_A.py", "filepath_after": "/home/yang/contamination/Avatar_Python_After/codeforces_404_A.py", "code_before": "n = int(input())\ns = []\nfor i in range(n):\n    k = input()\n    s.append(k)\nflag = 0\nd1 = []\nd2 = []\nrem = set()\nfor i in range(n):\n    for j in range(n):\n        if (i == j):\n            d1.append(s[i][j])\n        if (i == n - j - 1):\n            d2.append(s[i][j])\n        if (i != j and i != n - j - 1):\n            rem.add(s[i][j])\nif (len(rem) != 1):\n    print('NO')\nelif (d1 != d2):\n    print('NO')\nelif (len(set(d1)) != 1):\n    print('NO')\nelif (set(d1) == rem):\n    print('NO')\nelse:\n    print('YES')\n", "code_after": "n = int(input())\ns = []\nrandom_inside_left_3 = 607\nrandom_inside_right_3 = 606\nrandom_outside_left_3 = 840\nrandom_outside_right_3 = 839\nrandom_inside_left_10 = 607\nrandom_inside_right_10 = 606\nrandom_outside_left_10 = 150\nrandom_outside_right_10 = 149\nfor loop_outside in range(random_outside_left_3 // random_outside_right_3):\n    for i in range(n):\n        for loop_inside in range(random_inside_left_3 % random_inside_right_3):\n            k = input()\n            s.append(k)\nflag = 0\nd1 = []\nd2 = []\nrem = set()\nfor loop_outside in range(random_outside_left_10 // random_outside_right_10):\n    for i in range(n):\n        for loop_inside in range(random_inside_left_10 % random_inside_right_10):\n            for j in range(n):\n                if i == j:\n                    d1.append(s[i][j])\n                if i == n - j - 1:\n                    d2.append(s[i][j])\n                if i != j and i != n - j - 1:\n                    rem.add(s[i][j])\nrandom_outside_if_left_30 = 750\nrandom_outside_if_right_30 = 749\nif random_outside_if_left_30 & random_outside_if_right_30:\n    if len(rem) != 1:\n        print('NO')\n    elif d1 != d2:\n        print('NO')\n    elif len(set(d1)) != 1:\n        print('NO')\n    elif set(d1) == rem:\n        print('NO')\n    else:\n        print('YES')\nelif d1 != d2:\n    print('NO')\nelif len(set(d1)) != 1:\n    print('NO')\nelif set(d1) == rem:\n    print('NO')\nelse:\n    print('YES')", "effort_before": "547.8043860269731", "effort_after": "1696.5103578545477", "difficulty_before": "3.25", "difficulty_after": "5.25", "calculated_length_before": "72.0", "calculated_length_after": "154.25742227201613", "length_before": "39", "length_after": "63", "vocabulary_before": "20", "vocabulary_after": "35", "mi_value_before": "51.23", "mi_value_after": "42.49", "Nloc_before": "27", "Nloc_after": "50", "AvgCCN_before": "12.0", "AvgCCN_after": "20.0"}, "atcoder_ABC124_A": {"id": "atcoder_ABC124_A", "language": "Python", "dataset": "Avatar", "pass_before": 3, "pass_after": 3, "filepath_before": "/home/yang/contamination/Avatar_Python_Before/atcoder_ABC124_A.py", "filepath_after": "/home/yang/contamination/Avatar_Python_After/atcoder_ABC124_A.py", "code_before": "a, b = map(int, input().split())\nc = 0\nfor i in range(2):\n    c += max(a, b)\n    if a >= b:\n        a -= 1\n    else:\n        b -= 1\nprint(c)\n", "code_after": "(a, b) = map(int, input().split())\nc = 0\nrandom_inside_left_3 = 578\nrandom_inside_right_3 = 577\nrandom_outside_left_3 = 312\nrandom_outside_right_3 = 311\nfor loop_outside in range(random_outside_left_3 // random_outside_right_3):\n    for i in range(2):\n        for loop_inside in range(random_inside_left_3 % random_inside_right_3):\n            c += max(a, b)\n            if a >= b:\n                a -= 1\n            else:\n                b -= 1\nprint(c)", "effort_before": "86.39999999999999", "effort_after": "228.44129532345625", "difficulty_before": "2.4", "difficulty_after": "3.3333333333333335", "calculated_length_before": "16.36452797660028", "calculated_length_after": "40.13896548741762", "length_before": "12", "length_after": "18", "vocabulary_before": "8", "vocabulary_after": "14", "mi_value_before": "66.89", "mi_value_after": "60.21", "Nloc_before": "9", "Nloc_after": "15", "AvgCCN_before": "3.0", "AvgCCN_after": "5.0"}, "codeforces_95_A": {"id": "codeforces_95_A", "language": "Python", "dataset": "Avatar", "pass_before": 3, "pass_after": 0, "filepath_before": "/home/yang/contamination/Avatar_Python_Before/codeforces_95_A.py", "filepath_after": "/home/yang/contamination/Avatar_Python_After/codeforces_95_A.py", "code_before": "pya = int(input())\narre = []\nwhile pya:\n    pya -= 1\n    arre.append(input().lower())\noString = input()\nlowString = oString.lower()\nletter1 = input()[0].lower()\nletter2 = 'a' if letter1.lower() != 'a' else 'b'\nvalid = [0 for i in range(len(oString))]\nsetcito = set()\nfor x in arre:\n    if lowString.find(x) >= 0:\n        wat = 0\n        while True:\n            index = lowString.find(x, wat)\n            if index < 0:\n                break\n            for i in range(index, index + len(x)):\n                setcito.add(i)\n            wat = index + 1\noString = list(oString)\nfor i in setcito:\n    letter = letter1 if lowString[i] != letter1 else letter2\n    oString[i] = letter if oString[i].islower() else letter.upper()\nfor x in oString:\n    print(x, end=\"\")\nprint()\n", "code_after": "pya = int(input())\narre = []\nrandom_inside_left_3 = 382\nrandom_inside_right_3 = 381\nrandom_outside_left_3 = 941\nrandom_outside_right_3 = 940\nfor loop_outside in range(random_outside_left_3 // random_outside_right_3):\n    while pya:\n        for loop_inside in range(random_inside_left_3 % random_inside_right_3):\n            pya -= 1\n            arre.append(input().lower())\noString = input()\nlowString = oString.lower()\nletter1 = input()[0].lower()\nletter2 = 'a' if letter1.lower() != 'a' else 'b'\nvalid = [0 for i in range(len(oString))]\nsetcito = set()\nrandom_inside_left_12 = 69\nrandom_inside_right_12 = 68\nrandom_outside_left_12 = 957\nrandom_outside_right_12 = 956\nrandom_inside_left_23 = 71\nrandom_inside_right_23 = 70\nrandom_outside_left_23 = 88\nrandom_outside_right_23 = 87\nrandom_inside_left_26 = 885\nrandom_inside_right_26 = 884\nrandom_outside_left_26 = 673\nrandom_outside_right_26 = 672\nfor loop_outside in range(random_outside_left_12 // random_outside_right_12):\n    for x in arre:\n        for loop_inside in range(random_inside_left_12 % random_inside_right_12):\n            if lowString.find(x) >= 0:\n                wat = 0\n                while True:\n                    index = lowString.find(x, wat)\n                    if index < 0:\n                        break\n                    for i in range(index, index + len(x)):\n                        setcito.add(i)\n                    wat = index + 1\noString = list(oString)\nfor loop_outside in range(random_outside_left_23 // random_outside_right_23):\n    for i in setcito:\n        for loop_inside in range(random_inside_left_23 % random_inside_right_23):\n            letter = letter1 if lowString[i] != letter1 else letter2\n            oString[i] = letter if oString[i].islower() else letter.upper()\nfor loop_outside in range(random_outside_left_26 // random_outside_right_26):\n    for x in oString:\n        for loop_inside in range(random_inside_left_26 % random_inside_right_26):\n            print(x, end='')\nprint()", "effort_before": "287.15645877722613", "effort_after": "916.7216236141804", "difficulty_before": "3.5", "difficulty_after": "4.038461538461538", "calculated_length_before": "44.82892142331043", "calculated_length_after": "141.86291712607164", "length_before": "21", "length_after": "45", "vocabulary_before": "15", "vocabulary_after": "33", "mi_value_before": "52.95", "mi_value_after": "43.07", "Nloc_before": "28", "Nloc_after": "52", "AvgCCN_before": "13.0", "AvgCCN_after": "21.0"}, "atcoder_ABC111_C": {"id": "atcoder_ABC111_C", "language": "Python", "dataset": "Avatar", "pass_before": 3, "pass_after": 0, "filepath_before": "/home/yang/contamination/Avatar_Python_Before/atcoder_ABC111_C.py", "filepath_after": "/home/yang/contamination/Avatar_Python_After/atcoder_ABC111_C.py", "code_before": "n = int(input())\nx = list(int(i) for i in input().split())\na = []\nb = []\nfor i in range(0, n):\n    if i % 2 == 0:\n        a.append(x[i])\n    else:\n        b.append(x[i])\ncnta = [0] * (100002 + 1)\ncntb = [0] * (100002 + 1)\nvala = 0\nvala1 = 0\nmaxCnta = 0\nmaxCnta1 = 0\nfor i in a:\n    cnta[i] += 1\nfor i in a:\n    if maxCnta < cnta[i]:\n        vala = i\n        maxCnta = cnta[i]\nfor i in a:\n    if maxCnta1 < cnta[i] and vala != i:\n        maxCnta1 = cnta[i]\n        vala1 = i\nvalb = 0\nvalb1 = 0\nmaxCntb = 0\nmaxCntb1 = 0\nfor i in b:\n    cntb[i] += 1\nfor i in b:\n    if maxCntb < cntb[i]:\n        valb = i\n        maxCntb = cntb[i]\nfor i in b:\n    if maxCntb1 < cntb[i] and valb != i:\n        maxCntb1 = cntb[i]\n        valb1 = i\nif valb != vala:\n    res = 0\n    for i in a:\n        if i != vala:\n            res += 1\n    for i in b:\n        if i != valb:\n            res += 1\n    print(res)\nelse:\n    resa = 0\n    resb = 0\n    resa1 = 0\n    resb1 = 0\n    for i in a:\n        if i != vala:\n            resa += 1\n        if i != vala1:\n            resa1 += 1\n    for i in b:\n        if i != valb:\n            resb += 1\n        if i != valb1:\n            resb1 += 1\n    print(min(resa + resb1, resa1 + resb))\n", "code_after": "n = int(input())\nx = list((int(i) for i in input().split()))\na = []\nb = []\nrandom_inside_left_5 = 75\nrandom_inside_right_5 = 74\nrandom_outside_left_5 = 465\nrandom_outside_right_5 = 464\nrandom_inside_left_16 = 861\nrandom_inside_right_16 = 860\nrandom_outside_left_16 = 7\nrandom_outside_right_16 = 6\nrandom_inside_left_18 = 547\nrandom_inside_right_18 = 546\nrandom_outside_left_18 = 783\nrandom_outside_right_18 = 782\nrandom_inside_left_22 = 565\nrandom_inside_right_22 = 564\nrandom_outside_left_22 = 128\nrandom_outside_right_22 = 127\nrandom_inside_left_30 = 244\nrandom_inside_right_30 = 243\nrandom_outside_left_30 = 989\nrandom_outside_right_30 = 988\nrandom_inside_left_32 = 586\nrandom_inside_right_32 = 585\nrandom_outside_left_32 = 848\nrandom_outside_right_32 = 847\nrandom_inside_left_36 = 871\nrandom_inside_right_36 = 870\nrandom_outside_left_36 = 80\nrandom_outside_right_36 = 79\nfor loop_outside in range(random_outside_left_5 // random_outside_right_5):\n    for i in range(0, n):\n        for loop_inside in range(random_inside_left_5 % random_inside_right_5):\n            if i % 2 == 0:\n                a.append(x[i])\n            else:\n                b.append(x[i])\nvariable_0_40 = 0\nvariable_100002_40 = 100002\nvariable_1_40 = 1\ncnta = [variable_0_40] * (variable_100002_40 + variable_1_40)\nvariable_0_41 = 0\nvariable_100002_41 = 100002\nvariable_1_41 = 1\ncntb = [variable_0_41] * (variable_100002_41 + variable_1_41)\nvala = 0\nvala1 = 0\nmaxCnta = 0\nmaxCnta1 = 0\nfor loop_outside in range(random_outside_left_16 // random_outside_right_16):\n    for i in a:\n        for loop_inside in range(random_inside_left_16 % random_inside_right_16):\n            cnta[i] += 1\nfor loop_outside in range(random_outside_left_18 // random_outside_right_18):\n    for i in a:\n        for loop_inside in range(random_inside_left_18 % random_inside_right_18):\n            if maxCnta < cnta[i]:\n                vala = i\n                maxCnta = cnta[i]\nfor loop_outside in range(random_outside_left_22 // random_outside_right_22):\n    for i in a:\n        for loop_inside in range(random_inside_left_22 % random_inside_right_22):\n            if maxCnta1 < cnta[i] and vala != i:\n                maxCnta1 = cnta[i]\n                vala1 = i\nvalb = 0\nvalb1 = 0\nmaxCntb = 0\nmaxCntb1 = 0\nfor loop_outside in range(random_outside_left_30 // random_outside_right_30):\n    for i in b:\n        for loop_inside in range(random_inside_left_30 % random_inside_right_30):\n            cntb[i] += 1\nfor loop_outside in range(random_outside_left_32 // random_outside_right_32):\n    for i in b:\n        for loop_inside in range(random_inside_left_32 % random_inside_right_32):\n            if maxCntb < cntb[i]:\n                valb = i\n                maxCntb = cntb[i]\nfor loop_outside in range(random_outside_left_36 // random_outside_right_36):\n    for i in b:\n        for loop_inside in range(random_inside_left_36 % random_inside_right_36):\n            if maxCntb1 < cntb[i] and valb != i:\n                maxCntb1 = cntb[i]\n                valb1 = i\nrandom_outside_if_left_82 = 440\nrandom_outside_if_right_82 = 439\nif random_outside_if_left_82 & random_outside_if_right_82:\n    if valb != vala:\n        res = 0\n        for i in a:\n            if i != vala:\n                res += 1\n        for i in b:\n            if i != valb:\n                res += 1\n        print(res)\n    else:\n        resa = 0\n        resb = 0\n        resa1 = 0\n        resb1 = 0\n        for i in a:\n            if i != vala:\n                resa += 1\n            if i != vala1:\n                resa1 += 1\n        for i in b:\n            if i != valb:\n                resb += 1\n            if i != valb1:\n                resb1 += 1\n        print(min(resa + resb1, resa1 + resb))\nelse:\n    resa = 0\n    resb = 0\n    resa1 = 0\n    resb1 = 0\n    for i in a:\n        if i != vala:\n            resa += 1\n        if i != vala1:\n            resa1 += 1\n    for i in b:\n        if i != valb:\n            resb += 1\n        if i != valb1:\n            resb1 += 1\n    print(min(resa + resb1, resa1 + resb))", "effort_before": "3254.6009358461174", "effort_after": "7991.008123661624", "difficulty_before": "6.575757575757576", "difficulty_after": "7.636363636363637", "calculated_length_before": "186.1164903932322", "calculated_length_after": "427.4593368906387", "length_before": "93", "length_after": "168", "vocabulary_before": "40", "vocabulary_after": "75", "mi_value_before": "37.95", "mi_value_after": "26.14", "Nloc_before": "64", "Nloc_after": "131", "AvgCCN_before": "27.0", "AvgCCN_after": "48.0"}, "codeforces_25_A": {"id": "codeforces_25_A", "language": "Python", "dataset": "Avatar", "pass_before": 0, "pass_after": 0, "filepath_before": "/home/yang/contamination/Avatar_Python_Before/codeforces_25_A.py", "filepath_after": "/home/yang/contamination/Avatar_Python_After/codeforces_25_A.py", "code_before": "n = int(input())\nlist = [int(x) % 2 for x in input().split()]\nif sum(list) == 1:\n    print(list.index(1) + 1)\nelse:\n    print(list.index(0) + 1)\n", "code_after": "n = int(input())\nlist = [int(x) % 2 for x in input().split()]\nrandom_outside_if_left_3 = 556\nrandom_outside_if_right_3 = 555\nif random_outside_if_left_3 & random_outside_if_right_3:\n    if sum(list) == 1:\n        print(list.index(1) + 1)\n    else:\n        print(list.index(0) + 1)\nelse:\n    print(list.index(0) + 1)", "effort_before": "76.0782000346155", "effort_after": "177.62110647077242", "difficulty_before": "2.0", "difficulty_after": "2.6666666666666665", "calculated_length_before": "20.264662506490406", "calculated_length_after": "36.52932501298081", "length_before": "12", "length_after": "18", "vocabulary_before": "9", "vocabulary_after": "13", "mi_value_before": "70.10", "mi_value_after": "63.15", "Nloc_before": "6", "Nloc_after": "11", "AvgCCN_before": "3.0", "AvgCCN_after": "4.0"}, "atcoder_ABC126_D": {"id": "atcoder_ABC126_D", "language": "Python", "dataset": "Avatar", "pass_before": 0, "pass_after": 0, "filepath_before": "/home/yang/contamination/Avatar_Python_Before/atcoder_ABC126_D.py", "filepath_after": "/home/yang/contamination/Avatar_Python_After/atcoder_ABC126_D.py", "code_before": "import sys\nsys.setrecursionlimit(10 ** 5)\n\n\nclass Node:\n    def __init__(self):\n        self.val = None\n        self.color = None\n        self.a = []\n\n\nn = int(input())\nnodes = []\nfor i in range(n):\n    nodes.append(Node())\nfor i in range(n - 1):\n    u, v, w = map(int, input().split())\n    node1 = nodes[u - 1]\n    node2 = nodes[v - 1]\n    node1.val = u\n    node2.val = v\n    node1.a.append([node2, w])\n    node2.a.append([node1, w])\nroot = nodes[0]\nroot.color = True\nnodeSet = set()\n\n\ndef traverse(node, distance):\n    if node in nodeSet:\n        return\n    else:\n        nodeSet.add(node)\n    for pair in node.a:\n        adjNode = pair[0]\n        dis = pair[1]\n        if (distance + dis) % 2 == 0:\n            adjNode.color = root.color\n        else:\n            adjNode.color = not root.color\n        traverse(adjNode, distance + dis)\n\n\ntraverse(root, 0)\nfor i in range(n):\n    node = nodes[i]\n    if node.color:\n        print(1)\n    else:\n        print(0)\n", "code_after": "import sys\nsys.setrecursionlimit(10 ** 5)\n\nclass Node:\n\n    def __init__(self):\n        self.val = None\n        self.color = None\n        self.a = []\nn = int(input())\nnodes = []\nrandom_inside_left_12 = 724\nrandom_inside_right_12 = 723\nrandom_outside_left_12 = 959\nrandom_outside_right_12 = 958\nrandom_inside_left_14 = 548\nrandom_inside_right_14 = 547\nrandom_outside_left_14 = 213\nrandom_outside_right_14 = 212\nrandom_inside_left_40 = 711\nrandom_inside_right_40 = 710\nrandom_outside_left_40 = 865\nrandom_outside_right_40 = 864\nfor loop_outside in range(random_outside_left_12 // random_outside_right_12):\n    for i in range(n):\n        for loop_inside in range(random_inside_left_12 % random_inside_right_12):\n            nodes.append(Node())\nfor loop_outside in range(random_outside_left_14 // random_outside_right_14):\n    for i in range(n - 1):\n        for loop_inside in range(random_inside_left_14 % random_inside_right_14):\n            (u, v, w) = map(int, input().split())\n            node1 = nodes[u - 1]\n            node2 = nodes[v - 1]\n            node1.val = u\n            node2.val = v\n            node1.a.append([node2, w])\n            node2.a.append([node1, w])\nroot = nodes[0]\nroot.color = True\nnodeSet = set()\n\ndef traverse(node, distance):\n    if node in nodeSet:\n        return\n    else:\n        nodeSet.add(node)\n    for pair in node.a:\n        adjNode = pair[0]\n        dis = pair[1]\n        if (distance + dis) % 2 == 0:\n            adjNode.color = root.color\n        else:\n            adjNode.color = not root.color\n        traverse(adjNode, distance + dis)\ntraverse(root, 0)\nfor loop_outside in range(random_outside_left_40 // random_outside_right_40):\n    for i in range(n):\n        for loop_inside in range(random_inside_left_40 % random_inside_right_40):\n            node = nodes[i]\n            if node.color:\n                print(1)\n            else:\n                print(0)", "effort_before": "573.3342584361352", "effort_after": "1107.1652378798246", "difficulty_before": "4.433333333333334", "difficulty_after": "4.592592592592593", "calculated_length_before": "78.25484338853101", "calculated_length_after": "152.38196255841368", "length_before": "29", "length_after": "47", "vocabulary_before": "22", "vocabulary_after": "35", "mi_value_before": "48.91", "mi_value_after": "42.90", "Nloc_before": "42", "Nloc_after": "60", "AvgCCN_before": "5.0", "AvgCCN_after": "11.0"}, "codeforces_216_B": {"id": "codeforces_216_B", "language": "Python", "dataset": "Avatar", "pass_before": 0, "pass_after": 0, "filepath_before": "/home/yang/contamination/Avatar_Python_Before/codeforces_216_B.py", "filepath_after": "/home/yang/contamination/Avatar_Python_After/codeforces_216_B.py", "code_before": "def readInts(): return map(int, input().split())\n\n\ndef dfs(g, seen, i):\n    if i in seen:\n        return 0, 0\n    seen.add(i)\n    nodes = 1\n    edges = len(g[i])\n    for j in g[i]:\n        x, y = dfs(g, seen, j)\n        nodes += x\n        edges += y\n    return nodes, edges\n\n\ndef solve():\n    line0 = []\n    try:\n        line0 = readInts()\n    except EOFError:\n        return False\n    n, m = line0\n    g = {}\n    seen = set()\n    for i in range(1, n + 1):\n        g[i] = set()\n    for _ in range(m):\n        a, b = readInts()\n        g[a].add(b)\n        g[b].add(a)\n    ans = 0\n    for i in range(1, n + 1):\n        if i not in seen:\n            nodes, edges = dfs(g, seen, i)\n            if nodes > 1 and nodes % 2 == 1 and 2 * nodes == edges:\n                ans += 1\n    if (n - ans) % 2 == 1:\n        ans += 1\n    print(ans)\n    return True\n\n\nwhile solve():\n    pass\n", "code_after": "def readInts():\n    return map(int, input().split())\n\ndef dfs(g, seen, i):\n    if i in seen:\n        return (0, 0)\n    seen.add(i)\n    nodes = 1\n    edges = len(g[i])\n    for j in g[i]:\n        (x, y) = dfs(g, seen, j)\n        nodes += x\n        edges += y\n    return (nodes, edges)\n\ndef solve():\n    line0 = []\n    try:\n        line0 = readInts()\n    except EOFError:\n        return False\n    (n, m) = line0\n    g = {}\n    seen = set()\n    for i in range(1, n + 1):\n        g[i] = set()\n    for _ in range(m):\n        (a, b) = readInts()\n        g[a].add(b)\n        g[b].add(a)\n    ans = 0\n    for i in range(1, n + 1):\n        if i not in seen:\n            (nodes, edges) = dfs(g, seen, i)\n            if nodes > 1 and nodes % 2 == 1 and (2 * nodes == edges):\n                ans += 1\n    if (n - ans) % 2 == 1:\n        ans += 1\n    print(ans)\n    return True\nrandom_inside_left_41 = 765\nrandom_inside_right_41 = 764\nrandom_outside_left_41 = 34\nrandom_outside_right_41 = 33\nfor loop_outside in range(random_outside_left_41 // random_outside_right_41):\n    while solve():\n        for loop_inside in range(random_inside_left_41 % random_inside_right_41):\n            pass", "effort_before": "1913.6873322873223", "effort_after": "2320.487636865903", "difficulty_before": "7.5", "difficulty_after": "7.8", "calculated_length_before": "120.76799089133479", "calculated_length_after": "149.31568569324173", "length_before": "52", "length_after": "58", "vocabulary_before": "30", "vocabulary_after": "35", "mi_value_before": "47.70", "mi_value_after": "45.67", "Nloc_before": "39", "Nloc_after": "46", "AvgCCN_before": "2.0", "AvgCCN_after": "4.0"}, "codeforces_598_A": {"id": "codeforces_598_A", "language": "Python", "dataset": "Avatar", "pass_before": 0, "pass_after": 0, "filepath_before": "/home/yang/contamination/Avatar_Python_Before/codeforces_598_A.py", "filepath_after": "/home/yang/contamination/Avatar_Python_After/codeforces_598_A.py", "code_before": "t = int(input())\n\n\ndef solve(n):\n    s = (1 + n) * n // 2\n    t = 1\n    while t <= n:\n        s -= 2 * t\n        t *= 2\n    return s\n\n\nfor _ in range(t):\n    n = int(input())\n    print(solve(n))\n", "code_after": "t = int(input())\n\ndef solve(n):\n    s = (1 + n) * n // 2\n    t = 1\n    while t <= n:\n        s -= 2 * t\n        t *= 2\n    return s\nrandom_inside_left_10 = 672\nrandom_inside_right_10 = 671\nrandom_outside_left_10 = 357\nrandom_outside_right_10 = 356\nfor loop_outside in range(random_outside_left_10 // random_outside_right_10):\n    for _ in range(t):\n        for loop_inside in range(random_inside_left_10 % random_inside_right_10):\n            n = int(input())\n            print(solve(n))", "effort_before": "339.97789910421284", "effort_after": "506.64588767524094", "difficulty_before": "4.375", "difficulty_after": "4.5", "calculated_length_before": "35.60964047443681", "calculated_length_after": "58.52932501298082", "length_before": "21", "length_after": "27", "vocabulary_before": "13", "vocabulary_after": "18", "mi_value_before": "62.95", "mi_value_after": "57.71", "Nloc_before": "11", "Nloc_after": "17", "AvgCCN_before": "2.0", "AvgCCN_after": "4.0"}, "atcoder_ABC132_F": {"id": "atcoder_ABC132_F", "language": "Python", "dataset": "Avatar", "pass_before": 0, "pass_after": 0, "filepath_before": "/home/yang/contamination/Avatar_Python_Before/atcoder_ABC132_F.py", "filepath_after": "/home/yang/contamination/Avatar_Python_After/atcoder_ABC132_F.py", "code_before": "mod = 10 ** 9 + 7\nn, k = map(int, input().split())\ncoef = []\nfor i in range(1, int(n ** 0.5) + 1):\n    coef.append((n // i) - (n // (i + 1)))\ncoef += [1] * (n - sum(coef))\ncoef = coef[:: - 1]\nnn = len(coef)\ndp = [[0] * nn for _ in range(k + 1)]\ndp[0][0] = 1\nfor i in range(1, k + 1):\n    tmp = 0\n    for j in range(nn - 1, - 1, - 1):\n        tmp += dp[i - 1][(nn - 1) - j]\n        tmp %= mod\n        dp[i][j] = coef[j] * tmp\n        dp[i][j] %= mod\nprint(sum(dp[k]) % mod)\n", "code_after": "variable_7_1 = 7\nvariable_10_1 = 10\nvariable_9_1 = 9\nmod = variable_10_1 ** variable_9_1 + variable_7_1\n(n, k) = map(int, input().split())\ncoef = []\nrandom_inside_left_4 = 778\nrandom_inside_right_4 = 777\nrandom_outside_left_4 = 4\nrandom_outside_right_4 = 3\nrandom_inside_left_11 = 745\nrandom_inside_right_11 = 744\nrandom_outside_left_11 = 203\nrandom_outside_right_11 = 202\nfor loop_outside in range(random_outside_left_4 // random_outside_right_4):\n    for i in range(1, int(n ** 0.5) + 1):\n        for loop_inside in range(random_inside_left_4 % random_inside_right_4):\n            coef.append(n // i - n // (i + 1))\ncoef += [1] * (n - sum(coef))\ncoef = coef[::-1]\nnn = len(coef)\ndp = [[0] * nn for _ in range(k + 1)]\ndp[0][0] = 1\nfor loop_outside in range(random_outside_left_11 // random_outside_right_11):\n    for i in range(1, k + 1):\n        for loop_inside in range(random_inside_left_11 % random_inside_right_11):\n            tmp = 0\n            for j in range(nn - 1, -1, -1):\n                tmp += dp[i - 1][nn - 1 - j]\n                tmp %= mod\n                dp[i][j] = coef[j] * tmp\n                dp[i][j] %= mod\nprint(sum(dp[k]) % mod)", "effort_before": "2356.264385909094", "effort_after": "2616.137894860749", "difficulty_before": "6.125", "difficulty_after": "5.541666666666667", "calculated_length_before": "154.25742227201613", "calculated_length_after": "205.76878450632645", "length_before": "75", "length_after": "87", "vocabulary_before": "35", "vocabulary_after": "43", "mi_value_before": "52.85", "mi_value_after": "46.38", "Nloc_before": "18", "Nloc_after": "33", "AvgCCN_before": "5.0", "AvgCCN_after": "9.0"}, "codeforces_379_A": {"id": "codeforces_379_A", "language": "Python", "dataset": "Avatar", "pass_before": 3, "pass_after": 3, "filepath_before": "/home/yang/contamination/Avatar_Python_Before/codeforces_379_A.py", "filepath_after": "/home/yang/contamination/Avatar_Python_After/codeforces_379_A.py", "code_before": "import re\ncandeleIntere, b = map(int, input().split())\ns = 0\nrestoSciolte = 0\nwhile candeleIntere > 0 or restoSciolte >= b:\n    candeleIntere += restoSciolte // b\n    restoSciolte %= b\n    s += candeleIntere\n    restoSciolte += candeleIntere % b\n    candeleIntere //= b\nprint(s)\n", "code_after": "import re\n(candeleIntere, b) = map(int, input().split())\ns = 0\nrestoSciolte = 0\nrandom_inside_left_5 = 17\nrandom_inside_right_5 = 16\nrandom_outside_left_5 = 251\nrandom_outside_right_5 = 250\nfor loop_outside in range(random_outside_left_5 // random_outside_right_5):\n    while candeleIntere > 0 or restoSciolte >= b:\n        for loop_inside in range(random_inside_left_5 % random_inside_right_5):\n            candeleIntere += restoSciolte // b\n            restoSciolte %= b\n            s += candeleIntere\n            restoSciolte += candeleIntere % b\n            candeleIntere //= b\nprint(s)", "effort_before": "781.3781191217038", "effort_after": "846.9713934496748", "difficulty_before": "6.666666666666667", "difficulty_after": "5.538461538461538", "calculated_length_before": "44.039100017307746", "calculated_length_after": "63.61549134016113", "length_before": "30", "length_after": "36", "vocabulary_before": "15", "vocabulary_after": "19", "mi_value_before": "61.57", "mi_value_after": "56.65", "Nloc_before": "11", "Nloc_after": "17", "AvgCCN_before": "3.0", "AvgCCN_after": "5.0"}, "codeforces_265_B": {"id": "codeforces_265_B", "language": "Python", "dataset": "Avatar", "pass_before": 3, "pass_after": 3, "filepath_before": "/home/yang/contamination/Avatar_Python_Before/codeforces_265_B.py", "filepath_after": "/home/yang/contamination/Avatar_Python_After/codeforces_265_B.py", "code_before": "n = int(input())\nl = []\nfor i in range(n):\n    l.append(int(input()))\nans = n - 1\nlast = 0\nfor i in l:\n    ans += abs(last - i) + 1\n    last = i\nprint(ans)\n", "code_after": "n = int(input())\nl = []\nrandom_inside_left_3 = 579\nrandom_inside_right_3 = 578\nrandom_outside_left_3 = 26\nrandom_outside_right_3 = 25\nrandom_inside_left_7 = 115\nrandom_inside_right_7 = 114\nrandom_outside_left_7 = 204\nrandom_outside_right_7 = 203\nfor loop_outside in range(random_outside_left_3 // random_outside_right_3):\n    for i in range(n):\n        for loop_inside in range(random_inside_left_3 % random_inside_right_3):\n            l.append(int(input()))\nvariable_1_15 = 1\nans = n - variable_1_15\nlast = 0\nfor loop_outside in range(random_outside_left_7 // random_outside_right_7):\n    for i in l:\n        for loop_inside in range(random_inside_left_7 % random_inside_right_7):\n            ans += abs(last - i) + 1\n            last = i\nprint(ans)", "effort_before": "43.47325716263743", "effort_after": "207.45254855459342", "difficulty_before": "1.1428571428571428", "difficulty_after": "2.0", "calculated_length_before": "21.651484454403228", "calculated_length_after": "72.0", "length_before": "12", "length_after": "24", "vocabulary_before": "9", "vocabulary_after": "20", "mi_value_before": "65.81", "mi_value_after": "54.84", "Nloc_before": "10", "Nloc_after": "23", "AvgCCN_before": "3.0", "AvgCCN_after": "7.0"}, "atcoder_ABC168_C": {"id": "atcoder_ABC168_C", "language": "Python", "dataset": "Avatar", "pass_before": 0, "pass_after": 0, "filepath_before": "/home/yang/contamination/Avatar_Python_Before/atcoder_ABC168_C.py", "filepath_after": "/home/yang/contamination/Avatar_Python_After/atcoder_ABC168_C.py", "code_before": "import math\na, b, h, m = map(int, input().split())\nC = abs(360 / 60 * m - 360 / 12 * h - 360 / 12 / 60 * m)\nif C > 180:\n    C = 360 - C\ncosC = math.cos(math.radians(C))\nprint(math.sqrt(a ** 2 + b ** 2 - 2 * a * b * cosC))\n", "code_after": "import math\n(a, b, h, m) = map(int, input().split())\nC = abs(360 / 60 * m - 360 / 12 * h - 360 / 12 / 60 * m)\nrandom_outside_if_left_4 = 589\nrandom_outside_if_right_4 = 588\nif random_outside_if_left_4 & random_outside_if_right_4:\n    if C > 180:\n        C = 360 - C\ncosC = math.cos(math.radians(C))\nprint(math.sqrt(a ** 2 + b ** 2 - 2 * a * b * cosC))", "effort_before": "1155.7149152870506", "effort_after": "1428.44651109329", "difficulty_before": "4.32", "difficulty_after": "4.925925925925926", "calculated_length_before": "131.60617974869504", "calculated_length_after": "148.0334470128169", "length_before": "54", "length_after": "57", "vocabulary_before": "31", "vocabulary_after": "34", "mi_value_before": "63.03", "mi_value_after": "59.64", "Nloc_before": "7", "Nloc_after": "10", "AvgCCN_before": "2.0", "AvgCCN_after": "3.0"}, "codeforces_622_A": {"id": "codeforces_622_A", "language": "Python", "dataset": "Avatar", "pass_before": 0, "pass_after": 0, "filepath_before": "/home/yang/contamination/Avatar_Python_Before/codeforces_622_A.py", "filepath_after": "/home/yang/contamination/Avatar_Python_After/codeforces_622_A.py", "code_before": "from cmd import IDENTCHARS\nn = int(input())\nl = 1\nr = n\nwhile (l < r):\n    mid = l + (r - l) // 2\n    idxcnt = mid * (mid + 1) / 2\n    if (idxcnt < n):\n        l = mid + 1\n    else:\n        r = mid\nl -= 1\nidxcnt = l * (l + 1) / 2\nprint(int(n - idxcnt))\n", "code_after": "from cmd import IDENTCHARS\nn = int(input())\nl = 1\nr = n\nrandom_inside_left_5 = 377\nrandom_inside_right_5 = 376\nrandom_outside_left_5 = 645\nrandom_outside_right_5 = 644\nfor loop_outside in range(random_outside_left_5 // random_outside_right_5):\n    while l < r:\n        for loop_inside in range(random_inside_left_5 % random_inside_right_5):\n            mid = l + (r - l) // 2\n            idxcnt = mid * (mid + 1) / 2\n            if idxcnt < n:\n                l = mid + 1\n            else:\n                r = mid\nl -= 1\nvariable_2_19 = 2\nvariable_1_19 = 1\nidxcnt = l * (l + variable_1_19) / variable_2_19\nprint(int(n - idxcnt))", "effort_before": "1152.822174417613", "effort_after": "1329.9770486698164", "difficulty_before": "6.461538461538462", "difficulty_after": "5.894736842105263", "calculated_length_before": "63.61549134016113", "calculated_length_after": "100.36210720983135", "length_before": "42", "length_after": "48", "vocabulary_before": "19", "vocabulary_after": "26", "mi_value_before": "58.18", "mi_value_after": "53.14", "Nloc_before": "14", "Nloc_after": "22", "AvgCCN_before": "3.0", "AvgCCN_after": "5.0"}, "codeforces_373_B": {"id": "codeforces_373_B", "language": "Python", "dataset": "Avatar", "pass_before": 0, "pass_after": 0, "filepath_before": "/home/yang/contamination/Avatar_Python_Before/codeforces_373_B.py", "filepath_after": "/home/yang/contamination/Avatar_Python_After/codeforces_373_B.py", "code_before": "def sum(k):\n    ret = 0\n    pw = 10\n    len = 1\n    while 1 == 1:\n        cur = min(pw - 1, k)\n        prev = pw // 10\n        ret += (cur - prev + 1) * len\n        if (pw - 1 >= k):\n            break\n        len += 1\n        pw *= 10\n    return ret\n\n\nw, m, k = map(int, input().split())\nlo = 0\nhi = int(1e18)\nwhile hi - lo > 1:\n    md = (lo + hi) // 2\n    c = sum(m + md - 1) - sum(m - 1)\n    if c * k <= w:\n        lo = md\n    else:\n        hi = md\nprint(lo)\n", "code_after": "def sum(k):\n    ret = 0\n    pw = 10\n    len = 1\n    while 1 == 1:\n        cur = min(pw - 1, k)\n        prev = pw // 10\n        ret += (cur - prev + 1) * len\n        if pw - 1 >= k:\n            break\n        len += 1\n        pw *= 10\n    return ret\n(w, m, k) = map(int, input().split())\nlo = 0\nhi = int(1e+18)\nrandom_inside_left_17 = 596\nrandom_inside_right_17 = 595\nrandom_outside_left_17 = 240\nrandom_outside_right_17 = 239\nfor loop_outside in range(random_outside_left_17 // random_outside_right_17):\n    while hi - lo > 1:\n        for loop_inside in range(random_inside_left_17 % random_inside_right_17):\n            md = (lo + hi) // 2\n            c = sum(m + md - 1) - sum(m - 1)\n            if c * k <= w:\n                lo = md\n            else:\n                hi = md\nprint(lo)", "effort_before": "2010.6789426424268", "effort_after": "2452.0354509443937", "difficulty_before": "6.222222222222222", "difficulty_after": "6.67741935483871", "calculated_length_before": "152.38196255841368", "calculated_length_after": "182.10941063497398", "length_before": "63", "length_after": "69", "vocabulary_before": "35", "vocabulary_after": "40", "mi_value_before": "51.53", "mi_value_after": "48.84", "Nloc_before": "24", "Nloc_after": "30", "AvgCCN_before": "3.0", "AvgCCN_after": "5.0"}, "codeforces_673_A": {"id": "codeforces_673_A", "language": "Python", "dataset": "Avatar", "pass_before": 0, "pass_after": 0, "filepath_before": "/home/yang/contamination/Avatar_Python_Before/codeforces_673_A.py", "filepath_after": "/home/yang/contamination/Avatar_Python_After/codeforces_673_A.py", "code_before": "n = int(input())\narr = list(map(int, input().split()))\nif arr[0] > 15:\n    print(15)\nelse:\n    for i in range(1, len(arr)):\n        if arr[i] - arr[i - 1] > 15:\n            print(arr[i - 1] + 15)\n            break\n    else:\n        if arr[- 1] == 90 or arr[- 1] + 15 >= 90:\n            print(90)\n        else:\n            print(arr[- 1] + 15)\n", "code_after": "n = int(input())\narr = list(map(int, input().split()))\nrandom_outside_if_left_3 = 279\nrandom_outside_if_right_3 = 278\nif random_outside_if_left_3 & random_outside_if_right_3:\n    if arr[0] > 15:\n        print(15)\n    else:\n        for i in range(1, len(arr)):\n            if arr[i] - arr[i - 1] > 15:\n                print(arr[i - 1] + 15)\n                break\n        else:\n            if arr[-1] == 90 or arr[-1] + 15 >= 90:\n                print(90)\n            else:\n                print(arr[-1] + 15)\nelse:\n    for i in range(1, len(arr)):\n        if arr[i] - arr[i - 1] > 15:\n            print(arr[i - 1] + 15)\n            break\n    else:\n        if arr[-1] == 90 or arr[-1] + 15 >= 90:\n            print(90)\n        else:\n            print(arr[-1] + 15)", "effort_before": "1014.520693239985", "effort_after": "2963.585743123758", "difficulty_before": "5.833333333333333", "difficulty_after": "7.407407407407407", "calculated_length_before": "78.25484338853101", "calculated_length_after": "152.38196255841368", "length_before": "39", "length_after": "78", "vocabulary_before": "22", "vocabulary_after": "35", "mi_value_before": "57.72", "mi_value_after": "48.46", "Nloc_before": "14", "Nloc_after": "27", "AvgCCN_before": "7.0", "AvgCCN_after": "13.0"}, "codeforces_500_A": {"id": "codeforces_500_A", "language": "Python", "dataset": "Avatar", "pass_before": 0, "pass_after": 0, "filepath_before": "/home/yang/contamination/Avatar_Python_Before/codeforces_500_A.py", "filepath_after": "/home/yang/contamination/Avatar_Python_After/codeforces_500_A.py", "code_before": "import sys\nn, t = map(int, input().split())\ns = list([int(x) for x in input().split()])\ncurrent_cell = 0\nwhile current_cell <= t:\n    current_cell += s[current_cell - 1]\n    if current_cell == t:\n        print(\"YES\")\n        sys.exit()\n    else:\n        continue\nprint(\"NO\")\n", "code_after": "import sys\n(n, t) = map(int, input().split())\ns = list([int(x) for x in input().split()])\ncurrent_cell = 0\nrandom_inside_left_5 = 713\nrandom_inside_right_5 = 712\nrandom_outside_left_5 = 682\nrandom_outside_right_5 = 681\nfor loop_outside in range(random_outside_left_5 // random_outside_right_5):\n    while current_cell <= t:\n        for loop_inside in range(random_inside_left_5 % random_inside_right_5):\n            current_cell += s[current_cell - 1]\n            if current_cell == t:\n                print('YES')\n                sys.exit()\n            else:\n                continue\nprint('NO')", "effort_before": "144.0", "effort_after": "308.3957486866659", "difficulty_before": "4.0", "difficulty_after": "4.5", "calculated_length_before": "16.0", "calculated_length_after": "39.50977500432694", "length_before": "12", "length_after": "18", "vocabulary_before": "8", "vocabulary_after": "14", "mi_value_before": "64.27", "mi_value_after": "58.44", "Nloc_before": "12", "Nloc_after": "18", "AvgCCN_before": "4.0", "AvgCCN_after": "6.0"}, "codeforces_644_B": {"id": "codeforces_644_B", "language": "Python", "dataset": "Avatar", "pass_before": 0, "pass_after": 0, "filepath_before": "/home/yang/contamination/Avatar_Python_Before/codeforces_644_B.py", "filepath_after": "/home/yang/contamination/Avatar_Python_After/codeforces_644_B.py", "code_before": "import queue\nn, b = list(map(int, input().split()))\n\n\nclass Task:\n    def __init__(self, time: int, duration: int, index: int) -> None:\n        super().__init__()\n        self.time = time\n        self.duration = duration\n        self.index = index\n\n\nremaining = queue.Queue()\nrunning = False\nfinish_time = 0\n\n\ndef run_task(remaining: queue.Queue, finish_time: int):\n    task_to_run = remaining.get()\n    finish_time = max(finish_time, task_to_run.time) + task_to_run.duration\n    result[task_to_run.index] = finish_time\n    return finish_time, result\n\n\nresult = {}\nfor i in range(n):\n    time, duration = list(map(int, input().split()))\n    task = Task(time, duration, index=i)\n    result.update({i: 0})\n    if task.time > finish_time and remaining.empty():\n        running = True\n        finish_time = task.time + task.duration\n        result[i] = finish_time\n    else:\n        if task.time >= finish_time and not remaining.empty():\n            finish_time, result = run_task(\n                remaining=remaining, finish_time=finish_time)\n        if remaining.qsize() < b:\n            remaining.put(task)\n        else:\n            result[i] = - 1\nwhile not remaining.empty():\n    finish_time, result = run_task(\n        remaining=remaining, finish_time=finish_time)\nfor key in result:\n    print(result.get(key))\n", "code_after": "import queue\n(n, b) = list(map(int, input().split()))\n\nclass Task:\n\n    def __init__(self, time: int, duration: int, index: int) -> None:\n        super().__init__()\n        self.time = time\n        self.duration = duration\n        self.index = index\nremaining = queue.Queue()\nrunning = False\nfinish_time = 0\n\ndef run_task(remaining: queue.Queue, finish_time: int):\n    task_to_run = remaining.get()\n    finish_time = max(finish_time, task_to_run.time) + task_to_run.duration\n    result[task_to_run.index] = finish_time\n    return (finish_time, result)\nresult = {}\nrandom_inside_left_21 = 565\nrandom_inside_right_21 = 564\nrandom_outside_left_21 = 109\nrandom_outside_right_21 = 108\nrandom_inside_left_38 = 24\nrandom_inside_right_38 = 23\nrandom_outside_left_38 = 373\nrandom_outside_right_38 = 372\nfor loop_outside in range(random_outside_left_21 // random_outside_right_21):\n    for i in range(n):\n        for loop_inside in range(random_inside_left_21 % random_inside_right_21):\n            (time, duration) = list(map(int, input().split()))\n            task = Task(time, duration, index=i)\n            result.update({i: 0})\n            if task.time > finish_time and remaining.empty():\n                running = True\n                finish_time = task.time + task.duration\n                result[i] = finish_time\n            else:\n                if task.time >= finish_time and (not remaining.empty()):\n                    (finish_time, result) = run_task(remaining=remaining, finish_time=finish_time)\n                if remaining.qsize() < b:\n                    remaining.put(task)\n                else:\n                    result[i] = -1\nrandom_inside_left_46 = 214\nrandom_inside_right_46 = 213\nrandom_outside_left_46 = 99\nrandom_outside_right_46 = 98\nfor loop_outside in range(random_outside_left_46 // random_outside_right_46):\n    while not remaining.empty():\n        for loop_inside in range(random_inside_left_46 % random_inside_right_46):\n            (finish_time, result) = run_task(remaining=remaining, finish_time=finish_time)\nfor loop_outside in range(random_outside_left_38 // random_outside_right_38):\n    for key in result:\n        for loop_inside in range(random_inside_left_38 % random_inside_right_38):\n            print(result.get(key))", "effort_before": "504.0184242638628", "effort_after": "1158.5274814234351", "difficulty_before": "4.25", "difficulty_after": "5.019230769230769", "calculated_length_before": "72.95445336320968", "calculated_length_after": "150.74075768464922", "length_before": "27", "length_after": "45", "vocabulary_before": "21", "vocabulary_after": "35", "mi_value_before": "49.81", "mi_value_after": "43.30", "Nloc_before": "38", "Nloc_after": "54", "AvgCCN_before": "9.0", "AvgCCN_after": "15.0"}, "codeforces_32_B": {"id": "codeforces_32_B", "language": "Python", "dataset": "Avatar", "pass_before": 0, "pass_after": 0, "filepath_before": "/home/yang/contamination/Avatar_Python_Before/codeforces_32_B.py", "filepath_after": "/home/yang/contamination/Avatar_Python_After/codeforces_32_B.py", "code_before": "s = input()\nresult = \"\"\ni = 0\nwhile i < len(s):\n    if s[i] == \".\":\n        result += '0'\n    else:\n        i += 1\n        if s[i] == \".\":\n            result += '1'\n        else:\n            result += '2'\n    i += 1\nprint(result)\n", "code_after": "s = input()\nresult = ''\ni = 0\nrandom_inside_left_4 = 653\nrandom_inside_right_4 = 652\nrandom_outside_left_4 = 124\nrandom_outside_right_4 = 123\nfor loop_outside in range(random_outside_left_4 // random_outside_right_4):\n    while i < len(s):\n        for loop_inside in range(random_inside_left_4 % random_inside_right_4):\n            if s[i] == '.':\n                result += '0'\n            else:\n                i += 1\n                if s[i] == '.':\n                    result += '1'\n                else:\n                    result += '2'\n            i += 1\nprint(result)", "effort_before": "213.1453277649269", "effort_after": "455.13509072609844", "difficulty_before": "2.4", "difficulty_after": "3.5714285714285716", "calculated_length_before": "37.974168451037094", "calculated_length_after": "64.91260938324326", "length_before": "24", "length_after": "30", "vocabulary_before": "13", "vocabulary_after": "19", "mi_value_before": "60.16", "mi_value_after": "55.61", "Nloc_before": "14", "Nloc_after": "20", "AvgCCN_before": "4.0", "AvgCCN_after": "6.0"}, "codeforces_637_A": {"id": "codeforces_637_A", "language": "Python", "dataset": "Avatar", "pass_before": 0, "pass_after": 0, "filepath_before": "/home/yang/contamination/Avatar_Python_Before/codeforces_637_A.py", "filepath_after": "/home/yang/contamination/Avatar_Python_After/codeforces_637_A.py", "code_before": "from collections import Counter\nimport sys\ninput = sys.stdin.readline\nn = int(input())\ns = input()[: - 1].split()\nw = Counter(s)\ns = s[:: - 1]\nc, a = - 1, 0\nfor i in w:\n    if w[i] == max(w.values()):\n        if s.index(i) > c:\n            a = i\n            c = s.index(i)\nprint(a)\n", "code_after": "from collections import Counter\nimport sys\ninput = sys.stdin.readline\nn = int(input())\ns = input()[:-1].split()\nw = Counter(s)\ns = s[::-1]\n(c, a) = (-1, 0)\nrandom_inside_left_9 = 685\nrandom_inside_right_9 = 684\nrandom_outside_left_9 = 186\nrandom_outside_right_9 = 185\nfor loop_outside in range(random_outside_left_9 // random_outside_right_9):\n    for i in w:\n        for loop_inside in range(random_inside_left_9 % random_inside_right_9):\n            if w[i] == max(w.values()):\n                if s.index(i) > c:\n                    a = i\n                    c = s.index(i)\nprint(a)", "effort_before": "75.60000000000001", "effort_after": "209.4045207131682", "difficulty_before": "2.1", "difficulty_after": "3.0555555555555554", "calculated_length_before": "16.36452797660028", "calculated_length_after": "40.13896548741762", "length_before": "12", "length_after": "18", "vocabulary_before": "8", "vocabulary_after": "14", "mi_value_before": "61.72", "mi_value_after": "56.63", "Nloc_before": "14", "Nloc_after": "20", "AvgCCN_before": "4.0", "AvgCCN_after": "6.0"}, "atcoder_ABC164_A": {"id": "atcoder_ABC164_A", "language": "Python", "dataset": "Avatar", "pass_before": 0, "pass_after": 0, "filepath_before": "/home/yang/contamination/Avatar_Python_Before/atcoder_ABC164_A.py", "filepath_after": "/home/yang/contamination/Avatar_Python_After/atcoder_ABC164_A.py", "code_before": "import sys\n\n\ndef main():\n    S, W = map(int, input().split())\n    print(\"unsafe\") if (S <= W) else print(\"safe\")\n\n\nif __name__ == '__main__':\n    main()\n", "code_after": "import sys\n\ndef main():\n    (S, W) = map(int, input().split())\n    print('unsafe') if S <= W else print('safe')\nmain()", "effort_before": "15.509775004326936", "effort_after": "2.3774437510817346", "difficulty_before": "1.0", "difficulty_after": "0.5", "calculated_length_before": "10.0", "calculated_length_after": "2.0", "length_before": "6", "length_after": "3", "vocabulary_before": "6", "vocabulary_after": "3", "mi_value_before": "72.96", "mi_value_after": "78.15", "Nloc_before": "6", "Nloc_after": "5", "AvgCCN_before": "2.0", "AvgCCN_after": "1.0"}, "atcoder_ABC140_D": {"id": "atcoder_ABC140_D", "language": "Python", "dataset": "Avatar", "pass_before": 3, "pass_after": 0, "filepath_before": "/home/yang/contamination/Avatar_Python_Before/atcoder_ABC140_D.py", "filepath_after": "/home/yang/contamination/Avatar_Python_After/atcoder_ABC140_D.py", "code_before": "from collections import deque\nimport scipy\nimport numpy\nfrom _collections import deque\n\n\ndef parser():\n    while 1:\n        data = list(input().split(' '))\n        for number in data:\n            if len(number) > 0:\n                yield (number)\n\n\ninput_parser = parser()\n\n\ndef gw():\n    global input_parser\n    return next(input_parser)\n\n\ndef gi():\n    data = gw()\n    return int(data)\n\n\nMOD = int(1e9 + 7)\nN = gi()\nK = gi()\nS = gw()\nseg_cnt = 0\nfor i in range(0, N - 1):\n    if S[i] != S[i + 1]:\n        seg_cnt += 1\ncur_happy = N - 1 - seg_cnt\nif 2 * K >= seg_cnt:\n    ans = N - 1\nelse:\n    ans = cur_happy + 2 * K\nprint(ans)\n", "code_after": "from collections import deque\nimport scipy\nimport numpy\nfrom _collections import deque\n\ndef parser():\n    while 1:\n        data = list(input().split(' '))\n        for number in data:\n            if len(number) > 0:\n                yield number\ninput_parser = parser()\n\ndef gw():\n    global input_parser\n    return next(input_parser)\n\ndef gi():\n    data = gw()\n    return int(data)\nMOD = int(1000000000.0 + 7)\nN = gi()\nK = gi()\nS = gw()\nseg_cnt = 0\nrandom_inside_left_26 = 750\nrandom_inside_right_26 = 749\nrandom_outside_left_26 = 755\nrandom_outside_right_26 = 754\nfor loop_outside in range(random_outside_left_26 // random_outside_right_26):\n    for i in range(0, N - 1):\n        for loop_inside in range(random_inside_left_26 % random_inside_right_26):\n            if S[i] != S[i + 1]:\n                seg_cnt += 1\nvariable_1_35 = 1\ncur_happy = N - variable_1_35 - seg_cnt\nrandom_outside_if_left_36 = 482\nrandom_outside_if_right_36 = 481\nif random_outside_if_left_36 & random_outside_if_right_36:\n    if 2 * K >= seg_cnt:\n        ans = N - 1\n    else:\n        ans = cur_happy + 2 * K\nelse:\n    ans = cur_happy + 2 * K\nprint(ans)", "effort_before": "847.8494364934161", "effort_after": "1838.6816565061563", "difficulty_before": "4.875", "difficulty_after": "6.75", "calculated_length_before": "79.50977500432694", "calculated_length_after": "138.56842503028858", "length_before": "39", "length_after": "54", "vocabulary_before": "22", "vocabulary_after": "33", "mi_value_before": "50.94", "mi_value_after": "46.16", "Nloc_before": "31", "Nloc_after": "43", "AvgCCN_before": "4.0", "AvgCCN_after": "7.0"}, "atcoder_ABC174_E": {"id": "atcoder_ABC174_E", "language": "Python", "dataset": "Avatar", "pass_before": 0, "pass_after": 0, "filepath_before": "/home/yang/contamination/Avatar_Python_Before/atcoder_ABC174_E.py", "filepath_after": "/home/yang/contamination/Avatar_Python_After/atcoder_ABC174_E.py", "code_before": "def check(lis, k, mid):\n    for i in lis:\n        if (i % mid == 0):\n            k += 1\n        k -= (i // mid)\n    return k >= 0\n\n\nn, k = map(int, input().split())\nlis = list(map(int, input().split()))\na, b = 1, max(lis)\nans = b\nwhile (a <= b):\n    mid = (a + b) // 2\n    if (check(lis, k, mid)):\n        ans = mid\n        b = mid - 1\n    else:\n        a = mid + 1\nprint(ans)\n", "code_after": "def check(lis, k, mid):\n    for i in lis:\n        if i % mid == 0:\n            k += 1\n        k -= i // mid\n    return k >= 0\n(n, k) = map(int, input().split())\nlis = list(map(int, input().split()))\n(a, b) = (1, max(lis))\nans = b\nrandom_inside_left_11 = 941\nrandom_inside_right_11 = 940\nrandom_outside_left_11 = 573\nrandom_outside_right_11 = 572\nfor loop_outside in range(random_outside_left_11 // random_outside_right_11):\n    while a <= b:\n        for loop_inside in range(random_inside_left_11 % random_inside_right_11):\n            mid = (a + b) // 2\n            if check(lis, k, mid):\n                ans = mid\n                b = mid - 1\n            else:\n                a = mid + 1\nprint(ans)", "effort_before": "844.7707145468299", "effort_after": "957.1783479446697", "difficulty_before": "5.923076923076923", "difficulty_after": "5.352941176470588", "calculated_length_before": "67.75720079023742", "calculated_length_after": "89.13835275565901", "length_before": "33", "length_after": "39", "vocabulary_before": "20", "vocabulary_after": "24", "mi_value_before": "56.62", "mi_value_after": "53.06", "Nloc_before": "18", "Nloc_after": "24", "AvgCCN_before": "3.0", "AvgCCN_after": "5.0"}, "atcoder_AGC002_B": {"id": "atcoder_AGC002_B", "language": "Python", "dataset": "Avatar", "pass_before": 0, "pass_after": 0, "filepath_before": "/home/yang/contamination/Avatar_Python_Before/atcoder_AGC002_B.py", "filepath_after": "/home/yang/contamination/Avatar_Python_After/atcoder_AGC002_B.py", "code_before": "import sys\nimport re\nfrom collections import deque, defaultdict, Counter\nfrom math import ceil, sqrt, hypot, factorial, pi, sin, cos, radians\nfrom itertools import accumulate, permutations, combinations, product\nfrom operator import itemgetter, mul\nfrom copy import deepcopy\nfrom string import ascii_lowercase, ascii_uppercase, digits\nfrom bisect import bisect, bisect_left\nfrom fractions import gcd\nfrom heapq import heappush, heappop\nfrom functools import reduce\ndef input(): return sys.stdin.readline().strip()\ndef INT(): return int(input())\ndef MAP(): return map(int, input().split())\ndef LIST(): return list(map(int, input().split()))\ndef ZIP(n): return zip(* (MAP() for _ in range(n)))\n\n\nsys.setrecursionlimit(10 ** 9)\nINF = float('inf')\nmod = 10 ** 9 + 7\nN, M = MAP()\nballs = [[1, 0] for _ in range(N)]\nballs[0] = [0, 1]\nfor _ in range(M):\n    x, y = MAP()\n    w_x, r_x = balls[x - 1]\n    w_y, r_y = balls[y - 1]\n    if w_x >= 1 and r_x >= 1:\n        balls[x - 1][0] -= 1\n        balls[y - 1][1] += 1\n    elif w_x == 0:\n        balls[x - 1][1] -= 1\n        balls[y - 1][1] += 1\n    else:\n        balls[x - 1][0] -= 1\n        balls[y - 1][0] += 1\nans = 0\nfor i in range(N):\n    if balls[i][1]:\n        ans += 1\nprint(ans)\n", "code_after": "import sys\nimport re\nfrom collections import deque, defaultdict, Counter\nfrom math import ceil, sqrt, hypot, factorial, pi, sin, cos, radians\nfrom itertools import accumulate, permutations, combinations, product\nfrom operator import itemgetter, mul\nfrom copy import deepcopy\nfrom string import ascii_lowercase, ascii_uppercase, digits\nfrom bisect import bisect, bisect_left\nfrom fractions import gcd\nfrom heapq import heappush, heappop\nfrom functools import reduce\n\ndef input():\n    return sys.stdin.readline().strip()\n\ndef INT():\n    return int(input())\n\ndef MAP():\n    return map(int, input().split())\n\ndef LIST():\n    return list(map(int, input().split()))\n\ndef ZIP(n):\n    return zip(*(MAP() for _ in range(n)))\nsys.setrecursionlimit(10 ** 9)\nINF = float('inf')\nvariable_7_30 = 7\nvariable_10_30 = 10\nvariable_9_30 = 9\nmod = variable_10_30 ** variable_9_30 + variable_7_30\n(N, M) = MAP()\nballs = [[1, 0] for _ in range(N)]\nballs[0] = [0, 1]\nrandom_inside_left_34 = 667\nrandom_inside_right_34 = 666\nrandom_outside_left_34 = 695\nrandom_outside_right_34 = 694\nrandom_inside_left_48 = 860\nrandom_inside_right_48 = 859\nrandom_outside_left_48 = 884\nrandom_outside_right_48 = 883\nfor loop_outside in range(random_outside_left_34 // random_outside_right_34):\n    for _ in range(M):\n        for loop_inside in range(random_inside_left_34 % random_inside_right_34):\n            (x, y) = MAP()\n            (w_x, r_x) = balls[x - 1]\n            (w_y, r_y) = balls[y - 1]\n            if w_x >= 1 and r_x >= 1:\n                balls[x - 1][0] -= 1\n                balls[y - 1][1] += 1\n            elif w_x == 0:\n                balls[x - 1][1] -= 1\n                balls[y - 1][1] += 1\n            else:\n                balls[x - 1][0] -= 1\n                balls[y - 1][0] += 1\nans = 0\nfor loop_outside in range(random_outside_left_48 // random_outside_right_48):\n    for i in range(N):\n        for loop_inside in range(random_inside_left_48 % random_inside_right_48):\n            if balls[i][1]:\n                ans += 1\nprint(ans)", "effort_before": "2129.330269753548", "effort_after": "2914.4197035849684", "difficulty_before": "6.947368421052632", "difficulty_after": "7.172413793103448", "calculated_length_before": "96.22039775975506", "calculated_length_after": "164.8814488586996", "length_before": "66", "length_after": "78", "vocabulary_before": "25", "vocabulary_after": "37", "mi_value_before": "45.04", "mi_value_after": "41.02", "Nloc_before": "41", "Nloc_after": "61", "AvgCCN_before": "8.0", "AvgCCN_after": "12.0"}, "codeforces_412_A": {"id": "codeforces_412_A", "language": "Python", "dataset": "Avatar", "pass_before": 0, "pass_after": 0, "filepath_before": "/home/yang/contamination/Avatar_Python_Before/codeforces_412_A.py", "filepath_after": "/home/yang/contamination/Avatar_Python_After/codeforces_412_A.py", "code_before": "n, k = map(int, input().split())\nv = input()\nd = [\"LEFT\", \"RIGHT\"]\nf = k - 1 < n - k\nm = min(k - 1, n - k)\na = []\nfor i in range(0, m):\n    a.append(d[not f])\nfor i in v[:: - 1 + 2 * f]:\n    a.append(\"PRINT \" + i)\n    a.append(d[f])\nprint(* a[: - 1], sep=\"\\n\")\n", "code_after": "(n, k) = map(int, input().split())\nv = input()\nd = ['LEFT', 'RIGHT']\nf = k - 1 < n - k\nm = min(k - 1, n - k)\na = []\nrandom_inside_left_7 = 40\nrandom_inside_right_7 = 39\nrandom_outside_left_7 = 931\nrandom_outside_right_7 = 930\nrandom_inside_left_9 = 400\nrandom_inside_right_9 = 399\nrandom_outside_left_9 = 983\nrandom_outside_right_9 = 982\nfor loop_outside in range(random_outside_left_7 // random_outside_right_7):\n    for i in range(0, m):\n        for loop_inside in range(random_inside_left_7 % random_inside_right_7):\n            a.append(d[not f])\nfor loop_outside in range(random_outside_left_9 // random_outside_right_9):\n    for i in v[::-1 + 2 * f]:\n        for loop_inside in range(random_inside_left_9 % random_inside_right_9):\n            a.append('PRINT ' + i)\n            a.append(d[f])\nprint(*a[:-1], sep='\\n')", "effort_before": "635.4146780489165", "effort_after": "1135.1668268322892", "difficulty_before": "5.181818181818182", "difficulty_after": "5.684210526315789", "calculated_length_before": "53.563522809337215", "calculated_length_after": "104.71062275542812", "length_before": "30", "length_after": "42", "vocabulary_before": "17", "vocabulary_after": "27", "mi_value_before": "59.97", "mi_value_after": "52.08", "Nloc_before": "12", "Nloc_after": "24", "AvgCCN_before": "3.0", "AvgCCN_after": "7.0"}, "codeforces_421_A": {"id": "codeforces_421_A", "language": "Python", "dataset": "Avatar", "pass_before": 0, "pass_after": 0, "filepath_before": "/home/yang/contamination/Avatar_Python_Before/codeforces_421_A.py", "filepath_after": "/home/yang/contamination/Avatar_Python_After/codeforces_421_A.py", "code_before": "n, a, b = [int(x) for x in input().split(\" \")]\nlista = [int(x) for x in input().split(\" \")]\nlistb = [int(x) for x in input().split(\" \")]\nfor k in range(n):\n    if k + 1 in lista:\n        print(1, end=\" \")\n    else:\n        print(2, end=\" \")\n", "code_after": "(n, a, b) = [int(x) for x in input().split(' ')]\nlista = [int(x) for x in input().split(' ')]\nlistb = [int(x) for x in input().split(' ')]\nrandom_inside_left_4 = 257\nrandom_inside_right_4 = 256\nrandom_outside_left_4 = 254\nrandom_outside_right_4 = 253\nfor loop_outside in range(random_outside_left_4 // random_outside_right_4):\n    for k in range(n):\n        for loop_inside in range(random_inside_left_4 % random_inside_right_4):\n            if k + 1 in lista:\n                print(1, end=' ')\n            else:\n                print(2, end=' ')", "effort_before": "15.509775004326936", "effort_after": "86.03910001730776", "difficulty_before": "1.0", "difficulty_after": "2.0", "calculated_length_before": "10.0", "calculated_length_after": "32.0", "length_before": "6", "length_after": "12", "vocabulary_before": "6", "vocabulary_after": "12", "mi_value_before": "70.04", "mi_value_after": "61.83", "Nloc_before": "8", "Nloc_after": "14", "AvgCCN_before": "6.0", "AvgCCN_after": "8.0"}, "codeforces_8_B": {"id": "codeforces_8_B", "language": "Python", "dataset": "Avatar", "pass_before": 0, "pass_after": 0, "filepath_before": "/home/yang/contamination/Avatar_Python_Before/codeforces_8_B.py", "filepath_after": "/home/yang/contamination/Avatar_Python_After/codeforces_8_B.py", "code_before": "record_of_movements = input()\nx, y = 0, 0\nd_movement = {'L': (0, - 1), 'R': (0, 1), 'U': (1, 0), 'D': (- 1, 0)}\nd = {(x, y): ''}\nbug = False\nfor move in record_of_movements:\n    temp = (x, y)\n    x += d_movement[move][0]\n    y += d_movement[move][1]\n    if (x, y) not in d:\n        for step in d_movement:\n            if (x + d_movement[step][0], y + d_movement[step][1]) != temp and (x + d_movement[step][0], y + d_movement[step][1]) in d:\n                bug = True\n                break\n    else:\n        bug = True\n    if bug:\n        break\n    d[x, y] = ''\nif bug:\n    print('BUG')\nelse:\n    print('OK')\n", "code_after": "record_of_movements = input()\n(x, y) = (0, 0)\nd_movement = {'L': (0, -1), 'R': (0, 1), 'U': (1, 0), 'D': (-1, 0)}\nd = {(x, y): ''}\nbug = False\nrandom_inside_left_6 = 999\nrandom_inside_right_6 = 998\nrandom_outside_left_6 = 305\nrandom_outside_right_6 = 304\nfor loop_outside in range(random_outside_left_6 // random_outside_right_6):\n    for move in record_of_movements:\n        for loop_inside in range(random_inside_left_6 % random_inside_right_6):\n            temp = (x, y)\n            x += d_movement[move][0]\n            y += d_movement[move][1]\n            if (x, y) not in d:\n                for step in d_movement:\n                    if (x + d_movement[step][0], y + d_movement[step][1]) != temp and (x + d_movement[step][0], y + d_movement[step][1]) in d:\n                        bug = True\n                        break\n            else:\n                bug = True\n            if bug:\n                break\n            d[x, y] = ''\nrandom_outside_if_left_26 = 491\nrandom_outside_if_right_26 = 490\nif random_outside_if_left_26 & random_outside_if_right_26:\n    if bug:\n        print('BUG')\n    else:\n        print('OK')\nelse:\n    print('OK')", "effort_before": "625.4352845138809", "effort_after": "1220.0834368034589", "difficulty_before": "4.125", "difficulty_after": "5.7272727272727275", "calculated_length_before": "79.50977500432694", "calculated_length_after": "126.63682062300134", "length_before": "34", "length_after": "43", "vocabulary_before": "22", "vocabulary_after": "31", "mi_value_before": "52.79", "mi_value_after": "48.01", "Nloc_before": "23", "Nloc_after": "34", "AvgCCN_before": "8.0", "AvgCCN_after": "11.0"}, "codeforces_7_B": {"id": "codeforces_7_B", "language": "Python", "dataset": "Avatar", "pass_before": 0, "pass_after": 0, "filepath_before": "/home/yang/contamination/Avatar_Python_Before/codeforces_7_B.py", "filepath_after": "/home/yang/contamination/Avatar_Python_After/codeforces_7_B.py", "code_before": "t, m = map(int, input().split())\nalocuente = [0] * m\nind = 1\nfor i in range(t):\n    op = input().split()\n    if op[0] == 'alloc':\n        pos = 0\n        for j in range(m):\n            if alocuente[j] == 0:\n                pos += 1\n                if pos == int(op[1]):\n                    alocuente[j - int(op[1]) + 1: j + 1] = [ind] * int(op[1])\n                    print(ind)\n                    ind += 1\n                    break\n            else:\n                pos = 0\n        else:\n            print(\"NULL\")\n    if op[0] == 'erase':\n        pos = 0\n        if int(op[1]) not in alocuente or int(op[1]) == 0:\n            print('ILLEGAL_ERASE_ARGUMENT')\n        else:\n            for j in range(m):\n                if int(op[1]) > 0 and alocuente[j] == int(op[1]):\n                    alocuente[j] = 0\n    if op[0] == \"defragment\":\n        cnt = 0\n        cnt = alocuente.count(0)\n        alocuente = [j for j in alocuente if j != 0]\n        for j in range(cnt):\n            alocuente.append(0)\n", "code_after": "(t, m) = map(int, input().split())\nvariable_0_2 = 0\nalocuente = [variable_0_2] * m\nind = 1\nrandom_inside_left_4 = 597\nrandom_inside_right_4 = 596\nrandom_outside_left_4 = 489\nrandom_outside_right_4 = 488\nfor loop_outside in range(random_outside_left_4 // random_outside_right_4):\n    for i in range(t):\n        for loop_inside in range(random_inside_left_4 % random_inside_right_4):\n            op = input().split()\n            if op[0] == 'alloc':\n                pos = 0\n                for j in range(m):\n                    if alocuente[j] == 0:\n                        pos += 1\n                        if pos == int(op[1]):\n                            alocuente[j - int(op[1]) + 1:j + 1] = [ind] * int(op[1])\n                            print(ind)\n                            ind += 1\n                            break\n                    else:\n                        pos = 0\n                else:\n                    print('NULL')\n            if op[0] == 'erase':\n                pos = 0\n                if int(op[1]) not in alocuente or int(op[1]) == 0:\n                    print('ILLEGAL_ERASE_ARGUMENT')\n                else:\n                    for j in range(m):\n                        if int(op[1]) > 0 and alocuente[j] == int(op[1]):\n                            alocuente[j] = 0\n            if op[0] == 'defragment':\n                cnt = 0\n                cnt = alocuente.count(0)\n                alocuente = [j for j in alocuente if j != 0]\n                for j in range(cnt):\n                    alocuente.append(0)", "effort_before": "1763.8465335701594", "effort_after": "2407.609343819048", "difficulty_before": "5.896551724137931", "difficulty_after": "7.0", "calculated_length_before": "169.41077387168042", "calculated_length_after": "204.51875374383923", "length_before": "57", "length_after": "63", "vocabulary_before": "38", "vocabulary_after": "44", "mi_value_before": "46.70", "mi_value_after": "44.27", "Nloc_before": "33", "Nloc_after": "40", "AvgCCN_before": "17.0", "AvgCCN_after": "19.0"}, "codeforces_474_B": {"id": "codeforces_474_B", "language": "Python", "dataset": "Avatar", "pass_before": 0, "pass_after": 0, "filepath_before": "/home/yang/contamination/Avatar_Python_Before/codeforces_474_B.py", "filepath_after": "/home/yang/contamination/Avatar_Python_After/codeforces_474_B.py", "code_before": "L = []\ninput()\nr = 1\nfor k in input().split():\n    L += [r] * int(k)\n    r += 1\ninput()\nfor j in input().split():\n    print(L[int(j) - 1])\n", "code_after": "L = []\ninput()\nr = 1\nrandom_inside_left_4 = 670\nrandom_inside_right_4 = 669\nrandom_outside_left_4 = 26\nrandom_outside_right_4 = 25\nrandom_inside_left_8 = 878\nrandom_inside_right_8 = 877\nrandom_outside_left_8 = 567\nrandom_outside_right_8 = 566\nfor loop_outside in range(random_outside_left_4 // random_outside_right_4):\n    for k in input().split():\n        for loop_inside in range(random_inside_left_4 % random_inside_right_4):\n            L += [r] * int(k)\n            r += 1\ninput()\nfor loop_outside in range(random_outside_left_8 // random_outside_right_8):\n    for j in input().split():\n        for loop_inside in range(random_inside_left_8 % random_inside_right_8):\n            print(L[int(j) - 1])", "effort_before": "68.33680652339717", "effort_after": "276.6033980727912", "difficulty_before": "1.7142857142857142", "difficulty_after": "2.6666666666666665", "calculated_length_before": "24.406371956566698", "calculated_length_after": "70.2129994085646", "length_before": "12", "length_after": "24", "vocabulary_before": "10", "vocabulary_after": "20", "mi_value_before": "66.58", "mi_value_after": "55.66", "Nloc_before": "9", "Nloc_after": "21", "AvgCCN_before": "3.0", "AvgCCN_after": "7.0"}, "atcoder_ABC125_C": {"id": "atcoder_ABC125_C", "language": "Python", "dataset": "Avatar", "pass_before": 2, "pass_after": 2, "filepath_before": "/home/yang/contamination/Avatar_Python_Before/atcoder_ABC125_C.py", "filepath_after": "/home/yang/contamination/Avatar_Python_After/atcoder_ABC125_C.py", "code_before": "def gcd(a: int, b: int) -> int:\n    if b == 0:\n        return a\n    return gcd(b, a % b)\n\n\ndef ruiseki_lr(array):\n    def op(a, b): return gcd(a, b)\n    e = 0\n    n = len(array)\n    left = [e] * (n + 1)\n    right = [e] * (n + 1)\n    for i in range(n):\n        left[i + 1] = op(left[i], array[i])\n    for i in reversed(range(n)):\n        right[i] = op(right[i + 1], array[i])\n    return left, right\n\n\nn = int(input())\na = list(map(int, input().split()))\nleft, right = ruiseki_lr(a)\nans = 0\nfor i in range(n):\n    ans = max(gcd(left[i], right[i + 1]), ans)\nprint(ans)\n", "code_after": "def gcd(a: int, b: int) -> int:\n    if b == 0:\n        return a\n    return gcd(b, a % b)\n\ndef ruiseki_lr(array):\n\n    def op(a, b):\n        return gcd(a, b)\n    e = 0\n    n = len(array)\n    left = [e] * (n + 1)\n    right = [e] * (n + 1)\n    for i in range(n):\n        left[i + 1] = op(left[i], array[i])\n    for i in reversed(range(n)):\n        right[i] = op(right[i + 1], array[i])\n    return (left, right)\nn = int(input())\na = list(map(int, input().split()))\n(left, right) = ruiseki_lr(a)\nans = 0\nrandom_inside_left_23 = 648\nrandom_inside_right_23 = 647\nrandom_outside_left_23 = 637\nrandom_outside_right_23 = 636\nfor loop_outside in range(random_outside_left_23 // random_outside_right_23):\n    for i in range(n):\n        for loop_inside in range(random_inside_left_23 % random_inside_right_23):\n            ans = max(gcd(left[i], right[i + 1]), ans)\nprint(ans)", "effort_before": "324.0", "effort_after": "498.2535076464657", "difficulty_before": "3.0", "difficulty_after": "3.4375", "calculated_length_before": "51.01955000865388", "calculated_length_after": "75.60964047443682", "length_before": "27", "length_after": "33", "vocabulary_before": "16", "vocabulary_after": "21", "mi_value_before": "55.39", "mi_value_after": "52.11", "Nloc_before": "22", "Nloc_after": "29", "AvgCCN_before": "2.0", "AvgCCN_after": "4.0"}, "atcoder_AGC002_A": {"id": "atcoder_AGC002_A", "language": "Python", "dataset": "Avatar", "pass_before": 0, "pass_after": 0, "filepath_before": "/home/yang/contamination/Avatar_Python_Before/atcoder_AGC002_A.py", "filepath_after": "/home/yang/contamination/Avatar_Python_After/atcoder_AGC002_A.py", "code_before": "import bisect\nimport collections\nimport copy\nimport heapq\nimport itertools\nimport math\nimport numpy\nimport string\nimport sys\ndef S(): return sys.stdin.readline().rstrip()\ndef I(): return int(sys.stdin.readline().rstrip())\ndef LI(): return list(map(int, sys.stdin.readline().rstrip().split()))\ndef LS(): return list(sys.stdin.readline().rstrip().split())\n\n\na, b = LI()\nif a > 0:\n    print('Positive')\nelif a <= 0 and b >= 0:\n    print('Zero')\nelse:\n    if (a + b) % 2 == 0:\n        print('Negative')\n    else:\n        print('Positive')\n", "code_after": "import bisect\nimport collections\nimport copy\nimport heapq\nimport itertools\nimport math\nimport numpy\nimport string\nimport sys\n\ndef S():\n    return sys.stdin.readline().rstrip()\n\ndef I():\n    return int(sys.stdin.readline().rstrip())\n\ndef LI():\n    return list(map(int, sys.stdin.readline().rstrip().split()))\n\ndef LS():\n    return list(sys.stdin.readline().rstrip().split())\n(a, b) = LI()\nrandom_outside_if_left_23 = 669\nrandom_outside_if_right_23 = 668\nif random_outside_if_left_23 & random_outside_if_right_23:\n    if a > 0:\n        print('Positive')\n    elif a <= 0 and b >= 0:\n        print('Zero')\n    elif (a + b) % 2 == 0:\n        print('Negative')\n    else:\n        print('Positive')\nelif a <= 0 and b >= 0:\n    print('Zero')\nelif (a + b) % 2 == 0:\n    print('Negative')\nelse:\n    print('Positive')", "effort_before": "502.52380286014574", "effort_after": "1498.3690238621318", "difficulty_before": "6.125", "difficulty_after": "8.0", "calculated_length_before": "43.65148445440323", "calculated_length_after": "77.30296890880645", "length_before": "21", "length_after": "42", "vocabulary_before": "15", "vocabulary_after": "22", "mi_value_before": "54.36", "mi_value_after": "48.93", "Nloc_before": "23", "Nloc_after": "35", "AvgCCN_before": "5.0", "AvgCCN_after": "9.0"}, "codeforces_387_B": {"id": "codeforces_387_B", "language": "Python", "dataset": "Avatar", "pass_before": 0, "pass_after": 0, "filepath_before": "/home/yang/contamination/Avatar_Python_Before/codeforces_387_B.py", "filepath_after": "/home/yang/contamination/Avatar_Python_After/codeforces_387_B.py", "code_before": "def main():\n    n, m = [int(i) for i in input().split()]\n    round_complexity = [int(i) for i in input().split()]\n    george_complexity = [int(i) for i in input().split()]\n    i = j = 0\n    while (i < n and j < m):\n        i += 1 * (round_complexity[i] <= george_complexity[j])\n        j += 1\n    print(n - i)\n\n\nif __name__ == '__main__':\n    main()\n", "code_after": "def main():\n    (n, m) = [int(i) for i in input().split()]\n    round_complexity = [int(i) for i in input().split()]\n    george_complexity = [int(i) for i in input().split()]\n    i = j = 0\n    while i < n and j < m:\n        i += 1 * (round_complexity[i] <= george_complexity[j])\n        j += 1\n    print(n - i)\nmain()", "effort_before": "565.5076684156464", "effort_after": "428.06883573821744", "difficulty_before": "4.846153846153846", "difficulty_after": "4.363636363636363", "calculated_length_before": "67.75720079023742", "calculated_length_after": "53.563522809337215", "length_before": "27", "length_after": "24", "vocabulary_before": "20", "vocabulary_after": "17", "mi_value_before": "61.72", "mi_value_after": "63.20", "Nloc_before": "11", "Nloc_after": "10", "AvgCCN_before": "2.0", "AvgCCN_after": "1.0"}, "codeforces_459_B": {"id": "codeforces_459_B", "language": "Python", "dataset": "Avatar", "pass_before": 0, "pass_after": 0, "filepath_before": "/home/yang/contamination/Avatar_Python_Before/codeforces_459_B.py", "filepath_after": "/home/yang/contamination/Avatar_Python_After/codeforces_459_B.py", "code_before": "n = int(input())\nl1 = list(map(int, input().split()))\nl1.sort()\na = l1[- 1]\nb = l1[0]\nif a == b:\n    print(a - b, (n) * (n - 1) // 2)\nelse:\n    ac = l1.count(a)\n    bc = l1.count(b)\n    print(a - b, ac * bc)\n", "code_after": "n = int(input())\nl1 = list(map(int, input().split()))\nl1.sort()\na = l1[-1]\nb = l1[0]\nrandom_outside_if_left_6 = 304\nrandom_outside_if_right_6 = 303\nif random_outside_if_left_6 & random_outside_if_right_6:\n    if a == b:\n        print(a - b, n * (n - 1) // 2)\n    else:\n        ac = l1.count(a)\n        bc = l1.count(b)\n        print(a - b, ac * bc)\nelse:\n    ac = l1.count(a)\n    bc = l1.count(b)\n    print(a - b, ac * bc)", "effort_before": "364.87151336385375", "effort_after": "749.1204625418806", "difficulty_before": "4.166666666666667", "difficulty_after": "5.7272727272727275", "calculated_length_before": "40.13896548741762", "calculated_length_after": "53.563522809337215", "length_before": "23", "length_after": "32", "vocabulary_before": "14", "vocabulary_after": "17", "mi_value_before": "62.59", "mi_value_after": "56.88", "Nloc_before": "11", "Nloc_after": "18", "AvgCCN_before": "2.0", "AvgCCN_after": "3.0"}, "atcoder_AGC017_A": {"id": "atcoder_AGC017_A", "language": "Python", "dataset": "Avatar", "pass_before": 0, "pass_after": 0, "filepath_before": "/home/yang/contamination/Avatar_Python_Before/atcoder_AGC017_A.py", "filepath_after": "/home/yang/contamination/Avatar_Python_After/atcoder_AGC017_A.py", "code_before": "N, P = map(int, input().split())\n\n\ndef combi(N, K):\n    a = 1\n    for i in range(K):\n        a *= N - i\n    for j in range(K):\n        a /= j + 1\n    return a\n\n\nans = 0\nlis = list(map(int, input().split()))\nls = []\nfor a in lis:\n    ls.append(a % 2)\none = ls.count(1)\nzero = ls.count(0)\npattern_a = 0\npattern_b = 0\nfor j in range(zero + 1):\n    pattern_b += combi(zero, j)\ntime = 0\nwhile time <= one:\n    if time % 2 == P:\n        pattern_a += combi(one, time)\n    time += 1\nprint(int(pattern_a * pattern_b))\n", "code_after": "(N, P) = map(int, input().split())\n\ndef combi(N, K):\n    a = 1\n    for i in range(K):\n        a *= N - i\n    for j in range(K):\n        a /= j + 1\n    return a\nans = 0\nlis = list(map(int, input().split()))\nls = []\nrandom_inside_left_13 = 563\nrandom_inside_right_13 = 562\nrandom_outside_left_13 = 326\nrandom_outside_right_13 = 325\nrandom_inside_left_19 = 31\nrandom_inside_right_19 = 30\nrandom_outside_left_19 = 799\nrandom_outside_right_19 = 798\nfor loop_outside in range(random_outside_left_13 // random_outside_right_13):\n    for a in lis:\n        for loop_inside in range(random_inside_left_13 % random_inside_right_13):\n            ls.append(a % 2)\none = ls.count(1)\nzero = ls.count(0)\npattern_a = 0\npattern_b = 0\nfor loop_outside in range(random_outside_left_19 // random_outside_right_19):\n    for j in range(zero + 1):\n        for loop_inside in range(random_inside_left_19 % random_inside_right_19):\n            pattern_b += combi(zero, j)\ntime = 0\nrandom_inside_left_34 = 587\nrandom_inside_right_34 = 586\nrandom_outside_left_34 = 961\nrandom_outside_right_34 = 960\nfor loop_outside in range(random_outside_left_34 // random_outside_right_34):\n    while time <= one:\n        for loop_inside in range(random_inside_left_34 % random_inside_right_34):\n            if time % 2 == P:\n                pattern_a += combi(one, time)\n            time += 1\nprint(int(pattern_a * pattern_b))", "effort_before": "877.9926610359337", "effort_after": "1477.1846717491135", "difficulty_before": "4.7894736842105265", "difficulty_after": "4.903225806451613", "calculated_length_before": "100.36210720983135", "calculated_length_after": "177.58008562199316", "length_before": "39", "length_after": "57", "vocabulary_before": "26", "vocabulary_after": "39", "mi_value_before": "52.61", "mi_value_after": "45.31", "Nloc_before": "25", "Nloc_after": "43", "AvgCCN_before": "5.0", "AvgCCN_after": "11.0"}, "atcoder_AGC010_B": {"id": "atcoder_AGC010_B", "language": "Python", "dataset": "Avatar", "pass_before": 0, "pass_after": 0, "filepath_before": "/home/yang/contamination/Avatar_Python_Before/atcoder_AGC010_B.py", "filepath_after": "/home/yang/contamination/Avatar_Python_After/atcoder_AGC010_B.py", "code_before": "n, a = int(input()), list(map(int, input().split()))\nif sum(a) % (n * (n + 1) / 2):\n    print(\"NO\")\nelse:\n    k = sum(a) / (n * (n + 1) / 2)\n    a += [a[0]]\n    if sum([(k - i + j) % n for i, j in zip(a[1:], a)]) or sum([(k - i + j) / n >= 0 for i, j in zip(a[1:], a)]) != n:\n        print(\"NO\")\n    else:\n        print(\"YES\")\n", "code_after": "(n, a) = (int(input()), list(map(int, input().split())))\nrandom_outside_if_left_2 = 443\nrandom_outside_if_right_2 = 442\nif random_outside_if_left_2 & random_outside_if_right_2:\n    if sum(a) % (n * (n + 1) / 2):\n        print('NO')\n    else:\n        k = sum(a) / (n * (n + 1) / 2)\n        a += [a[0]]\n        if sum([(k - i + j) % n for (i, j) in zip(a[1:], a)]) or sum([(k - i + j) / n >= 0 for (i, j) in zip(a[1:], a)]) != n:\n            print('NO')\n        else:\n            print('YES')\nelse:\n    k = sum(a) / (n * (n + 1) / 2)\n    a += [a[0]]\n    if sum([(k - i + j) % n for (i, j) in zip(a[1:], a)]) or sum([(k - i + j) / n >= 0 for (i, j) in zip(a[1:], a)]) != n:\n        print('NO')\n    else:\n        print('YES')", "effort_before": "1569.0083468852533", "effort_after": "4127.232838662987", "difficulty_before": "5.76", "difficulty_after": "7.425", "calculated_length_before": "140.0964047443681", "calculated_length_after": "241.40644880847532", "length_before": "54", "length_after": "99", "vocabulary_before": "33", "vocabulary_after": "49", "mi_value_before": "59.42", "mi_value_after": "50.46", "Nloc_before": "10", "Nloc_after": "20", "AvgCCN_before": "6.0", "AvgCCN_after": "11.0"}, "atcoder_ABC134_E": {"id": "atcoder_ABC134_E", "language": "Python", "dataset": "Avatar", "pass_before": 2, "pass_after": 1, "filepath_before": "/home/yang/contamination/Avatar_Python_Before/atcoder_ABC134_E.py", "filepath_after": "/home/yang/contamination/Avatar_Python_After/atcoder_ABC134_E.py", "code_before": "def binary_search(key):\n    bad, good = - 1, len(ans)\n    while good - bad > 1:\n        mid = (bad + good) // 2\n        if ans[mid][- 1] < key:\n            good = mid\n        else:\n            bad = mid\n    return good\n\n\nN = int(input())\nans = []\nfor _ in range(N):\n    A = int(input())\n    idx = binary_search(A)\n    if idx == len(ans):\n        ans.append([A])\n    else:\n        ans[idx].append(A)\nprint(len(ans))\n", "code_after": "def binary_search(key):\n    (bad, good) = (-1, len(ans))\n    while good - bad > 1:\n        mid = (bad + good) // 2\n        if ans[mid][-1] < key:\n            good = mid\n        else:\n            bad = mid\n    return good\nN = int(input())\nans = []\nrandom_inside_left_12 = 681\nrandom_inside_right_12 = 680\nrandom_outside_left_12 = 659\nrandom_outside_right_12 = 658\nfor loop_outside in range(random_outside_left_12 // random_outside_right_12):\n    for _ in range(N):\n        for loop_inside in range(random_inside_left_12 % random_inside_right_12):\n            A = int(input())\n            idx = binary_search(A)\n            if idx == len(ans):\n                ans.append([A])\n            else:\n                ans[idx].append(A)\nprint(len(ans))", "effort_before": "440.6284942867867", "effort_after": "642.1581530837709", "difficulty_before": "4.9", "difficulty_after": "5.142857142857143", "calculated_length_before": "52.87076540327685", "calculated_length_after": "77.30296890880645", "length_before": "22", "length_after": "28", "vocabulary_before": "17", "vocabulary_after": "22", "mi_value_before": "57.53", "mi_value_after": "53.78", "Nloc_before": "19", "Nloc_after": "25", "AvgCCN_before": "3.0", "AvgCCN_after": "5.0"}, "codeforces_134_A": {"id": "codeforces_134_A", "language": "Python", "dataset": "Avatar", "pass_before": 0, "pass_after": 0, "filepath_before": "/home/yang/contamination/Avatar_Python_Before/codeforces_134_A.py", "filepath_after": "/home/yang/contamination/Avatar_Python_After/codeforces_134_A.py", "code_before": "import sys\ninput = sys.stdin.readline\nn = int(input())\nw = list(map(int, input().split()))\nx = sum(w)\nd = []\nfor i in range(n):\n    if (x - w[i]) / (n - 1) == w[i]:\n        d.append(i + 1)\nprint(len(d))\nprint(' '.join(map(str, d)))\n", "code_after": "import sys\ninput = sys.stdin.readline\nn = int(input())\nw = list(map(int, input().split()))\nx = sum(w)\nd = []\nrandom_inside_left_7 = 187\nrandom_inside_right_7 = 186\nrandom_outside_left_7 = 477\nrandom_outside_right_7 = 476\nfor loop_outside in range(random_outside_left_7 // random_outside_right_7):\n    for i in range(n):\n        for loop_inside in range(random_inside_left_7 % random_inside_right_7):\n            if (x - w[i]) / (n - 1) == w[i]:\n                d.append(i + 1)\nprint(len(d))\nprint(' '.join(map(str, d)))", "effort_before": "123.34799060470309", "effort_after": "288.20554360440326", "difficulty_before": "2.2222222222222223", "difficulty_after": "3.230769230769231", "calculated_length_before": "36.52932501298081", "calculated_length_after": "63.61549134016113", "length_before": "15", "length_after": "21", "vocabulary_before": "13", "vocabulary_after": "19", "mi_value_before": "63.84", "mi_value_after": "58.29", "Nloc_before": "11", "Nloc_after": "17", "AvgCCN_before": "3.0", "AvgCCN_after": "5.0"}, "atcoder_AGC013_A": {"id": "atcoder_AGC013_A", "language": "Python", "dataset": "Avatar", "pass_before": 0, "pass_after": 0, "filepath_before": "/home/yang/contamination/Avatar_Python_Before/atcoder_AGC013_A.py", "filepath_after": "/home/yang/contamination/Avatar_Python_After/atcoder_AGC013_A.py", "code_before": "import sys\nimport re\nfrom collections import deque, defaultdict, Counter\nfrom math import ceil, sqrt, hypot, factorial, pi, sin, cos, radians\nfrom itertools import groupby, accumulate, permutations, combinations, product\nfrom operator import itemgetter, mul\nfrom copy import deepcopy\nfrom string import ascii_lowercase, ascii_uppercase, digits\nfrom bisect import bisect, bisect_left\nfrom fractions import gcd\nfrom heapq import heappush, heappop\nfrom functools import reduce\ndef input(): return sys.stdin.readline().strip()\ndef INT(): return int(input())\ndef MAP(): return map(int, input().split())\ndef LIST(): return list(map(int, input().split()))\ndef ZIP(n): return zip(* (MAP() for _ in range(n)))\n\n\nsys.setrecursionlimit(10 ** 9)\nINF = float('inf')\nmod = 10 ** 9 + 7\nN = INT()\nA = LIST()\nA = [k for k, g in groupby(A)]\nN = len(A)\ni = 1\nans = 0\nwhile i < N - 1:\n    if A[i - 1] < A[i] > A[i + 1] or A[i - 1] > A[i] < A[i + 1]:\n        ans += 1\n        i += 1\n    i += 1\nprint(ans + 1)\n", "code_after": "import sys\nimport re\nfrom collections import deque, defaultdict, Counter\nfrom math import ceil, sqrt, hypot, factorial, pi, sin, cos, radians\nfrom itertools import groupby, accumulate, permutations, combinations, product\nfrom operator import itemgetter, mul\nfrom copy import deepcopy\nfrom string import ascii_lowercase, ascii_uppercase, digits\nfrom bisect import bisect, bisect_left\nfrom fractions import gcd\nfrom heapq import heappush, heappop\nfrom functools import reduce\n\ndef input():\n    return sys.stdin.readline().strip()\n\ndef INT():\n    return int(input())\n\ndef MAP():\n    return map(int, input().split())\n\ndef LIST():\n    return list(map(int, input().split()))\n\ndef ZIP(n):\n    return zip(*(MAP() for _ in range(n)))\nsys.setrecursionlimit(10 ** 9)\nINF = float('inf')\nvariable_7_30 = 7\nvariable_10_30 = 10\nvariable_9_30 = 9\nmod = variable_10_30 ** variable_9_30 + variable_7_30\nN = INT()\nA = LIST()\nA = [k for (k, g) in groupby(A)]\nN = len(A)\ni = 1\nans = 0\nrandom_inside_left_37 = 703\nrandom_inside_right_37 = 702\nrandom_outside_left_37 = 311\nrandom_outside_right_37 = 310\nfor loop_outside in range(random_outside_left_37 // random_outside_right_37):\n    while i < N - 1:\n        for loop_inside in range(random_inside_left_37 % random_inside_right_37):\n            if A[i - 1] < A[i] > A[i + 1] or A[i - 1] > A[i] < A[i + 1]:\n                ans += 1\n                i += 1\n            i += 1\nprint(ans + 1)", "effort_before": "1411.3513302897882", "effort_after": "1898.9649857552479", "difficulty_before": "6.0", "difficulty_after": "6.608695652173913", "calculated_length_before": "84.99664330558272", "calculated_length_after": "128.0419249893113", "length_before": "52", "length_after": "58", "vocabulary_before": "23", "vocabulary_after": "31", "mi_value_before": "48.26", "mi_value_after": "45.37", "Nloc_before": "32", "Nloc_after": "46", "AvgCCN_before": "5.0", "AvgCCN_after": "7.0"}, "atcoder_AGC005_B": {"id": "atcoder_AGC005_B", "language": "Python", "dataset": "Avatar", "pass_before": 0, "pass_after": 0, "filepath_before": "/home/yang/contamination/Avatar_Python_Before/atcoder_AGC005_B.py", "filepath_after": "/home/yang/contamination/Avatar_Python_After/atcoder_AGC005_B.py", "code_before": "def root(x): return x if par[x] == x else root(par[x])\ndef same(x, y): return root(x) == root(y)\n\n\ndef unite(* z):\n    x, y = map(root, z)\n    if x != y:\n        if rank[x] < rank[y]:\n            par[x] = y\n            size[y] += size[x]\n        else:\n            par[y] = x\n            size[x] += size[y]\n            if rank[x] == rank[y]:\n                rank[x] += 1\n\n\nn, * a = map(int, open(0).read().split())\n* par, = range(n)\nrank = [1] * n\nsize = [1] * n\nb = [0] * n\nfor i, t in enumerate(a):\n    b[t - 1] = i\nc = 0\nfor k in b[:: - 1]:\n    l = r = 1\n    if k > 0 and a[k - 1] > a[k]:\n        l += size[root(k - 1)]\n        unite(k - 1, k)\n    if k + 1 < n and a[k + 1] > a[k]:\n        r += size[root(k + 1)]\n        unite(k + 1, k)\n    c += l * r * a[k]\nprint(c)\n", "code_after": "def root(x):\n    return x if par[x] == x else root(par[x])\n\ndef same(x, y):\n    return root(x) == root(y)\n\ndef unite(*z):\n    (x, y) = map(root, z)\n    if x != y:\n        if rank[x] < rank[y]:\n            par[x] = y\n            size[y] += size[x]\n        else:\n            par[y] = x\n            size[x] += size[y]\n            if rank[x] == rank[y]:\n                rank[x] += 1\n(n, *a) = map(int, open(0).read().split())\n(*par,) = range(n)\nvariable_1_20 = 1\nrank = [variable_1_20] * n\nvariable_1_21 = 1\nsize = [variable_1_21] * n\nvariable_0_22 = 0\nb = [variable_0_22] * n\nrandom_inside_left_23 = 770\nrandom_inside_right_23 = 769\nrandom_outside_left_23 = 508\nrandom_outside_right_23 = 507\nrandom_inside_left_26 = 576\nrandom_inside_right_26 = 575\nrandom_outside_left_26 = 870\nrandom_outside_right_26 = 869\nfor loop_outside in range(random_outside_left_23 // random_outside_right_23):\n    for (i, t) in enumerate(a):\n        for loop_inside in range(random_inside_left_23 % random_inside_right_23):\n            b[t - 1] = i\nc = 0\nfor loop_outside in range(random_outside_left_26 // random_outside_right_26):\n    for k in b[::-1]:\n        for loop_inside in range(random_inside_left_26 % random_inside_right_26):\n            l = r = 1\n            if k > 0 and a[k - 1] > a[k]:\n                l += size[root(k - 1)]\n                unite(k - 1, k)\n            if k + 1 < n and a[k + 1] > a[k]:\n                r += size[root(k + 1)]\n                unite(k + 1, k)\n            c += l * r * a[k]\nprint(c)", "effort_before": "3476.340102843192", "effort_after": "4757.819551581163", "difficulty_before": "6.695121951219512", "difficulty_after": "7.744897959183674", "calculated_length_before": "248.18895720232226", "calculated_length_after": "313.1745301666555", "length_before": "92", "length_after": "104", "vocabulary_before": "50", "vocabulary_after": "60", "mi_value_before": "46.64", "mi_value_after": "42.13", "Nloc_before": "31", "Nloc_after": "48", "AvgCCN_before": "7.0", "AvgCCN_after": "11.0"}, "atcoder_AGC043_B": {"id": "atcoder_AGC043_B", "language": "Python", "dataset": "Avatar", "pass_before": 0, "pass_after": 0, "filepath_before": "/home/yang/contamination/Avatar_Python_Before/atcoder_AGC043_B.py", "filepath_after": "/home/yang/contamination/Avatar_Python_After/atcoder_AGC043_B.py", "code_before": "def twos_in_factorial(n):\n    return n - bin(n).count('1')\n\n\ndef parity_of_nCr(n, i):\n    f = twos_in_factorial\n    return f(n) - f(n - i) - f(i) > 0\n\n\nif __name__ == \"__main__\":\n    n = int(input())\n    nums = list(map(lambda x: int(x) - 1, input().strip()))\n    no_one = False\n    if 1 not in nums:\n        nums = [num // 2 for num in nums]\n        no_one = True\n    is_odd = False\n    for i, num in enumerate(nums):\n        if not parity_of_nCr(n - 1, i) and num & 1:\n            is_odd ^= 1\n    if not is_odd:\n        print(0)\n    else:\n        print(1 << no_one)\n", "code_after": "def twos_in_factorial(n):\n    return n - bin(n).count('1')\n\ndef parity_of_nCr(n, i):\n    f = twos_in_factorial\n    return f(n) - f(n - i) - f(i) > 0\nn = int(input())\nnums = list(map(lambda x: int(x) - 1, input().strip()))\nno_one = False\nrandom_outside_if_left_10 = 616\nrandom_outside_if_right_10 = 615\nrandom_outside_if_left_23 = 227\nrandom_outside_if_right_23 = 226\nif random_outside_if_left_10 & random_outside_if_right_10:\n    if 1 not in nums:\n        nums = [num // 2 for num in nums]\n        no_one = True\nis_odd = False\nrandom_inside_left_14 = 835\nrandom_inside_right_14 = 834\nrandom_outside_left_14 = 737\nrandom_outside_right_14 = 736\nfor loop_outside in range(random_outside_left_14 // random_outside_right_14):\n    for (i, num) in enumerate(nums):\n        for loop_inside in range(random_inside_left_14 % random_inside_right_14):\n            if not parity_of_nCr(n - 1, i) and num & 1:\n                is_odd ^= 1\nif random_outside_if_left_23 & random_outside_if_right_23:\n    if not is_odd:\n        print(0)\n    else:\n        print(1 << no_one)\nelse:\n    print(1 << no_one)", "effort_before": "1513.318235807536", "effort_after": "2008.4528431676545", "difficulty_before": "6.521739130434782", "difficulty_after": "6.551724137931035", "calculated_length_before": "137.26120593818493", "calculated_length_after": "174.10072980757323", "length_before": "46", "length_after": "58", "vocabulary_before": "33", "vocabulary_after": "39", "mi_value_before": "53.08", "mi_value_after": "47.43", "Nloc_before": "20", "Nloc_after": "33", "AvgCCN_before": "8.0", "AvgCCN_after": "11.0"}, "codeforces_146_A": {"id": "codeforces_146_A", "language": "Python", "dataset": "Avatar", "pass_before": 0, "pass_after": 0, "filepath_before": "/home/yang/contamination/Avatar_Python_Before/codeforces_146_A.py", "filepath_after": "/home/yang/contamination/Avatar_Python_After/codeforces_146_A.py", "code_before": "n = int(input())\nnumber = list(map(int, list(input())))\nh1 = 0\nh2 = 0\nx = 0\nfor i in range(n):\n    if number[i] != 4 and number[i] != 7:\n        print(\"NO\")\n        x += 1\n        break\n    if i < n // 2:\n        h1 += number[i]\n    else:\n        h2 += number[i]\nif not x:\n    if h1 == h2:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n", "code_after": "n = int(input())\nnumber = list(map(int, list(input())))\nh1 = 0\nh2 = 0\nx = 0\nrandom_inside_left_6 = 142\nrandom_inside_right_6 = 141\nrandom_outside_left_6 = 474\nrandom_outside_right_6 = 473\nfor loop_outside in range(random_outside_left_6 // random_outside_right_6):\n    for i in range(n):\n        for loop_inside in range(random_inside_left_6 % random_inside_right_6):\n            if number[i] != 4 and number[i] != 7:\n                print('NO')\n                x += 1\n                break\n            if i < n // 2:\n                h1 += number[i]\n            else:\n                h2 += number[i]\nrandom_outside_if_left_21 = 761\nrandom_outside_if_right_21 = 760\nif random_outside_if_left_21 & random_outside_if_right_21:\n    if not x:\n        if h1 == h2:\n            print('YES')\n        else:\n            print('NO')", "effort_before": "545.2305770159968", "effort_after": "962.6904194047224", "difficulty_before": "4.15625", "difficulty_after": "5.113636363636363", "calculated_length_before": "83.65148445440323", "calculated_length_after": "126.63682062300134", "length_before": "29", "length_after": "38", "vocabulary_before": "23", "vocabulary_after": "31", "mi_value_before": "55.85", "mi_value_after": "50.83", "Nloc_before": "19", "Nloc_after": "28", "AvgCCN_before": "7.0", "AvgCCN_after": "10.0"}, "codeforces_67_B": {"id": "codeforces_67_B", "language": "Python", "dataset": "Avatar", "pass_before": 0, "pass_after": 0, "filepath_before": "/home/yang/contamination/Avatar_Python_Before/codeforces_67_B.py", "filepath_after": "/home/yang/contamination/Avatar_Python_After/codeforces_67_B.py", "code_before": "u = input\nn, k = map(int, u().split())\nM = [int(i) for i in u().split()]\nm = 0\nfor j in range(n):\n    for p in range(n):\n        if (0 == M[p]):\n            print(p + 1, end=' ')\n            break\n    for l in range(p + 1 - k):\n        M[l] -= 1\n    M[p] -= 1\n", "code_after": "u = input\n(n, k) = map(int, u().split())\nM = [int(i) for i in u().split()]\nm = 0\nrandom_inside_left_5 = 873\nrandom_inside_right_5 = 872\nrandom_outside_left_5 = 215\nrandom_outside_right_5 = 214\nfor loop_outside in range(random_outside_left_5 // random_outside_right_5):\n    for j in range(n):\n        for loop_inside in range(random_inside_left_5 % random_inside_right_5):\n            for p in range(n):\n                if 0 == M[p]:\n                    print(p + 1, end=' ')\n                    break\n            for l in range(p + 1 - k):\n                M[l] -= 1\n            M[p] -= 1", "effort_before": "140.10698055481055", "effort_after": "326.99702730002724", "difficulty_before": "2.25", "difficulty_after": "3.3333333333333335", "calculated_length_before": "28.75488750216347", "calculated_length_after": "54.62919048309069", "length_before": "18", "length_after": "24", "vocabulary_before": "11", "vocabulary_after": "17", "mi_value_before": "62.33", "mi_value_after": "57.08", "Nloc_before": "12", "Nloc_after": "18", "AvgCCN_before": "6.0", "AvgCCN_after": "8.0"}, "atcoder_ABC043_B": {"id": "atcoder_ABC043_B", "language": "Python", "dataset": "Avatar", "pass_before": 0, "pass_after": 0, "filepath_before": "/home/yang/contamination/Avatar_Python_Before/atcoder_ABC043_B.py", "filepath_after": "/home/yang/contamination/Avatar_Python_After/atcoder_ABC043_B.py", "code_before": "s = str(input())\nmy_str = ''\nfor c in s:\n    if c == '0' or c == '1':\n        my_str += c\n    elif c == 'B' and len(my_str) != 0:\n        my_str = my_str[: len(my_str) - 1]\nprint(my_str)\n", "code_after": "s = str(input())\nmy_str = ''\nrandom_inside_left_3 = 30\nrandom_inside_right_3 = 29\nrandom_outside_left_3 = 166\nrandom_outside_right_3 = 165\nfor loop_outside in range(random_outside_left_3 // random_outside_right_3):\n    for c in s:\n        for loop_inside in range(random_inside_left_3 % random_inside_right_3):\n            if c == '0' or c == '1':\n                my_str += c\n            elif c == 'B' and len(my_str) != 0:\n                my_str = my_str[:len(my_str) - 1]\nprint(my_str)", "effort_before": "376.43173042207775", "effort_after": "655.6032267917258", "difficulty_before": "3.6923076923076925", "difficulty_after": "4.705882352941177", "calculated_length_before": "63.61549134016113", "calculated_length_after": "93.48686830125578", "length_before": "24", "length_after": "30", "vocabulary_before": "19", "vocabulary_after": "25", "mi_value_before": "63.32", "mi_value_after": "57.65", "Nloc_before": "8", "Nloc_after": "14", "AvgCCN_before": "6.0", "AvgCCN_after": "8.0"}, "codeforces_61_B": {"id": "codeforces_61_B", "language": "Python", "dataset": "Avatar", "pass_before": 0, "pass_after": 0, "filepath_before": "/home/yang/contamination/Avatar_Python_Before/codeforces_61_B.py", "filepath_after": "/home/yang/contamination/Avatar_Python_After/codeforces_61_B.py", "code_before": "import collections\nimport heapq\nimport sys\nimport math\nimport itertools\nimport bisect\nfrom io import BytesIO, IOBase\nimport os\n\n\ndef valid(i, j, n, m):\n    if i < n and i >= 0 and j >= 0 and j < m:\n        return True\n    return False\n\n\ndef sumn(i, n):\n    return (n - i) * (i + n) / 2\n\n\ndef sqfun(a, b, c):\n    return (- b + math.sqrt(b * b - 4 * a * c)) / 2 * a\n\n\ndef value(): return tuple(map(int, input().split()))\ndef values(): return tuple(map(int, sys.stdin.readline().split()))\ndef inlst(): return [int(i) for i in input().split()]\ndef inlsts(): return [int(i) for i in sys.stdin.readline().split()]\ndef inp(): return int(input())\ndef inps(): return int(sys.stdin.readline())\ndef instr(): return input()\ndef stlst(): return [i for i in input().split()]\n\n\ndef f(s):\n    r = ''\n    for i in s:\n        if i not in ['-', ';', '_']:\n            r += i.lower()\n    return r\n\n\ndef solve():\n    l = []\n    for i in range(3):\n        l.append(f(input()))\n    t = itertools.permutations(l, len(l))\n    l = []\n    for i in t:\n        l.append(\"\".join(i))\n    for i in range(inp()):\n        if f(instr()) in l:\n            print('ACC')\n        else:\n            print('WA')\n\n\nif __name__ == \"__main__\":\n    solve()\n", "code_after": "import collections\nimport heapq\nimport sys\nimport math\nimport itertools\nimport bisect\nfrom io import BytesIO, IOBase\nimport os\n\ndef valid(i, j, n, m):\n    if i < n and i >= 0 and (j >= 0) and (j < m):\n        return True\n    return False\n\ndef sumn(i, n):\n    return (n - i) * (i + n) / 2\n\ndef sqfun(a, b, c):\n    return (-b + math.sqrt(b * b - 4 * a * c)) / 2 * a\n\ndef value():\n    return tuple(map(int, input().split()))\n\ndef values():\n    return tuple(map(int, sys.stdin.readline().split()))\n\ndef inlst():\n    return [int(i) for i in input().split()]\n\ndef inlsts():\n    return [int(i) for i in sys.stdin.readline().split()]\n\ndef inp():\n    return int(input())\n\ndef inps():\n    return int(sys.stdin.readline())\n\ndef instr():\n    return input()\n\ndef stlst():\n    return [i for i in input().split()]\n\ndef f(s):\n    r = ''\n    for i in s:\n        if i not in ['-', ';', '_']:\n            r += i.lower()\n    return r\n\ndef solve():\n    l = []\n    for i in range(3):\n        l.append(f(input()))\n    t = itertools.permutations(l, len(l))\n    l = []\n    for i in t:\n        l.append(''.join(i))\n    for i in range(inp()):\n        if f(instr()) in l:\n            print('ACC')\n        else:\n            print('WA')\nsolve()", "effort_before": "2388.703821910827", "effort_after": "2056.225477501507", "difficulty_before": "6.757142857142857", "difficulty_after": "6.212121212121212", "calculated_length_before": "217.5786533980841", "calculated_length_after": "199.6842868877026", "length_before": "64", "length_after": "61", "vocabulary_before": "46", "vocabulary_after": "43", "mi_value_before": "44.10", "mi_value_after": "44.61", "Nloc_before": "45", "Nloc_after": "52", "AvgCCN_before": "2.0", "AvgCCN_after": "1.0"}, "atcoder_ABC172_D": {"id": "atcoder_ABC172_D", "language": "Python", "dataset": "Avatar", "pass_before": 0, "pass_after": 0, "filepath_before": "/home/yang/contamination/Avatar_Python_Before/atcoder_ABC172_D.py", "filepath_after": "/home/yang/contamination/Avatar_Python_After/atcoder_ABC172_D.py", "code_before": "import sys\ndef rs(): return sys.stdin.readline().rstrip()\ndef ri(): return int(rs())\ndef rs_(): return [_ for _ in rs().split()]\ndef ri_(): return [int(_) for _ in rs().split()]\n\n\nN = ri()\nans = 0\nfor i in range(1, N + 1):\n    ans += i * (N // i) * (N // i + 1) // 2\nprint(ans)\n", "code_after": "import sys\n\ndef rs():\n    return sys.stdin.readline().rstrip()\n\ndef ri():\n    return int(rs())\n\ndef rs_():\n    return [_ for _ in rs().split()]\n\ndef ri_():\n    return [int(_) for _ in rs().split()]\nN = ri()\nans = 0\nrandom_inside_left_16 = 568\nrandom_inside_right_16 = 567\nrandom_outside_left_16 = 602\nrandom_outside_right_16 = 601\nfor loop_outside in range(random_outside_left_16 // random_outside_right_16):\n    for i in range(1, N + 1):\n        for loop_inside in range(random_inside_left_16 % random_inside_right_16):\n            ans += i * (N // i) * (N // i + 1) // 2\nprint(ans)", "effort_before": "199.36694864592542", "effort_after": "339.8342010754868", "difficulty_before": "2.1818181818181817", "difficulty_after": "2.6666666666666665", "calculated_length_before": "42.808635307173745", "calculated_length_after": "66.60335893412778", "length_before": "24", "length_after": "30", "vocabulary_before": "14", "vocabulary_after": "19", "mi_value_before": "60.35", "mi_value_after": "55.88", "Nloc_before": "10", "Nloc_after": "20", "AvgCCN_before": "2.0", "AvgCCN_after": "4.0"}, "atcoder_AGC012_A": {"id": "atcoder_AGC012_A", "language": "Python", "dataset": "Avatar", "pass_before": 0, "pass_after": 0, "filepath_before": "/home/yang/contamination/Avatar_Python_Before/atcoder_AGC012_A.py", "filepath_after": "/home/yang/contamination/Avatar_Python_After/atcoder_AGC012_A.py", "code_before": "from statistics import median\nfrom fractions import gcd\nfrom itertools import combinations\nfrom collections import deque\nfrom collections import defaultdict\nimport bisect\nimport sys\nsys.setrecursionlimit(10000000)\nmod = 10 ** 9 + 7\n\n\ndef readInts():\n    return list(map(int, input().split()))\n\n\ndef main():\n    n = int(input())\n    A = readInts()\n    A = sorted(A)\n    ans = 0\n    for i in range(len(A) - 2, len(A) - 2 * n - 1, - 2):\n        ans += A[i]\n    print(ans)\n\n\nif __name__ == '__main__':\n    main()\n", "code_after": "from statistics import median\nfrom fractions import gcd\nfrom itertools import combinations\nfrom collections import deque\nfrom collections import defaultdict\nimport bisect\nimport sys\nsys.setrecursionlimit(10000000)\nvariable_7_9 = 7\nvariable_10_9 = 10\nvariable_9_9 = 9\nmod = variable_10_9 ** variable_9_9 + variable_7_9\n\ndef readInts():\n    return list(map(int, input().split()))\n\ndef main():\n    n = int(input())\n    A = readInts()\n    A = sorted(A)\n    ans = 0\n    for i in range(len(A) - 2, len(A) - 2 * n - 1, -2):\n        ans += A[i]\n    print(ans)\nmain()", "effort_before": "388.28086017364245", "effort_after": "276.658485672615", "difficulty_before": "3.4", "difficulty_after": "2.8846153846153846", "calculated_length_before": "74.11313393845472", "calculated_length_after": "59.715356810271004", "length_before": "26", "length_after": "23", "vocabulary_before": "21", "vocabulary_after": "18", "mi_value_before": "56.04", "mi_value_after": "55.88", "Nloc_before": "21", "Nloc_after": "23", "AvgCCN_before": "2.0", "AvgCCN_after": "1.0"}, "codeforces_334_A": {"id": "codeforces_334_A", "language": "Python", "dataset": "Avatar", "pass_before": 0, "pass_after": 0, "filepath_before": "/home/yang/contamination/Avatar_Python_Before/codeforces_334_A.py", "filepath_after": "/home/yang/contamination/Avatar_Python_After/codeforces_334_A.py", "code_before": "n = int(input())\ni, j = 1, n * n\nwhile i < j:\n    print(i, j)\n    i += 1\n    j -= 1\n", "code_after": "n = int(input())\n(i, j) = (1, n * n)\nrandom_inside_left_3 = 730\nrandom_inside_right_3 = 729\nrandom_outside_left_3 = 795\nrandom_outside_right_3 = 794\nfor loop_outside in range(random_outside_left_3 // random_outside_right_3):\n    while i < j:\n        for loop_inside in range(random_inside_left_3 % random_inside_right_3):\n            print(i, j)\n            i += 1\n            j -= 1", "effort_before": "144.0", "effort_after": "308.3957486866659", "difficulty_before": "4.0", "difficulty_after": "4.5", "calculated_length_before": "16.0", "calculated_length_after": "39.50977500432694", "length_before": "12", "length_after": "18", "vocabulary_before": "8", "vocabulary_after": "14", "mi_value_before": "70.40", "mi_value_after": "62.31", "Nloc_before": "6", "Nloc_after": "12", "AvgCCN_before": "2.0", "AvgCCN_after": "4.0"}, "atcoder_ABC169_D": {"id": "atcoder_ABC169_D", "language": "Python", "dataset": "Avatar", "pass_before": 0, "pass_after": 0, "filepath_before": "/home/yang/contamination/Avatar_Python_Before/atcoder_ABC169_D.py", "filepath_after": "/home/yang/contamination/Avatar_Python_After/atcoder_ABC169_D.py", "code_before": "import math\nfrom functools import reduce\nfrom collections import deque, Counter\nimport sys\nsys.setrecursionlimit(10 ** 7)\n\n\ndef input():\n    return sys.stdin.readline().strip()\n\n\ndef get_nums_l():\n    return [int(s) for s in input().split(\" \")]\n\n\ndef get_nums_n(n):\n    return [int(input()) for _ in range(n)]\n\n\ndef get_all_int():\n    return map(int, open(0).read().split())\n\n\ndef rangeI(it, l, r):\n    for i, e in enumerate(it):\n        if l <= i < r:\n            yield e\n        elif l >= r:\n            break\n\n\ndef log(* args):\n    print(\"DEBUG:\", * args, file=sys.stderr)\n\n\nINF = 999999999999999999999999\nMOD = 10 ** 9 + 7\nn = int(input())\nif n == 1:\n    print(0)\n    exit()\n\n\ndef prime_factorize(n):\n    a = []\n    while n % 2 == 0:\n        a.append(2)\n        n //= 2\n    f = 3\n    while f * f <= n:\n        if n % f == 0:\n            a.append(f)\n            n //= f\n        else:\n            f += 2\n    if n != 1:\n        a.append(n)\n    return a\n    if len(arr) == 0:\n        arr.append((n, 1))\n    return arr\n\n\nfac_ = prime_factorize(n)\nfac = Counter(fac_)\nans = 0\nfor p, e in fac.items():\n    x = e\n    for i in range(1, 99999999):\n        if x >= i:\n            x -= i\n            ans += 1\n        else:\n            break\nprint(ans)\n", "code_after": "import math\nfrom functools import reduce\nfrom collections import deque, Counter\nimport sys\nsys.setrecursionlimit(10 ** 7)\n\ndef input():\n    return sys.stdin.readline().strip()\n\ndef get_nums_l():\n    return [int(s) for s in input().split(' ')]\n\ndef get_nums_n(n):\n    return [int(input()) for _ in range(n)]\n\ndef get_all_int():\n    return map(int, open(0).read().split())\n\ndef rangeI(it, l, r):\n    for (i, e) in enumerate(it):\n        if l <= i < r:\n            yield e\n        elif l >= r:\n            break\n\ndef log(*args):\n    print('DEBUG:', *args, file=sys.stderr)\nINF = 999999999999999999999999\nvariable_7_29 = 7\nvariable_10_29 = 10\nvariable_9_29 = 9\nMOD = variable_10_29 ** variable_9_29 + variable_7_29\nn = int(input())\nrandom_outside_if_left_31 = 289\nrandom_outside_if_right_31 = 288\nif random_outside_if_left_31 & random_outside_if_right_31:\n    if n == 1:\n        print(0)\n        exit()\n\ndef prime_factorize(n):\n    a = []\n    while n % 2 == 0:\n        a.append(2)\n        n //= 2\n    f = 3\n    while f * f <= n:\n        if n % f == 0:\n            a.append(f)\n            n //= f\n        else:\n            f += 2\n    if n != 1:\n        a.append(n)\n    return a\n    if len(arr) == 0:\n        arr.append((n, 1))\n    return arr\nfac_ = prime_factorize(n)\nfac = Counter(fac_)\nans = 0\nrandom_inside_left_56 = 504\nrandom_inside_right_56 = 503\nrandom_outside_left_56 = 278\nrandom_outside_right_56 = 277\nfor loop_outside in range(random_outside_left_56 // random_outside_right_56):\n    for (p, e) in fac.items():\n        for loop_inside in range(random_inside_left_56 % random_inside_right_56):\n            x = e\n            for i in range(1, 99999999):\n                if x >= i:\n                    x -= i\n                    ans += 1\n                else:\n                    break\nprint(ans)", "effort_before": "3328.8095238095234", "effort_after": "3698.9278012573545", "difficulty_before": "10.738095238095237", "difficulty_after": "9.724137931034482", "calculated_length_before": "130.29241368336426", "calculated_length_after": "183.90099886735348", "length_before": "62", "length_after": "71", "vocabulary_before": "32", "vocabulary_after": "41", "mi_value_before": "43.42", "mi_value_after": "40.61", "Nloc_before": "57", "Nloc_after": "69", "AvgCCN_before": "5.0", "AvgCCN_after": "8.0"}, "codeforces_333_B": {"id": "codeforces_333_B", "language": "Python", "dataset": "Avatar", "pass_before": 0, "pass_after": 0, "filepath_before": "/home/yang/contamination/Avatar_Python_Before/codeforces_333_B.py", "filepath_after": "/home/yang/contamination/Avatar_Python_After/codeforces_333_B.py", "code_before": "I = input\nn, m = map(int, I().split())\nb = [1] * n * 2\nb[0] = b[n - 1] = b[n] = b[2 * n - 1] = 0\nfor i in range(m):\n    r, c = map(int, I().split())\n    b[r - 1] = b[n + c - 1] = 0\nif n % 2 and b[n // 2] and b[n + n // 2]:\n    b[n // 2] = 0\nprint(sum(b))\n", "code_after": "I = input\n(n, m) = map(int, I().split())\nvariable_2_3 = 2\nvariable_1_3 = 1\nb = [variable_1_3] * n * variable_2_3\nb[0] = b[n - 1] = b[n] = b[2 * n - 1] = 0\nrandom_inside_left_5 = 266\nrandom_inside_right_5 = 265\nrandom_outside_left_5 = 330\nrandom_outside_right_5 = 329\nfor loop_outside in range(random_outside_left_5 // random_outside_right_5):\n    for i in range(m):\n        for loop_inside in range(random_inside_left_5 % random_inside_right_5):\n            (r, c) = map(int, I().split())\n            b[r - 1] = b[n + c - 1] = 0\nrandom_outside_if_left_14 = 204\nrandom_outside_if_right_14 = 203\nif random_outside_if_left_14 & random_outside_if_right_14:\n    if n % 2 and b[n // 2] and b[n + n // 2]:\n        b[n // 2] = 0\nprint(sum(b))", "effort_before": "1222.4228329071118", "effort_after": "1514.4316694390648", "difficulty_before": "6.6923076923076925", "difficulty_after": "6.125", "calculated_length_before": "63.61549134016113", "calculated_length_after": "106.09004635215048", "length_before": "43", "length_after": "52", "vocabulary_before": "19", "vocabulary_after": "27", "mi_value_before": "60.77", "mi_value_after": "52.88", "Nloc_before": "10", "Nloc_after": "21", "AvgCCN_before": "5.0", "AvgCCN_after": "8.0"}, "atcoder_ABC140_F": {"id": "atcoder_ABC140_F", "language": "Python", "dataset": "Avatar", "pass_before": 0, "pass_after": 0, "filepath_before": "/home/yang/contamination/Avatar_Python_Before/atcoder_ABC140_F.py", "filepath_after": "/home/yang/contamination/Avatar_Python_After/atcoder_ABC140_F.py", "code_before": "import sys\ndef I(): return (int(sys.stdin.readline()))\ndef LI(): return ([int(x) for x in sys.stdin.readline().split()])\n\n\ndef main():\n    N = I()\n    S = sorted(LI(), reverse=True)\n    flag = [True] * len(S)\n    cur = []\n    cur.append(S[0])\n    flag[0] = False\n    for i in range(N):\n        j = 0\n        jM = len(cur)\n        for k in range(len(S)):\n            if flag[k] and S[k] < cur[j]:\n                cur.append(S[k])\n                j += 1\n                flag[k] = False\n                if j == jM:\n                    break\n        else:\n            return (\"No\")\n        cur.sort(reverse=True)\n    return (\"Yes\")\n\n\nif __name__ == \"__main__\":\n    print(main())\n", "code_after": "import sys\n\ndef I():\n    return int(sys.stdin.readline())\n\ndef LI():\n    return [int(x) for x in sys.stdin.readline().split()]\n\ndef main():\n    N = I()\n    S = sorted(LI(), reverse=True)\n    flag = [True] * len(S)\n    cur = []\n    cur.append(S[0])\n    flag[0] = False\n    for i in range(N):\n        j = 0\n        jM = len(cur)\n        for k in range(len(S)):\n            if flag[k] and S[k] < cur[j]:\n                cur.append(S[k])\n                j += 1\n                flag[k] = False\n                if j == jM:\n                    break\n        else:\n            return 'No'\n        cur.sort(reverse=True)\n    return 'Yes'\nprint(main())", "effort_before": "196.36363636363635", "effort_after": "158.6397884190668", "difficulty_before": "2.727272727272727", "difficulty_after": "2.7777777777777777", "calculated_length_before": "49.663388279447084", "calculated_length_after": "40.13896548741762", "length_before": "18", "length_after": "15", "vocabulary_before": "16", "vocabulary_after": "14", "mi_value_before": "54.83", "mi_value_after": "56.00", "Nloc_before": "26", "Nloc_after": "27", "AvgCCN_before": "2.0", "AvgCCN_after": "1.0"}, "atcoder_AGC004_D": {"id": "atcoder_AGC004_D", "language": "Python", "dataset": "Avatar", "pass_before": 0, "pass_after": 0, "filepath_before": "/home/yang/contamination/Avatar_Python_Before/atcoder_AGC004_D.py", "filepath_after": "/home/yang/contamination/Avatar_Python_After/atcoder_AGC004_D.py", "code_before": "import sys\nsys.setrecursionlimit(10 ** 6)\n\n\ndef dfs(links, n, k, v, p):\n    height_from_leaf = 0\n    cut_count = 0\n    for u in links[v]:\n        if u == 0:\n            continue\n        hgt, cut = dfs(links, n, k, u, v)\n        height_from_leaf = max(height_from_leaf, hgt)\n        cut_count += cut\n    height_from_leaf += 1\n    if p != 0 and height_from_leaf == k:\n        height_from_leaf = 0\n        cut_count += 1\n    return height_from_leaf, cut_count\n\n\nn, k, * aaa = map(int, sys.stdin.buffer.read().split())\nlinks = [set() for _ in range(n)]\nfor i, a in enumerate(aaa):\n    a -= 1\n    links[a].add(i)\n_, ans = dfs(links, n, k, 0, 0)\nif aaa[0] != 1:\n    ans += 1\nprint(ans)\n", "code_after": "import sys\nsys.setrecursionlimit(10 ** 6)\n\ndef dfs(links, n, k, v, p):\n    height_from_leaf = 0\n    cut_count = 0\n    for u in links[v]:\n        if u == 0:\n            continue\n        (hgt, cut) = dfs(links, n, k, u, v)\n        height_from_leaf = max(height_from_leaf, hgt)\n        cut_count += cut\n    height_from_leaf += 1\n    if p != 0 and height_from_leaf == k:\n        height_from_leaf = 0\n        cut_count += 1\n    return (height_from_leaf, cut_count)\n(n, k, *aaa) = map(int, sys.stdin.buffer.read().split())\nlinks = [set() for _ in range(n)]\nrandom_inside_left_20 = 170\nrandom_inside_right_20 = 169\nrandom_outside_left_20 = 494\nrandom_outside_right_20 = 493\nfor loop_outside in range(random_outside_left_20 // random_outside_right_20):\n    for (i, a) in enumerate(aaa):\n        for loop_inside in range(random_inside_left_20 % random_inside_right_20):\n            a -= 1\n            links[a].add(i)\n(_, ans) = dfs(links, n, k, 0, 0)\nrandom_outside_if_left_30 = 784\nrandom_outside_if_right_30 = 783\nif random_outside_if_left_30 & random_outside_if_right_30:\n    if aaa[0] != 1:\n        ans += 1\nprint(ans)", "effort_before": "607.0401290870021", "effort_after": "1191.709403389425", "difficulty_before": "4.125", "difficulty_after": "5.7272727272727275", "calculated_length_before": "79.50977500432694", "calculated_length_after": "126.63682062300134", "length_before": "33", "length_after": "42", "vocabulary_before": "22", "vocabulary_after": "31", "mi_value_before": "53.42", "mi_value_after": "49.14", "Nloc_before": "25", "Nloc_after": "34", "AvgCCN_before": "4.0", "AvgCCN_after": "7.0"}, "atcoder_AGC019_A": {"id": "atcoder_AGC019_A", "language": "Python", "dataset": "Avatar", "pass_before": 0, "pass_after": 0, "filepath_before": "/home/yang/contamination/Avatar_Python_Before/atcoder_AGC019_A.py", "filepath_after": "/home/yang/contamination/Avatar_Python_After/atcoder_AGC019_A.py", "code_before": "import sys\nimport re\nfrom collections import deque, defaultdict, Counter\nfrom math import sqrt, hypot, factorial, pi, sin, cos, radians\nif sys.version_info.minor >= 5:\n    from math import gcd\nelse:\n    from fractions import gcd\nfrom heapq import heappop, heappush, heapify, heappushpop\nfrom bisect import bisect_left, bisect_right\nfrom itertools import permutations, combinations, product\nfrom operator import itemgetter, mul\nfrom copy import deepcopy\nfrom functools import reduce, partial\nfrom fractions import Fraction\nfrom string import ascii_lowercase, ascii_uppercase, digits\ndef input(): return sys.stdin.readline().strip()\ndef ceil(a, b=1): return int(- (- a // b))\ndef round(x): return int((x * 2 + 1) // 2)\ndef fermat(x, y, MOD): return x * pow(y, MOD - 2, MOD) % MOD\ndef lcm(x, y): return (x * y) // gcd(x, y)\ndef lcm_list(nums): return reduce(lcm, nums, initial=1)\ndef INT(): return int(input())\ndef MAP(): return map(int, input().split())\ndef LIST(): return list(map(int, input().split()))\n\n\nsys.setrecursionlimit(10 ** 9)\nINF = float('inf')\nMOD = 10 ** 9 + 7\nq, h, s, d = MAP()\nn = INT()\nbest1L = min(q * 4, h * 2, s)\nbest2L = min(d, best1L * 2)\nif n % 2 == 0:\n    print(best2L * (n // 2))\nelse:\n    print(best2L * (n // 2) + best1L)\n", "code_after": "import sys\nimport re\nfrom collections import deque, defaultdict, Counter\nfrom math import sqrt, hypot, factorial, pi, sin, cos, radians\nrandom_outside_if_left_5 = 213\nrandom_outside_if_right_5 = 212\nrandom_outside_if_left_51 = 741\nrandom_outside_if_right_51 = 740\nif random_outside_if_left_5 & random_outside_if_right_5:\n    if sys.version_info.minor >= 5:\n        from math import gcd\n    else:\n        from fractions import gcd\nelse:\n    from fractions import gcd\nfrom heapq import heappop, heappush, heapify, heappushpop\nfrom bisect import bisect_left, bisect_right\nfrom itertools import permutations, combinations, product\nfrom operator import itemgetter, mul\nfrom copy import deepcopy\nfrom functools import reduce, partial\nfrom fractions import Fraction\nfrom string import ascii_lowercase, ascii_uppercase, digits\n\ndef input():\n    return sys.stdin.readline().strip()\n\ndef ceil(a, b=1):\n    return int(-(-a // b))\n\ndef round(x):\n    return int((x * 2 + 1) // 2)\n\ndef fermat(x, y, MOD):\n    return x * pow(y, MOD - 2, MOD) % MOD\n\ndef lcm(x, y):\n    return x * y // gcd(x, y)\n\ndef lcm_list(nums):\n    return reduce(lcm, nums, initial=1)\n\ndef INT():\n    return int(input())\n\ndef MAP():\n    return map(int, input().split())\n\ndef LIST():\n    return list(map(int, input().split()))\nsys.setrecursionlimit(10 ** 9)\nINF = float('inf')\nvariable_7_53 = 7\nvariable_10_53 = 10\nvariable_9_53 = 9\nMOD = variable_10_53 ** variable_9_53 + variable_7_53\n(q, h, s, d) = MAP()\nn = INT()\nbest1L = min(q * 4, h * 2, s)\nbest2L = min(d, best1L * 2)\nif random_outside_if_left_51 & random_outside_if_right_51:\n    if n % 2 == 0:\n        print(best2L * (n // 2))\n    else:\n        print(best2L * (n // 2) + best1L)\nelse:\n    print(best2L * (n // 2) + best1L)", "effort_before": "2405.4316561923974", "effort_after": "3337.834751254812", "difficulty_before": "6.0", "difficulty_after": "6.590909090909091", "calculated_length_before": "214.64662506490404", "calculated_length_after": "273.4342721689147", "length_before": "73", "length_after": "88", "vocabulary_before": "45", "vocabulary_after": "54", "mi_value_before": "45.10", "mi_value_after": "41.76", "Nloc_before": "36", "Nloc_after": "58", "AvgCCN_before": "3.0", "AvgCCN_after": "5.0"}, "codeforces_23_B": {"id": "codeforces_23_B", "language": "Python", "dataset": "Avatar", "pass_before": 3, "pass_after": 3, "filepath_before": "/home/yang/contamination/Avatar_Python_Before/codeforces_23_B.py", "filepath_after": "/home/yang/contamination/Avatar_Python_After/codeforces_23_B.py", "code_before": "n = int(input())\nfor i in range(n):\n    a = int(input())\n    if a < 2:\n        print(0)\n    if a >= 2:\n        print(a - 2)\n", "code_after": "n = int(input())\nrandom_inside_left_2 = 145\nrandom_inside_right_2 = 144\nrandom_outside_left_2 = 461\nrandom_outside_right_2 = 460\nfor loop_outside in range(random_outside_left_2 // random_outside_right_2):\n    for i in range(n):\n        for loop_inside in range(random_inside_left_2 % random_inside_right_2):\n            a = int(input())\n            if a < 2:\n                print(0)\n            if a >= 2:\n                print(a - 2)", "effort_before": "94.03808784293817", "effort_after": "216.21447616483113", "difficulty_before": "4.5", "difficulty_after": "4.166666666666667", "calculated_length_before": "6.754887502163469", "calculated_length_after": "27.11941547876375", "length_before": "9", "length_after": "15", "vocabulary_before": "5", "vocabulary_after": "11", "mi_value_before": "70.52", "mi_value_after": "62.18", "Nloc_before": "7", "Nloc_after": "13", "AvgCCN_before": "4.0", "AvgCCN_after": "6.0"}, "codeforces_313_B": {"id": "codeforces_313_B", "language": "Python", "dataset": "Avatar", "pass_before": 1, "pass_after": 0, "filepath_before": "/home/yang/contamination/Avatar_Python_Before/codeforces_313_B.py", "filepath_after": "/home/yang/contamination/Avatar_Python_After/codeforces_313_B.py", "code_before": "soz = input()\na = [0] * (len(soz) + 1)\nfor i in range(1, len(soz)):\n    a[i] = a[i - 1]\n    if soz[i - 1] == soz[i]:\n        a[i] += 1\nn = int(input())\narr = []\nfor i in range(n):\n    m, l = input().split()\n    arr.append(a[int(l) - 1] - a[int(m) - 1])\nfor i in arr:\n    print(i)\n", "code_after": "soz = input()\nvariable_0_2 = 0\nvariable_1_2 = 1\na = [variable_0_2] * (len(soz) + variable_1_2)\nrandom_inside_left_3 = 689\nrandom_inside_right_3 = 688\nrandom_outside_left_3 = 140\nrandom_outside_right_3 = 139\nrandom_inside_left_9 = 353\nrandom_inside_right_9 = 352\nrandom_outside_left_9 = 960\nrandom_outside_right_9 = 959\nrandom_inside_left_12 = 267\nrandom_inside_right_12 = 266\nrandom_outside_left_12 = 789\nrandom_outside_right_12 = 788\nfor loop_outside in range(random_outside_left_3 // random_outside_right_3):\n    for i in range(1, len(soz)):\n        for loop_inside in range(random_inside_left_3 % random_inside_right_3):\n            a[i] = a[i - 1]\n            if soz[i - 1] == soz[i]:\n                a[i] += 1\nn = int(input())\narr = []\nfor loop_outside in range(random_outside_left_9 // random_outside_right_9):\n    for i in range(n):\n        for loop_inside in range(random_inside_left_9 % random_inside_right_9):\n            (m, l) = input().split()\n            arr.append(a[int(l) - 1] - a[int(m) - 1])\nfor loop_outside in range(random_outside_left_12 // random_outside_right_12):\n    for i in arr:\n        for loop_inside in range(random_inside_left_12 % random_inside_right_12):\n            print(i)", "effort_before": "324.0", "effort_after": "802.5798022826739", "difficulty_before": "3.0", "difficulty_after": "3.6", "calculated_length_before": "51.01955000865388", "calculated_length_after": "131.60617974869504", "length_before": "27", "length_after": "45", "vocabulary_before": "16", "vocabulary_after": "31", "mi_value_before": "60.09", "mi_value_after": "48.67", "Nloc_before": "13", "Nloc_after": "33", "AvgCCN_before": "5.0", "AvgCCN_after": "11.0"}, "atcoder_ABC042_A": {"id": "atcoder_ABC042_A", "language": "Python", "dataset": "Avatar", "pass_before": 0, "pass_after": 0, "filepath_before": "/home/yang/contamination/Avatar_Python_Before/atcoder_ABC042_A.py", "filepath_after": "/home/yang/contamination/Avatar_Python_After/atcoder_ABC042_A.py", "code_before": "ABC = tuple(map(int, input().split()))\nif ABC.count(5) == 2:\n    print('YES' if sum(ABC) == 17 else 'NO')\nelse:\n    print('NO')\n", "code_after": "ABC = tuple(map(int, input().split()))\nrandom_outside_if_left_2 = 652\nrandom_outside_if_right_2 = 651\nif random_outside_if_left_2 & random_outside_if_right_2:\n    if ABC.count(5) == 2:\n        print('YES' if sum(ABC) == 17 else 'NO')\n    else:\n        print('NO')\nelse:\n    print('NO')", "effort_before": "6.965784284662087", "effort_after": "27.0", "difficulty_before": "0.5", "difficulty_after": "1.0", "calculated_length_before": "8.0", "calculated_length_after": "17.509775004326936", "length_before": "6", "length_after": "9", "vocabulary_before": "5", "vocabulary_after": "8", "mi_value_before": "74.61", "mi_value_after": "66.72", "Nloc_before": "5", "Nloc_after": "10", "AvgCCN_before": "3.0", "AvgCCN_after": "4.0"}, "atcoder_ABC109_B": {"id": "atcoder_ABC109_B", "language": "Python", "dataset": "Avatar", "pass_before": 2, "pass_after": 0, "filepath_before": "/home/yang/contamination/Avatar_Python_Before/atcoder_ABC109_B.py", "filepath_after": "/home/yang/contamination/Avatar_Python_After/atcoder_ABC109_B.py", "code_before": "from collections import defaultdict\nn = int(input())\ns = defaultdict(lambda: 0)\nl = list([input() for i in range(n)])\nf = 'Yes'\ni = - 1\nfor v in l:\n    s[v] += 1\n    if s[v] >= 2:\n        f = 'No'\n    if i != - 1 and l[i][- 1] != v[0]:\n        f = 'No'\n    i += 1\nprint(f)\n", "code_after": "from collections import defaultdict\nn = int(input())\ns = defaultdict(lambda : 0)\nl = list([input() for i in range(n)])\nf = 'Yes'\ni = -1\nrandom_inside_left_7 = 873\nrandom_inside_right_7 = 872\nrandom_outside_left_7 = 118\nrandom_outside_right_7 = 117\nfor loop_outside in range(random_outside_left_7 // random_outside_right_7):\n    for v in l:\n        for loop_inside in range(random_inside_left_7 % random_inside_right_7):\n            s[v] += 1\n            if s[v] >= 2:\n                f = 'No'\n            if i != -1 and l[i][-1] != v[0]:\n                f = 'No'\n            i += 1\nprint(f)", "effort_before": "351.62015360476664", "effort_after": "625.9052327459734", "difficulty_before": "3.75", "difficulty_after": "4.75", "calculated_length_before": "44.82892142331043", "calculated_length_after": "72.95445336320968", "length_before": "24", "length_after": "30", "vocabulary_before": "15", "vocabulary_after": "21", "mi_value_before": "59.12", "mi_value_after": "54.80", "Nloc_before": "14", "Nloc_after": "20", "AvgCCN_before": "6.0", "AvgCCN_after": "8.0"}, "atcoder_AGC027_B": {"id": "atcoder_AGC027_B", "language": "Python", "dataset": "Avatar", "pass_before": 0, "pass_after": 0, "filepath_before": "/home/yang/contamination/Avatar_Python_Before/atcoder_AGC027_B.py", "filepath_after": "/home/yang/contamination/Avatar_Python_After/atcoder_AGC027_B.py", "code_before": "from itertools import accumulate\nN, X, * A = map(int, open(0).read().split())\nS = list(accumulate(A))\nans = float(\"inf\")\nfor k, s in enumerate(S, 1):\n    E = k * X + 2 * sum(S[j] for j in range(N - 2 * k - 1, - 1, - k))\n    ans = min(ans, E)\nprint(ans + N * X + 5 * S[- 1])\n", "code_after": "from itertools import accumulate\n(N, X, *A) = map(int, open(0).read().split())\nS = list(accumulate(A))\nans = float('inf')\nrandom_inside_left_5 = 175\nrandom_inside_right_5 = 174\nrandom_outside_left_5 = 596\nrandom_outside_right_5 = 595\nfor loop_outside in range(random_outside_left_5 // random_outside_right_5):\n    for (k, s) in enumerate(S, 1):\n        for loop_inside in range(random_inside_left_5 % random_inside_right_5):\n            E = k * X + 2 * sum((S[j] for j in range(N - 2 * k - 1, -1, -k)))\n            ans = min(ans, E)\nprint(ans + N * X + 5 * S[-1])", "effort_before": "447.319557820842", "effort_after": "799.5447960557998", "difficulty_before": "2.875", "difficulty_after": "4.05", "calculated_length_before": "72.0", "calculated_length_after": "101.94833690207419", "length_before": "36", "length_after": "42", "vocabulary_before": "20", "vocabulary_after": "26", "mi_value_before": "63.43", "mi_value_after": "57.60", "Nloc_before": "8", "Nloc_after": "14", "AvgCCN_before": "3.0", "AvgCCN_after": "5.0"}, "atcoder_ABC150_E": {"id": "atcoder_ABC150_E", "language": "Python", "dataset": "Avatar", "pass_before": 0, "pass_after": 0, "filepath_before": "/home/yang/contamination/Avatar_Python_Before/atcoder_ABC150_E.py", "filepath_after": "/home/yang/contamination/Avatar_Python_After/atcoder_ABC150_E.py", "code_before": "mod = 10 ** 9 + 7\nn = int(input())\nc = list(map(int, input().split()))\nc.sort(reverse=True)\nb = pow(2, 2 * n - 2, mod)\na = 2 * b % mod\nans = 0\nfor i in range(n):\n    ans += c[i] * (a + i * b)\n    ans %= mod\nprint(ans)\n", "code_after": "variable_7_1 = 7\nvariable_10_1 = 10\nvariable_9_1 = 9\nmod = variable_10_1 ** variable_9_1 + variable_7_1\nn = int(input())\nc = list(map(int, input().split()))\nc.sort(reverse=True)\nb = pow(2, 2 * n - 2, mod)\nvariable_2_6 = 2\na = variable_2_6 * b % mod\nans = 0\nrandom_inside_left_8 = 20\nrandom_inside_right_8 = 19\nrandom_outside_left_8 = 799\nrandom_outside_right_8 = 798\nfor loop_outside in range(random_outside_left_8 // random_outside_right_8):\n    for i in range(n):\n        for loop_inside in range(random_inside_left_8 % random_inside_right_8):\n            ans += c[i] * (a + i * b)\n            ans %= mod\nprint(ans)", "effort_before": "476.1099051662762", "effort_after": "664.7260760408741", "difficulty_before": "3.235294117647059", "difficulty_after": "3.5454545454545454", "calculated_length_before": "81.0965087756926", "calculated_length_after": "113.61727061434748", "length_before": "33", "length_after": "39", "vocabulary_before": "22", "vocabulary_after": "28", "mi_value_before": "61.01", "mi_value_after": "54.26", "Nloc_before": "11", "Nloc_after": "21", "AvgCCN_before": "2.0", "AvgCCN_after": "4.0"}, "atcoder_AGC014_D": {"id": "atcoder_AGC014_D", "language": "Python", "dataset": "Avatar", "pass_before": 0, "pass_after": 0, "filepath_before": "/home/yang/contamination/Avatar_Python_Before/atcoder_AGC014_D.py", "filepath_after": "/home/yang/contamination/Avatar_Python_After/atcoder_AGC014_D.py", "code_before": "import sys\nfrom collections import deque\ninput = sys.stdin.buffer.readline\nN = int(input())\nadj = [[] for _ in range(N + 1)]\nfor _ in range(N - 1):\n    a, b = map(int, input().split())\n    adj[a].append(b)\n    adj[b].append(a)\nque = deque()\nque.append(1)\nseen = [0] * (N + 1)\nseen[1] = 1\npar = [0] * (N + 1)\nchild_num = [0] * (N + 1)\nwhile que:\n    v = que.popleft()\n    for u in adj[v]:\n        if seen[u] == 0:\n            seen[u] = 1\n            par[u] = v\n            child_num[v] += 1\n            que.append(u)\nseq = deque()\nfor i in range(1, N + 1):\n    if child_num[i] == 0:\n        seq.append(i)\nwhile seq:\n    c = seq.pop()\n    seen[c] = 0\n    if seen[par[c]] == 0:\n        print('First')\n        exit()\n    seen[par[c]] = 0\n    child_num[par[par[c]]] -= 1\n    if child_num[par[par[c]]] == 0:\n        seq.append(par[par[c]])\nprint('Second')\n", "code_after": "import sys\nfrom collections import deque\ninput = sys.stdin.buffer.readline\nN = int(input())\nadj = [[] for _ in range(N + 1)]\nrandom_inside_left_6 = 331\nrandom_inside_right_6 = 330\nrandom_outside_left_6 = 912\nrandom_outside_right_6 = 911\nrandom_inside_left_25 = 145\nrandom_inside_right_25 = 144\nrandom_outside_left_25 = 119\nrandom_outside_right_25 = 118\nfor loop_outside in range(random_outside_left_6 // random_outside_right_6):\n    for _ in range(N - 1):\n        for loop_inside in range(random_inside_left_6 % random_inside_right_6):\n            (a, b) = map(int, input().split())\n            adj[a].append(b)\n            adj[b].append(a)\nque = deque()\nque.append(1)\nvariable_0_22 = 0\nvariable_1_22 = 1\nseen = [variable_0_22] * (N + variable_1_22)\nseen[1] = 1\nvariable_0_24 = 0\nvariable_1_24 = 1\npar = [variable_0_24] * (N + variable_1_24)\nvariable_0_25 = 0\nvariable_1_25 = 1\nchild_num = [variable_0_25] * (N + variable_1_25)\nrandom_inside_left_26 = 409\nrandom_inside_right_26 = 408\nrandom_outside_left_26 = 770\nrandom_outside_right_26 = 769\nrandom_inside_left_40 = 129\nrandom_inside_right_40 = 128\nrandom_outside_left_40 = 719\nrandom_outside_right_40 = 718\nfor loop_outside in range(random_outside_left_26 // random_outside_right_26):\n    while que:\n        for loop_inside in range(random_inside_left_26 % random_inside_right_26):\n            v = que.popleft()\n            for u in adj[v]:\n                if seen[u] == 0:\n                    seen[u] = 1\n                    par[u] = v\n                    child_num[v] += 1\n                    que.append(u)\nseq = deque()\nfor loop_outside in range(random_outside_left_25 // random_outside_right_25):\n    for i in range(1, N + 1):\n        for loop_inside in range(random_inside_left_25 % random_inside_right_25):\n            if child_num[i] == 0:\n                seq.append(i)\nfor loop_outside in range(random_outside_left_40 // random_outside_right_40):\n    while seq:\n        for loop_inside in range(random_inside_left_40 % random_inside_right_40):\n            c = seq.pop()\n            seen[c] = 0\n            if seen[par[c]] == 0:\n                print('First')\n                exit()\n            seen[par[c]] = 0\n            child_num[par[par[c]]] -= 1\n            if child_num[par[par[c]]] == 0:\n                seq.append(par[par[c]])\nprint('Second')", "effort_before": "764.6269524198453", "effort_after": "1490.4529211622782", "difficulty_before": "4.0", "difficulty_after": "4.0588235294117645", "calculated_length_before": "66.60335893412778", "calculated_length_after": "188.4835116068385", "length_before": "45", "length_after": "69", "vocabulary_before": "19", "vocabulary_after": "40", "mi_value_before": "47.84", "mi_value_after": "39.37", "Nloc_before": "38", "Nloc_after": "68", "AvgCCN_before": "11.0", "AvgCCN_after": "19.0"}, "codeforces_581_B": {"id": "codeforces_581_B", "language": "Python", "dataset": "Avatar", "pass_before": 2, "pass_after": 2, "filepath_before": "/home/yang/contamination/Avatar_Python_Before/codeforces_581_B.py", "filepath_after": "/home/yang/contamination/Avatar_Python_After/codeforces_581_B.py", "code_before": "n = int(input())\narr = list(map(int, input().strip().split()))[: n]\nans = [0] * n\nmx = arr[- 1]\nfor i in range(n - 2, - 1, - 1):\n    ans[i] = max(0, mx - arr[i] + 1)\n    if arr[i] > mx:\n        mx = arr[i]\nprint(* ans)\n", "code_after": "n = int(input())\narr = list(map(int, input().strip().split()))[:n]\nvariable_0_3 = 0\nans = [variable_0_3] * n\nmx = arr[-1]\nrandom_inside_left_5 = 988\nrandom_inside_right_5 = 987\nrandom_outside_left_5 = 470\nrandom_outside_right_5 = 469\nfor loop_outside in range(random_outside_left_5 // random_outside_right_5):\n    for i in range(n - 2, -1, -1):\n        for loop_inside in range(random_inside_left_5 % random_inside_right_5):\n            ans[i] = max(0, mx - arr[i] + 1)\n            if arr[i] > mx:\n                mx = arr[i]\nprint(*ans)", "effort_before": "315.6937634539119", "effort_after": "568.69129586226", "difficulty_before": "4.0625", "difficulty_after": "4.958333333333333", "calculated_length_before": "35.60964047443681", "calculated_length_after": "62.67103446305711", "length_before": "21", "length_after": "27", "vocabulary_before": "13", "vocabulary_after": "19", "mi_value_before": "63.64", "mi_value_after": "57.52", "Nloc_before": "9", "Nloc_after": "16", "AvgCCN_before": "3.0", "AvgCCN_after": "5.0"}, "codeforces_609_B": {"id": "codeforces_609_B", "language": "Python", "dataset": "Avatar", "pass_before": 3, "pass_after": 2, "filepath_before": "/home/yang/contamination/Avatar_Python_Before/codeforces_609_B.py", "filepath_after": "/home/yang/contamination/Avatar_Python_After/codeforces_609_B.py", "code_before": "def _input(): return map(int, input().split())\n\n\nn, m = _input()\nlst = list(_input())\nl = {}\nfor i in range(n):\n    if lst[i] not in l:\n        l[lst[i]] = 1\n    else:\n        l[lst[i]] += 1\nres = 0\nfor i in range(n):\n    if l[lst[i]] > 1:\n        res += n - i - l[lst[i]]\n        l[lst[i]] -= 1\n    else:\n        res += n - i - 1\nprint(res)\n", "code_after": "def _input():\n    return map(int, input().split())\n(n, m) = _input()\nlst = list(_input())\nl = {}\nrandom_inside_left_6 = 861\nrandom_inside_right_6 = 860\nrandom_outside_left_6 = 810\nrandom_outside_right_6 = 809\nrandom_inside_left_12 = 85\nrandom_inside_right_12 = 84\nrandom_outside_left_12 = 493\nrandom_outside_right_12 = 492\nfor loop_outside in range(random_outside_left_6 // random_outside_right_6):\n    for i in range(n):\n        for loop_inside in range(random_inside_left_6 % random_inside_right_6):\n            if lst[i] not in l:\n                l[lst[i]] = 1\n            else:\n                l[lst[i]] += 1\nres = 0\nfor loop_outside in range(random_outside_left_12 // random_outside_right_12):\n    for i in range(n):\n        for loop_inside in range(random_inside_left_12 % random_inside_right_12):\n            if l[lst[i]] > 1:\n                res += n - i - l[lst[i]]\n                l[lst[i]] -= 1\n            else:\n                res += n - i - 1\nprint(res)", "effort_before": "357.42214298076965", "effort_after": "770.924916591783", "difficulty_before": "2.857142857142857", "difficulty_after": "3.8181818181818183", "calculated_length_before": "61.30296890880645", "calculated_length_after": "113.61727061434748", "length_before": "30", "length_after": "42", "vocabulary_before": "18", "vocabulary_after": "28", "mi_value_before": "56.75", "mi_value_after": "50.12", "Nloc_before": "17", "Nloc_after": "30", "AvgCCN_before": "5.0", "AvgCCN_after": "9.0"}, "codeforces_267_A": {"id": "codeforces_267_A", "language": "Python", "dataset": "Avatar", "pass_before": 0, "pass_after": 0, "filepath_before": "/home/yang/contamination/Avatar_Python_Before/codeforces_267_A.py", "filepath_after": "/home/yang/contamination/Avatar_Python_After/codeforces_267_A.py", "code_before": "def substract(a, b):\n    if a > b:\n        total = 0\n        while a > 0 and b > 0:\n            total += int(a / b)\n            a = a % b\n            if a > 0:\n                total += int(b / a)\n                b = b % a\n        return total\n    if a < b:\n        total = 0\n        while a > 0 and b > 0:\n            total += int(b / a)\n            b = b % a\n            if b > 0:\n                total += int(a / b)\n                a = a % b\n        return total\n    if a == b:\n        return 1\n\n\nn = int(input())\nlst = []\nfor i in range(0, n):\n    a, b = map(int, input().split())\n    lst.append(substract(a, b))\nfor i in lst:\n    print(i)\n", "code_after": "def substract(a, b):\n    if a > b:\n        total = 0\n        while a > 0 and b > 0:\n            total += int(a / b)\n            a = a % b\n            if a > 0:\n                total += int(b / a)\n                b = b % a\n        return total\n    if a < b:\n        total = 0\n        while a > 0 and b > 0:\n            total += int(b / a)\n            b = b % a\n            if b > 0:\n                total += int(a / b)\n                a = a % b\n        return total\n    if a == b:\n        return 1\nn = int(input())\nlst = []\nrandom_inside_left_24 = 302\nrandom_inside_right_24 = 301\nrandom_outside_left_24 = 679\nrandom_outside_right_24 = 678\nrandom_inside_left_27 = 506\nrandom_inside_right_27 = 505\nrandom_outside_left_27 = 680\nrandom_outside_right_27 = 679\nfor loop_outside in range(random_outside_left_24 // random_outside_right_24):\n    for i in range(0, n):\n        for loop_inside in range(random_inside_left_24 % random_inside_right_24):\n            (a, b) = map(int, input().split())\n            lst.append(substract(a, b))\nfor loop_outside in range(random_outside_left_27 // random_outside_right_27):\n    for i in lst:\n        for loop_inside in range(random_inside_left_27 % random_inside_right_27):\n            print(i)", "effort_before": "3932.518895570399", "effort_after": "4205.474085815992", "difficulty_before": "13.416666666666666", "difficulty_after": "10.8", "calculated_length_before": "62.67103446305711", "calculated_length_after": "110.43856189774725", "length_before": "69", "length_after": "81", "vocabulary_before": "19", "vocabulary_after": "28", "mi_value_before": "50.42", "mi_value_after": "45.74", "Nloc_before": "28", "Nloc_after": "40", "AvgCCN_before": "3.0", "AvgCCN_after": "7.0"}, "atcoder_AGC006_B": {"id": "atcoder_AGC006_B", "language": "Python", "dataset": "Avatar", "pass_before": 3, "pass_after": 0, "filepath_before": "/home/yang/contamination/Avatar_Python_Before/atcoder_AGC006_B.py", "filepath_after": "/home/yang/contamination/Avatar_Python_After/atcoder_AGC006_B.py", "code_before": "from itertools import permutations\nN, X = [int(_) for _ in input().split()]\n\n\ndef calc(x):\n    def sub(y, debug=0):\n        if debug:\n            print(\"D\", y)\n        while len(y) > 1:\n            y = [sorted(y[i: i + 3])[1] for i in range(len(y) - 2)]\n            if debug:\n                print(\"D\", y)\n        return y\n    y = sub(x)\n    if y[0] == 2:\n        pass\n        sub(x, 1)\n        print(\"=\", x)\n    return y[0]\n\n\nif X == 1 or X == N * 2 - 1:\n    print(\"No\")\nelse:\n    print(\"Yes\")\n    if X == N * 2 - 2:\n        xs = list(range(N - 1, X + 2)) + list(range(1, N - 1))\n    else:\n        ys = list(range(1, X - 1)) + list(range(X + 3, N * 2))\n        xs = ys[: N - 3] + [X + 2, X - 1, X, X + 1] + ys[N - 3:]\n    for x in xs:\n        print(x)\n", "code_after": "from itertools import permutations\n(N, X) = [int(_) for _ in input().split()]\n\ndef calc(x):\n\n    def sub(y, debug=0):\n        if debug:\n            print('D', y)\n        while len(y) > 1:\n            y = [sorted(y[i:i + 3])[1] for i in range(len(y) - 2)]\n            if debug:\n                print('D', y)\n        return y\n    y = sub(x)\n    if y[0] == 2:\n        pass\n        sub(x, 1)\n        print('=', x)\n    return y[0]\nrandom_outside_if_left_20 = 510\nrandom_outside_if_right_20 = 509\nif random_outside_if_left_20 & random_outside_if_right_20:\n    if X == 1 or X == N * 2 - 1:\n        print('No')\n    else:\n        print('Yes')\n        if X == N * 2 - 2:\n            xs = list(range(N - 1, X + 2)) + list(range(1, N - 1))\n        else:\n            ys = list(range(1, X - 1)) + list(range(X + 3, N * 2))\n            xs = ys[:N - 3] + [X + 2, X - 1, X, X + 1] + ys[N - 3:]\n        for x in xs:\n            print(x)\nelse:\n    print('Yes')\n    if X == N * 2 - 2:\n        xs = list(range(N - 1, X + 2)) + list(range(1, N - 1))\n    else:\n        ys = list(range(1, X - 1)) + list(range(X + 3, N * 2))\n        xs = ys[:N - 3] + [X + 2, X - 1, X, X + 1] + ys[N - 3:]\n    for x in xs:\n        print(x)", "effort_before": "2451.5755420082087", "effort_after": "6293.461514855115", "difficulty_before": "6.0", "difficulty_after": "8.256410256410257", "calculated_length_before": "143.89173756274062", "calculated_length_after": "225.78217099003092", "length_before": "81", "length_after": "138", "vocabulary_before": "33", "vocabulary_after": "46", "mi_value_before": "48.38", "mi_value_after": "42.76", "Nloc_before": "28", "Nloc_after": "40", "AvgCCN_before": "6.0", "AvgCCN_after": "9.0"}, "codeforces_302_A": {"id": "codeforces_302_A", "language": "Python", "dataset": "Avatar", "pass_before": 1, "pass_after": 0, "filepath_before": "/home/yang/contamination/Avatar_Python_Before/codeforces_302_A.py", "filepath_after": "/home/yang/contamination/Avatar_Python_After/codeforces_302_A.py", "code_before": "n, m = map(int, input().split())\nsa = input().count(\"-\")\nsa = min([n - sa, sa])\nss = []\nfor _ in range(m):\n    a, b = map(int, input().split())\n    b -= a\n    ss.append((b % 2 and b <= sa << 1) and \"1\\n\" or \"0\\n\")\nprint(\"\".join(ss))\n", "code_after": "(n, m) = map(int, input().split())\nsa = input().count('-')\nsa = min([n - sa, sa])\nss = []\nrandom_inside_left_5 = 430\nrandom_inside_right_5 = 429\nrandom_outside_left_5 = 400\nrandom_outside_right_5 = 399\nfor loop_outside in range(random_outside_left_5 // random_outside_right_5):\n    for _ in range(m):\n        for loop_inside in range(random_inside_left_5 % random_inside_right_5):\n            (a, b) = map(int, input().split())\n            b -= a\n            ss.append((b % 2 and b <= sa << 1) and '1\\n' or '0\\n')\nprint(''.join(ss))", "effort_before": "376.43173042207775", "effort_after": "566.3777206773193", "difficulty_before": "3.6923076923076925", "difficulty_after": "4.117647058823529", "calculated_length_before": "63.61549134016113", "calculated_length_after": "89.13835275565901", "length_before": "24", "length_after": "30", "vocabulary_before": "19", "vocabulary_after": "24", "mi_value_before": "63.45", "mi_value_after": "57.82", "Nloc_before": "9", "Nloc_after": "15", "AvgCCN_before": "5.0", "AvgCCN_after": "7.0"}, "codeforces_190_A": {"id": "codeforces_190_A", "language": "Python", "dataset": "Avatar", "pass_before": 2, "pass_after": 0, "filepath_before": "/home/yang/contamination/Avatar_Python_Before/codeforces_190_A.py", "filepath_after": "/home/yang/contamination/Avatar_Python_After/codeforces_190_A.py", "code_before": "n, m = map(int, input().split())\nif n < 1:\n    if m < 1:\n        print(n, m)\n        quit()\n    print(\"Impossible\")\n    quit()\nif m > n:\n    min = m\n    max = n + m - 1\n    print(min, max)\nif m <= n:\n    min = n\n    max = n + m - 1\n    if m == 0:\n        max = n\n    print(min, max)\n", "code_after": "(n, m) = map(int, input().split())\nrandom_outside_if_left_2 = 618\nrandom_outside_if_right_2 = 617\nrandom_outside_if_left_8 = 317\nrandom_outside_if_right_8 = 316\nrandom_outside_if_left_12 = 938\nrandom_outside_if_right_12 = 937\nif random_outside_if_left_2 & random_outside_if_right_2:\n    if n < 1:\n        if m < 1:\n            print(n, m)\n            quit()\n        print('Impossible')\n        quit()\nif random_outside_if_left_8 & random_outside_if_right_8:\n    if m > n:\n        min = m\n        max = n + m - 1\n        print(min, max)\nif random_outside_if_left_12 & random_outside_if_right_12:\n    if m <= n:\n        min = n\n        max = n + m - 1\n        if m == 0:\n            max = n\n        print(min, max)", "effort_before": "871.145887675241", "effort_after": "1070.4777333877835", "difficulty_before": "9.0", "difficulty_after": "7.0", "calculated_length_before": "31.019550008653873", "calculated_length_after": "62.67103446305711", "length_before": "27", "length_after": "36", "vocabulary_before": "12", "vocabulary_after": "19", "mi_value_before": "57.91", "mi_value_after": "52.27", "Nloc_before": "17", "Nloc_after": "26", "AvgCCN_before": "6.0", "AvgCCN_after": "9.0"}, "atcoder_ABC105_D": {"id": "atcoder_ABC105_D", "language": "Python", "dataset": "Avatar", "pass_before": 0, "pass_after": 0, "filepath_before": "/home/yang/contamination/Avatar_Python_Before/atcoder_ABC105_D.py", "filepath_after": "/home/yang/contamination/Avatar_Python_After/atcoder_ABC105_D.py", "code_before": "from sys import stdin\nfrom collections import Counter\nimport numpy as np\nN, M = [int(x) for x in stdin.readline().split()]\nA = np.array([int(a) for a in stdin.readline().split()], dtype=np.int64)\ncum_remainders = (np.hstack([0, A]) % M).cumsum() % M\nremainder_counts = Counter(cum_remainders)\ncombinations = 0\nfor count in remainder_counts.values():\n    combinations += count * (count - 1) // 2\nprint(combinations)\n", "code_after": "from sys import stdin\nfrom collections import Counter\nimport numpy as np\n(N, M) = [int(x) for x in stdin.readline().split()]\nA = np.array([int(a) for a in stdin.readline().split()], dtype=np.int64)\nvariable_0_6 = 0\ncum_remainders = (np.hstack([variable_0_6, A]) % M).cumsum() % M\nremainder_counts = Counter(cum_remainders)\ncombinations = 0\nrandom_inside_left_9 = 7\nrandom_inside_right_9 = 6\nrandom_outside_left_9 = 756\nrandom_outside_right_9 = 755\nfor loop_outside in range(random_outside_left_9 // random_outside_right_9):\n    for count in remainder_counts.values():\n        for loop_inside in range(random_inside_left_9 % random_inside_right_9):\n            combinations += count * (count - 1) // 2\nprint(combinations)", "effort_before": "210.97209216286", "effort_after": "291.28645806470297", "difficulty_before": "3.0", "difficulty_after": "2.857142857142857", "calculated_length_before": "44.82892142331043", "calculated_length_after": "64.91260938324326", "length_before": "18", "length_after": "24", "vocabulary_before": "15", "vocabulary_after": "19", "mi_value_before": "62.99", "mi_value_after": "57.24", "Nloc_before": "11", "Nloc_after": "18", "AvgCCN_before": "4.0", "AvgCCN_after": "6.0"}, "codeforces_242_B": {"id": "codeforces_242_B", "language": "Python", "dataset": "Avatar", "pass_before": 3, "pass_after": 0, "filepath_before": "/home/yang/contamination/Avatar_Python_Before/codeforces_242_B.py", "filepath_after": "/home/yang/contamination/Avatar_Python_After/codeforces_242_B.py", "code_before": "import os\nimport sys\nimport io\nimport math\nfrom tokenize import Triple\nfrom math import *\ndef I(): return [* map(int, sys.stdin.readline().split())]\ndef IS(): return input()\n\n\ndef IN(): return int(input())\ndef IF(): return float(input())\n\n\nn = IN()\nid = 0\nl, r = map(int, input().split())\nfor i in range(1, n):\n    li, ri = map(int, input().split())\n    if li <= l and r <= ri:\n        id = i\n    elif li < l or r < ri:\n        id = n\n    l = min(l, li)\n    r = max(r, ri)\nprint(- 1 if id == n else id + 1)\n", "code_after": "import os\nimport sys\nimport io\nimport math\nfrom tokenize import Triple\nfrom math import *\n\ndef I():\n    return [*map(int, sys.stdin.readline().split())]\n\ndef IS():\n    return input()\n\ndef IN():\n    return int(input())\n\ndef IF():\n    return float(input())\nn = IN()\nid = 0\n(l, r) = map(int, input().split())\nrandom_inside_left_22 = 239\nrandom_inside_right_22 = 238\nrandom_outside_left_22 = 272\nrandom_outside_right_22 = 271\nfor loop_outside in range(random_outside_left_22 // random_outside_right_22):\n    for i in range(1, n):\n        for loop_inside in range(random_inside_left_22 % random_inside_right_22):\n            (li, ri) = map(int, input().split())\n            if li <= l and r <= ri:\n                id = i\n            elif li < l or r < ri:\n                id = n\n            l = min(l, li)\n            r = max(r, ri)\nprint(-1 if id == n else id + 1)", "effort_before": "586.4430888392052", "effort_after": "924.3284401453852", "difficulty_before": "5.409090909090909", "difficulty_after": "6.3", "calculated_length_before": "57.705232259413506", "calculated_length_after": "87.1326839471086", "length_before": "26", "length_after": "32", "vocabulary_before": "18", "vocabulary_after": "24", "mi_value_before": "53.58", "mi_value_after": "50.49", "Nloc_before": "22", "Nloc_after": "32", "AvgCCN_before": "7.0", "AvgCCN_after": "9.0"}, "codeforces_203_A": {"id": "codeforces_203_A", "language": "Python", "dataset": "Avatar", "pass_before": 2, "pass_after": 2, "filepath_before": "/home/yang/contamination/Avatar_Python_Before/codeforces_203_A.py", "filepath_after": "/home/yang/contamination/Avatar_Python_After/codeforces_203_A.py", "code_before": "xxs = input().split(\" \")\nx, t, a, b, da, db = int(xxs[0]), int(xxs[1]), int(\n    xxs[2]), int(xxs[3]), int(xxs[4]), int(xxs[5])\n\n\ndef main():\n    if x == 0:\n        print(\"YES\")\n        return \"Result Found\"\n    a_time = min([a // da, t - 1])\n    b_time = min([b // db, t - 1])\n    for i in range(a_time + 1):\n        for j in range(b_time + 1):\n            if a - da * i == x or b - db * j == x:\n                print(\"YES\")\n                return \"Result Found\"\n            if (a - da * i) + (b - db * j) == x:\n                print(\"YES\")\n                return \"Result Found\"\n    return \"Result Not Found\"\n\n\nff = main()\nif ff == \"Result Not Found\":\n    print(\"NO\")\n", "code_after": "xxs = input().split(' ')\n(x, t, a, b, da, db) = (int(xxs[0]), int(xxs[1]), int(xxs[2]), int(xxs[3]), int(xxs[4]), int(xxs[5]))\n\ndef main():\n    if x == 0:\n        print('YES')\n        return 'Result Found'\n    a_time = min([a // da, t - 1])\n    b_time = min([b // db, t - 1])\n    for i in range(a_time + 1):\n        for j in range(b_time + 1):\n            if a - da * i == x or b - db * j == x:\n                print('YES')\n                return 'Result Found'\n            if a - da * i + (b - db * j) == x:\n                print('YES')\n                return 'Result Found'\n    return 'Result Not Found'\nff = main()\nrandom_outside_if_left_20 = 684\nrandom_outside_if_right_20 = 683\nif random_outside_if_left_20 & random_outside_if_right_20:\n    if ff == 'Result Not Found':\n        print('NO')", "effort_before": "1573.0564124740408", "effort_after": "1915.1471229062388", "difficulty_before": "5.04", "difficulty_after": "5.703703703703703", "calculated_length_before": "131.60617974869504", "calculated_length_after": "148.0334470128169", "length_before": "63", "length_after": "66", "vocabulary_before": "31", "vocabulary_after": "34", "mi_value_before": "53.42", "mi_value_after": "51.80", "Nloc_before": "21", "Nloc_after": "23", "AvgCCN_before": "2.0", "AvgCCN_after": "3.0"}, "codeforces_534_B": {"id": "codeforces_534_B", "language": "Python", "dataset": "Avatar", "pass_before": 3, "pass_after": 3, "filepath_before": "/home/yang/contamination/Avatar_Python_Before/codeforces_534_B.py", "filepath_after": "/home/yang/contamination/Avatar_Python_After/codeforces_534_B.py", "code_before": "v1, v2 = input().split()\nt, d = input().split()\nv1 = int(v1)\nv2 = int(v2)\nt = int(t)\nd = int(d)\na = 1\nv = v1\ndistance = 0\nfor i in range(t):\n    if v - v2 > (t - i - 1) * d:\n        a *= - 1\n        v = (t - i - 1) * d + v2\n    distance += v\n    v += a * d\nprint(distance)\n", "code_after": "(v1, v2) = input().split()\n(t, d) = input().split()\nv1 = int(v1)\nv2 = int(v2)\nt = int(t)\nd = int(d)\na = 1\nv = v1\ndistance = 0\nrandom_inside_left_10 = 650\nrandom_inside_right_10 = 649\nrandom_outside_left_10 = 70\nrandom_outside_right_10 = 69\nfor loop_outside in range(random_outside_left_10 // random_outside_right_10):\n    for i in range(t):\n        for loop_inside in range(random_inside_left_10 % random_inside_right_10):\n            if v - v2 > (t - i - 1) * d:\n                a *= -1\n                v = (t - i - 1) * d + v2\n            distance += v\n            v += a * d\nprint(distance)", "effort_before": "725.9692355634542", "effort_after": "1167.3860202396547", "difficulty_before": "3.9705882352941178", "difficulty_after": "5.166666666666667", "calculated_length_before": "81.0965087756926", "calculated_length_after": "111.8901503327572", "length_before": "41", "length_after": "47", "vocabulary_before": "22", "vocabulary_after": "28", "mi_value_before": "56.92", "mi_value_after": "53.14", "Nloc_before": "16", "Nloc_after": "22", "AvgCCN_before": "3.0", "AvgCCN_after": "5.0"}, "codeforces_296_A": {"id": "codeforces_296_A", "language": "Python", "dataset": "Avatar", "pass_before": 0, "pass_after": 0, "filepath_before": "/home/yang/contamination/Avatar_Python_Before/codeforces_296_A.py", "filepath_after": "/home/yang/contamination/Avatar_Python_After/codeforces_296_A.py", "code_before": "n = int(input())\nm = input().split()\npossible = True\nfor i in set(m):\n    if m.count(i) >= n / 2 + 1:\n        possible = False\n        break\nprint('YES' if possible else 'NO')\n", "code_after": "n = int(input())\nm = input().split()\npossible = True\nrandom_inside_left_4 = 533\nrandom_inside_right_4 = 532\nrandom_outside_left_4 = 259\nrandom_outside_right_4 = 258\nfor loop_outside in range(random_outside_left_4 // random_outside_right_4):\n    for i in set(m):\n        for loop_inside in range(random_inside_left_4 % random_inside_right_4):\n            if m.count(i) >= n / 2 + 1:\n                possible = False\n                break\nprint('YES' if possible else 'NO')", "effort_before": "42.793987519471216", "effort_after": "146.50839733531944", "difficulty_before": "1.5", "difficulty_after": "2.5", "calculated_length_before": "20.264662506490406", "calculated_length_after": "44.82892142331043", "length_before": "9", "length_after": "15", "vocabulary_before": "9", "vocabulary_after": "15", "mi_value_before": "68.46", "mi_value_after": "61.16", "Nloc_before": "8", "Nloc_after": "14", "AvgCCN_before": "4.0", "AvgCCN_after": "6.0"}, "atcoder_ABC152_C": {"id": "atcoder_ABC152_C", "language": "Python", "dataset": "Avatar", "pass_before": 3, "pass_after": 3, "filepath_before": "/home/yang/contamination/Avatar_Python_Before/atcoder_ABC152_C.py", "filepath_after": "/home/yang/contamination/Avatar_Python_After/atcoder_ABC152_C.py", "code_before": "import numpy as np\nN = int(input())\nn = [int(x) for x in input().split()]\nn = np.array(n)\na = 1\npos = 0\nfor i in range(1, N):\n    if n[pos] > n[i]:\n        a += 1\n        pos = i\nprint(a)\n", "code_after": "import numpy as np\nN = int(input())\nn = [int(x) for x in input().split()]\nn = np.array(n)\na = 1\npos = 0\nrandom_inside_left_7 = 296\nrandom_inside_right_7 = 295\nrandom_outside_left_7 = 96\nrandom_outside_right_7 = 95\nfor loop_outside in range(random_outside_left_7 // random_outside_right_7):\n    for i in range(1, N):\n        for loop_inside in range(random_inside_left_7 % random_inside_right_7):\n            if n[pos] > n[i]:\n                a += 1\n                pos = i\nprint(a)", "effort_before": "15.509775004326936", "effort_after": "86.03910001730776", "difficulty_before": "1.0", "difficulty_after": "2.0", "calculated_length_before": "10.0", "calculated_length_after": "32.0", "length_before": "6", "length_after": "12", "vocabulary_before": "6", "vocabulary_after": "12", "mi_value_before": "67.58", "mi_value_after": "60.37", "Nloc_before": "11", "Nloc_after": "17", "AvgCCN_before": "4.0", "AvgCCN_after": "6.0"}, "codeforces_445_A": {"id": "codeforces_445_A", "language": "Python", "dataset": "Avatar", "pass_before": 3, "pass_after": 1, "filepath_before": "/home/yang/contamination/Avatar_Python_Before/codeforces_445_A.py", "filepath_after": "/home/yang/contamination/Avatar_Python_After/codeforces_445_A.py", "code_before": "n, m = map(int, input().split())\nl = []\nfor i in range(n):\n    s = input()\n    s = list(s)\n    for j in range(m):\n        if s[j] == '.':\n            if (i + j) & 1:\n                s[j] = 'W'\n            else:\n                s[j] = 'B'\n    l.append(s)\nfor c in l:\n    print(\"\".join(c))\n", "code_after": "(n, m) = map(int, input().split())\nl = []\nrandom_inside_left_3 = 538\nrandom_inside_right_3 = 537\nrandom_outside_left_3 = 452\nrandom_outside_right_3 = 451\nrandom_inside_left_13 = 112\nrandom_inside_right_13 = 111\nrandom_outside_left_13 = 530\nrandom_outside_right_13 = 529\nfor loop_outside in range(random_outside_left_3 // random_outside_right_3):\n    for i in range(n):\n        for loop_inside in range(random_inside_left_3 % random_inside_right_3):\n            s = input()\n            s = list(s)\n            for j in range(m):\n                if s[j] == '.':\n                    if i + j & 1:\n                        s[j] = 'W'\n                    else:\n                        s[j] = 'B'\n            l.append(s)\nfor loop_outside in range(random_outside_left_13 // random_outside_right_13):\n    for c in l:\n        for loop_inside in range(random_inside_left_13 % random_inside_right_13):\n            print(''.join(c))", "effort_before": "42.793987519471216", "effort_after": "223.01619445578822", "difficulty_before": "1.5", "difficulty_after": "2.5", "calculated_length_before": "20.264662506490406", "calculated_length_after": "64.91260938324326", "length_before": "9", "length_after": "21", "vocabulary_before": "9", "vocabulary_after": "19", "mi_value_before": "63.35", "mi_value_after": "53.77", "Nloc_before": "14", "Nloc_after": "26", "AvgCCN_before": "6.0", "AvgCCN_after": "10.0"}, "codeforces_400_A": {"id": "codeforces_400_A", "language": "Python", "dataset": "Avatar", "pass_before": 0, "pass_after": 0, "filepath_before": "/home/yang/contamination/Avatar_Python_Before/codeforces_400_A.py", "filepath_after": "/home/yang/contamination/Avatar_Python_After/codeforces_400_A.py", "code_before": "import collections\nimport heapq\nimport sys\nimport math\nimport itertools\nimport bisect\nfrom io import BytesIO, IOBase\nimport os\ndef value(): return tuple(map(int, input().split()))\ndef values(): return tuple(map(int, sys.stdin.readline().split()))\ndef inlst(): return [int(i) for i in input().split()]\ndef inlsts(): return [int(i) for i in sys.stdin.readline().split()]\ndef inp(): return int(input())\ndef inps(): return int(sys.stdin.readline())\ndef instr(): return input()\ndef stlst(): return [i for i in input().split()]\n\n\ndef help(a, b, l):\n    tot = []\n    for i in range(b):\n        tot.append(l[i * a: i * a + a])\n    for i in zip(* tot):\n        if sum((i)) == b:\n            return True\n    return False\n\n\ndef solve():\n    tot = []\n    x = instr()\n    s = []\n    for i in x:\n        if i == 'O':\n            s.append(0)\n        else:\n            s.append(1)\n    for i in range(1, 13):\n        if 12 % i == 0:\n            if help(i, 12 // i, s):\n                tot.append((12 // i, i))\n    print(len(tot), end=' ')\n    for a, b in sorted(tot):\n        print(f'{a}x{b}', end=' ')\n    print()\n\n\nif __name__ == \"__main__\":\n    for i in range(inp()):\n        solve()\n", "code_after": "import collections\nimport heapq\nimport sys\nimport math\nimport itertools\nimport bisect\nfrom io import BytesIO, IOBase\nimport os\n\ndef value():\n    return tuple(map(int, input().split()))\n\ndef values():\n    return tuple(map(int, sys.stdin.readline().split()))\n\ndef inlst():\n    return [int(i) for i in input().split()]\n\ndef inlsts():\n    return [int(i) for i in sys.stdin.readline().split()]\n\ndef inp():\n    return int(input())\n\ndef inps():\n    return int(sys.stdin.readline())\n\ndef instr():\n    return input()\n\ndef stlst():\n    return [i for i in input().split()]\n\ndef help(a, b, l):\n    tot = []\n    for i in range(b):\n        tot.append(l[i * a:i * a + a])\n    for i in zip(*tot):\n        if sum(i) == b:\n            return True\n    return False\n\ndef solve():\n    tot = []\n    x = instr()\n    s = []\n    for i in x:\n        if i == 'O':\n            s.append(0)\n        else:\n            s.append(1)\n    for i in range(1, 13):\n        if 12 % i == 0:\n            if help(i, 12 // i, s):\n                tot.append((12 // i, i))\n    print(len(tot), end=' ')\n    for (a, b) in sorted(tot):\n        print(f'{a}x{b}', end=' ')\n    print()\nrandom_inside_left_60 = 886\nrandom_inside_right_60 = 885\nrandom_outside_left_60 = 270\nrandom_outside_right_60 = 269\nfor loop_outside in range(random_outside_left_60 // random_outside_right_60):\n    for i in range(inp()):\n        for loop_inside in range(random_inside_left_60 % random_inside_right_60):\n            solve()", "effort_before": "510.93285515629253", "effort_after": "550.713459778579", "difficulty_before": "4.166666666666667", "difficulty_after": "3.9285714285714284", "calculated_length_before": "54.62919048309069", "calculated_length_after": "64.91260938324326", "length_before": "30", "length_after": "33", "vocabulary_before": "17", "vocabulary_after": "19", "mi_value_before": "47.18", "mi_value_after": "45.80", "Nloc_before": "44", "Nloc_after": "57", "AvgCCN_before": "3.0", "AvgCCN_after": "4.0"}, "atcoder_ABC178_A": {"id": "atcoder_ABC178_A", "language": "Python", "dataset": "Avatar", "pass_before": 1, "pass_after": 0, "filepath_before": "/home/yang/contamination/Avatar_Python_Before/atcoder_ABC178_A.py", "filepath_after": "/home/yang/contamination/Avatar_Python_After/atcoder_ABC178_A.py", "code_before": "import os\nfrom sys import stdin, stdout\n\n\ndef solve(tc):\n    a = int(stdin.readline().strip())\n    print(1 if a == 0 else 0)\n\n\ntcs = 1\ntc = 1\nwhile tc <= tcs:\n    solve(tc)\n    tc += 1\n", "code_after": "import os\nfrom sys import stdin, stdout\n\ndef solve(tc):\n    a = int(stdin.readline().strip())\n    print(1 if a == 0 else 0)\ntcs = 1\ntc = 1\nrandom_inside_left_9 = 647\nrandom_inside_right_9 = 646\nrandom_outside_left_9 = 269\nrandom_outside_right_9 = 268\nfor loop_outside in range(random_outside_left_9 // random_outside_right_9):\n    while tc <= tcs:\n        for loop_inside in range(random_inside_left_9 % random_inside_right_9):\n            solve(tc)\n            tc += 1", "effort_before": "48.6", "effort_after": "158.6397884190668", "difficulty_before": "1.8", "difficulty_after": "2.7777777777777777", "calculated_length_before": "16.36452797660028", "calculated_length_after": "40.13896548741762", "length_before": "9", "length_after": "15", "vocabulary_before": "8", "vocabulary_after": "14", "mi_value_before": "66.99", "mi_value_after": "60.32", "Nloc_before": "10", "Nloc_after": "16", "AvgCCN_before": "2.0", "AvgCCN_after": "4.0"}, "codeforces_705_B": {"id": "codeforces_705_B", "language": "Python", "dataset": "Avatar", "pass_before": 3, "pass_after": 3, "filepath_before": "/home/yang/contamination/Avatar_Python_Before/codeforces_705_B.py", "filepath_after": "/home/yang/contamination/Avatar_Python_After/codeforces_705_B.py", "code_before": "import sys\ninput = sys.stdin.readline\nn = int(input())\nw = list(map(int, input().split()))\nc = 2\nfor i in w:\n    if i == 1:\n        print(c)\n    elif i % 2 == 0:\n        c = 3 - c\n        print(c)\n    else:\n        print(c)\n", "code_after": "import sys\ninput = sys.stdin.readline\nn = int(input())\nw = list(map(int, input().split()))\nc = 2\nrandom_inside_left_6 = 20\nrandom_inside_right_6 = 19\nrandom_outside_left_6 = 359\nrandom_outside_right_6 = 358\nfor loop_outside in range(random_outside_left_6 // random_outside_right_6):\n    for i in w:\n        for loop_inside in range(random_inside_left_6 % random_inside_right_6):\n            if i == 1:\n                print(c)\n            elif i % 2 == 0:\n                c = 3 - c\n                print(c)\n            else:\n                print(c)", "effort_before": "68.33680652339717", "effort_after": "153.43424884571635", "difficulty_before": "1.7142857142857142", "difficulty_after": "2.1818181818181817", "calculated_length_before": "24.406371956566698", "calculated_length_after": "46.053747805010275", "length_before": "12", "length_after": "18", "vocabulary_before": "10", "vocabulary_after": "15", "mi_value_before": "63.25", "mi_value_after": "57.88", "Nloc_before": "13", "Nloc_after": "19", "AvgCCN_before": "4.0", "AvgCCN_after": "6.0"}, "codeforces_242_A": {"id": "codeforces_242_A", "language": "Python", "dataset": "Avatar", "pass_before": 2, "pass_after": 1, "filepath_before": "/home/yang/contamination/Avatar_Python_Before/codeforces_242_A.py", "filepath_after": "/home/yang/contamination/Avatar_Python_After/codeforces_242_A.py", "code_before": "x, y, a, b = map(int, input().split())\ngames = []\nfor i in range(a, x + 1):\n    if (i <= b):\n        continue\n    else:\n        for j in range(b, y + 1):\n            if i > j:\n                games.append((i, j))\nprint(len(games))\nfor i in games:\n    print(f\"{i[0]} {i[1]}\")\n", "code_after": "(x, y, a, b) = map(int, input().split())\ngames = []\nrandom_inside_left_3 = 959\nrandom_inside_right_3 = 958\nrandom_outside_left_3 = 26\nrandom_outside_right_3 = 25\nrandom_inside_left_11 = 63\nrandom_inside_right_11 = 62\nrandom_outside_left_11 = 193\nrandom_outside_right_11 = 192\nfor loop_outside in range(random_outside_left_3 // random_outside_right_3):\n    for i in range(a, x + 1):\n        for loop_inside in range(random_inside_left_3 % random_inside_right_3):\n            if i <= b:\n                continue\n            else:\n                for j in range(b, y + 1):\n                    if i > j:\n                        games.append((i, j))\nprint(len(games))\nfor loop_outside in range(random_outside_left_11 // random_outside_right_11):\n    for i in games:\n        for loop_inside in range(random_inside_left_11 % random_inside_right_11):\n            print(f'{i[0]} {i[1]}')", "effort_before": "76.0782000346155", "effort_after": "291.28645806470297", "difficulty_before": "2.0", "difficulty_after": "2.857142857142857", "calculated_length_before": "20.264662506490406", "calculated_length_after": "64.91260938324326", "length_before": "12", "length_after": "24", "vocabulary_before": "9", "vocabulary_after": "19", "mi_value_before": "63.83", "mi_value_after": "54.10", "Nloc_before": "12", "Nloc_after": "24", "AvgCCN_before": "6.0", "AvgCCN_after": "10.0"}, "atcoder_ABC145_B": {"id": "atcoder_ABC145_B", "language": "Python", "dataset": "Avatar", "pass_before": 3, "pass_after": 2, "filepath_before": "/home/yang/contamination/Avatar_Python_Before/atcoder_ABC145_B.py", "filepath_after": "/home/yang/contamination/Avatar_Python_After/atcoder_ABC145_B.py", "code_before": "n = int(input())\ns = input()\nif n % 2 != 0:\n    print('No')\nelif s[: int(n / 2)] == s[int(n / 2):]:\n    print('Yes')\nelse:\n    print('No')\n", "code_after": "n = int(input())\ns = input()\nrandom_outside_if_left_3 = 884\nrandom_outside_if_right_3 = 883\nif random_outside_if_left_3 & random_outside_if_right_3:\n    if n % 2 != 0:\n        print('No')\n    elif s[:int(n / 2)] == s[int(n / 2):]:\n        print('Yes')\n    else:\n        print('No')\nelif s[:int(n / 2)] == s[int(n / 2):]:\n    print('Yes')\nelse:\n    print('No')", "effort_before": "166.09640474436813", "effort_after": "474.687207366435", "difficulty_before": "3.3333333333333335", "difficulty_after": "4.5", "calculated_length_before": "23.509775004326936", "calculated_length_after": "44.82892142331043", "length_before": "15", "length_after": "27", "vocabulary_before": "10", "vocabulary_after": "15", "mi_value_before": "66.89", "mi_value_after": "58.89", "Nloc_before": "8", "Nloc_after": "15", "AvgCCN_before": "3.0", "AvgCCN_after": "5.0"}, "codeforces_282_B": {"id": "codeforces_282_B", "language": "Python", "dataset": "Avatar", "pass_before": 3, "pass_after": 3, "filepath_before": "/home/yang/contamination/Avatar_Python_Before/codeforces_282_B.py", "filepath_after": "/home/yang/contamination/Avatar_Python_After/codeforces_282_B.py", "code_before": "firstline = int(input())\ntotal = 0\nmemory = []\nfor x in range(firstline):\n    A, G = list(map(int, input().split()))\n    if total + A <= 500:\n        total += A\n        memory.append(\"A\")\n    else:\n        total -= G\n        memory.append(\"G\")\nprint(\"\".join(memory))\n", "code_after": "firstline = int(input())\ntotal = 0\nmemory = []\nrandom_inside_left_4 = 797\nrandom_inside_right_4 = 796\nrandom_outside_left_4 = 926\nrandom_outside_right_4 = 925\nfor loop_outside in range(random_outside_left_4 // random_outside_right_4):\n    for x in range(firstline):\n        for loop_inside in range(random_inside_left_4 % random_inside_right_4):\n            (A, G) = list(map(int, input().split()))\n            if total + A <= 500:\n                total += A\n                memory.append('A')\n            else:\n                total -= G\n                memory.append('G')\nprint(''.join(memory))", "effort_before": "86.39999999999999", "effort_after": "228.44129532345625", "difficulty_before": "2.4", "difficulty_after": "3.3333333333333335", "calculated_length_before": "16.36452797660028", "calculated_length_after": "40.13896548741762", "length_before": "12", "length_after": "18", "vocabulary_before": "8", "vocabulary_after": "14", "mi_value_before": "64.40", "mi_value_after": "58.58", "Nloc_before": "12", "Nloc_after": "18", "AvgCCN_before": "3.0", "AvgCCN_after": "5.0"}, "codeforces_86_A": {"id": "codeforces_86_A", "language": "Python", "dataset": "Avatar", "pass_before": 0, "pass_after": 0, "filepath_before": "/home/yang/contamination/Avatar_Python_Before/codeforces_86_A.py", "filepath_after": "/home/yang/contamination/Avatar_Python_After/codeforces_86_A.py", "code_before": "l, r = [int(x) for x in input().split()]\ncurr = r\ns = 0\nwhile curr:\n    s += 1\n    curr //= 10\nfirst = 10 ** s\nsecond = first // 2\nans = - 1\nfor i in [l, r, first, second]:\n    if i >= l and i <= r:\n        curr = i\n        rev = ''\n        for k in str(curr):\n            rev += str(9 - int(k))\n        ans = max(ans, int(rev) * curr)\nprint(ans)\n", "code_after": "(l, r) = [int(x) for x in input().split()]\ncurr = r\ns = 0\nrandom_inside_left_4 = 983\nrandom_inside_right_4 = 982\nrandom_outside_left_4 = 732\nrandom_outside_right_4 = 731\nfor loop_outside in range(random_outside_left_4 // random_outside_right_4):\n    while curr:\n        for loop_inside in range(random_inside_left_4 % random_inside_right_4):\n            s += 1\n            curr //= 10\nvariable_10_13 = 10\nfirst = variable_10_13 ** s\nvariable_2_14 = 2\nsecond = first // variable_2_14\nans = -1\nrandom_inside_left_10 = 563\nrandom_inside_right_10 = 562\nrandom_outside_left_10 = 989\nrandom_outside_right_10 = 988\nfor loop_outside in range(random_outside_left_10 // random_outside_right_10):\n    for i in [l, r, first, second]:\n        for loop_inside in range(random_inside_left_10 % random_inside_right_10):\n            if i >= l and i <= r:\n                curr = i\n                rev = ''\n                for k in str(curr):\n                    rev += str(9 - int(k))\n                ans = max(ans, int(rev) * curr)\nprint(ans)", "effort_before": "877.6888198674229", "effort_after": "1308.9930259243554", "difficulty_before": "5.90625", "difficulty_after": "5.8", "calculated_length_before": "92.52932501298082", "calculated_length_after": "149.31568569324173", "length_before": "32", "length_after": "44", "vocabulary_before": "25", "vocabulary_after": "35", "mi_value_before": "56.47", "mi_value_after": "49.21", "Nloc_before": "17", "Nloc_after": "31", "AvgCCN_before": "7.0", "AvgCCN_after": "11.0"}, "codeforces_272_B": {"id": "codeforces_272_B", "language": "Python", "dataset": "Avatar", "pass_before": 0, "pass_after": 0, "filepath_before": "/home/yang/contamination/Avatar_Python_Before/codeforces_272_B.py", "filepath_after": "/home/yang/contamination/Avatar_Python_After/codeforces_272_B.py", "code_before": "def main():\n    input()\n    return nPairsWithCommonFX(map(int, input().split()))\n\n\ndef nPairsWithCommonFX(sequence):\n    storage = {}\n    FXs = []\n    for value in sequence:\n        y = f(value)\n        if y not in storage:\n            storage[y] = [value]\n            FXs.append(y)\n        else:\n            storage[y].append(value)\n    return (sum(len(storage[y]) * len(storage[y]) for y in FXs) - sum(len(storage[y]) for y in FXs)) // 2\n\n\ndef f(n):\n    y = 1\n    while n != 1:\n        if n % 2:\n            y += 1\n        n //= 2\n    return y\n\n\nif __name__ == '__main__':\n    print(main())\n", "code_after": "def main():\n    input()\n    return nPairsWithCommonFX(map(int, input().split()))\n\ndef nPairsWithCommonFX(sequence):\n    storage = {}\n    FXs = []\n    for value in sequence:\n        y = f(value)\n        if y not in storage:\n            storage[y] = [value]\n            FXs.append(y)\n        else:\n            storage[y].append(value)\n    return (sum((len(storage[y]) * len(storage[y]) for y in FXs)) - sum((len(storage[y]) for y in FXs))) // 2\n\ndef f(n):\n    y = 1\n    while n != 1:\n        if n % 2:\n            y += 1\n        n //= 2\n    return y\nprint(main())", "effort_before": "619.2239333307791", "effort_after": "475.7678815056816", "difficulty_before": "5.142857142857143", "difficulty_after": "4.666666666666667", "calculated_length_before": "77.30296890880645", "calculated_length_after": "62.67103446305711", "length_before": "27", "length_after": "24", "vocabulary_before": "22", "vocabulary_after": "19", "mi_value_before": "55.05", "mi_value_after": "56.10", "Nloc_before": "23", "Nloc_after": "22", "AvgCCN_before": "2.0", "AvgCCN_after": "1.0"}, "atcoder_ABC165_C": {"id": "atcoder_ABC165_C", "language": "Python", "dataset": "Avatar", "pass_before": 0, "pass_after": 0, "filepath_before": "/home/yang/contamination/Avatar_Python_Before/atcoder_ABC165_C.py", "filepath_after": "/home/yang/contamination/Avatar_Python_After/atcoder_ABC165_C.py", "code_before": "import sys\n\n\ndef solve(N: int, M: int, Q: int, a: \"List[int]\", b: \"List[int]\", c: \"List[int]\", d: \"List[int]\"):\n    res = 0\n\n    def rec(A):\n        nonlocal res\n        if len(A) == N:\n            ans = 0\n            for i in range(Q):\n                if A[b[i] - 1] - A[a[i] - 1] == c[i]:\n                    ans += d[i]\n            res = max(res, ans)\n            return\n        last_max = 1 if len(A) == 0 else A[- 1]\n        for i in range(last_max, M + 1):\n            rec(A + [i])\n    rec([])\n    print(res)\n    return\n\n\ndef main():\n    def iterate_tokens():\n        for line in sys.stdin:\n            for word in line.split():\n                yield word\n    tokens = iterate_tokens()\n    N = int(next(tokens))\n    M = int(next(tokens))\n    Q = int(next(tokens))\n    a = [int()] * (Q)\n    b = [int()] * (Q)\n    c = [int()] * (Q)\n    d = [int()] * (Q)\n    for i in range(Q):\n        a[i] = int(next(tokens))\n        b[i] = int(next(tokens))\n        c[i] = int(next(tokens))\n        d[i] = int(next(tokens))\n    solve(N, M, Q, a, b, c, d)\n\n\nif __name__ == '__main__':\n    main()\n", "code_after": "import sys\n\ndef solve(N: int, M: int, Q: int, a: 'List[int]', b: 'List[int]', c: 'List[int]', d: 'List[int]'):\n    res = 0\n\n    def rec(A):\n        nonlocal res\n        if len(A) == N:\n            ans = 0\n            for i in range(Q):\n                if A[b[i] - 1] - A[a[i] - 1] == c[i]:\n                    ans += d[i]\n            res = max(res, ans)\n            return\n        last_max = 1 if len(A) == 0 else A[-1]\n        for i in range(last_max, M + 1):\n            rec(A + [i])\n    rec([])\n    print(res)\n    return\n\ndef main():\n\n    def iterate_tokens():\n        for line in sys.stdin:\n            for word in line.split():\n                yield word\n    tokens = iterate_tokens()\n    N = int(next(tokens))\n    M = int(next(tokens))\n    Q = int(next(tokens))\n    a = [int()] * Q\n    b = [int()] * Q\n    c = [int()] * Q\n    d = [int()] * Q\n    for i in range(Q):\n        a[i] = int(next(tokens))\n        b[i] = int(next(tokens))\n        c[i] = int(next(tokens))\n        d[i] = int(next(tokens))\n    solve(N, M, Q, a, b, c, d)\nmain()", "effort_before": "666.7592261462502", "effort_after": "619.4508057121654", "difficulty_before": "3.152173913043478", "difficulty_after": "3.2142857142857144", "calculated_length_before": "115.65156546374811", "calculated_length_after": "103.84830635279079", "length_before": "44", "length_after": "41", "vocabulary_before": "28", "vocabulary_after": "26", "mi_value_before": "48.50", "mi_value_after": "49.16", "Nloc_before": "39", "Nloc_after": "38", "AvgCCN_before": "2.0", "AvgCCN_after": "1.0"}, "codeforces_106_B": {"id": "codeforces_106_B", "language": "Python", "dataset": "Avatar", "pass_before": 2, "pass_after": 0, "filepath_before": "/home/yang/contamination/Avatar_Python_Before/codeforces_106_B.py", "filepath_after": "/home/yang/contamination/Avatar_Python_After/codeforces_106_B.py", "code_before": "n = int(input())\ninput_array = []\nfor i in range(n):\n    S, R, H, C = map(int, input().split())\n    input_array.append((S, R, H, C))\noutdated = []\nfor i in range(n):\n    for j in range(n):\n        if (input_array[i][0] < input_array[j][0] and input_array[i][1] < input_array[j][1] and input_array[i][2] < input_array[j][2]):\n            outdated.append(input_array[i])\noutdated = set(outdated)\nminimum_cost = 100000\ninput_number = 0\nfor i in range(n):\n    current_item = input_array[i]\n    cost = current_item[3]\n    if (current_item not in outdated and cost < minimum_cost):\n        minimum_cost = current_item[3]\n        input_number = i + 1\nprint(input_number)\n", "code_after": "n = int(input())\ninput_array = []\nrandom_inside_left_3 = 160\nrandom_inside_right_3 = 159\nrandom_outside_left_3 = 981\nrandom_outside_right_3 = 980\nrandom_inside_left_7 = 729\nrandom_inside_right_7 = 728\nrandom_outside_left_7 = 407\nrandom_outside_right_7 = 406\nrandom_inside_left_14 = 661\nrandom_inside_right_14 = 660\nrandom_outside_left_14 = 88\nrandom_outside_right_14 = 87\nfor loop_outside in range(random_outside_left_3 // random_outside_right_3):\n    for i in range(n):\n        for loop_inside in range(random_inside_left_3 % random_inside_right_3):\n            (S, R, H, C) = map(int, input().split())\n            input_array.append((S, R, H, C))\noutdated = []\nfor loop_outside in range(random_outside_left_7 // random_outside_right_7):\n    for i in range(n):\n        for loop_inside in range(random_inside_left_7 % random_inside_right_7):\n            for j in range(n):\n                if input_array[i][0] < input_array[j][0] and input_array[i][1] < input_array[j][1] and (input_array[i][2] < input_array[j][2]):\n                    outdated.append(input_array[i])\noutdated = set(outdated)\nminimum_cost = 100000\ninput_number = 0\nfor loop_outside in range(random_outside_left_14 // random_outside_right_14):\n    for i in range(n):\n        for loop_inside in range(random_inside_left_14 % random_inside_right_14):\n            current_item = input_array[i]\n            cost = current_item[3]\n            if current_item not in outdated and cost < minimum_cost:\n                minimum_cost = current_item[3]\n                input_number = i + 1\nprint(input_number)", "effort_before": "219.61587113893805", "effort_after": "661.6775091859006", "difficulty_before": "2.0", "difficulty_after": "3.0", "calculated_length_before": "77.48686830125578", "calculated_length_after": "156.39122386302654", "length_before": "25", "length_after": "43", "vocabulary_before": "21", "vocabulary_after": "35", "mi_value_before": "55.52", "mi_value_after": "46.73", "Nloc_before": "20", "Nloc_after": "38", "AvgCCN_before": "10.0", "AvgCCN_after": "16.0"}, "codeforces_274_A": {"id": "codeforces_274_A", "language": "Python", "dataset": "Avatar", "pass_before": 1, "pass_after": 1, "filepath_before": "/home/yang/contamination/Avatar_Python_Before/codeforces_274_A.py", "filepath_after": "/home/yang/contamination/Avatar_Python_After/codeforces_274_A.py", "code_before": "num, k = [int(x) for x in input().split()]\narr = [int(x) for x in input().split()]\ndifferent = set()\ntemp = 0\narr.sort()\nfor x in arr:\n    if (x % k != 0 or not x // k in different):\n        different.add(x)\n    temp = max(len(different), temp)\nprint(temp)\n", "code_after": "(num, k) = [int(x) for x in input().split()]\narr = [int(x) for x in input().split()]\ndifferent = set()\ntemp = 0\narr.sort()\nrandom_inside_left_6 = 627\nrandom_inside_right_6 = 626\nrandom_outside_left_6 = 95\nrandom_outside_right_6 = 94\nfor loop_outside in range(random_outside_left_6 // random_outside_right_6):\n    for x in arr:\n        for loop_inside in range(random_inside_left_6 % random_inside_right_6):\n            if x % k != 0 or not x // k in different:\n                different.add(x)\n            temp = max(len(different), temp)\nprint(temp)", "effort_before": "243.52951379293097", "effort_after": "338.2003828010854", "difficulty_before": "3.6666666666666665", "difficulty_after": "3.4615384615384617", "calculated_length_before": "44.039100017307746", "calculated_length_after": "63.61549134016113", "length_before": "17", "length_after": "23", "vocabulary_before": "15", "vocabulary_after": "19", "mi_value_before": "63.72", "mi_value_after": "58.15", "Nloc_before": "10", "Nloc_after": "16", "AvgCCN_before": "6.0", "AvgCCN_after": "8.0"}, "atcoder_ABC070_B": {"id": "atcoder_ABC070_B", "language": "Python", "dataset": "Avatar", "pass_before": 2, "pass_after": 1, "filepath_before": "/home/yang/contamination/Avatar_Python_Before/atcoder_ABC070_B.py", "filepath_after": "/home/yang/contamination/Avatar_Python_After/atcoder_ABC070_B.py", "code_before": "A = list(map(int, input().split()))\nif A[1] <= A[2] or A[3] <= A[0]:\n    print(0)\nelse:\n    A.sort()\n    print(A[2] - A[1])\n", "code_after": "A = list(map(int, input().split()))\nrandom_outside_if_left_2 = 241\nrandom_outside_if_right_2 = 240\nif random_outside_if_left_2 & random_outside_if_right_2:\n    if A[1] <= A[2] or A[3] <= A[0]:\n        print(0)\n    else:\n        A.sort()\n        print(A[2] - A[1])\nelse:\n    A.sort()\n    print(A[2] - A[1])", "effort_before": "62.26976913547136", "effort_after": "144.0", "difficulty_before": "1.5", "difficulty_after": "2.0", "calculated_length_before": "28.75488750216347", "calculated_length_after": "51.01955000865388", "length_before": "12", "length_after": "18", "vocabulary_before": "11", "vocabulary_after": "16", "mi_value_before": "69.83", "mi_value_after": "62.16", "Nloc_before": "6", "Nloc_after": "12", "AvgCCN_before": "3.0", "AvgCCN_after": "4.0"}, "codeforces_58_B": {"id": "codeforces_58_B", "language": "Python", "dataset": "Avatar", "pass_before": 0, "pass_after": 0, "filepath_before": "/home/yang/contamination/Avatar_Python_Before/codeforces_58_B.py", "filepath_after": "/home/yang/contamination/Avatar_Python_After/codeforces_58_B.py", "code_before": "n = int(input())\nfor i in range(n, 0, - 1):\n    if n % i == 0:\n        n = i\n        print(i, end=' ')\n", "code_after": "n = int(input())\nrandom_inside_left_2 = 177\nrandom_inside_right_2 = 176\nrandom_outside_left_2 = 739\nrandom_outside_right_2 = 738\nfor loop_outside in range(random_outside_left_2 // random_outside_right_2):\n    for i in range(n, 0, -1):\n        for loop_inside in range(random_inside_left_2 % random_inside_right_2):\n            if n % i == 0:\n                n = i\n                print(i, end=' ')", "effort_before": "36.0", "effort_after": "103.61231210795059", "difficulty_before": "1.5", "difficulty_after": "2.0", "calculated_length_before": "16.36452797660028", "calculated_length_after": "36.52932501298081", "length_before": "8", "length_after": "14", "vocabulary_before": "8", "vocabulary_after": "13", "mi_value_before": "72.96", "mi_value_after": "63.78", "Nloc_before": "5", "Nloc_after": "11", "AvgCCN_before": "3.0", "AvgCCN_after": "5.0"}, "atcoder_ABC123_B": {"id": "atcoder_ABC123_B", "language": "Python", "dataset": "Avatar", "pass_before": 0, "pass_after": 0, "filepath_before": "/home/yang/contamination/Avatar_Python_Before/atcoder_ABC123_B.py", "filepath_after": "/home/yang/contamination/Avatar_Python_After/atcoder_ABC123_B.py", "code_before": "import math\nmenu = []\nfor _ in range(5):\n    m = input()\n    e = int(m[- 1])\n    if e == 0:\n        e = 10\n    menu.append([int(m), e])\nmenu.sort(key=lambda x: x[1])\nans = 0\nfor m in menu[1:]:\n    ans += math.ceil(m[0] / 10) * 10\nprint(ans + menu[0][0])\n", "code_after": "import math\nmenu = []\nrandom_inside_left_3 = 507\nrandom_inside_right_3 = 506\nrandom_outside_left_3 = 917\nrandom_outside_right_3 = 916\nrandom_inside_left_11 = 184\nrandom_inside_right_11 = 183\nrandom_outside_left_11 = 482\nrandom_outside_right_11 = 481\nfor loop_outside in range(random_outside_left_3 // random_outside_right_3):\n    for _ in range(5):\n        for loop_inside in range(random_inside_left_3 % random_inside_right_3):\n            m = input()\n            e = int(m[-1])\n            if e == 0:\n                e = 10\n            menu.append([int(m), e])\nmenu.sort(key=lambda x: x[1])\nans = 0\nfor loop_outside in range(random_outside_left_11 // random_outside_right_11):\n    for m in menu[1:]:\n        for loop_inside in range(random_inside_left_11 % random_inside_right_11):\n            ans += math.ceil(m[0] / 10) * 10\nprint(ans + menu[0][0])", "effort_before": "197.77093622910328", "effort_after": "520.1235401553382", "difficulty_before": "3.0555555555555554", "difficulty_after": "3.911764705882353", "calculated_length_before": "40.13896548741762", "calculated_length_after": "89.13835275565901", "length_before": "17", "length_after": "29", "vocabulary_before": "14", "vocabulary_after": "24", "mi_value_before": "61.13", "mi_value_after": "52.83", "Nloc_before": "13", "Nloc_after": "25", "AvgCCN_before": "4.0", "AvgCCN_after": "8.0"}, "atcoder_ABC125_A": {"id": "atcoder_ABC125_A", "language": "Python", "dataset": "Avatar", "pass_before": 3, "pass_after": 3, "filepath_before": "/home/yang/contamination/Avatar_Python_Before/atcoder_ABC125_A.py", "filepath_after": "/home/yang/contamination/Avatar_Python_After/atcoder_ABC125_A.py", "code_before": "a, b, t = map(int, input().split())\ncookie = 0\ntime = a\nwhile time <= t + 0.5:\n    cookie += b\n    time += a\nprint(cookie)\n", "code_after": "(a, b, t) = map(int, input().split())\ncookie = 0\ntime = a\nrandom_inside_left_4 = 726\nrandom_inside_right_4 = 725\nrandom_outside_left_4 = 575\nrandom_outside_right_4 = 574\nfor loop_outside in range(random_outside_left_4 // random_outside_right_4):\n    while time <= t + 0.5:\n        for loop_inside in range(random_inside_left_4 % random_inside_right_4):\n            cookie += b\n            time += a\nprint(cookie)", "effort_before": "43.47325716263743", "effort_after": "153.43424884571635", "difficulty_before": "1.1428571428571428", "difficulty_after": "2.1818181818181817", "calculated_length_before": "21.651484454403228", "calculated_length_after": "46.053747805010275", "length_before": "12", "length_after": "18", "vocabulary_before": "9", "vocabulary_after": "15", "mi_value_before": "68.97", "mi_value_after": "61.53", "Nloc_before": "7", "Nloc_after": "13", "AvgCCN_before": "2.0", "AvgCCN_after": "4.0"}, "atcoder_ABC143_A": {"id": "atcoder_ABC143_A", "language": "Python", "dataset": "Avatar", "pass_before": 3, "pass_after": 0, "filepath_before": "/home/yang/contamination/Avatar_Python_Before/atcoder_ABC143_A.py", "filepath_after": "/home/yang/contamination/Avatar_Python_After/atcoder_ABC143_A.py", "code_before": "A, B = map(int, input().split())\nans = A - 2 * B\nif ans < 0:\n    ans = 0\nprint(ans)\n", "code_after": "(A, B) = map(int, input().split())\nvariable_2_2 = 2\nans = A - variable_2_2 * B\nrandom_outside_if_left_3 = 99\nrandom_outside_if_right_3 = 98\nif random_outside_if_left_3 & random_outside_if_right_3:\n    if ans < 0:\n        ans = 0\nprint(ans)", "effort_before": "42.793987519471216", "effort_after": "86.03910001730776", "difficulty_before": "1.5", "difficulty_after": "2.0", "calculated_length_before": "20.264662506490406", "calculated_length_after": "32.0", "length_before": "9", "length_after": "12", "vocabulary_before": "9", "vocabulary_after": "12", "mi_value_before": "72.57", "mi_value_after": "66.34", "Nloc_before": "5", "Nloc_after": "9", "AvgCCN_before": "2.0", "AvgCCN_after": "3.0"}, "atcoder_ABC089_C": {"id": "atcoder_ABC089_C", "language": "Python", "dataset": "Avatar", "pass_before": 0, "pass_after": 0, "filepath_before": "/home/yang/contamination/Avatar_Python_Before/atcoder_ABC089_C.py", "filepath_after": "/home/yang/contamination/Avatar_Python_After/atcoder_ABC089_C.py", "code_before": "import numpy as np\nimport sys\nimport re\nfrom collections import deque, defaultdict, Counter\nfrom math import ceil, sqrt, hypot, factorial, pi, sin, cos, radians\nfrom itertools import accumulate, permutations, combinations, combinations_with_replacement, product, groupby\nfrom operator import itemgetter, mul\nfrom copy import deepcopy, copy\nfrom string import ascii_lowercase, ascii_uppercase, digits\nfrom bisect import bisect, bisect_left, insort, insort_left\nfrom fractions import gcd\nfrom heapq import heappush, heappop\nfrom functools import reduce\ndef input(): return sys.stdin.readline().strip()\ndef INT(): return int(input())\ndef MAP(): return map(int, input().split())\ndef LIST(): return list(map(int, input().split()))\ndef ZIP(n): return zip(* (MAP() for _ in range(n)))\n\n\nsys.setrecursionlimit(10 ** 9)\nINF = float('inf')\nmod = 10 ** 9 + 7\nN = INT()\nS = [input() for _ in range(N)]\nmarch = [\"M\", \"A\", \"R\", \"C\", \"H\"]\nmarch_lis = [0] * 5\nfor s in S:\n    if s[0].upper() in march:\n        march_lis[march.index(s[0].upper())] += 1\nans = 0\nfor x, y, z in combinations(march_lis, 3):\n    ans += x * y * z\nprint(ans)\n", "code_after": "import numpy as np\nimport sys\nimport re\nfrom collections import deque, defaultdict, Counter\nfrom math import ceil, sqrt, hypot, factorial, pi, sin, cos, radians\nfrom itertools import accumulate, permutations, combinations, combinations_with_replacement, product, groupby\nfrom operator import itemgetter, mul\nfrom copy import deepcopy, copy\nfrom string import ascii_lowercase, ascii_uppercase, digits\nfrom bisect import bisect, bisect_left, insort, insort_left\nfrom fractions import gcd\nfrom heapq import heappush, heappop\nfrom functools import reduce\n\ndef input():\n    return sys.stdin.readline().strip()\n\ndef INT():\n    return int(input())\n\ndef MAP():\n    return map(int, input().split())\n\ndef LIST():\n    return list(map(int, input().split()))\n\ndef ZIP(n):\n    return zip(*(MAP() for _ in range(n)))\nsys.setrecursionlimit(10 ** 9)\nINF = float('inf')\nvariable_7_31 = 7\nvariable_10_31 = 10\nvariable_9_31 = 9\nmod = variable_10_31 ** variable_9_31 + variable_7_31\nN = INT()\nS = [input() for _ in range(N)]\nmarch = ['M', 'A', 'R', 'C', 'H']\nvariable_5_35 = 5\nvariable_0_35 = 0\nmarch_lis = [variable_0_35] * variable_5_35\nrandom_inside_left_36 = 701\nrandom_inside_right_36 = 700\nrandom_outside_left_36 = 575\nrandom_outside_right_36 = 574\nrandom_inside_left_40 = 126\nrandom_inside_right_40 = 125\nrandom_outside_left_40 = 469\nrandom_outside_right_40 = 468\nfor loop_outside in range(random_outside_left_36 // random_outside_right_36):\n    for s in S:\n        for loop_inside in range(random_inside_left_36 % random_inside_right_36):\n            if s[0].upper() in march:\n                march_lis[march.index(s[0].upper())] += 1\nans = 0\nfor loop_outside in range(random_outside_left_40 // random_outside_right_40):\n    for (x, y, z) in combinations(march_lis, 3):\n        for loop_inside in range(random_inside_left_40 % random_inside_right_40):\n            ans += x * y * z\nprint(ans)", "effort_before": "262.55713176440725", "effort_after": "585.0", "difficulty_before": "2.25", "difficulty_after": "3.0", "calculated_length_before": "72.0", "calculated_length_after": "137.72120767599534", "length_before": "27", "length_after": "39", "vocabulary_before": "20", "vocabulary_after": "32", "mi_value_before": "50.39", "mi_value_after": "44.79", "Nloc_before": "32", "Nloc_after": "54", "AvgCCN_before": "5.0", "AvgCCN_after": "9.0"}, "atcoder_ABC129_E": {"id": "atcoder_ABC129_E", "language": "Python", "dataset": "Avatar", "pass_before": 3, "pass_after": 0, "filepath_before": "/home/yang/contamination/Avatar_Python_Before/atcoder_ABC129_E.py", "filepath_after": "/home/yang/contamination/Avatar_Python_After/atcoder_ABC129_E.py", "code_before": "mod = 10 ** 9 + 7\nl = input()\nn = len(l)\ndp = [[0] * 2 for _ in range(n + 1)]\ndp[0][0] = 1\nfor i, c in enumerate(l):\n    if c == '0':\n        dp[i + 1][0] += dp[i][0]\n        dp[i + 1][1] += dp[i][1] * 3\n    else:\n        dp[i + 1][0] += dp[i][0] * 2\n        dp[i + 1][1] += dp[i][0]\n        dp[i + 1][1] += dp[i][1] * 3\n    dp[i + 1][0] %= mod\n    dp[i + 1][1] %= mod\nprint((dp[n][0] + dp[n][1]) % mod)\n", "code_after": "variable_7_1 = 7\nvariable_10_1 = 10\nvariable_9_1 = 9\nmod = variable_10_1 ** variable_9_1 + variable_7_1\nl = input()\nn = len(l)\ndp = [[0] * 2 for _ in range(n + 1)]\ndp[0][0] = 1\nrandom_inside_left_6 = 879\nrandom_inside_right_6 = 878\nrandom_outside_left_6 = 859\nrandom_outside_right_6 = 858\nfor loop_outside in range(random_outside_left_6 // random_outside_right_6):\n    for (i, c) in enumerate(l):\n        for loop_inside in range(random_inside_left_6 % random_inside_right_6):\n            if c == '0':\n                dp[i + 1][0] += dp[i][0]\n                dp[i + 1][1] += dp[i][1] * 3\n            else:\n                dp[i + 1][0] += dp[i][0] * 2\n                dp[i + 1][1] += dp[i][0]\n                dp[i + 1][1] += dp[i][1] * 3\n            dp[i + 1][0] %= mod\n            dp[i + 1][1] %= mod\nprint((dp[n][0] + dp[n][1]) % mod)", "effort_before": "1440.9081294342443", "effort_after": "1862.5912226340813", "difficulty_before": "3.870967741935484", "difficulty_after": "4.457142857142857", "calculated_length_before": "165.18972609642998", "calculated_length_after": "195.03468059740075", "length_before": "72", "length_after": "78", "vocabulary_before": "36", "vocabulary_after": "41", "mi_value_before": "54.62", "mi_value_after": "49.97", "Nloc_before": "16", "Nloc_after": "25", "AvgCCN_before": "4.0", "AvgCCN_after": "6.0"}, "atcoder_ABC136_B": {"id": "atcoder_ABC136_B", "language": "Python", "dataset": "Avatar", "pass_before": 3, "pass_after": 3, "filepath_before": "/home/yang/contamination/Avatar_Python_Before/atcoder_ABC136_B.py", "filepath_after": "/home/yang/contamination/Avatar_Python_After/atcoder_ABC136_B.py", "code_before": "def main():\n    N = int(input())\n    i = 1\n    ans = 0\n    while 10 ** i <= N:\n        ans += ((10 ** i) - (10 ** (i - 1)))\n        i += 2\n    ans += max(0, N - 10 ** (i - 1) + 1)\n    print(ans)\n\n\nif __name__ == \"__main__\":\n    main()\n", "code_after": "def main():\n    N = int(input())\n    i = 1\n    ans = 0\n    while 10 ** i <= N:\n        ans += 10 ** i - 10 ** (i - 1)\n        i += 2\n    ans += max(0, N - 10 ** (i - 1) + 1)\n    print(ans)\nmain()", "effort_before": "771.2193505172737", "effort_after": "574.3197998175727", "difficulty_before": "4.117647058823529", "difficulty_after": "3.466666666666667", "calculated_length_before": "81.0965087756926", "calculated_length_after": "66.60335893412778", "length_before": "42", "length_after": "39", "vocabulary_before": "22", "vocabulary_after": "19", "mi_value_before": "60.28", "mi_value_after": "61.61", "Nloc_before": "11", "Nloc_after": "10", "AvgCCN_before": "2.0", "AvgCCN_after": "1.0"}, "atcoder_ABC150_D": {"id": "atcoder_ABC150_D", "language": "Python", "dataset": "Avatar", "pass_before": 0, "pass_after": 0, "filepath_before": "/home/yang/contamination/Avatar_Python_Before/atcoder_ABC150_D.py", "filepath_after": "/home/yang/contamination/Avatar_Python_After/atcoder_ABC150_D.py", "code_before": "import fractions\nimport math\nn, num = map(int, input().split())\nnum_set = set(map(lambda x: int(x), input().split()))\ntwo_times_set = set()\nfor i in num_set:\n    for j in range(1, 30):\n        i //= 2\n        if i % 2 != 0:\n            two_times_set.add(j)\n            break\n    if len(two_times_set) != 1:\n        print(0)\n        break\nelse:\n    num_list = list(num_set)\n    lcm = num_list[0]\n    for i in range(1, len(num_list)):\n        lcm = lcm * num_list[i] // fractions.gcd(lcm, num_list[i])\n    print((num - lcm // 2) // (lcm) + 1)\n", "code_after": "import fractions\nimport math\n(n, num) = map(int, input().split())\nnum_set = set(map(lambda x: int(x), input().split()))\ntwo_times_set = set()\nrandom_inside_left_6 = 567\nrandom_inside_right_6 = 566\nrandom_outside_left_6 = 215\nrandom_outside_right_6 = 214\nfor loop_outside in range(random_outside_left_6 // random_outside_right_6):\n    for i in num_set:\n        for loop_inside in range(random_inside_left_6 % random_inside_right_6):\n            for j in range(1, 30):\n                i //= 2\n                if i % 2 != 0:\n                    two_times_set.add(j)\n                    break\n            if len(two_times_set) != 1:\n                print(0)\n                break\n    else:\n        num_list = list(num_set)\n        lcm = num_list[0]\n        for i in range(1, len(num_list)):\n            lcm = lcm * num_list[i] // fractions.gcd(lcm, num_list[i])\n        print((num - lcm // 2) // lcm + 1)", "effort_before": "555.6764693426609", "effort_after": "660.2346001038466", "difficulty_before": "4.285714285714286", "difficulty_after": "4.0", "calculated_length_before": "68.81274391313339", "calculated_length_after": "90.56842503028855", "length_before": "30", "length_after": "36", "vocabulary_before": "20", "vocabulary_after": "24", "mi_value_before": "54.98", "mi_value_after": "51.69", "Nloc_before": "20", "Nloc_after": "26", "AvgCCN_before": "7.0", "AvgCCN_after": "9.0"}, "atcoder_ABC155_D": {"id": "atcoder_ABC155_D", "language": "Python", "dataset": "Avatar", "pass_before": 0, "pass_after": 0, "filepath_before": "/home/yang/contamination/Avatar_Python_Before/atcoder_ABC155_D.py", "filepath_after": "/home/yang/contamination/Avatar_Python_After/atcoder_ABC155_D.py", "code_before": "N, K = map(int, input().split())\nA = list(map(int, input().split()))\nA.sort()\nll = - 10 ** 18 - 1\nrr = 10 ** 18 + 1\nwhile ll + 1 < rr:\n    x = (ll + rr) // 2\n    tot = 0\n    for i in range(N):\n        if A[i] < 0:\n            l = - 1\n            r = N\n            while l + 1 < r:\n                c = (l + r) // 2\n                if A[i] * A[c] < x:\n                    r = c\n                else:\n                    l = c\n            tot += N - r\n        else:\n            l = - 1\n            r = N\n            while l + 1 < r:\n                c = (l + r) // 2\n                if A[i] * A[c] < x:\n                    l = c\n                else:\n                    r = c\n            tot += r\n        if A[i] * A[i] < x:\n            tot -= 1\n    tot //= 2\n    if tot < K:\n        ll = x\n    else:\n        rr = x\nprint(ll)\n", "code_after": "(N, K) = map(int, input().split())\nA = list(map(int, input().split()))\nA.sort()\nvariable_1_4 = 1\nvariable_10_4 = 10\nvariable_18_4 = 18\nll = -variable_10_4 ** variable_18_4 - variable_1_4\nvariable_1_5 = 1\nvariable_10_5 = 10\nvariable_18_5 = 18\nrr = variable_10_5 ** variable_18_5 + variable_1_5\nrandom_inside_left_6 = 987\nrandom_inside_right_6 = 986\nrandom_outside_left_6 = 977\nrandom_outside_right_6 = 976\nfor loop_outside in range(random_outside_left_6 // random_outside_right_6):\n    while ll + 1 < rr:\n        for loop_inside in range(random_inside_left_6 % random_inside_right_6):\n            x = (ll + rr) // 2\n            tot = 0\n            for i in range(N):\n                if A[i] < 0:\n                    l = -1\n                    r = N\n                    while l + 1 < r:\n                        c = (l + r) // 2\n                        if A[i] * A[c] < x:\n                            r = c\n                        else:\n                            l = c\n                    tot += N - r\n                else:\n                    l = -1\n                    r = N\n                    while l + 1 < r:\n                        c = (l + r) // 2\n                        if A[i] * A[c] < x:\n                            l = c\n                        else:\n                            r = c\n                    tot += r\n                if A[i] * A[i] < x:\n                    tot -= 1\n            tot //= 2\n            if tot < K:\n                ll = x\n            else:\n                rr = x\nprint(ll)", "effort_before": "3202.1073723647282", "effort_after": "3524.942228964036", "difficulty_before": "6.46969696969697", "difficulty_after": "6.341463414634147", "calculated_length_before": "186.1164903932322", "calculated_length_after": "243.65963218934144", "length_before": "93", "length_after": "99", "vocabulary_before": "40", "vocabulary_after": "49", "mi_value_before": "45.33", "mi_value_after": "42.10", "Nloc_before": "37", "Nloc_after": "49", "AvgCCN_before": "10.0", "AvgCCN_after": "12.0"}, "atcoder_ABC142_C": {"id": "atcoder_ABC142_C", "language": "Python", "dataset": "Avatar", "pass_before": 0, "pass_after": 0, "filepath_before": "/home/yang/contamination/Avatar_Python_Before/atcoder_ABC142_C.py", "filepath_after": "/home/yang/contamination/Avatar_Python_After/atcoder_ABC142_C.py", "code_before": "from operator import itemgetter\nN = int(input())\nA = [(i + 1, int(x)) for i, x in enumerate(input().split())]\nA_ = sorted(A, key=itemgetter(1))\nA__ = [a[0] for a in A_]\nfor i in A__[: - 1]:\n    print(i, end=' ')\nprint(A__[- 1])\n", "code_after": "from operator import itemgetter\nN = int(input())\nA = [(i + 1, int(x)) for (i, x) in enumerate(input().split())]\nA_ = sorted(A, key=itemgetter(1))\nA__ = [a[0] for a in A_]\nrandom_inside_left_6 = 515\nrandom_inside_right_6 = 514\nrandom_outside_left_6 = 456\nrandom_outside_right_6 = 455\nfor loop_outside in range(random_outside_left_6 // random_outside_right_6):\n    for i in A__[:-1]:\n        for loop_inside in range(random_inside_left_6 % random_inside_right_6):\n            print(i, end=' ')\nprint(A__[-1])", "effort_before": "28.0", "effort_after": "115.16017395609524", "difficulty_before": "2.0", "difficulty_after": "2.6666666666666665", "calculated_length_before": "4.0", "calculated_length_after": "23.509775004326936", "length_before": "7", "length_after": "13", "vocabulary_before": "4", "vocabulary_after": "10", "mi_value_before": "70.62", "mi_value_after": "62.09", "Nloc_before": "8", "Nloc_after": "14", "AvgCCN_before": "4.0", "AvgCCN_after": "6.0"}, "codeforces_607_A": {"id": "codeforces_607_A", "language": "Python", "dataset": "Avatar", "pass_before": 1, "pass_after": 0, "filepath_before": "/home/yang/contamination/Avatar_Python_Before/codeforces_607_A.py", "filepath_after": "/home/yang/contamination/Avatar_Python_After/codeforces_607_A.py", "code_before": "n = int(input())\nl = [0 for _ in range(1000010)]\ndp = [0 for _ in range(1000010)]\nfor i in range(n):\n    a, b = map(int, input().split())\n    l[a] = b\nif l[0] > 0:\n    dp[0] = 1\nmx = 0\nfor i in range(1, 1000010):\n    if (l[i] == 0):\n        dp[i] = dp[i - 1]\n    else:\n        if (l[i] >= i):\n            dp[i] = 1\n        else:\n            dp[i] = dp[i - l[i] - 1] + 1\n    if (dp[i] > mx):\n        mx = dp[i]\nprint(n - mx)\n", "code_after": "n = int(input())\nl = [0 for _ in range(1000010)]\ndp = [0 for _ in range(1000010)]\nrandom_inside_left_4 = 317\nrandom_inside_right_4 = 316\nrandom_outside_left_4 = 223\nrandom_outside_right_4 = 222\nrandom_inside_left_10 = 430\nrandom_inside_right_10 = 429\nrandom_outside_left_10 = 781\nrandom_outside_right_10 = 780\nfor loop_outside in range(random_outside_left_4 // random_outside_right_4):\n    for i in range(n):\n        for loop_inside in range(random_inside_left_4 % random_inside_right_4):\n            (a, b) = map(int, input().split())\n            l[a] = b\nrandom_outside_if_left_17 = 380\nrandom_outside_if_right_17 = 379\nif random_outside_if_left_17 & random_outside_if_right_17:\n    if l[0] > 0:\n        dp[0] = 1\nmx = 0\nfor loop_outside in range(random_outside_left_10 // random_outside_right_10):\n    for i in range(1, 1000010):\n        for loop_inside in range(random_inside_left_10 % random_inside_right_10):\n            if l[i] == 0:\n                dp[i] = dp[i - 1]\n            elif l[i] >= i:\n                dp[i] = 1\n            else:\n                dp[i] = dp[i - l[i] - 1] + 1\n            if dp[i] > mx:\n                mx = dp[i]\nprint(n - mx)", "effort_before": "413.85561267659693", "effort_after": "1049.1824255337488", "difficulty_before": "3.75", "difficulty_after": "5.090909090909091", "calculated_length_before": "54.62919048309069", "calculated_length_after": "122.10749561002054", "length_before": "27", "length_after": "42", "vocabulary_before": "17", "vocabulary_after": "30", "mi_value_before": "55.64", "mi_value_after": "48.23", "Nloc_before": "20", "Nloc_after": "34", "AvgCCN_before": "9.0", "AvgCCN_after": "14.0"}, "atcoder_ABC143_D": {"id": "atcoder_ABC143_D", "language": "Python", "dataset": "Avatar", "pass_before": 0, "pass_after": 0, "filepath_before": "/home/yang/contamination/Avatar_Python_Before/atcoder_ABC143_D.py", "filepath_after": "/home/yang/contamination/Avatar_Python_After/atcoder_ABC143_D.py", "code_before": "from bisect import bisect_right, bisect_left\nn, * l = map(int, open(0).read().split())\nl.sort()\nans = 0\nfor i in range(n):\n    for j in range(i + 1, n):\n        a = l[i]\n        b = l[j]\n        right = bisect_left(l, a + b)\n        left = bisect_right(l, max(a - b, b - a))\n        tmp = max(0, right - left)\n        if left <= i < right:\n            tmp -= 1\n        if left <= j < right:\n            tmp -= 1\n        ans += tmp\nprint(ans // 3)\n", "code_after": "from bisect import bisect_right, bisect_left\n(n, *l) = map(int, open(0).read().split())\nl.sort()\nans = 0\nrandom_inside_left_5 = 662\nrandom_inside_right_5 = 661\nrandom_outside_left_5 = 278\nrandom_outside_right_5 = 277\nfor loop_outside in range(random_outside_left_5 // random_outside_right_5):\n    for i in range(n):\n        for loop_inside in range(random_inside_left_5 % random_inside_right_5):\n            for j in range(i + 1, n):\n                a = l[i]\n                b = l[j]\n                right = bisect_left(l, a + b)\n                left = bisect_right(l, max(a - b, b - a))\n                tmp = max(0, right - left)\n                if left <= i < right:\n                    tmp -= 1\n                if left <= j < right:\n                    tmp -= 1\n                ans += tmp\nprint(ans // 3)", "effort_before": "867.3297122250912", "effort_after": "1115.0574484809397", "difficulty_before": "6.0", "difficulty_after": "6.0", "calculated_length_before": "44.82892142331043", "calculated_length_after": "68.81274391313339", "length_before": "37", "length_after": "43", "vocabulary_before": "15", "vocabulary_after": "20", "mi_value_before": "56.82", "mi_value_after": "53.06", "Nloc_before": "17", "Nloc_after": "23", "AvgCCN_before": "5.0", "AvgCCN_after": "7.0"}, "atcoder_ARC086_B": {"id": "atcoder_ARC086_B", "language": "Python", "dataset": "Avatar", "pass_before": 0, "pass_after": 0, "filepath_before": "/home/yang/contamination/Avatar_Python_Before/atcoder_ARC086_B.py", "filepath_after": "/home/yang/contamination/Avatar_Python_After/atcoder_ARC086_B.py", "code_before": "import sys\nimport math\nfrom collections import defaultdict\nsys.setrecursionlimit(10 ** 7)\n\n\ndef input():\n    return sys.stdin.readline()[: - 1]\n\n\nmod = 10 ** 9 + 7\ndef I(): return int(input())\ndef II(): return map(int, input().split())\ndef III(): return list(map(int, input().split()))\n\n\ndef Line(N, num):\n    if N <= 0:\n        return [[]] * num\n    elif num == 1:\n        return [I() for _ in range(N)]\n    else:\n        read_all = [tuple(II()) for _ in range(N)]\n        return map(list, zip(* read_all))\n\n\ndef my_sign(x):\n    return (x > 0) - (x < 0)\n\n\nN = I()\na = III()\nmax_val = 0\nmax_sign = 0\nmax_index = - 1\nfor i, a0 in enumerate(a):\n    if abs(a0) > max_val:\n        max_val = abs(a0)\n        max_sign = my_sign(a0)\n        max_index = i\nif max_sign == 0:\n    print(0)\nelif max_sign == 1:\n    print(2 * N - 1)\n    for i in range(N):\n        print(max_index + 1, i + 1)\n    for i in range(N - 1):\n        print(i + 1, i + 2)\nelse:\n    print(2 * N - 1)\n    for i in range(N):\n        print(max_index + 1, i + 1)\n    for i in range(1, N)[:: - 1]:\n        print(i + 1, i)\n", "code_after": "import sys\nimport math\nfrom collections import defaultdict\nsys.setrecursionlimit(10 ** 7)\n\ndef input():\n    return sys.stdin.readline()[:-1]\nvariable_7_8 = 7\nvariable_10_8 = 10\nvariable_9_8 = 9\nmod = variable_10_8 ** variable_9_8 + variable_7_8\n\ndef I():\n    return int(input())\n\ndef II():\n    return map(int, input().split())\n\ndef III():\n    return list(map(int, input().split()))\n\ndef Line(N, num):\n    if N <= 0:\n        return [[]] * num\n    elif num == 1:\n        return [I() for _ in range(N)]\n    else:\n        read_all = [tuple(II()) for _ in range(N)]\n        return map(list, zip(*read_all))\n\ndef my_sign(x):\n    return (x > 0) - (x < 0)\nN = I()\na = III()\nmax_val = 0\nmax_sign = 0\nmax_index = -1\nrandom_inside_left_35 = 956\nrandom_inside_right_35 = 955\nrandom_outside_left_35 = 565\nrandom_outside_right_35 = 564\nfor loop_outside in range(random_outside_left_35 // random_outside_right_35):\n    for (i, a0) in enumerate(a):\n        for loop_inside in range(random_inside_left_35 % random_inside_right_35):\n            if abs(a0) > max_val:\n                max_val = abs(a0)\n                max_sign = my_sign(a0)\n                max_index = i\nrandom_outside_if_left_46 = 947\nrandom_outside_if_right_46 = 946\nif random_outside_if_left_46 & random_outside_if_right_46:\n    if max_sign == 0:\n        print(0)\n    elif max_sign == 1:\n        print(2 * N - 1)\n        for i in range(N):\n            print(max_index + 1, i + 1)\n        for i in range(N - 1):\n            print(i + 1, i + 2)\n    else:\n        print(2 * N - 1)\n        for i in range(N):\n            print(max_index + 1, i + 1)\n        for i in range(1, N)[::-1]:\n            print(i + 1, i)\nelif max_sign == 1:\n    print(2 * N - 1)\n    for i in range(N):\n        print(max_index + 1, i + 1)\n    for i in range(N - 1):\n        print(i + 1, i + 2)\nelse:\n    print(2 * N - 1)\n    for i in range(N):\n        print(max_index + 1, i + 1)\n    for i in range(1, N)[::-1]:\n        print(i + 1, i)", "effort_before": "3642.8268928488933", "effort_after": "10238.218171412222", "difficulty_before": "9.18", "difficulty_after": "14.4", "calculated_length_before": "144.62572975734892", "calculated_length_after": "222.5444556017277", "length_before": "78", "length_after": "128", "vocabulary_before": "34", "vocabulary_after": "47", "mi_value_before": "43.72", "mi_value_after": "37.10", "Nloc_before": "44", "Nloc_after": "71", "AvgCCN_before": "9.0", "AvgCCN_after": "17.0"}, "atcoder_AGC025_A": {"id": "atcoder_AGC025_A", "language": "Python", "dataset": "Avatar", "pass_before": 0, "pass_after": 0, "filepath_before": "/home/yang/contamination/Avatar_Python_Before/atcoder_AGC025_A.py", "filepath_after": "/home/yang/contamination/Avatar_Python_After/atcoder_AGC025_A.py", "code_before": "n = input()\na = [\"10\", \"100\", \"1000\", \"10000\", \"100000\"]\nnew = sum(list(map(int, n)))\nif n in a:\n    print(10)\nelse:\n    print(new)\n", "code_after": "n = input()\na = ['10', '100', '1000', '10000', '100000']\nnew = sum(list(map(int, n)))\nrandom_outside_if_left_4 = 964\nrandom_outside_if_right_4 = 963\nif random_outside_if_left_4 & random_outside_if_right_4:\n    if n in a:\n        print(10)\n    else:\n        print(new)\nelse:\n    print(new)", "effort_before": "2.3774437510817346", "effort_after": "15.509775004326936", "difficulty_before": "0.5", "difficulty_after": "1.0", "calculated_length_before": "2.0", "calculated_length_after": "10.0", "length_before": "3", "length_after": "6", "vocabulary_before": "3", "vocabulary_after": "6", "mi_value_before": "75.29", "mi_value_after": "66.96", "Nloc_before": "7", "Nloc_after": "12", "AvgCCN_before": "2.0", "AvgCCN_after": "3.0"}, "atcoder_ABC153_A": {"id": "atcoder_ABC153_A", "language": "Python", "dataset": "Avatar", "pass_before": 2, "pass_after": 2, "filepath_before": "/home/yang/contamination/Avatar_Python_Before/atcoder_ABC153_A.py", "filepath_after": "/home/yang/contamination/Avatar_Python_After/atcoder_ABC153_A.py", "code_before": "h, a = map(int, input().split(\" \"))\nsho = int(h / a)\nam = int(h % a)\nif am != 0:\n    sho += 1\nelse:\n    pass\nprint(sho)\n", "code_after": "(h, a) = map(int, input().split(' '))\nsho = int(h / a)\nam = int(h % a)\nrandom_outside_if_left_4 = 916\nrandom_outside_if_right_4 = 915\nif random_outside_if_left_4 & random_outside_if_right_4:\n    if am != 0:\n        sho += 1\n    else:\n        pass\nelse:\n    pass\nprint(sho)", "effort_before": "106.3016990363956", "effort_after": "173.4581117878637", "difficulty_before": "2.6666666666666665", "difficulty_after": "3.125", "calculated_length_before": "23.509775004326936", "calculated_length_after": "35.60964047443681", "length_before": "12", "length_after": "15", "vocabulary_before": "10", "vocabulary_after": "13", "mi_value_before": "67.71", "mi_value_after": "62.38", "Nloc_before": "8", "Nloc_after": "13", "AvgCCN_before": "2.0", "AvgCCN_after": "3.0"}, "atcoder_AGC034_B": {"id": "atcoder_AGC034_B", "language": "Python", "dataset": "Avatar", "pass_before": 0, "pass_after": 0, "filepath_before": "/home/yang/contamination/Avatar_Python_Before/atcoder_AGC034_B.py", "filepath_after": "/home/yang/contamination/Avatar_Python_After/atcoder_AGC034_B.py", "code_before": "import sys\nimport math\nimport collections\nimport heapq\nimport itertools\n\n\ndef gcd(a, b):\n    a, b = max(a, b), min(a, b)\n    while a % b > 0:\n        a, b = b, a % b\n    return b\n\n\ndef solve():\n    s = input()\n    t = \"\"\n    i = 0\n    while i < len(s):\n        if s[i] == \"A\":\n            t += \"A\"\n            i += 1\n        elif s[i] == \"B\":\n            if i < len(s) - 1:\n                if s[i + 1] == \"C\":\n                    t += \"D\"\n                    i += 2\n                else:\n                    t += \"X\"\n                    i += 1\n            else:\n                t += \"X\"\n                i += 1\n        else:\n            t += \"X\"\n            i += 1\n    total = 0\n    numA = 0\n    for i in range(len(t)):\n        if t[i] == \"X\":\n            numA = 0\n        else:\n            if t[i] == \"A\":\n                numA += 1\n            else:\n                total += numA\n    print(total)\n    INF = 10 ** 25\n    mod = 7 + 10 ** 9\n    return 0\n\n\nif __name__ == \"__main__\":\n    solve()\n", "code_after": "import sys\nimport math\nimport collections\nimport heapq\nimport itertools\n\ndef gcd(a, b):\n    (a, b) = (max(a, b), min(a, b))\n    while a % b > 0:\n        (a, b) = (b, a % b)\n    return b\n\ndef solve():\n    s = input()\n    t = ''\n    i = 0\n    while i < len(s):\n        if s[i] == 'A':\n            t += 'A'\n            i += 1\n        elif s[i] == 'B':\n            if i < len(s) - 1:\n                if s[i + 1] == 'C':\n                    t += 'D'\n                    i += 2\n                else:\n                    t += 'X'\n                    i += 1\n            else:\n                t += 'X'\n                i += 1\n        else:\n            t += 'X'\n            i += 1\n    total = 0\n    numA = 0\n    for i in range(len(t)):\n        if t[i] == 'X':\n            numA = 0\n        elif t[i] == 'A':\n            numA += 1\n        else:\n            total += numA\n    print(total)\n    INF = 10 ** 25\n    mod = 7 + 10 ** 9\n    return 0\nsolve()", "effort_before": "2858.948007057168", "effort_after": "2804.4354895146603", "difficulty_before": "6.533333333333333", "difficulty_after": "6.75", "calculated_length_before": "166.8582023226588", "calculated_length_after": "154.25742227201613", "length_before": "84", "length_after": "81", "vocabulary_before": "37", "vocabulary_after": "35", "mi_value_before": "44.37", "mi_value_after": "45.06", "Nloc_before": "48", "Nloc_after": "46", "AvgCCN_before": "2.0", "AvgCCN_after": "1.0"}, "codeforces_450_A": {"id": "codeforces_450_A", "language": "Python", "dataset": "Avatar", "pass_before": 1, "pass_after": 0, "filepath_before": "/home/yang/contamination/Avatar_Python_Before/codeforces_450_A.py", "filepath_after": "/home/yang/contamination/Avatar_Python_After/codeforces_450_A.py", "code_before": "n, m = map(int, input().split())\nl = list(map(int, input().split()))\nl2 = []\nfor i in l:\n    if i % m == 0:\n        l2.append(i // m)\n    else:\n        l2.append(i // m + 1)\nmx = max(l2)\nfor i in range(n):\n    if l2[i] == mx:\n        ind = i\nprint(ind + 1)\n", "code_after": "(n, m) = map(int, input().split())\nl = list(map(int, input().split()))\nl2 = []\nrandom_inside_left_4 = 78\nrandom_inside_right_4 = 77\nrandom_outside_left_4 = 718\nrandom_outside_right_4 = 717\nrandom_inside_left_10 = 80\nrandom_inside_right_10 = 79\nrandom_outside_left_10 = 659\nrandom_outside_right_10 = 658\nfor loop_outside in range(random_outside_left_4 // random_outside_right_4):\n    for i in l:\n        for loop_inside in range(random_inside_left_4 % random_inside_right_4):\n            if i % m == 0:\n                l2.append(i // m)\n            else:\n                l2.append(i // m + 1)\nmx = max(l2)\nfor loop_outside in range(random_outside_left_10 // random_outside_right_10):\n    for i in range(n):\n        for loop_inside in range(random_inside_left_10 % random_inside_right_10):\n            if l2[i] == mx:\n                ind = i\nprint(ind + 1)", "effort_before": "241.762061585218", "effort_after": "375.15558222792714", "difficulty_before": "3.111111111111111", "difficulty_after": "2.588235294117647", "calculated_length_before": "36.52932501298081", "calculated_length_after": "77.48686830125578", "length_before": "21", "length_after": "33", "vocabulary_before": "13", "vocabulary_after": "21", "mi_value_before": "61.09", "mi_value_after": "52.79", "Nloc_before": "13", "Nloc_after": "25", "AvgCCN_before": "5.0", "AvgCCN_after": "9.0"}, "atcoder_AGC024_B": {"id": "atcoder_AGC024_B", "language": "Python", "dataset": "Avatar", "pass_before": 3, "pass_after": 3, "filepath_before": "/home/yang/contamination/Avatar_Python_Before/atcoder_AGC024_B.py", "filepath_after": "/home/yang/contamination/Avatar_Python_After/atcoder_AGC024_B.py", "code_before": "def main():\n    N = int(input())\n    P = [int(input()) for _ in range(N)]\n    editorial(N, P)\n\n\ndef editorial(N, P):\n    if N == 1:\n        print(0)\n        return\n    a = [0] * (N + 1)\n    for i, p in enumerate(P):\n        a[p] = i\n    tmp = 1\n    max_len = 1\n    for i in range(1, N):\n        if a[i] < a[i + 1]:\n            tmp += 1\n            max_len = max(max_len, tmp)\n        else:\n            tmp = 1\n    ans = N - max_len\n    print(ans)\n\n\ndef WA(N, P):\n    tmp = 0\n    ans = 0\n    for i, p in enumerate(P):\n        if i == 0 or P[i - 1] + 1 == p:\n            tmp += 1\n        else:\n            ans = max(ans, tmp)\n            tmp = 1\n    print(N - ans)\n\n\nif __name__ == '__main__':\n    main()\n", "code_after": "def main():\n    N = int(input())\n    P = [int(input()) for _ in range(N)]\n    editorial(N, P)\n\ndef editorial(N, P):\n    if N == 1:\n        print(0)\n        return\n    a = [0] * (N + 1)\n    for (i, p) in enumerate(P):\n        a[p] = i\n    tmp = 1\n    max_len = 1\n    for i in range(1, N):\n        if a[i] < a[i + 1]:\n            tmp += 1\n            max_len = max(max_len, tmp)\n        else:\n            tmp = 1\n    ans = N - max_len\n    print(ans)\n\ndef WA(N, P):\n    tmp = 0\n    ans = 0\n    for (i, p) in enumerate(P):\n        if i == 0 or P[i - 1] + 1 == p:\n            tmp += 1\n        else:\n            ans = max(ans, tmp)\n            tmp = 1\n    print(N - ans)\nmain()", "effort_before": "884.9903379242406", "effort_after": "829.1575662800888", "difficulty_before": "4.090909090909091", "difficulty_after": "4.2", "calculated_length_before": "113.61727061434748", "calculated_length_after": "101.94833690207419", "length_before": "45", "length_after": "42", "vocabulary_before": "28", "vocabulary_after": "26", "mi_value_before": "49.97", "mi_value_after": "50.67", "Nloc_before": "33", "Nloc_after": "32", "AvgCCN_before": "2.0", "AvgCCN_after": "1.0"}, "atcoder_ABC154_A": {"id": "atcoder_ABC154_A", "language": "Python", "dataset": "Avatar", "pass_before": 3, "pass_after": 3, "filepath_before": "/home/yang/contamination/Avatar_Python_Before/atcoder_ABC154_A.py", "filepath_after": "/home/yang/contamination/Avatar_Python_After/atcoder_ABC154_A.py", "code_before": "import sys\n\n\ndef solve(S: str, T: str, A: int, B: int, U: str):\n    if S == U:\n        A -= 1\n    if T == U:\n        B -= 1\n    print(A, B)\n    return\n\n\ndef main():\n    def iterate_tokens():\n        for line in sys.stdin:\n            for word in line.split():\n                yield word\n    tokens = iterate_tokens()\n    S = next(tokens)\n    T = next(tokens)\n    A = int(next(tokens))\n    B = int(next(tokens))\n    U = next(tokens)\n    solve(S, T, A, B, U)\n\n\nif __name__ == '__main__':\n    main()\n", "code_after": "import sys\n\ndef solve(S: str, T: str, A: int, B: int, U: str):\n    if S == U:\n        A -= 1\n    if T == U:\n        B -= 1\n    print(A, B)\n    return\n\ndef main():\n\n    def iterate_tokens():\n        for line in sys.stdin:\n            for word in line.split():\n                yield word\n    tokens = iterate_tokens()\n    S = next(tokens)\n    T = next(tokens)\n    A = int(next(tokens))\n    B = int(next(tokens))\n    U = next(tokens)\n    solve(S, T, A, B, U)\nmain()", "effort_before": "62.28615177913805", "effort_after": "48.0", "difficulty_before": "1.25", "difficulty_after": "1.3333333333333333", "calculated_length_before": "26.0", "calculated_length_after": "17.509775004326936", "length_before": "15", "length_after": "12", "vocabulary_before": "10", "vocabulary_after": "8", "mi_value_before": "58.14", "mi_value_after": "59.68", "Nloc_before": "22", "Nloc_after": "21", "AvgCCN_before": "2.0", "AvgCCN_after": "1.0"}, "atcoder_ABC133_B": {"id": "atcoder_ABC133_B", "language": "Python", "dataset": "Avatar", "pass_before": 0, "pass_after": 0, "filepath_before": "/home/yang/contamination/Avatar_Python_Before/atcoder_ABC133_B.py", "filepath_after": "/home/yang/contamination/Avatar_Python_After/atcoder_ABC133_B.py", "code_before": "import math\nn, d = map(int, input().split())\npoints = [list(map(int, input().split())) for _ in range(n)]\n\n\ndef dist(x, y):\n    tmp = 0.0\n    for i in range(d):\n        tmp += (x[i] - y[i]) ** 2\n    return math.sqrt(tmp)\n\n\ncount = 0\nfor i, elm in enumerate(points):\n    for j in range(i + 1, n):\n        if dist(elm, points[j]).is_integer():\n            count += 1\nprint(count)\n", "code_after": "import math\n(n, d) = map(int, input().split())\npoints = [list(map(int, input().split())) for _ in range(n)]\n\ndef dist(x, y):\n    tmp = 0.0\n    for i in range(d):\n        tmp += (x[i] - y[i]) ** 2\n    return math.sqrt(tmp)\ncount = 0\nrandom_inside_left_11 = 554\nrandom_inside_right_11 = 553\nrandom_outside_left_11 = 131\nrandom_outside_right_11 = 130\nfor loop_outside in range(random_outside_left_11 // random_outside_right_11):\n    for (i, elm) in enumerate(points):\n        for loop_inside in range(random_inside_left_11 % random_inside_right_11):\n            for j in range(i + 1, n):\n                if dist(elm, points[j]).is_integer():\n                    count += 1\nprint(count)", "effort_before": "89.62406251802892", "effort_after": "235.76114431231534", "difficulty_before": "1.6666666666666667", "difficulty_after": "2.6923076923076925", "calculated_length_before": "33.28421251514428", "calculated_length_after": "59.715356810271004", "length_before": "15", "length_after": "21", "vocabulary_before": "12", "vocabulary_after": "18", "mi_value_before": "61.55", "mi_value_after": "56.62", "Nloc_before": "14", "Nloc_after": "20", "AvgCCN_before": "5.0", "AvgCCN_after": "7.0"}, "codeforces_99_A": {"id": "codeforces_99_A", "language": "Python", "dataset": "Avatar", "pass_before": 0, "pass_after": 0, "filepath_before": "/home/yang/contamination/Avatar_Python_Before/codeforces_99_A.py", "filepath_after": "/home/yang/contamination/Avatar_Python_After/codeforces_99_A.py", "code_before": "l = input()\nl = l.split('.')\ns = list(l[0])\np = list(l[1])\ni = int(p[0])\nif s[len(s) - 1] == '9':\n    print(\"GOTO Vasilisa.\")\nelif s[len(s) - 1] != '9' and i < 5:\n    s = \"\".join(s)\n    print(s)\nelse:\n    s = \"\".join(s)\n    s = str(int(s) + 1)\n    print(s)\n", "code_after": "l = input()\nl = l.split('.')\ns = list(l[0])\np = list(l[1])\ni = int(p[0])\nrandom_outside_if_left_6 = 324\nrandom_outside_if_right_6 = 323\nif random_outside_if_left_6 & random_outside_if_right_6:\n    if s[len(s) - 1] == '9':\n        print('GOTO Vasilisa.')\n    elif s[len(s) - 1] != '9' and i < 5:\n        s = ''.join(s)\n        print(s)\n    else:\n        s = ''.join(s)\n        s = str(int(s) + 1)\n        print(s)\nelif s[len(s) - 1] != '9' and i < 5:\n    s = ''.join(s)\n    print(s)\nelse:\n    s = ''.join(s)\n    s = str(int(s) + 1)\n    print(s)", "effort_before": "327.74020236207275", "effort_after": "915.6136454172498", "difficulty_before": "3.8181818181818183", "difficulty_after": "5.055555555555555", "calculated_length_before": "53.563522809337215", "calculated_length_after": "94.71013448036484", "length_before": "21", "length_after": "39", "vocabulary_before": "17", "vocabulary_after": "25", "mi_value_before": "60.27", "mi_value_after": "52.75", "Nloc_before": "14", "Nloc_after": "24", "AvgCCN_before": "4.0", "AvgCCN_after": "7.0"}, "atcoder_AGC046_B": {"id": "atcoder_AGC046_B", "language": "Python", "dataset": "Avatar", "pass_before": 0, "pass_after": 0, "filepath_before": "/home/yang/contamination/Avatar_Python_Before/atcoder_AGC046_B.py", "filepath_after": "/home/yang/contamination/Avatar_Python_After/atcoder_AGC046_B.py", "code_before": "A, B, C, D = map(int, input().split())\nm = 998244353\nd = [[0] * (D + 1) for _ in range(C + 1)]\nd[A][B] = 1\nfor i in range(A, C + 1):\n    for j in range(B, D + 1):\n        d[i][j] += (d[i][j - 1] * i + d[i - 1][j] * j -\n                    d[i - 1][j - 1] * (i - 1) * (j - 1)) % m\nprint(d[C][D])\n", "code_after": "(A, B, C, D) = map(int, input().split())\nm = 998244353\nd = [[0] * (D + 1) for _ in range(C + 1)]\nd[A][B] = 1\nrandom_inside_left_5 = 807\nrandom_inside_right_5 = 806\nrandom_outside_left_5 = 226\nrandom_outside_right_5 = 225\nfor loop_outside in range(random_outside_left_5 // random_outside_right_5):\n    for i in range(A, C + 1):\n        for loop_inside in range(random_inside_left_5 % random_inside_right_5):\n            for j in range(B, D + 1):\n                d[i][j] += (d[i][j - 1] * i + d[i - 1][j] * j - d[i - 1][j - 1] * (i - 1) * (j - 1)) % m\nprint(d[C][D])", "effort_before": "957.9611911478147", "effort_after": "1298.3632515980141", "difficulty_before": "3.619047619047619", "difficulty_after": "4.2", "calculated_length_before": "100.23866587835397", "calculated_length_after": "127.70604521880493", "length_before": "57", "length_after": "63", "vocabulary_before": "25", "vocabulary_after": "30", "mi_value_before": "61.68", "mi_value_after": "56.10", "Nloc_before": "9", "Nloc_after": "14", "AvgCCN_before": "4.0", "AvgCCN_after": "6.0"}, "atcoder_ABC167_C": {"id": "atcoder_ABC167_C", "language": "Python", "dataset": "Avatar", "pass_before": 0, "pass_after": 0, "filepath_before": "/home/yang/contamination/Avatar_Python_Before/atcoder_ABC167_C.py", "filepath_after": "/home/yang/contamination/Avatar_Python_After/atcoder_ABC167_C.py", "code_before": "import numpy as np\nimport itertools\nn, m, x = list(map(int, input().split()))\nc = np.array([list(map(int, input().split())) for _ in range(n)])\npre = np.arange(n)\nl = []\nrem = []\nans = 0\nfor i in pre + 1:\n    for j in itertools.combinations(pre, i):\n        l.append(list(j))\nfor i in range(1, m + 1):\n    for j, k in enumerate(l):\n        ca = 0\n        for ii in k:\n            ca += c[ii, i]\n        if ca < x:\n            rem.insert(0, j)\n        else:\n            pass\n    if len(rem) > 0:\n        for j in rem:\n            l.pop(j)\n        rem = []\n    if len(l) == 0:\n        print(- 1)\n        break\nelse:\n    for i in l:\n        ca = 0\n        for j in i:\n            ca += c[j, 0]\n        if ans == 0:\n            ans = ca\n        else:\n            ans = min(ans, ca)\n    print(ans)\n", "code_after": "import numpy as np\nimport itertools\n(n, m, x) = list(map(int, input().split()))\nc = np.array([list(map(int, input().split())) for _ in range(n)])\npre = np.arange(n)\nl = []\nrem = []\nans = 0\nrandom_inside_left_9 = 25\nrandom_inside_right_9 = 24\nrandom_outside_left_9 = 855\nrandom_outside_right_9 = 854\nrandom_inside_left_12 = 315\nrandom_inside_right_12 = 314\nrandom_outside_left_12 = 994\nrandom_outside_right_12 = 993\nfor loop_outside in range(random_outside_left_9 // random_outside_right_9):\n    for i in pre + 1:\n        for loop_inside in range(random_inside_left_9 % random_inside_right_9):\n            for j in itertools.combinations(pre, i):\n                l.append(list(j))\nfor loop_outside in range(random_outside_left_12 // random_outside_right_12):\n    for i in range(1, m + 1):\n        for loop_inside in range(random_inside_left_12 % random_inside_right_12):\n            for (j, k) in enumerate(l):\n                ca = 0\n                for ii in k:\n                    ca += c[ii, i]\n                if ca < x:\n                    rem.insert(0, j)\n                else:\n                    pass\n            if len(rem) > 0:\n                for j in rem:\n                    l.pop(j)\n                rem = []\n            if len(l) == 0:\n                print(-1)\n                break\n    else:\n        for i in l:\n            ca = 0\n            for j in i:\n                ca += c[j, 0]\n            if ans == 0:\n                ans = ca\n            else:\n                ans = min(ans, ca)\n        print(ans)", "effort_before": "401.8181818181818", "effort_after": "822.5769506746913", "difficulty_before": "3.8636363636363638", "difficulty_after": "4.605263157894737", "calculated_length_before": "49.663388279447084", "calculated_length_after": "100.36210720983135", "length_before": "26", "length_after": "38", "vocabulary_before": "16", "vocabulary_after": "26", "mi_value_before": "49.40", "mi_value_after": "44.62", "Nloc_before": "37", "Nloc_after": "49", "AvgCCN_before": "15.0", "AvgCCN_after": "19.0"}, "atcoder_AGC033_B": {"id": "atcoder_AGC033_B", "language": "Python", "dataset": "Avatar", "pass_before": 3, "pass_after": 0, "filepath_before": "/home/yang/contamination/Avatar_Python_Before/atcoder_AGC033_B.py", "filepath_after": "/home/yang/contamination/Avatar_Python_After/atcoder_AGC033_B.py", "code_before": "H, W, N = map(int, input().split())\ns_r, s_c = map(int, input().split())\nS = input()\nT = input()\nJudge = False\nS_L, S_R, S_U, S_D = 0, 0, 0, 0\nT_L, T_R, T_U, T_D = 0, 0, 0, 0\nfor x in range(N):\n    if S[x] == 'L':\n        S_L += 1\n        if S_L - T_R - s_c == 0:\n            Judge = True\n    elif S[x] == 'R':\n        S_R += 1\n        if s_c + (S_R - T_L) == W + 1:\n            Judge = True\n    elif S[x] == 'U':\n        S_U += 1\n        if S_U - T_D - s_r == 0:\n            Judge = True\n    elif S[x] == 'D':\n        S_D += 1\n        if s_r + (S_D - T_U) == H + 1:\n            Judge = True\n    if T[x] == 'L':\n        if S_R - T_L + s_c != 1:\n            T_L += 1\n    if T[x] == 'R':\n        if s_c + (T_R - S_L) != W:\n            T_R += 1\n    if T[x] == 'U':\n        if S_D - T_U + s_r != 1:\n            T_U += 1\n    if T[x] == 'D':\n        if s_r + (T_D - S_U) != H:\n            T_D += 1\nif Judge:\n    print('NO')\nelse:\n    print('YES')\n", "code_after": "(H, W, N) = map(int, input().split())\n(s_r, s_c) = map(int, input().split())\nS = input()\nT = input()\nJudge = False\n(S_L, S_R, S_U, S_D) = (0, 0, 0, 0)\n(T_L, T_R, T_U, T_D) = (0, 0, 0, 0)\nrandom_inside_left_8 = 751\nrandom_inside_right_8 = 750\nrandom_outside_left_8 = 743\nrandom_outside_right_8 = 742\nfor loop_outside in range(random_outside_left_8 // random_outside_right_8):\n    for x in range(N):\n        for loop_inside in range(random_inside_left_8 % random_inside_right_8):\n            if S[x] == 'L':\n                S_L += 1\n                if S_L - T_R - s_c == 0:\n                    Judge = True\n            elif S[x] == 'R':\n                S_R += 1\n                if s_c + (S_R - T_L) == W + 1:\n                    Judge = True\n            elif S[x] == 'U':\n                S_U += 1\n                if S_U - T_D - s_r == 0:\n                    Judge = True\n            elif S[x] == 'D':\n                S_D += 1\n                if s_r + (S_D - T_U) == H + 1:\n                    Judge = True\n            if T[x] == 'L':\n                if S_R - T_L + s_c != 1:\n                    T_L += 1\n            if T[x] == 'R':\n                if s_c + (T_R - S_L) != W:\n                    T_R += 1\n            if T[x] == 'U':\n                if S_D - T_U + s_r != 1:\n                    T_U += 1\n            if T[x] == 'D':\n                if s_r + (T_D - S_U) != H:\n                    T_D += 1\nrandom_outside_if_left_43 = 213\nrandom_outside_if_right_43 = 212\nif random_outside_if_left_43 & random_outside_if_right_43:\n    if Judge:\n        print('NO')\n    else:\n        print('YES')\nelse:\n    print('YES')", "effort_before": "2686.8746867105788", "effort_after": "4960.872957047112", "difficulty_before": "3.8181818181818183", "difficulty_after": "6.3", "calculated_length_before": "248.21499122004107", "calculated_length_after": "301.8442939431394", "length_before": "126", "length_after": "135", "vocabulary_before": "48", "vocabulary_after": "57", "mi_value_before": "42.33", "mi_value_after": "39.33", "Nloc_before": "40", "Nloc_after": "51", "AvgCCN_before": "19.0", "AvgCCN_after": "22.0"}, "atcoder_ABC122_C": {"id": "atcoder_ABC122_C", "language": "Python", "dataset": "Avatar", "pass_before": 0, "pass_after": 0, "filepath_before": "/home/yang/contamination/Avatar_Python_Before/atcoder_ABC122_C.py", "filepath_after": "/home/yang/contamination/Avatar_Python_After/atcoder_ABC122_C.py", "code_before": "from itertools import accumulate\nn, q = map(int, input().split())\ns = input()\nproblems = [list(map(int, input().split())) for _ in range(q)]\n\n\ndef count(total, i):\n    return total + 1 if s[i - 1: i + 1] == 'AC' else total\n\n\ncumsum = list(accumulate([0] + list(range(1, n)), count))\nfor l, r in problems:\n    print(cumsum[r - 1] - cumsum[l - 1])\n", "code_after": "from itertools import accumulate\n(n, q) = map(int, input().split())\ns = input()\nproblems = [list(map(int, input().split())) for _ in range(q)]\n\ndef count(total, i):\n    return total + 1 if s[i - 1:i + 1] == 'AC' else total\ncumsum = list(accumulate([0] + list(range(1, n)), count))\nrandom_inside_left_9 = 383\nrandom_inside_right_9 = 382\nrandom_outside_left_9 = 278\nrandom_outside_right_9 = 277\nfor loop_outside in range(random_outside_left_9 // random_outside_right_9):\n    for (l, r) in problems:\n        for loop_inside in range(random_inside_left_9 % random_inside_right_9):\n            print(cumsum[r - 1] - cumsum[l - 1])", "effort_before": "187.53074858920888", "effort_after": "411.77975838550884", "difficulty_before": "2.0", "difficulty_after": "3.125", "calculated_length_before": "47.77443751081735", "calculated_length_after": "75.60964047443682", "length_before": "24", "length_after": "30", "vocabulary_before": "15", "vocabulary_after": "21", "mi_value_before": "63.07", "mi_value_after": "57.64", "Nloc_before": "9", "Nloc_after": "15", "AvgCCN_before": "3.0", "AvgCCN_after": "5.0"}}